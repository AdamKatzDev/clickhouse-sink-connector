"use strict";(self.webpackChunkclickhouse_sink_connector=self.webpackChunkclickhouse_sink_connector||[]).push([[9739],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),l=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),m=n,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return r?o.createElement(k,s(s({ref:t},p),{},{components:r})):o.createElement(k,s({ref:t},p))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:n,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2618:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=r(7462),n=(r(7294),r(3905));const a={},s=void 0,i={unversionedId:"doc/setup",id:"doc/setup",title:"setup",description:"This doc describes how to set up CDC pipeline",source:"@site/docs/doc/setup.md",sourceDirName:"doc",slug:"/doc/setup",permalink:"/docs/doc/setup",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/doc/setup.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"schema_registry",permalink:"/docs/doc/schema_registry"},next:{title:"sink_configuration",permalink:"/docs/doc/sink_configuration"}},c={},l=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"docker-compose",id:"docker-compose",level:2},{value:"MySQL:",id:"mysql",level:3},{value:"Postgres using Confluent Schema Registry:",id:"postgres-using-confluent-schema-registry",level:3},{value:"Postgres using Apicurio Schema Registry:",id:"postgres-using-apicurio-schema-registry",level:3},{value:"Start Docker-compose with a specific docker tag",id:"start-docker-compose-with-a-specific-docker-tag",level:3},{value:"Load Airline data set",id:"load-airline-data-set",level:3},{value:"Stop Docker-compose",id:"stop-docker-compose",level:3},{value:"MySQL:",id:"mysql-1",level:3},{value:"Postgres(Using Apicurio):",id:"postgresusing-apicurio",level:3},{value:"MySQL:",id:"mysql-2",level:3},{value:"Postgres(Using Apicurio):",id:"postgresusing-apicurio-1",level:3},{value:"Connecting to a different MySQL instance(Host)",id:"connecting-to-a-different-mysql-instancehost",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This doc describes how to set up CDC pipeline"),(0,n.kt)("h1",{id:"pipeline"},"Pipeline"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"pipeline",src:r(992).Z,width:"1600",height:"531"})),(0,n.kt)("h1",{id:"setup-local-pipeline"},"Setup local pipeline"),(0,n.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Java JDK 11 (",(0,n.kt)("a",{parentName:"li",href:"https://openjdk.java.net/projects/jdk/11/"},"https://openjdk.java.net/projects/jdk/11/"),")"),(0,n.kt)("li",{parentName:"ul"},"Maven (mvn) (",(0,n.kt)("a",{parentName:"li",href:"https://maven.apache.org/download.cgi"},"https://maven.apache.org/download.cgi"),")"),(0,n.kt)("li",{parentName:"ul"},"Docker and Docker-compose")),(0,n.kt)("p",null,"Sink connector image needs to be built locally.\nUse the following script to build the image\n",(0,n.kt)("inlineCode",{parentName:"p"},"docker/package-build-sink-on-debezium-base.sh"),"\n",(0,n.kt)("a",{parentName:"p",href:"../docker/package-build-sink-on-debezium-base.sh"},"docker/package-build-sink-on-debezium-base.sh"),"\nFuture: Github releases will push docker images to Docker hub."),(0,n.kt)("h2",{id:"docker-compose"},"docker-compose"),(0,n.kt)("p",null,"Full pipeline can be launched via docker-compose with the help of ",(0,n.kt)("a",{parentName:"p",href:"../deploy/docker/docker-compose-apicurio-schema-registry.override.yaml"},"docker-compose.yaml"),"\nIt will start:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"MySQL"),(0,n.kt)("li",{parentName:"ol"},"Zookeeper"),(0,n.kt)("li",{parentName:"ol"},"Debezium MySQL connector"),(0,n.kt)("li",{parentName:"ol"},"RedPanda"),(0,n.kt)("li",{parentName:"ol"},"clickhouse-kafka-sink-connector"),(0,n.kt)("li",{parentName:"ol"},"Clickhouse"),(0,n.kt)("li",{parentName:"ol"},"Confluent Schema registry or Apicurio Schema registry")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"start-docker-compose.sh")," by default uses the ",(0,n.kt)("inlineCode",{parentName:"p"},"latest")," tag, you could also pass the docker tag to the script.\nAltinity sink images are tagged on every successful build with the following format(yyyy-mm-dd) Example(2022-07-19)"),(0,n.kt)("h3",{id:"mysql"},"MySQL:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd deploy/docker\n./start-docker-compose.sh \n")),(0,n.kt)("h3",{id:"postgres-using-confluent-schema-registry"},"Postgres using Confluent Schema Registry:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"export SINK_VERSION=latest\ncd deploy/docker\ndocker-compose -f docker-compose.yaml -f docker-compose-postgresql.override.yaml up\n")),(0,n.kt)("h3",{id:"postgres-using-apicurio-schema-registry"},"Postgres using Apicurio Schema Registry:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"export SINK_VERSION=latest\ncd deploy/docker\ndocker-compose -f docker-compose.yaml -f docker-compose-postgresql-apicurio-schema-registry.override.yaml up\n")),(0,n.kt)("h3",{id:"start-docker-compose-with-a-specific-docker-tag"},"Start Docker-compose with a specific docker tag"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd deploy/docker\n./start-docker-compose.sh 2022-07-19\n")),(0,n.kt)("h3",{id:"load-airline-data-set"},"Load Airline data set"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f docker-compose-airline-data.override.yaml up\n")),(0,n.kt)("h3",{id:"stop-docker-compose"},"Stop Docker-compose"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cd deploy/docker\n./stop-docker-compose.sh\n")),(0,n.kt)("h1",{id:"source-connector"},"Source connector"),(0,n.kt)("p",null,"After all the docker containers are up and running, execute the following command\nto create the Debezium MySQL connector."),(0,n.kt)("p",null,"Make sure MySQL master/slave is up and running before executing the following script.\\"),(0,n.kt)("h3",{id:"mysql-1"},"MySQL:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"    ../deploy/debezium-connector-setup-schema-registry.sh\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../deploy/debezium-connector-setup-schema-registry.sh"},"debezium-connector-setup-schema-registry.sh")),(0,n.kt)("h3",{id:"postgresusing-apicurio"},"Postgres(Using Apicurio):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"../deploy/debezium-connector-setup-schema-registry.sh postgres apicurio\n")),(0,n.kt)("h1",{id:"sink-connector"},"Sink Connector"),(0,n.kt)("p",null,"After the source connector is created,\nexecute the script ",(0,n.kt)("a",{parentName:"p",href:"../deploy/sink-connector-setup-schema-registry.sh"},"sink-connector-setup-schema-registry.sh"),"\nto create the Clickhouse Sink connector using Kafka connect REST API"),(0,n.kt)("h3",{id:"mysql-2"},"MySQL:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"    ../deploy/sink-connector-setup-schema-registry.sh\n")),(0,n.kt)("h3",{id:"postgresusing-apicurio-1"},"Postgres(Using Apicurio):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"../deploy/sink-connector-setup-schema-registry.sh postgres apicurio\n")),(0,n.kt)("h1",{id:"deleting-connectors"},"Deleting connectors"),(0,n.kt)("p",null,"The source connector can be deleted using the following script\n",(0,n.kt)("a",{parentName:"p",href:"../deploy/debezium-delete.sh"},"debezium-delete.sh")),(0,n.kt)("p",null,"The sink connector can be deleted using the following script\n",(0,n.kt)("a",{parentName:"p",href:"../deploy/sink-delete.sh"},"sink-delete.sh")),(0,n.kt)("h1",{id:"references"},"References"),(0,n.kt)("p",null,"Kafka Connect REST API - (",(0,n.kt)("a",{parentName:"p",href:"https://docs.confluent.io/platform/current/connect/references/restapi.html"},"https://docs.confluent.io/platform/current/connect/references/restapi.html"),")"),(0,n.kt)("h2",{id:"connecting-to-a-different-mysql-instancehost"},"Connecting to a different MySQL instance(Host)"),(0,n.kt)("p",null,"Add the following line to the ",(0,n.kt)("inlineCode",{parentName:"p"},"debezium")," service in ",(0,n.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),",\nso that debezium is able to access host."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'extra_hosts:\n- "host.docker.internal:host-gateway"\n')),(0,n.kt)("p",null,"Make sure the mysqld.conf is modified with ",(0,n.kt)("inlineCode",{parentName:"p"},"bind-address")," set to ",(0,n.kt)("inlineCode",{parentName:"p"},"0.0.0.0")),(0,n.kt)("p",null,"Modify debezium configuration ",(0,n.kt)("inlineCode",{parentName:"p"},"debezium-connector-setup-schema-registry.sh"),"\nto set the MySQL host."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'            "database.hostname": "host.docker.internal",\n')),(0,n.kt)("p",null,"Grant access in MySQL server for debezium host"),(0,n.kt)("p",null,"Caution about the security risks about WITH GRANT OPTION, refer manual"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"mysql> CREATE USER 'root'@'%' IDENTIFIED BY 'PASSWORD';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\nmysql> FLUSH PRIVILEGES;\n")),(0,n.kt)("h1",{id:"topic-partitions"},"Topic Partitions."),(0,n.kt)("p",null,"By Default the kafka topic is created with number of partitions set to 1.\nFor better throughput and High availability, its better to set to the partitions\nto a number greater than 1.\nThe topic partitions must be created before the sink connector is started.\nFor redpanda:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"rpk topic create SERVER5432.test.employees -p 3\n")))}d.isMDXComponent=!0},992:(e,t,r)=>{r.d(t,{Z:()=>o});const o=r.p+"assets/images/pipeline-0ccb172d3b5be33ab6fe4468561543b1.png"}}]);