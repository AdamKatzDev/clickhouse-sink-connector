"use strict";(self.webpackChunkclickhouse_sink_connector=self.webpackChunkclickhouse_sink_connector||[]).push([[1504],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,k=p["".concat(l,".").concat(u)]||p[u]||m[u]||i;return n?r.createElement(k,o(o({ref:t},d),{},{components:n})):r.createElement(k,o({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={},o=void 0,s={unversionedId:"doc/mutable_data",id:"doc/mutable_data",title:"mutable_data",description:"ReplacingMergeTree",source:"@site/docs/doc/mutable_data.md",sourceDirName:"doc",slug:"/doc/mutable_data",permalink:"/clickhouse-sink-connector/docs/doc/mutable_data",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/doc/mutable_data.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"k8s_pipeline_tools",permalink:"/clickhouse-sink-connector/docs/doc/k8s_pipeline_tools"},next:{title:"schema_registry",permalink:"/clickhouse-sink-connector/docs/doc/schema_registry"}},l={},c=[{value:"ReplacingMergeTree",id:"replacingmergetree",level:2},{value:"Updates:",id:"updates",level:3},{value:"Updates on non primary keys: Debezium",id:"updates-on-non-primary-keys-debezium",level:3},{value:"Updates on Primary Key: Debezium",id:"updates-on-primary-key-debezium",level:3},{value:"Current behavior",id:"current-behavior",level:4},{value:"Deletes:",id:"deletes",level:3},{value:"ReplacingMergeTree",id:"replacingmergetree-1",level:2},{value:"Other table Engines(MergeTree ...)",id:"other-table-enginesmergetree-",level:2}],d={toc:c},p="wrapper";function m(e){let{components:t,...i}=e;return(0,a.kt)(p,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"replacingmergetree"},"ReplacingMergeTree"),(0,a.kt)("p",null,"Sink Connector will attempt to read the ",(0,a.kt)("inlineCode",{parentName:"p"},"engine_full")," column from system.tables for the corresponding table and will\nidentify the ",(0,a.kt)("inlineCode",{parentName:"p"},"engine")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"ver")," column."),(0,a.kt)("h3",{id:"updates"},"Updates:"),(0,a.kt)("p",null,"For ",(0,a.kt)("strong",{parentName:"p"},"inserts"),", record will be inserted with ",(0,a.kt)("inlineCode",{parentName:"p"},"sign")," set to ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"\nFor ",(0,a.kt)("strong",{parentName:"p"},"updates"),", a new row will be inserted with a higher ",(0,a.kt)("strong",{parentName:"p"},"version")," value and on merge, clickhouse will drop the row with the older ",(0,a.kt)("strong",{parentName:"p"},"version")," value.\nFor ",(0,a.kt)("strong",{parentName:"p"},"deletes"),", a new record will be inserted with ",(0,a.kt)("inlineCode",{parentName:"p"},"sign")," set to ",(0,a.kt)("inlineCode",{parentName:"p"},"-1")," and a higher ",(0,a.kt)("strong",{parentName:"p"},"version")," value. Clickhouse will drop the row with the older ",(0,a.kt)("strong",{parentName:"p"},"version")," value.\nA Row policy can be created to hide all the rows with ",(0,a.kt)("inlineCode",{parentName:"p"},"sign")," set to -1."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"create row policy table on db.table using sign != -1 to all;\n")),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(6645).Z,width:"881",height:"509"})," \\"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"optimize table <table_name> final")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"select .. final")," is performed and when the merges are performed by\nClickHouse in the background, the initial insert record will be merged along the ",(0,a.kt)("inlineCode",{parentName:"p"},"before")," record."),(0,a.kt)("h3",{id:"updates-on-non-primary-keys-debezium"},"Updates on non primary keys: Debezium"),(0,a.kt)("p",null,"Non Primary key updates create a record with operation as 'u'"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SinkRecord{kafkaOffset=62984, timestampType=CreateTime} ConnectRecord{topic='SERVER5432.sbtest.sbtest1', kafkaPartition=0, key=Struct{id=2317,k=3739}, keySchema=Schema{SERVER5432.sbtest.sbtest1.Key:STRUCT}, value=Struct{before=Struct{id=2317,k=3739,c=20488251985-66135155553-00362235007-72249840112-70784105787-84584360668-65106023418-49140058226-99031281108-48426083028,pad=18846546959-44726413785-66695616247-63594911107-83062207348},after=Struct{id=2317,k=3739,c=20488251985-66135155553-00362235007-72249840112-70784105787-84584360668-65106023418-49140058226-99031281108-48426083029,pad=18846546959-44726413785-66695616247-63594911107-83062207348},source=Struct{version=1.9.2.Final,connector=mysql,name=SERVER5432,ts_ms=1657658606000,snapshot=false,db=sbtest,table=sbtest1,server_id=842,file=mysql-bin.000003,pos=16210729,row=0,thread=22},op=u,ts_ms=1657658606611,transaction=Struct{id=file=mysql-bin.000003,pos=16210580,total_order=1,data_collection_order=1}}, valueSchema=Schema{SERVER5432.sbtest.sbtest1.Envelope:STRUCT}, timestamp=1657658607050, headers=ConnectHeaders(headers=)}\n\n")),(0,a.kt)("h3",{id:"updates-on-primary-key-debezium"},"Updates on Primary Key: Debezium"),(0,a.kt)("p",null,"Debezium handles updates on Primary key in the same way as Primary Key changes."),(0,a.kt)("p",null,"Table Schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"use sbtest;\nCREATE TABLE `sbtest1` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`k` int(11) NOT NULL DEFAULT '0',\n`c` char(120) NOT NULL DEFAULT '',\n`pad` char(60) NOT NULL DEFAULT '',\nPRIMARY KEY (`id`,`k`)\n)\nPARTITION BY RANGE (k) (\nPARTITION p1 VALUES LESS THAN (499999),\nPARTITION p2 VALUES LESS THAN MAXVALUE\n);\n")),(0,a.kt)("p",null,"The following update statement in MySQL, will create 3 Debezium records"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"update sbtest.sbtest1 set k=k+1 where id=2317")),(0,a.kt)("p",null,"Record 1: A Delete record with the old values with key== __debezium.newkey"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SinkRecord{kafkaOffset=62978, timestampType=CreateTime} ConnectRecord{topic='SERVER5432.sbtest.sbtest1', kafkaPartition=0, key=Struct{id=2317,k=3737},\n keySchema=Schema{SERVER5432.sbtest.sbtest1.Key:STRUCT}, \n value=Struct{before=Struct{id=2317,k=3737,c=20488251985-66135155553-00362235007-72249840112-70784105787-84584360668-65106023418-49140058226-99031281108-48426083028,\n pad=18846546959-44726413785-66695616247-63594911107-83062207348},source=Struct{version=1.9.2.Final,connector=mysql,name=SERVER5432,ts_ms=1657655632000,\n snapshot=false,db=sbtest,table=sbtest1,server_id=842,file=mysql-bin.000003,pos=16209369,row=0,thread=172},\n op=d,ts_ms=1657655632066,transaction=Struct{id=file=mysql-bin.000003,pos=16209220,total_order=1,data_collection_order=1}}, \n valueSchema=Schema{SERVER5432.sbtest.sbtest1.Envelope:STRUCT}, timestamp=1657655632487, \n headers=ConnectHeaders(headers=[ConnectHeader(key=__debezium.newkey, value={id=2317, k=3738}, schema=Schema{MAP})])}\n")),(0,a.kt)("p",null,"Record 2: No Operation: key= __debezium.newkey"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SinkRecord{kafkaOffset=62979, timestampType=CreateTime} ConnectRecord{topic='SERVER5432.sbtest.sbtest1', kafkaPartition=0, \nkey=Struct{id=2317,k=3737}, keySchema=Schema{SERVER5432.sbtest.sbtest1.Key:STRUCT}, value=null, valueSchema=null, \ntimestamp=1657655632487, headers=ConnectHeaders(headers=[ConnectHeader(key=__debezium.newkey, value={id=2317, k=3738}, schema=Schema{MAP})])}\n")),(0,a.kt)("p",null,"Record 3: A create record with new values"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SinkRecord{kafkaOffset=62980, timestampType=CreateTime} ConnectRecord{topic='SERVER5432.sbtest.sbtest1', kafkaPartition=0, \nkey=Struct{id=2317,k=3738}, keySchema=Schema{SERVER5432.sbtest.sbtest1.Key:STRUCT}, value=Struct{after=Struct{id=2317,k=3738,\nc=20488251985-66135155553-00362235007-72249840112-70784105787-84584360668-65106023418-49140058226-99031281108-48426083028,\npad=18846546959-44726413785-66695616247-63594911107-83062207348},source=Struct{version=1.9.2.Final,connector=mysql,name=SERVER5432,ts_ms=1657655632000,\nsnapshot=false,db=sbtest,table=sbtest1,server_id=842,file=mysql-bin.000003,pos=16209369,row=0,thread=172},op=c,ts_ms=1657655632066,\ntransaction=Struct{id=file=mysql-bin.000003,pos=16209220,total_order=2,data_collection_order=2}}, valueSchema=Schema{SERVER5432.sbtest.sbtest1.Envelope:STRUCT}, \ntimestamp=1657655632487, headers=ConnectHeaders(headers=[ConnectHeader(key=__debezium.oldkey, value={id=2317, k=3737}, schema=Schema{MAP})])}\n")),(0,a.kt)("h4",{id:"current-behavior"},"Current behavior"),(0,a.kt)("p",null,"The sink connector performs a delete first of the old values and an insert with the new values, Record 2 is not handled currently."),(0,a.kt)("h3",{id:"deletes"},"Deletes:"),(0,a.kt)("p",null,"For deletes, record will be inserted with ",(0,a.kt)("inlineCode",{parentName:"p"},"sign")," set to ",(0,a.kt)("inlineCode",{parentName:"p"},"-1")),(0,a.kt)("h2",{id:"replacingmergetree-1"},"ReplacingMergeTree"),(0,a.kt)("p",null,"For updates, only the ",(0,a.kt)("inlineCode",{parentName:"p"},"after")," record will be inserted with ",(0,a.kt)("inlineCode",{parentName:"p"},"version")," set to timestamp in milliseconds.\nAfter merging, ClickHouse will drop the previous insert since the update ",(0,a.kt)("inlineCode",{parentName:"p"},"version")," column value is greater\nthan the insert record ",(0,a.kt)("inlineCode",{parentName:"p"},"version")," value."),(0,a.kt)("p",null,"For Deletes, the user provided ",(0,a.kt)("inlineCode",{parentName:"p"},"replacingmergetree.delete.column")," will be set to ",(0,a.kt)("inlineCode",{parentName:"p"},"-1")),(0,a.kt)("h2",{id:"other-table-enginesmergetree-"},"Other table Engines(MergeTree ...)"))}m.isMDXComponent=!0},6645:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/replacingmergetree_update_delete-b8c799eae3ad5fbc5d24756f108e5cef.jpg"}}]);