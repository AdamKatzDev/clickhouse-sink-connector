"use strict";(self.webpackChunkclickhouse_sink_connector=self.webpackChunkclickhouse_sink_connector||[]).push([[8126],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=l.createContext({}),p=function(e){var t=l.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return l.createElement(c.Provider,{value:t},e.children)},i="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),i=p(a),m=n,k=i["".concat(c,".").concat(m)]||i[m]||d[m]||r;return a?l.createElement(k,s(s({ref:t},u),{},{components:a})):l.createElement(k,s({ref:t},u))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[i]="string"==typeof e?e:n,s[1]=o;for(var p=2;p<r;p++)s[p]=a[p];return l.createElement.apply(null,s)}return l.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4587:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var l=a(7462),n=(a(7294),a(3905));const r={},s=void 0,o={unversionedId:"doc/k8s_pipeline_setup",id:"doc/k8s_pipeline_setup",title:"k8s_pipeline_setup",description:"Start local Docker registry",source:"@site/docs/doc/k8s_pipeline_setup.md",sourceDirName:"doc",slug:"/doc/k8s_pipeline_setup",permalink:"/docs/doc/k8s_pipeline_setup",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/doc/k8s_pipeline_setup.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"k8s_minikube_load",permalink:"/docs/doc/k8s_minikube_load"},next:{title:"k8s_pipeline_tools",permalink:"/docs/doc/k8s_pipeline_tools"}},c={},p=[{value:"Start local Docker registry",id:"start-local-docker-registry",level:2},{value:"RedPanda",id:"redpanda",level:2},{value:"cert-manager",id:"cert-manager",level:3},{value:"redpanda-operator",id:"redpanda-operator",level:3},{value:"redpanda cluster",id:"redpanda-cluster",level:3},{value:"mysql",id:"mysql",level:2},{value:"mysql-operator",id:"mysql-operator",level:3},{value:"mysql cluster",id:"mysql-cluster",level:3},{value:"clickhouse",id:"clickhouse",level:3},{value:"Local alternative installation",id:"local-alternative-installation",level:2},{value:"clickhouse-cluster",id:"clickhouse-cluster",level:3},{value:"schema registry(Confluent)",id:"schema-registryconfluent",level:3},{value:"Strimzi",id:"strimzi",level:3},{value:"debezium",id:"debezium",level:3},{value:"sink",id:"sink",level:3},{value:"create schema",id:"create-schema",level:3},{value:"sink-connector",id:"sink-connector",level:3}],u={toc:p},i="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(i,(0,l.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"start-local-docker-registry"},"Start local Docker registry"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d -p 5000:5000 --restart=always --name registry registry:2\n")),(0,n.kt)("h2",{id:"redpanda"},"RedPanda"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Create a Kubernetes cluster with minikube"),(0,n.kt)("li",{parentName:"ol"},"Install cert-manager"),(0,n.kt)("li",{parentName:"ol"},"Install the Redpanda operator"),(0,n.kt)("li",{parentName:"ol"},"Install and connect to a Redpanda cluster"),(0,n.kt)("li",{parentName:"ol"},"Start streaming"),(0,n.kt)("li",{parentName:"ol"},"Clean up")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"SRC_ROOT=.\n")),(0,n.kt)("h3",{id:"cert-manager"},"cert-manager"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'VERSION="v1.4.0"\nNAMESPACE="cert-manager"\necho "Install cert-manager. Version: $VERSION Namespace: $NAMESPACE" && \\\nhelm repo add jetstack https://charts.jetstack.io && \\\nhelm repo update && \\\nhelm install \\\ncert-manager jetstack/cert-manager \\\n  --namespace $NAMESPACE \\\n  --create-namespace \\\n  --version $VERSION \\\n  --set installCRDs=true\n')),(0,n.kt)("p",null,"Wait to start"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n $NAMESPACE rollout status -w deployment/cert-manager\nkubectl -n $NAMESPACE rollout status -w deployment/cert-manager-cainjector\nkubectl -n $NAMESPACE rollout status -w deployment/cert-manager-webhook\nkubectl -n $NAMESPACE get pod\n")),(0,n.kt)("h3",{id:"redpanda-operator"},"redpanda-operator"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'#VERSION=$(curl -s https://api.github.com/repos/redpanda-data/redpanda/releases/latest | jq -r .tag_name)\nVERSION="v21.11.15"\nNAMESPACE=redpanda\necho "Install redpanda-operator. Version: $VERSION Namespace: $NAMESPACE" && \\\nhelm repo add redpanda https://charts.vectorized.io/ && helm repo update && \\\nkubectl apply -k https://github.com/redpanda-data/redpanda/src/go/k8s/config/crd?ref=$VERSION && \\\nhelm install \\\n  redpanda-operator \\\n  redpanda/redpanda-operator \\\n  --namespace $NAMESPACE \\\n  --create-namespace \\\n  --version $VERSION\n')),(0,n.kt)("p",null,"Wait to start"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n $NAMESPACE rollout status -w deployment/redpanda-operator\nkubectl -n $NAMESPACE get pod\n")),(0,n.kt)("h3",{id:"redpanda-cluster"},"redpanda cluster"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.redpanda.com/docs/quickstart/kubernetes-qs-minikube"},"https://docs.redpanda.com/docs/quickstart/kubernetes-qs-minikube"),"\nuse CERT-MANAGER v 1.4"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'NAMESPACE=redpanda\nkubectl create namespace $NAMESPACE\nkubectl -n $NAMESPACE create -f "${SRC_ROOT}/deploy/k8s/redpanda-internal.yaml"\n')),(0,n.kt)("p",null,"To deploy 3-node cluster"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n $NAMESPACE create -f redpanda-external.yaml\n")),(0,n.kt)("p",null,"Wait to start"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n $NAMESPACE wait pod/redpanda-0 --for condition=Ready=True\nkubectl -n $NAMESPACE get statefulset\n")),(0,n.kt)("h2",{id:"mysql"},"mysql"),(0,n.kt)("h3",{id:"mysql-operator"},"mysql-operator"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'NAMESPACE="mysql"\nVERSION="2.0.4"\necho "Install mysql-operator. Version: $VERSION Namespace: $NAMESPACE" && \\\nhelm repo add mysql-operator https://mysql.github.io/mysql-operator/ && \\\nhelm repo update && \\\nhelm install \\\n  mysql-operator \\\n  mysql-operator/mysql-operator \\\n  --namespace "${NAMESPACE}" \\\n  --create-namespace \\\n  --version $VERSION\n')),(0,n.kt)("p",null,"Wait to start"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n $NAMESPACE rollout status -w deployment/mysql-operator\nkubectl -n $NAMESPACE get pod\n")),(0,n.kt)("h3",{id:"mysql-cluster"},"mysql cluster"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'NAMESPACE="mysql"\nkubectl create ns "${NAMESPACE}"\nkubectl -n "${NAMESPACE}" apply -f "${SRC_ROOT}/deploy/k8s/mysql.yaml"\n')),(0,n.kt)("p",null,"Wait to start"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n $NAMESPACE rollout status -w statefulset/mysql\nkubectl -n $NAMESPACE get statefulset\n")),(0,n.kt)("p",null,"Fill MySQL with data"),(0,n.kt)("p",null,"Port forward to make MySQL accessible "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n mysql port-forward service/mysql 3306:3306 > /dev/null 2>&1 &\nKUBECTL_PORT_FORWARD_PID=$!\nsleep 10\n")),(0,n.kt)("p",null,"Load"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'cat "${SRC_ROOT}/deploy/sql/mysql_schema_employees.sql" | mysql --host=127.0.0.1 --port=3306 --user=root --password=root\ncat "${SRC_ROOT}/deploy/sql/mysql_dump_employees.sql"   | mysql --host=127.0.0.1 --port=3306 --user=root --password=root --database=test\necho "select count(*) from test.employees" | mysql --host=127.0.0.1 --port=3306 --user=root --password=root --database=test\nkill $KUBECTL_PORT_FORWARD_PID\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mysql --host=127.0.0.1 --port=3306 --user=root --password=root --database=test\n")),(0,n.kt)("h3",{id:"clickhouse"},"clickhouse"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'NAMESPACE=clickhouse\nINSTALL_SH="https://raw.githubusercontent.com/Altinity/clickhouse-operator/master/deploy/operator-web-installer/clickhouse-operator-install.sh"\ncurl -s ${INSTALL_SH} | OPERATOR_NAMESPACE="${NAMESPACE}" bash\n')),(0,n.kt)("h2",{id:"local-alternative-installation"},"Local alternative installation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'NAMESPACE=clickhouse\nkubectl create namespace $NAMESPACE\nkubectl -n ${NAMESPACE} apply -f <( \\\n  cat "${SRC_ROOT}/deploy/k8s/clickhouse-operator-install-template.yaml" | \\\n    OPERATOR_NAMESPACE="clickhouse" \\\n    OPERATOR_IMAGE="altinity/clickhouse-operator:0.18.4" \\\n    METRICS_EXPORTER_IMAGE="altinity/metrics-exporter:0.18.4" \\\n    IMAGE_PULL_POLICY="IfNotPresent" \\\n    envsubst )\n')),(0,n.kt)("p",null,"Wait to start"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n $NAMESPACE rollout status -w deployment/clickhouse-operator\nkubectl -n $NAMESPACE get pod\n")),(0,n.kt)("h3",{id:"clickhouse-cluster"},"clickhouse-cluster"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'NAMESPACE=clickhouse\nkubectl create namespace $NAMESPACE\nkubectl -n $NAMESPACE apply -f "${SRC_ROOT}/deploy/k8s/clickhouse.yaml"\n')),(0,n.kt)("p",null,"Wait to start"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n $NAMESPACE rollout status -w statefulset/chi-clickhouse-cluster-0-0\nkubectl -n $NAMESPACE get statefulset\n")),(0,n.kt)("h3",{id:"schema-registryconfluent"},"schema registry(Confluent)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'NAMESPACE="registry"\nkubectl create namespace ${NAMESPACE}\nkubectl -n ${NAMESPACE} apply -f "${SRC_ROOT}/deploy/k8s/schema-registry.yaml"\n')),(0,n.kt)("p",null,"Wait to start"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n $NAMESPACE rollout status -w deployment/schema-registry\nkubectl -n $NAMESPACE get pod\n")),(0,n.kt)("p",null,"Ensure schema registry is empty\nPort forward to make schema registry accessible"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n registry port-forward service/schema-registry 8080:8080 > /dev/null 2>&1 &\nKUBECTL_PORT_FORWARD_PID=$!\nsleep 10\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"firefox http://localhost:8080/ui/artifacts\nsleep 10\nkill $KUBECTL_PORT_FORWARD_PID\n")),(0,n.kt)("h3",{id:"strimzi"},"Strimzi"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'VERSION="0.28.0"\nNAMESPACE="strimzi"\necho "Install strimzi-operator. Version: $VERSION Namespace: $NAMESPACE" && \\\nhelm repo add strimzi https://strimzi.io/charts/ && \\\nhelm install \\\n  strimzi-kafka-operator \\\n  strimzi/strimzi-kafka-operator \\\n  --namespace $NAMESPACE \\\n  --create-namespace \\\n  --version $VERSION \\\n  --set watchAnyNamespace=true\n')),(0,n.kt)("p",null,"Wait to start"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n $NAMESPACE rollout status -w deployment/strimzi-cluster-operator\nkubectl -n $NAMESPACE get pod\n")),(0,n.kt)("h3",{id:"debezium"},"debezium"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'NAMESPACE="debezium"\nkubectl create namespace "${NAMESPACE}"\nkubectl -n $NAMESPACE apply -f "${SRC_ROOT}/deploy/k8s/debezium-connect.yaml"\nsleep 10\nkubectl -n $NAMESPACE rollout status -w deployment/debezium-connect\nkubectl -n $NAMESPACE get pod\nsleep 10\nkubectl -n $NAMESPACE apply -f <( \\\n  cat "${SRC_ROOT}/deploy/k8s/debezium-connector-avro.yaml" | \\\n    MYSQL_HOST="mysql.mysql" \\\n    MYSQL_PORT="3306" \\\n    MYSQL_USER="root" \\\n    MYSQL_PASSWORD="root" \\\n    MYSQL_DBS="test" \\\n    MYSQL_TABLES="employees" \\\n    KAFKA_BOOTSTRAP_SERVERS="redpanda.redpanda:9092" \\\n    KAFKA_TOPIC="schema-changes.test_db" \\\n    DATABASE_SERVER_ID="5432" \\\n    DATABASE_SERVER_NAME="SERVER5432" \\\n    REGISTRY_URL="http://schema-registry.registry:8080/apis/registry/v2" \\\n    envsubst )\n')),(0,n.kt)("p",null,"Ensure schema registry is ",(0,n.kt)("strong",{parentName:"p"},"NOT empty")),(0,n.kt)("p",null,"Port forward to make schema registry accessible"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n registry port-forward service/schema-registry 8080:8080 > /dev/null 2>&1 &\nKUBECTL_PORT_FORWARD_PID=$!\nsleep 10\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"firefox http://localhost:8080/ui/artifacts\nsleep 10\nkill $KUBECTL_PORT_FORWARD_PID\n")),(0,n.kt)("p",null,"Ensure Kafka records"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n redpanda exec redpanda-0 -c redpanda -- rpk topic consume --offset=300000 --num=1 SERVER5432.test.employees\n\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"rpk topic consume --offset=300000 --num=1 SERVER5432.test.employees\n")),(0,n.kt)("h3",{id:"sink"},"sink"),(0,n.kt)("h3",{id:"create-schema"},"create schema"),(0,n.kt)("p",null,"Port forward to make ClickHouse accessible"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n clickhouse port-forward service/clickhouse-clickhouse 9000:9000 > /dev/null 2>&1 &\nKUBECTL_PORT_FORWARD_PID=$!\nsleep 10\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'cat "${SRC_ROOT}/deploy/sql/clickhouse_schema_employees.sql" | clickhouse-client --host=127.0.0.1 --port=9000 --multiline --multiquery --user=clickhouse_operator --password=clickhouse_operator_password\necho "desc employees" | clickhouse-client --host=127.0.0.1 --port=9000 --multiline --multiquery --user=clickhouse_operator --password=clickhouse_operator_password --database=test\nkill $KUBECTL_PORT_FORWARD_PID\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"clickhouse-client --host=127.0.0.1 --port=9000 --multiline --multiquery --user=clickhouse_operator --password=clickhouse_operator_password --database=test\n")),(0,n.kt)("h3",{id:"sink-connector"},"sink-connector"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'NAMESPACE="sink"\nkubectl create namespace "${NAMESPACE}"\nkubectl -n $NAMESPACE apply -f "${SRC_ROOT}/deploy/k8s/sink-connect.yaml"\nsleep 10\n#echo -n "Building"\n#while kubectl -n $NAMESPACE get pod/sink-connect-build > /dev/null 2>&1; do\n#  echo -n "."\n#  sleep 1 \n#done\n#echo "done"\n#sleep 5\nkubectl -n $NAMESPACE rollout status -w deployment/sink-connect\nkubectl -n $NAMESPACE get pod\nsleep 10\nkubectl -n $NAMESPACE apply -f <( \\\n  cat "${SRC_ROOT}/deploy/k8s/sink-connector-avro.yaml" | \\\n    CLICKHOUSE_HOST="clickhouse-clickhouse.clickhouse" \\\n    CLICKHOUSE_PORT=8123 \\\n    CLICKHOUSE_USER="clickhouse_operator" \\\n    CLICKHOUSE_PASSWORD="clickhouse_operator_password" \\\n    CLICKHOUSE_TABLE="employees" \\\n    CLICKHOUSE_DATABASE="test" \\\n    BUFFER_COUNT=10000 \\\n    TOPICS="SERVER5432.test.employees" \\\n    TOPICS_TABLE_MAP="SERVER5432.test.employees:employees" \\\n    REGISTRY_URL="http://schema-registry.registry:8080/apis/registry/v2" \\\n    envsubst )\n')),(0,n.kt)("p",null,"Check data\nPort forward to make ClickHouse accessible"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n clickhouse port-forward service/clickhouse-clickhouse 9000:9000 > /dev/null 2>&1 &\nKUBECTL_PORT_FORWARD_PID=$!\nsleep 10\n")),(0,n.kt)("p",null,"Check for data"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'echo "desc employees" | clickhouse-client --host=127.0.0.1 --port=9000 --multiline --multiquery --user=clickhouse_operator --password=clickhouse_operator_password --database=test\necho "select count() from employees" | clickhouse-client --host=127.0.0.1 --port=9000 --multiline --multiquery --user=clickhouse_operator --password=clickhouse_operator_password --database=test\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kill $KUBECTL_PORT_FORWARD_PID\n")))}d.isMDXComponent=!0}}]);