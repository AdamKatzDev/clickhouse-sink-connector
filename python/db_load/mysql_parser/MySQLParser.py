# Generated from MySQLParser.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

#/*
# * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License, version 2.0,
# * as published by the Free Software Foundation.
# *
# * This program is also distributed with certain software (including
# * but not limited to OpenSSL) that is licensed under separate terms, as
# * designated in a particular file or component or in included license
# * documentation. The authors of MySQL hereby grant you an additional
# * permission to link the program and your derivative works with the
# * separately licensed software that they have included with MySQL.
# * This program is distributed in the hope that it will be useful, but
# * WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
# * the GNU General Public License, version 2.0, for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software Foundation, Inc.,
# * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
# */
serverVersion = 80000
if __name__ is not None and "." in __name__:
    from .MySQLBaseRecognizer import MySQLBaseRecognizer
else:
    from MySQLBaseRecognizer import MySQLBaseRecognizer

AnsiQuotes=''

def isSqlModeActive(AnsiQuotes):
        return True

def serializedATN():
    return [
        4,1,806,8417,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,
        2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
        7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,
        2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,
        7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,
        2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,
        7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,7,532,
        2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,2,538,
        7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
        2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,
        7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
        2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,
        7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,
        2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,
        7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,
        2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,2,582,
        7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,7,587,
        2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,2,593,
        7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,7,598,
        2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,2,604,
        7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
        1,0,1,0,1,0,3,0,1224,8,0,1,0,1,0,3,0,1228,8,0,1,0,3,0,1231,8,0,3,
        0,1233,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,3,1,1269,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1277,
        8,2,1,2,1,2,1,2,3,2,1282,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,3,2,1298,8,2,1,3,1,3,1,3,4,3,1303,8,3,11,3,12,
        3,1304,1,3,1,3,1,3,1,3,1,3,3,3,1312,8,3,1,4,3,4,1315,8,4,1,4,1,4,
        1,4,1,4,1,4,3,4,1322,8,4,1,4,1,4,1,4,3,4,1327,8,4,1,4,3,4,1330,8,
        4,1,4,1,4,1,4,3,4,1335,8,4,1,4,1,4,1,4,1,4,3,4,1341,8,4,3,4,1343,
        8,4,1,4,1,4,3,4,1347,8,4,1,4,1,4,3,4,1351,8,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,3,5,1360,8,5,1,6,1,6,3,6,1364,8,6,1,6,5,6,1367,8,6,10,
        6,12,6,1370,9,6,1,7,1,7,1,7,3,7,1375,8,7,1,8,1,8,1,8,1,8,1,9,3,9,
        1382,8,9,1,9,1,9,3,9,1386,8,9,1,9,1,9,1,9,3,9,1391,8,9,1,10,1,10,
        1,10,3,10,1396,8,10,1,10,1,10,1,10,1,10,1,10,3,10,1403,8,10,1,10,
        3,10,1406,8,10,1,11,1,11,1,11,1,11,3,11,1412,8,11,1,11,3,11,1415,
        8,11,1,12,1,12,1,12,5,12,1420,8,12,10,12,12,12,1423,9,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,3,13,1432,8,13,1,14,1,14,1,14,3,14,1437,
        8,14,1,14,1,14,1,14,3,14,1442,8,14,1,14,1,14,1,14,1,14,1,14,1,14,
        3,14,1450,8,14,1,14,1,14,1,14,1,14,3,14,1456,8,14,1,14,1,14,3,14,
        1460,8,14,1,14,1,14,1,14,3,14,1465,8,14,1,14,1,14,1,14,1,14,1,14,
        5,14,1472,8,14,10,14,12,14,1475,9,14,1,14,1,14,1,14,3,14,1480,8,
        14,1,14,1,14,5,14,1484,8,14,10,14,12,14,1487,9,14,1,14,1,14,1,14,
        3,14,1492,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1501,8,14,
        1,14,1,14,1,14,1,14,3,14,1507,8,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,3,14,1516,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,3,14,1530,8,14,1,15,1,15,3,15,1534,8,15,1,15,1,15,
        1,15,1,15,3,15,1540,8,15,5,15,1542,8,15,10,15,12,15,1545,9,15,1,
        16,1,16,1,16,3,16,1550,8,16,1,17,1,17,3,17,1554,8,17,1,17,1,17,1,
        17,3,17,1559,8,17,1,17,3,17,1562,8,17,1,17,1,17,1,17,1,17,3,17,1568,
        8,17,1,17,1,17,1,17,1,17,3,17,1574,8,17,1,17,1,17,1,17,1,17,3,17,
        1580,8,17,1,17,1,17,3,17,1584,8,17,1,17,1,17,1,17,3,17,1589,8,17,
        1,17,1,17,3,17,1593,8,17,1,17,1,17,3,17,1597,8,17,1,17,1,17,1,17,
        1,17,1,17,1,17,3,17,1605,8,17,3,17,1607,8,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1620,8,17,1,17,1,17,1,17,
        1,17,1,17,1,17,3,17,1628,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
        1636,8,17,1,17,1,17,3,17,1640,8,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1669,8,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
        1685,8,17,1,17,3,17,1688,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        3,17,1697,8,17,1,18,1,18,1,18,3,18,1702,8,18,1,19,1,19,1,20,1,20,
        3,20,1708,8,20,1,20,1,20,1,20,3,20,1713,8,20,5,20,1715,8,20,10,20,
        12,20,1718,9,20,1,21,1,21,3,21,1722,8,21,1,21,1,21,3,21,1726,8,21,
        1,22,1,22,3,22,1730,8,22,1,22,1,22,3,22,1734,8,22,1,23,1,23,3,23,
        1738,8,23,1,23,1,23,3,23,1742,8,23,3,23,1744,8,23,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,26,1,26,3,26,1755,8,26,1,27,1,27,1,27,1,27,
        1,27,1,27,3,27,1763,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
        1772,8,27,1,27,5,27,1775,8,27,10,27,12,27,1778,9,27,3,27,1780,8,
        27,1,27,1,27,1,27,3,27,1785,8,27,1,27,1,27,1,27,1,27,1,27,3,27,1792,
        8,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1800,8,28,1,29,1,29,3,29,
        1804,8,29,1,29,5,29,1807,8,29,10,29,12,29,1810,9,29,1,30,1,30,1,
        31,1,31,3,31,1816,8,31,1,31,5,31,1819,8,31,10,31,12,31,1822,9,31,
        1,32,1,32,3,32,1826,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1834,
        8,32,1,33,1,33,3,33,1838,8,33,1,33,1,33,1,33,3,33,1843,8,33,1,34,
        3,34,1846,8,34,1,34,3,34,1849,8,34,1,34,3,34,1852,8,34,1,34,1,34,
        1,34,1,34,1,35,3,35,1859,8,35,1,35,1,35,1,35,1,36,1,36,3,36,1866,
        8,36,1,37,1,37,3,37,1870,8,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,3,38,1894,8,38,1,39,1,39,3,39,1898,8,39,1,39,1,39,5,39,
        1902,8,39,10,39,12,39,1905,9,39,1,40,1,40,1,40,1,40,3,40,1911,8,
        40,1,41,3,41,1914,8,41,1,41,1,41,3,41,1918,8,41,1,41,1,41,1,41,1,
        41,1,41,3,41,1925,8,41,1,41,3,41,1928,8,41,1,41,3,41,1931,8,41,1,
        41,3,41,1934,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1943,8,
        41,1,42,1,42,1,42,5,42,1948,8,42,10,42,12,42,1951,9,42,1,43,1,43,
        3,43,1955,8,43,1,44,3,44,1958,8,44,1,44,3,44,1961,8,44,1,44,1,44,
        1,45,1,45,3,45,1967,8,45,1,46,1,46,1,46,1,46,3,46,1973,8,46,1,46,
        3,46,1976,8,46,1,46,1,46,1,47,3,47,1981,8,47,1,47,1,47,1,47,1,47,
        1,47,1,47,5,47,1989,8,47,10,47,12,47,1992,9,47,3,47,1994,8,47,1,
        47,1,47,5,47,1998,8,47,10,47,12,47,2001,9,47,1,47,1,47,1,48,3,48,
        2006,8,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,2014,8,48,10,48,12,
        48,2017,9,48,3,48,2019,8,48,1,48,1,48,1,48,1,48,5,48,2025,8,48,10,
        48,12,48,2028,9,48,1,48,1,48,1,49,3,49,2033,8,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,50,1,50,3,50,2044,8,50,1,50,3,50,2047,8,50,
        1,51,4,51,2050,8,51,11,51,12,51,2051,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,2071,
        8,52,1,53,3,53,2074,8,53,1,53,3,53,2077,8,53,1,53,1,53,1,53,1,53,
        3,53,2083,8,53,1,53,3,53,2086,8,53,3,53,2088,8,53,1,53,1,53,5,53,
        2092,8,53,10,53,12,53,2095,9,53,1,53,1,53,1,53,1,53,1,53,5,53,2102,
        8,53,10,53,12,53,2105,9,53,1,53,1,53,1,53,1,53,1,53,5,53,2112,8,
        53,10,53,12,53,2115,9,53,3,53,2117,8,53,1,53,3,53,2120,8,53,1,54,
        1,54,1,54,3,54,2125,8,54,1,54,1,54,1,54,1,54,3,54,2131,8,54,1,55,
        1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,2144,8,56,
        1,57,1,57,3,57,2148,8,57,1,57,5,57,2151,8,57,10,57,12,57,2154,9,
        57,1,58,1,58,1,58,1,58,1,58,1,58,3,58,2162,8,58,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,5,60,2177,8,60,10,
        60,12,60,2180,9,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,2198,8,61,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,3,62,2207,8,62,1,62,3,62,2210,8,62,1,63,1,63,
        1,63,1,63,1,63,1,63,3,63,2218,8,63,1,64,1,64,1,64,3,64,2223,8,64,
        1,64,1,64,3,64,2227,8,64,1,65,1,65,1,65,1,66,1,66,3,66,2234,8,66,
        1,66,5,66,2237,8,66,10,66,12,66,2240,9,66,1,67,1,67,1,67,1,67,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,2254,8,67,1,68,1,68,3,
        68,2258,8,68,1,68,1,68,1,69,1,69,3,69,2264,8,69,1,69,1,69,1,70,1,
        70,3,70,2270,8,70,1,70,1,70,1,71,1,71,3,71,2276,8,71,1,71,1,71,1,
        72,1,72,3,72,2282,8,72,1,72,1,72,1,73,1,73,3,73,2288,8,73,1,73,1,
        73,1,74,3,74,2293,8,74,1,74,1,74,3,74,2297,8,74,1,74,1,74,1,75,1,
        75,1,76,1,76,3,76,2305,8,76,1,76,1,76,1,77,1,77,3,77,2311,8,77,1,
        77,1,77,1,78,1,78,3,78,2317,8,78,1,78,1,78,1,79,3,79,2322,8,79,1,
        79,3,79,2325,8,79,1,79,3,79,2328,8,79,1,79,1,79,1,79,1,79,1,80,1,
        80,1,80,3,80,2337,8,80,1,80,3,80,2340,8,80,1,81,1,81,1,81,1,81,1,
        82,1,82,1,82,1,82,1,83,3,83,2351,8,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,3,83,2363,8,83,1,83,1,83,1,84,1,84,1,84,1,
        84,1,85,3,85,2372,8,85,1,85,1,85,3,85,2376,8,85,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,3,85,2385,8,85,1,85,3,85,2388,8,85,1,85,1,85,1,
        85,1,85,3,85,2394,8,85,3,85,2396,8,85,1,85,1,85,3,85,2400,8,85,1,
        85,1,85,1,85,1,86,1,86,3,86,2407,8,86,1,86,1,86,1,87,1,87,1,87,1,
        87,1,87,1,87,1,87,5,87,2418,8,87,10,87,12,87,2421,9,87,1,87,1,87,
        1,87,1,87,3,87,2427,8,87,1,87,1,87,5,87,2431,8,87,10,87,12,87,2434,
        9,87,3,87,2436,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,3,88,2453,8,88,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,3,89,2473,8,89,1,90,1,90,3,90,2477,8,90,1,90,1,90,1,91,1,91,
        3,91,2483,8,91,1,91,1,91,1,92,1,92,3,92,2489,8,92,1,92,1,92,1,93,
        1,93,3,93,2495,8,93,1,93,1,93,1,94,3,94,2500,8,94,1,94,1,94,1,94,
        1,94,1,94,3,94,2507,8,94,1,95,1,95,1,95,1,95,1,95,3,95,2514,8,95,
        1,95,5,95,2517,8,95,10,95,12,95,2520,9,95,3,95,2522,8,95,1,96,1,
        96,3,96,2526,8,96,1,97,1,97,3,97,2530,8,97,1,97,1,97,1,98,3,98,2535,
        8,98,1,98,1,98,3,98,2539,8,98,1,98,1,98,3,98,2543,8,98,1,99,1,99,
        1,99,1,99,3,99,2549,8,99,1,99,5,99,2552,8,99,10,99,12,99,2555,9,
        99,3,99,2557,8,99,1,100,1,100,3,100,2561,8,100,1,100,1,100,1,101,
        1,101,3,101,2567,8,101,1,101,1,101,3,101,2571,8,101,1,102,1,102,
        3,102,2575,8,102,1,102,1,102,1,103,1,103,1,103,1,103,3,103,2583,
        8,103,1,103,1,103,1,104,1,104,1,104,1,104,3,104,2591,8,104,1,105,
        1,105,1,105,1,105,1,105,5,105,2598,8,105,10,105,12,105,2601,9,105,
        1,106,1,106,1,106,1,106,1,107,1,107,3,107,2609,8,107,1,107,1,107,
        1,108,1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,3,109,2622,
        8,109,1,109,3,109,2625,8,109,1,110,1,110,3,110,2629,8,110,1,110,
        1,110,5,110,2633,8,110,10,110,12,110,2636,9,110,1,110,1,110,1,110,
        1,110,1,110,3,110,2643,8,110,1,110,1,110,1,110,3,110,2648,8,110,
        1,110,3,110,2651,8,110,1,110,3,110,2654,8,110,1,110,3,110,2657,8,
        110,1,110,3,110,2660,8,110,3,110,2662,8,110,1,110,1,110,1,110,1,
        110,3,110,2668,8,110,3,110,2670,8,110,1,111,1,111,1,111,1,111,1,
        111,1,111,1,112,1,112,1,113,1,113,1,113,1,113,1,113,3,113,2685,8,
        113,1,114,1,114,1,114,1,114,3,114,2691,8,114,1,114,1,114,1,114,1,
        114,1,114,3,114,2698,8,114,1,114,3,114,2701,8,114,3,114,2703,8,114,
        3,114,2705,8,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        3,115,2715,8,115,3,115,2717,8,115,1,116,1,116,3,116,2721,8,116,1,
        116,3,116,2724,8,116,1,116,3,116,2727,8,116,1,116,1,116,3,116,2731,
        8,116,1,116,1,116,1,116,3,116,2736,8,116,1,116,1,116,1,116,1,116,
        3,116,2742,8,116,1,116,3,116,2745,8,116,1,116,3,116,2748,8,116,1,
        117,1,117,1,118,1,118,3,118,2754,8,118,1,118,3,118,2757,8,118,1,
        118,1,118,1,119,1,119,1,119,5,119,2764,8,119,10,119,12,119,2767,
        9,119,1,120,1,120,1,120,1,121,1,121,1,121,3,121,2775,8,121,1,121,
        1,121,3,121,2779,8,121,1,122,1,122,3,122,2783,8,122,1,122,1,122,
        1,122,1,122,3,122,2789,8,122,1,122,5,122,2792,8,122,10,122,12,122,
        2795,9,122,1,123,1,123,3,123,2799,8,123,1,123,1,123,1,123,3,123,
        2804,8,123,5,123,2806,8,123,10,123,12,123,2809,9,123,1,124,1,124,
        1,124,3,124,2814,8,124,1,125,1,125,1,125,1,125,1,125,1,125,1,126,
        1,126,1,126,3,126,2825,8,126,1,126,3,126,2828,8,126,1,126,1,126,
        1,126,3,126,2833,8,126,1,126,1,126,1,126,1,126,3,126,2839,8,126,
        1,126,3,126,2842,8,126,1,126,3,126,2845,8,126,1,126,3,126,2848,8,
        126,1,126,3,126,2851,8,126,1,126,1,126,1,127,1,127,1,128,1,128,1,
        128,1,128,1,128,1,129,1,129,1,129,3,129,2865,8,129,1,129,3,129,2868,
        8,129,1,129,1,129,3,129,2872,8,129,1,130,1,130,3,130,2876,8,130,
        1,130,1,130,1,131,1,131,3,131,2882,8,131,1,131,1,131,1,131,3,131,
        2887,8,131,5,131,2889,8,131,10,131,12,131,2892,9,131,1,132,1,132,
        3,132,2896,8,132,1,132,3,132,2899,8,132,1,132,1,132,3,132,2903,8,
        132,1,132,1,132,1,132,1,132,3,132,2909,8,132,1,133,1,133,3,133,2913,
        8,133,1,133,1,133,3,133,2917,8,133,1,134,1,134,1,134,1,134,1,134,
        1,134,1,134,3,134,2926,8,134,1,134,1,134,1,134,3,134,2931,8,134,
        1,135,1,135,3,135,2935,8,135,1,135,1,135,3,135,2939,8,135,1,135,
        3,135,2942,8,135,1,135,1,135,3,135,2946,8,135,1,135,3,135,2949,8,
        135,3,135,2951,8,135,1,135,1,135,3,135,2955,8,135,1,136,1,136,1,
        136,1,136,3,136,2961,8,136,1,136,1,136,3,136,2965,8,136,3,136,2967,
        8,136,1,136,1,136,3,136,2971,8,136,1,136,1,136,3,136,2975,8,136,
        5,136,2977,8,136,10,136,12,136,2980,9,136,1,137,1,137,1,137,1,137,
        3,137,2986,8,137,3,137,2988,8,137,1,137,1,137,1,138,1,138,1,138,
        1,138,1,138,3,138,2997,8,138,1,139,1,139,5,139,3001,8,139,10,139,
        12,139,3004,9,139,1,139,1,139,3,139,3008,8,139,1,139,3,139,3011,
        8,139,1,139,3,139,3014,8,139,1,139,3,139,3017,8,139,1,139,3,139,
        3020,8,139,1,139,1,139,3,139,3024,8,139,1,140,1,140,1,141,1,141,
        1,142,1,142,1,142,1,143,1,143,1,143,1,144,1,144,1,144,3,144,3039,
        8,144,1,145,1,145,3,145,3043,8,145,1,146,1,146,1,146,1,146,3,146,
        3049,8,146,1,146,3,146,3052,8,146,1,146,3,146,3055,8,146,1,146,1,
        146,1,146,1,146,3,146,3061,8,146,1,146,1,146,1,146,3,146,3066,8,
        146,5,146,3068,8,146,10,146,12,146,3071,9,146,3,146,3073,8,146,1,
        147,1,147,1,147,1,147,1,147,1,147,3,147,3081,8,147,3,147,3083,8,
        147,1,147,1,147,1,148,1,148,1,148,1,149,1,149,1,149,1,149,5,149,
        3094,8,149,10,149,12,149,3097,9,149,1,150,1,150,1,150,1,150,1,151,
        1,151,1,151,1,151,1,152,3,152,3108,8,152,1,152,1,152,1,152,3,152,
        3113,8,152,1,152,3,152,3116,8,152,1,152,3,152,3119,8,152,1,153,1,
        153,1,153,3,153,3124,8,153,1,154,1,154,1,155,1,155,3,155,3130,8,
        155,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
        1,156,1,156,1,156,1,156,3,156,3146,8,156,1,157,1,157,1,157,1,157,
        1,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,3,158,3166,8,158,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,3,159,3175,8,159,1,160,1,160,3,160,3179,8,160,1,160,
        1,160,1,160,5,160,3184,8,160,10,160,12,160,3187,9,160,1,161,1,161,
        3,161,3191,8,161,1,161,1,161,1,161,1,162,1,162,1,162,1,162,3,162,
        3200,8,162,1,163,1,163,1,163,1,163,1,163,3,163,3207,8,163,1,164,
        1,164,1,164,1,164,1,165,1,165,1,166,1,166,1,166,3,166,3218,8,166,
        1,167,1,167,1,167,5,167,3223,8,167,10,167,12,167,3226,9,167,1,168,
        1,168,1,168,1,168,5,168,3232,8,168,10,168,12,168,3235,9,168,1,169,
        1,169,1,169,1,170,1,170,1,170,3,170,3243,8,170,1,170,1,170,1,171,
        1,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,3255,8,171,1,172,
        4,172,3258,8,172,11,172,12,172,3259,1,173,1,173,1,173,1,173,1,173,
        3,173,3267,8,173,1,173,1,173,3,173,3271,8,173,1,173,1,173,1,173,
        1,173,3,173,3277,8,173,1,174,1,174,1,174,3,174,3282,8,174,1,175,
        1,175,1,175,3,175,3287,8,175,1,176,1,176,3,176,3291,8,176,1,176,
        1,176,5,176,3295,8,176,10,176,12,176,3298,9,176,1,177,1,177,1,177,
        3,177,3303,8,177,3,177,3305,8,177,1,178,3,178,3308,8,178,1,178,1,
        178,3,178,3312,8,178,1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,
        180,3,180,3322,8,180,1,180,1,180,1,180,3,180,3327,8,180,1,180,5,
        180,3330,8,180,10,180,12,180,3333,9,180,1,181,1,181,5,181,3337,8,
        181,10,181,12,181,3340,9,181,1,182,1,182,1,182,1,182,1,182,1,182,
        3,182,3348,8,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,3356,
        8,182,1,182,1,182,1,182,3,182,3361,8,182,1,183,1,183,3,183,3365,
        8,183,1,183,1,183,1,183,1,183,3,183,3371,8,183,1,183,3,183,3374,
        8,183,1,184,3,184,3377,8,184,1,184,1,184,3,184,3381,8,184,1,185,
        1,185,3,185,3385,8,185,1,185,1,185,1,186,1,186,1,186,1,186,1,186,
        1,186,3,186,3395,8,186,1,187,1,187,3,187,3399,8,187,1,187,3,187,
        3402,8,187,1,187,3,187,3405,8,187,1,188,1,188,1,188,3,188,3410,8,
        188,1,188,1,188,1,189,1,189,3,189,3416,8,189,1,189,1,189,3,189,3420,
        8,189,1,189,1,189,1,189,1,189,3,189,3426,8,189,1,189,3,189,3429,
        8,189,3,189,3431,8,189,1,190,1,190,1,190,3,190,3436,8,190,1,190,
        1,190,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,3448,
        8,191,1,192,1,192,1,192,1,192,1,192,5,192,3455,8,192,10,192,12,192,
        3458,9,192,1,192,1,192,1,193,1,193,1,193,1,193,1,193,1,193,1,193,
        1,193,3,193,3470,8,193,1,193,3,193,3473,8,193,1,193,1,193,1,193,
        3,193,3478,8,193,1,193,1,193,1,193,1,193,1,193,3,193,3485,8,193,
        1,194,1,194,3,194,3489,8,194,1,194,1,194,3,194,3493,8,194,3,194,
        3495,8,194,1,195,1,195,1,195,1,195,1,196,1,196,1,196,1,196,1,197,
        1,197,1,197,1,197,3,197,3509,8,197,1,198,1,198,1,199,1,199,1,199,
        3,199,3516,8,199,1,199,1,199,1,200,1,200,1,200,5,200,3523,8,200,
        10,200,12,200,3526,9,200,1,201,1,201,1,201,3,201,3531,8,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,3,201,3540,8,201,1,201,1,201,
        3,201,3544,8,201,1,201,1,201,3,201,3548,8,201,1,202,1,202,1,203,
        1,203,1,204,1,204,1,204,1,204,3,204,3558,8,204,3,204,3560,8,204,
        1,205,1,205,1,205,1,205,1,205,1,205,3,205,3568,8,205,1,206,1,206,
        1,206,5,206,3573,8,206,10,206,12,206,3576,9,206,1,207,1,207,3,207,
        3580,8,207,1,208,1,208,3,208,3584,8,208,1,208,1,208,3,208,3588,8,
        208,1,208,3,208,3591,8,208,1,208,1,208,1,208,1,208,3,208,3597,8,
        208,1,208,3,208,3600,8,208,1,208,3,208,3603,8,208,1,209,1,209,1,
        209,1,209,3,209,3609,8,209,1,210,1,210,1,210,5,210,3614,8,210,10,
        210,12,210,3617,9,210,1,210,1,210,3,210,3621,8,210,1,210,1,210,3,
        210,3625,8,210,1,210,3,210,3628,8,210,1,210,3,210,3631,8,210,1,210,
        3,210,3634,8,210,3,210,3636,8,210,1,211,1,211,3,211,3640,8,211,1,
        212,1,212,1,212,1,212,1,212,1,212,3,212,3648,8,212,1,213,1,213,1,
        213,1,213,3,213,3654,8,213,1,213,1,213,3,213,3658,8,213,1,213,1,
        213,1,213,3,213,3663,8,213,1,213,3,213,3666,8,213,1,213,3,213,3669,
        8,213,1,213,3,213,3672,8,213,3,213,3674,8,213,1,213,1,213,1,213,
        3,213,3679,8,213,1,214,1,214,1,214,1,214,1,214,5,214,3686,8,214,
        10,214,12,214,3689,9,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,1,214,3,214,3701,8,214,3,214,3703,8,214,1,215,1,215,
        3,215,3707,8,215,1,215,1,215,1,216,1,216,3,216,3713,8,216,1,216,
        3,216,3716,8,216,1,216,3,216,3719,8,216,1,217,1,217,1,217,1,217,
        3,217,3725,8,217,1,217,1,217,1,217,1,217,1,217,3,217,3732,8,217,
        3,217,3734,8,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,3742,
        8,217,1,217,1,217,1,217,1,217,3,217,3748,8,217,1,218,1,218,1,218,
        3,218,3753,8,218,1,218,3,218,3756,8,218,1,219,1,219,1,219,1,219,
        1,219,3,219,3763,8,219,3,219,3765,8,219,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,3,220,3774,8,220,1,220,1,220,1,220,1,220,1,220,
        5,220,3781,8,220,10,220,12,220,3784,9,220,1,220,1,220,1,220,1,220,
        1,220,1,220,3,220,3792,8,220,1,220,1,220,1,220,1,220,1,220,1,220,
        3,220,3800,8,220,1,221,1,221,3,221,3804,8,221,1,221,1,221,1,221,
        1,221,1,221,3,221,3811,8,221,1,221,3,221,3814,8,221,3,221,3816,8,
        221,1,222,1,222,1,222,1,222,1,222,1,222,3,222,3824,8,222,1,223,1,
        223,1,223,1,223,3,223,3830,8,223,1,223,1,223,1,223,1,224,1,224,1,
        224,1,224,1,224,3,224,3840,8,224,1,225,1,225,1,225,5,225,3845,8,
        225,10,225,12,225,3848,9,225,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,3,226,3941,8,226,
        1,227,1,227,3,227,3945,8,227,1,228,1,228,1,229,1,229,3,229,3951,
        8,229,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
        1,230,1,230,3,230,3965,8,230,1,231,1,231,1,231,1,231,5,231,3971,
        8,231,10,231,12,231,3974,9,231,3,231,3976,8,231,1,231,1,231,1,232,
        1,232,1,232,1,232,1,232,1,232,5,232,3986,8,232,10,232,12,232,3989,
        9,232,1,232,1,232,3,232,3993,8,232,1,233,1,233,1,233,1,233,3,233,
        3999,8,233,1,233,1,233,1,233,1,233,1,233,3,233,4006,8,233,1,233,
        1,233,1,233,1,233,1,233,3,233,4013,8,233,1,233,1,233,1,233,1,233,
        1,233,3,233,4020,8,233,1,233,1,233,1,233,1,233,1,233,3,233,4027,
        8,233,1,233,1,233,1,233,1,233,1,233,3,233,4034,8,233,1,233,1,233,
        1,233,1,233,1,233,3,233,4041,8,233,1,233,3,233,4044,8,233,1,234,
        1,234,1,234,5,234,4049,8,234,10,234,12,234,4052,9,234,1,235,1,235,
        1,235,5,235,4057,8,235,10,235,12,235,4060,9,235,1,236,1,236,1,236,
        5,236,4065,8,236,10,236,12,236,4068,9,236,1,237,1,237,1,238,1,238,
        1,238,5,238,4075,8,238,10,238,12,238,4078,9,238,1,239,1,239,1,239,
        3,239,4083,8,239,1,239,1,239,3,239,4087,8,239,1,239,1,239,3,239,
        4091,8,239,1,239,1,239,1,239,3,239,4096,8,239,1,239,3,239,4099,8,
        239,3,239,4101,8,239,1,240,1,240,1,240,1,240,1,240,1,240,1,240,3,
        240,4110,8,240,1,240,1,240,5,240,4114,8,240,10,240,12,240,4117,9,
        240,1,241,1,241,1,241,1,241,3,241,4123,8,241,1,241,1,241,1,241,3,
        241,4128,8,241,1,241,1,241,1,241,3,241,4133,8,241,1,241,1,241,1,
        241,3,241,4138,8,241,1,241,3,241,4141,8,241,1,242,1,242,1,242,5,
        242,4146,8,242,10,242,12,242,4149,9,242,1,243,1,243,1,244,1,244,
        1,244,1,245,1,245,1,245,1,245,1,245,3,245,4161,8,245,1,245,1,245,
        1,245,1,245,3,245,4167,8,245,1,246,1,246,1,246,1,246,3,246,4173,
        8,246,1,247,1,247,1,247,5,247,4178,8,247,10,247,12,247,4181,9,247,
        1,248,1,248,1,248,1,248,1,248,3,248,4188,8,248,1,248,1,248,1,248,
        1,248,3,248,4194,8,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,
        1,248,1,248,1,248,3,248,4206,8,248,3,248,4208,8,248,1,249,1,249,
        1,249,1,249,3,249,4214,8,249,1,249,1,249,3,249,4218,8,249,3,249,
        4220,8,249,1,250,1,250,3,250,4224,8,250,1,250,1,250,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,251,4237,8,251,1,252,
        1,252,1,252,1,252,3,252,4243,8,252,1,252,1,252,1,253,1,253,1,253,
        1,253,3,253,4251,8,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        1,253,1,253,3,253,4262,8,253,1,253,1,253,3,253,4266,8,253,1,253,
        1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,
        4279,8,253,1,253,1,253,1,253,1,253,1,253,3,253,4286,8,253,1,253,
        1,253,1,253,1,253,3,253,4292,8,253,1,253,1,253,1,253,1,253,1,253,
        3,253,4299,8,253,3,253,4301,8,253,1,254,1,254,1,254,1,255,1,255,
        1,255,1,255,1,255,3,255,4311,8,255,1,255,1,255,1,255,1,255,1,256,
        1,256,3,256,4319,8,256,1,256,3,256,4322,8,256,1,256,5,256,4325,8,
        256,10,256,12,256,4328,9,256,1,256,3,256,4331,8,256,1,257,1,257,
        1,257,1,257,3,257,4337,8,257,1,257,3,257,4340,8,257,1,258,1,258,
        1,258,3,258,4345,8,258,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,4,259,4356,8,259,11,259,12,259,4357,1,260,1,260,1,260,
        1,260,1,260,1,260,1,260,1,260,1,260,1,260,3,260,4370,8,260,1,260,
        1,260,1,260,3,260,4375,8,260,1,260,1,260,1,260,1,260,1,260,1,260,
        3,260,4383,8,260,1,260,1,260,1,260,1,260,3,260,4389,8,260,3,260,
        4391,8,260,3,260,4393,8,260,1,261,1,261,1,261,1,261,3,261,4399,8,
        261,1,261,1,261,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,
        3,262,4411,8,262,1,262,1,262,1,262,3,262,4416,8,262,3,262,4418,8,
        262,1,262,1,262,3,262,4422,8,262,1,262,1,262,1,262,1,262,3,262,4428,
        8,262,1,262,3,262,4431,8,262,1,262,3,262,4434,8,262,1,262,1,262,
        1,262,1,262,1,262,1,262,1,262,1,262,3,262,4444,8,262,3,262,4446,
        8,262,1,263,1,263,1,263,1,263,3,263,4452,8,263,1,264,1,264,1,264,
        4,264,4457,8,264,11,264,12,264,4458,1,264,1,264,1,264,1,264,3,264,
        4465,8,264,1,265,1,265,1,265,1,266,1,266,1,266,1,266,1,266,3,266,
        4475,8,266,1,266,1,266,3,266,4479,8,266,1,267,1,267,1,267,3,267,
        4484,8,267,1,268,1,268,1,268,1,269,1,269,1,269,1,269,1,269,1,269,
        1,269,1,269,1,269,1,269,5,269,4499,8,269,10,269,12,269,4502,9,269,
        1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,
        1,270,1,270,3,270,4517,8,270,1,270,1,270,1,270,3,270,4522,8,270,
        1,270,1,270,1,270,1,270,1,270,1,270,3,270,4530,8,270,1,270,1,270,
        1,270,1,270,1,270,1,270,3,270,4538,8,270,1,271,1,271,1,271,3,271,
        4543,8,271,1,271,1,271,1,271,1,271,3,271,4549,8,271,1,271,3,271,
        4552,8,271,3,271,4554,8,271,1,272,1,272,1,273,1,273,1,273,5,273,
        4561,8,273,10,273,12,273,4564,9,273,1,274,1,274,1,274,3,274,4569,
        8,274,1,274,1,274,1,274,1,274,3,274,4575,8,274,3,274,4577,8,274,
        1,274,1,274,3,274,4581,8,274,1,274,1,274,1,274,1,274,1,274,1,274,
        1,274,1,274,1,274,3,274,4592,8,274,1,274,1,274,1,274,1,274,1,274,
        1,274,1,274,1,274,3,274,4602,8,274,1,274,1,274,1,274,3,274,4607,
        8,274,1,275,1,275,1,275,3,275,4612,8,275,1,275,1,275,1,275,3,275,
        4617,8,275,1,275,1,275,1,275,1,275,1,275,1,275,3,275,4625,8,275,
        1,276,1,276,3,276,4629,8,276,1,276,5,276,4632,8,276,10,276,12,276,
        4635,9,276,1,277,1,277,1,277,1,277,1,277,1,277,3,277,4643,8,277,
        1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,3,278,
        4655,8,278,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,3,279,4669,8,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,3,279,4678,8,279,3,279,4680,8,279,1,280,1,280,1,280,
        5,280,4685,8,280,10,280,12,280,4688,9,280,1,281,1,281,1,281,1,281,
        3,281,4694,8,281,1,282,1,282,3,282,4698,8,282,1,282,1,282,1,282,
        1,282,3,282,4704,8,282,1,282,1,282,1,282,1,282,5,282,4710,8,282,
        10,282,12,282,4713,9,282,1,282,1,282,1,282,1,282,3,282,4719,8,282,
        1,282,1,282,3,282,4723,8,282,1,282,1,282,1,282,1,282,3,282,4729,
        8,282,1,282,1,282,1,282,5,282,4734,8,282,10,282,12,282,4737,9,282,
        3,282,4739,8,282,1,283,1,283,1,283,1,283,1,283,1,283,1,283,3,283,
        4748,8,283,1,283,1,283,1,283,1,283,3,283,4754,8,283,1,284,1,284,
        1,284,3,284,4759,8,284,1,285,1,285,1,286,1,286,1,286,1,286,1,286,
        1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
        1,286,5,286,4780,8,286,10,286,12,286,4783,9,286,3,286,4785,8,286,
        1,287,1,287,1,287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
        1,288,1,288,1,288,3,288,4801,8,288,1,288,1,288,1,288,3,288,4806,
        8,288,1,288,3,288,4809,8,288,1,288,1,288,3,288,4813,8,288,1,288,
        3,288,4816,8,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
        1,288,1,288,1,288,1,288,3,288,4830,8,288,1,288,1,288,1,288,1,288,
        3,288,4836,8,288,1,288,1,288,1,288,3,288,4841,8,288,1,288,3,288,
        4844,8,288,3,288,4846,8,288,1,289,1,289,3,289,4850,8,289,1,289,1,
        289,1,289,3,289,4855,8,289,3,289,4857,8,289,1,290,1,290,1,290,1,
        291,1,291,1,291,1,291,1,291,1,291,1,291,3,291,4869,8,291,1,292,1,
        292,5,292,4873,8,292,10,292,12,292,4876,9,292,1,293,1,293,1,293,
        1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,
        1,293,1,293,1,293,1,293,1,293,3,293,4897,8,293,1,293,1,293,3,293,
        4901,8,293,3,293,4903,8,293,1,294,1,294,1,294,1,294,1,294,1,294,
        3,294,4911,8,294,1,295,1,295,3,295,4915,8,295,1,295,1,295,1,296,
        1,296,1,296,1,296,1,296,3,296,4924,8,296,1,297,1,297,1,297,1,297,
        1,298,1,298,1,298,1,298,3,298,4934,8,298,1,299,1,299,1,299,1,299,
        1,299,3,299,4941,8,299,1,299,3,299,4944,8,299,1,299,1,299,3,299,
        4948,8,299,1,299,3,299,4951,8,299,1,299,3,299,4954,8,299,1,299,1,
        299,3,299,4958,8,299,1,299,3,299,4961,8,299,1,299,1,299,3,299,4965,
        8,299,1,299,3,299,4968,8,299,1,299,1,299,1,299,3,299,4973,8,299,
        1,299,3,299,4976,8,299,1,299,1,299,1,299,3,299,4981,8,299,1,299,
        3,299,4984,8,299,1,299,1,299,1,299,1,299,3,299,4990,8,299,1,299,
        1,299,3,299,4994,8,299,1,299,1,299,1,299,1,299,3,299,5000,8,299,
        1,299,3,299,5003,8,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        3,299,5012,8,299,3,299,5014,8,299,1,299,1,299,1,299,1,299,3,299,
        5020,8,299,1,299,1,299,3,299,5024,8,299,1,299,3,299,5027,8,299,1,
        299,3,299,5030,8,299,1,299,1,299,3,299,5034,8,299,1,299,1,299,1,
        299,1,299,3,299,5040,8,299,1,299,3,299,5043,8,299,1,299,3,299,5046,
        8,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,5056,
        8,299,1,299,1,299,3,299,5060,8,299,1,299,1,299,1,299,1,299,1,299,
        5,299,5067,8,299,10,299,12,299,5070,9,299,3,299,5072,8,299,1,299,
        1,299,1,299,3,299,5077,8,299,1,299,3,299,5080,8,299,1,299,3,299,
        5083,8,299,1,299,1,299,3,299,5087,8,299,1,299,3,299,5090,8,299,1,
        299,1,299,1,299,3,299,5095,8,299,1,299,1,299,3,299,5099,8,299,1,
        299,1,299,1,299,1,299,1,299,1,299,3,299,5107,8,299,1,299,1,299,1,
        299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,5120,8,
        299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,1,299,1,299,1,299,3,299,5138,8,299,1,299,1,299,
        1,299,3,299,5143,8,299,1,299,1,299,1,299,3,299,5148,8,299,1,299,
        1,299,1,299,1,299,1,299,1,299,3,299,5156,8,299,1,300,1,300,1,300,
        1,300,3,300,5162,8,300,3,300,5164,8,300,1,301,1,301,3,301,5168,8,
        301,1,301,3,301,5171,8,301,1,302,1,302,1,303,1,303,1,303,1,304,1,
        304,1,304,1,304,1,304,1,304,1,304,3,304,5185,8,304,1,305,1,305,1,
        305,1,305,1,305,1,305,1,305,1,305,3,305,5195,8,305,1,305,1,305,3,
        305,5199,8,305,1,305,1,305,1,305,1,305,5,305,5205,8,305,10,305,12,
        305,5208,9,305,3,305,5210,8,305,1,305,1,305,3,305,5214,8,305,1,305,
        1,305,1,305,1,305,1,305,1,305,1,305,1,305,3,305,5224,8,305,1,306,
        1,306,3,306,5228,8,306,1,307,1,307,1,307,5,307,5233,8,307,10,307,
        12,307,5236,9,307,1,308,1,308,3,308,5240,8,308,1,309,1,309,1,309,
        1,309,1,309,1,309,3,309,5248,8,309,1,310,1,310,1,310,3,310,5253,
        8,310,1,310,1,310,1,311,1,311,3,311,5259,8,311,1,312,1,312,1,312,
        5,312,5264,8,312,10,312,12,312,5267,9,312,1,313,1,313,3,313,5271,
        8,313,1,313,1,313,1,313,1,313,3,313,5277,8,313,1,313,1,313,1,313,
        1,313,1,313,3,313,5284,8,313,1,314,1,314,1,315,1,315,1,315,1,315,
        1,315,1,315,3,315,5294,8,315,3,315,5296,8,315,1,316,1,316,1,316,
        1,316,1,316,1,316,3,316,5304,8,316,1,317,1,317,1,317,3,317,5309,
        8,317,1,317,1,317,3,317,5313,8,317,1,317,3,317,5316,8,317,1,318,
        1,318,1,318,5,318,5321,8,318,10,318,12,318,5324,9,318,1,319,1,319,
        3,319,5328,8,319,1,319,1,319,3,319,5332,8,319,1,320,1,320,1,320,
        1,320,1,320,1,321,1,321,1,321,1,321,3,321,5343,8,321,1,322,1,322,
        1,322,1,322,1,322,1,322,3,322,5351,8,322,1,322,1,322,3,322,5355,
        8,322,1,322,3,322,5358,8,322,1,322,3,322,5361,8,322,1,323,1,323,
        3,323,5365,8,323,1,323,1,323,3,323,5369,8,323,1,323,5,323,5372,8,
        323,10,323,12,323,5375,9,323,1,324,1,324,1,324,3,324,5380,8,324,
        1,325,1,325,3,325,5384,8,325,1,325,1,325,1,326,1,326,1,327,1,327,
        1,327,1,327,1,327,3,327,5395,8,327,1,327,3,327,5398,8,327,1,327,
        3,327,5401,8,327,1,327,3,327,5404,8,327,1,328,1,328,1,328,1,328,
        1,328,1,328,3,328,5412,8,328,1,329,1,329,3,329,5416,8,329,1,329,
        5,329,5419,8,329,10,329,12,329,5422,9,329,1,330,1,330,1,330,1,330,
        1,330,3,330,5429,8,330,1,331,1,331,1,331,1,331,1,331,1,331,3,331,
        5437,8,331,1,332,1,332,1,332,1,332,3,332,5443,8,332,1,333,1,333,
        1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,
        1,333,1,333,1,333,3,333,5461,8,333,1,333,1,333,1,334,1,334,1,334,
        1,334,1,334,1,334,3,334,5471,8,334,1,334,1,334,1,334,1,334,3,334,
        5477,8,334,1,335,1,335,1,335,1,336,1,336,1,336,1,337,1,337,1,338,
        1,338,1,338,1,338,3,338,5491,8,338,1,338,3,338,5494,8,338,1,338,
        1,338,3,338,5498,8,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
        1,338,1,338,5,338,5509,8,338,10,338,12,338,5512,9,338,1,339,1,339,
        1,339,1,339,1,339,1,339,3,339,5520,8,339,1,339,1,339,1,339,1,339,
        1,339,1,339,1,339,1,339,1,339,1,339,5,339,5532,8,339,10,339,12,339,
        5535,9,339,1,340,1,340,1,341,1,341,3,341,5541,8,341,1,341,1,341,
        1,341,1,341,3,341,5547,8,341,1,341,1,341,1,341,1,341,3,341,5553,
        8,341,1,342,1,342,1,342,1,342,1,342,1,342,3,342,5561,8,342,1,342,
        1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,3,342,5572,8,342,
        1,342,1,342,3,342,5576,8,342,1,343,1,343,1,343,1,343,1,343,1,343,
        1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,
        1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,5,343,
        5605,8,343,10,343,12,343,5608,9,343,1,344,1,344,1,344,1,344,1,344,
        3,344,5615,8,344,1,344,1,344,3,344,5619,8,344,1,344,1,344,1,344,
        1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
        1,344,3,344,5636,8,344,1,344,1,344,1,344,1,344,1,344,3,344,5643,
        8,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
        1,344,1,344,3,344,5657,8,344,1,344,1,344,1,344,1,344,1,344,1,344,
        1,344,1,344,1,344,1,344,3,344,5669,8,344,1,344,1,344,1,344,1,344,
        3,344,5675,8,344,1,344,1,344,1,344,4,344,5680,8,344,11,344,12,344,
        5681,1,344,3,344,5685,8,344,1,344,1,344,1,344,1,344,1,344,1,344,
        1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
        1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
        1,344,1,344,1,344,1,344,3,344,5719,8,344,1,344,1,344,1,344,1,344,
        1,344,1,344,5,344,5727,8,344,10,344,12,344,5730,9,344,1,345,1,345,
        1,345,1,346,1,346,1,346,1,346,1,346,1,346,3,346,5741,8,346,1,347,
        1,347,1,347,3,347,5746,8,347,1,347,1,347,1,347,1,347,3,347,5752,
        8,347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,5760,8,347,1,347,
        1,347,1,347,1,347,1,347,3,347,5767,8,347,1,347,1,347,1,347,1,347,
        3,347,5773,8,347,1,347,1,347,1,347,3,347,5778,8,347,1,347,1,347,
        1,347,1,347,3,347,5784,8,347,1,347,1,347,1,347,3,347,5789,8,347,
        1,347,1,347,1,347,3,347,5794,8,347,1,347,1,347,1,347,1,347,3,347,
        5800,8,347,1,347,1,347,1,347,3,347,5805,8,347,1,347,1,347,1,347,
        1,347,3,347,5811,8,347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,
        5819,8,347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,5827,8,347,
        1,347,1,347,1,347,1,347,1,347,1,347,3,347,5835,8,347,1,347,1,347,
        1,347,1,347,1,347,1,347,3,347,5843,8,347,1,347,1,347,1,347,3,347,
        5848,8,347,1,347,1,347,1,347,1,347,3,347,5854,8,347,1,347,1,347,
        1,347,3,347,5859,8,347,1,347,1,347,3,347,5863,8,347,1,347,1,347,
        3,347,5867,8,347,1,347,1,347,1,347,3,347,5872,8,347,3,347,5874,8,
        347,1,348,1,348,1,348,1,348,1,348,1,349,1,349,1,349,1,349,1,349,
        1,349,1,349,1,349,1,349,1,349,1,349,1,349,3,349,5893,8,349,1,349,
        1,349,3,349,5897,8,349,1,349,1,349,1,349,1,349,1,349,3,349,5904,
        8,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,
        3,349,5916,8,349,1,349,3,349,5919,8,349,1,349,1,349,3,349,5923,8,
        349,1,350,1,350,1,350,3,350,5928,8,350,1,351,1,351,1,351,3,351,5933,
        8,351,1,351,1,351,3,351,5937,8,351,1,352,1,352,1,352,1,353,1,353,
        1,353,1,353,1,353,3,353,5947,8,353,1,353,1,353,1,353,1,353,1,353,
        1,353,1,353,3,353,5956,8,353,3,353,5958,8,353,1,354,3,354,5961,8,
        354,1,354,1,354,1,355,1,355,1,355,1,355,1,355,3,355,5970,8,355,1,
        356,1,356,1,356,5,356,5975,8,356,10,356,12,356,5978,9,356,1,357,
        1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,3,357,5990,
        8,357,1,357,1,357,1,357,3,357,5995,8,357,1,358,1,358,1,358,1,358,
        1,358,3,358,6002,8,358,1,358,1,358,1,358,1,358,3,358,6008,8,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        4,358,6032,8,358,11,358,12,358,6033,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,3,358,6065,8,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,3,358,6085,8,358,1,358,1,358,1,358,1,358,3,358,6091,8,358,
        1,358,1,358,3,358,6095,8,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6122,8,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,
        6134,8,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,3,358,6147,8,358,1,358,1,358,3,358,6151,8,358,1,358,
        1,358,3,358,6155,8,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6183,8,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,
        6239,8,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,
        6249,8,358,1,358,1,358,3,358,6253,8,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,3,358,6265,8,358,1,358,1,358,
        1,358,3,358,6270,8,358,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,3,359,6283,8,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,3,359,6303,8,359,1,360,1,360,3,360,6307,8,360,
        1,360,1,360,1,361,1,361,1,361,1,362,1,362,1,362,1,362,1,362,1,362,
        1,362,1,362,5,362,6322,8,362,10,362,12,362,6325,9,362,3,362,6327,
        8,362,1,363,1,363,1,363,3,363,6332,8,363,1,363,3,363,6335,8,363,
        1,364,1,364,1,365,1,365,1,365,1,365,1,365,3,365,6344,8,365,1,365,
        1,365,3,365,6348,8,365,1,365,1,365,1,365,1,365,3,365,6354,8,365,
        1,365,1,365,1,365,1,365,3,365,6360,8,365,1,365,1,365,3,365,6364,
        8,365,1,365,1,365,1,366,1,366,1,366,1,366,1,366,1,366,1,366,3,366,
        6375,8,366,1,366,1,366,1,366,1,366,3,366,6381,8,366,3,366,6383,8,
        366,1,366,1,366,1,367,1,367,1,367,3,367,6390,8,367,1,367,1,367,1,
        367,1,367,1,367,3,367,6397,8,367,1,367,1,367,3,367,6401,8,367,1,
        368,1,368,1,368,5,368,6406,8,368,10,368,12,368,6409,9,368,1,369,
        1,369,3,369,6413,8,369,1,370,1,370,3,370,6417,8,370,1,371,1,371,
        1,371,3,371,6422,8,371,1,372,1,372,3,372,6426,8,372,1,372,1,372,
        3,372,6430,8,372,1,373,1,373,1,373,3,373,6435,8,373,1,373,1,373,
        1,373,3,373,6440,8,373,3,373,6442,8,373,1,373,1,373,3,373,6446,8,
        373,1,374,1,374,1,374,1,375,1,375,1,375,1,376,1,376,1,376,1,377,
        1,377,3,377,6459,8,377,1,377,1,377,3,377,6463,8,377,1,377,3,377,
        6466,8,377,1,377,1,377,3,377,6470,8,377,1,377,1,377,3,377,6474,8,
        377,1,377,1,377,3,377,6478,8,377,1,377,1,377,1,377,3,377,6483,8,
        377,1,377,1,377,3,377,6487,8,377,1,377,1,377,3,377,6491,8,377,1,
        377,1,377,1,377,1,377,1,377,1,377,1,377,3,377,6500,8,377,3,377,6502,
        8,377,1,378,1,378,1,378,5,378,6507,8,378,10,378,12,378,6510,9,378,
        1,379,1,379,1,379,3,379,6515,8,379,1,380,1,380,1,381,1,381,1,382,
        1,382,3,382,6523,8,382,1,383,1,383,1,384,1,384,1,384,1,384,1,385,
        1,385,1,385,1,385,1,386,1,386,1,386,1,386,1,387,1,387,1,387,5,387,
        6542,8,387,10,387,12,387,6545,9,387,1,388,1,388,3,388,6549,8,388,
        1,389,1,389,1,389,5,389,6554,8,389,10,389,12,389,6557,9,389,1,390,
        1,390,1,391,1,391,1,391,1,391,1,391,1,392,1,392,1,392,1,392,1,392,
        1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,3,392,6579,8,392,
        1,393,1,393,1,393,1,394,1,394,1,394,1,394,1,394,1,395,1,395,1,395,
        1,395,1,395,1,395,3,395,6595,8,395,1,396,1,396,1,396,1,397,1,397,
        1,397,4,397,6603,8,397,11,397,12,397,6604,1,398,1,398,3,398,6609,
        8,398,1,398,1,398,1,398,4,398,6614,8,398,11,398,12,398,6615,1,398,
        3,398,6619,8,398,1,398,1,398,1,398,1,399,1,399,1,399,1,400,1,400,
        1,400,3,400,6630,8,400,1,401,1,401,1,402,1,402,1,402,1,403,1,403,
        3,403,6639,8,403,1,403,3,403,6642,8,403,1,403,1,403,1,404,1,404,
        1,404,3,404,6649,8,404,1,405,1,405,1,405,3,405,6654,8,405,1,406,
        1,406,1,406,1,406,1,406,1,407,1,407,1,407,1,407,1,407,1,407,1,407,
        1,408,1,408,1,408,1,408,1,408,1,408,1,408,1,409,1,409,1,409,4,409,
        6678,8,409,11,409,12,409,6679,1,410,1,410,1,410,1,410,3,410,6686,
        8,410,1,411,1,411,1,411,1,411,3,411,6692,8,411,1,411,1,411,3,411,
        6696,8,411,1,412,1,412,1,412,1,412,1,412,1,412,1,413,1,413,3,413,
        6706,8,413,1,414,1,414,3,414,6710,8,414,1,414,1,414,1,415,1,415,
        1,415,1,415,1,415,1,415,1,415,5,415,6721,8,415,10,415,12,415,6724,
        9,415,1,415,1,415,1,416,1,416,1,416,1,416,1,416,1,416,1,416,3,416,
        6735,8,416,1,417,1,417,1,417,1,417,1,417,1,417,1,418,1,418,1,418,
        1,419,1,419,1,419,1,420,1,420,1,420,1,420,3,420,6753,8,420,1,420,
        1,420,1,420,1,420,5,420,6759,8,420,10,420,12,420,6762,9,420,1,420,
        1,420,1,420,1,420,1,420,5,420,6769,8,420,10,420,12,420,6772,9,420,
        3,420,6774,8,420,1,421,1,421,1,421,3,421,6779,8,421,1,422,1,422,
        3,422,6783,8,422,1,422,1,422,1,422,1,423,1,423,3,423,6790,8,423,
        1,423,1,423,1,423,3,423,6795,8,423,1,424,1,424,1,425,1,425,1,425,
        3,425,6802,8,425,1,425,1,425,1,425,1,425,5,425,6808,8,425,10,425,
        12,425,6811,9,425,3,425,6813,8,425,1,426,1,426,1,426,3,426,6818,
        8,426,1,426,1,426,1,426,1,426,5,426,6824,8,426,10,426,12,426,6827,
        9,426,3,426,6829,8,426,1,427,1,427,1,427,1,427,1,428,1,428,1,428,
        1,429,1,429,1,429,1,430,1,430,3,430,6843,8,430,1,430,3,430,6846,
        8,430,1,430,1,430,1,430,1,430,1,431,1,431,1,431,1,431,1,431,1,431,
        1,431,3,431,6859,8,431,1,431,1,431,3,431,6863,8,431,3,431,6865,8,
        431,1,432,1,432,1,432,3,432,6870,8,432,1,433,1,433,1,433,3,433,6875,
        8,433,1,434,1,434,1,434,1,435,3,435,6881,8,435,1,435,1,435,1,436,
        1,436,3,436,6887,8,436,1,436,1,436,5,436,6891,8,436,10,436,12,436,
        6894,9,436,1,436,1,436,3,436,6898,8,436,1,436,3,436,6901,8,436,1,
        436,1,436,5,436,6905,8,436,10,436,12,436,6908,9,436,1,436,1,436,
        3,436,6912,8,436,1,436,3,436,6915,8,436,1,436,1,436,5,436,6919,8,
        436,10,436,12,436,6922,9,436,1,436,3,436,6925,8,436,1,436,1,436,
        1,436,1,436,3,436,6931,8,436,3,436,6933,8,436,1,436,3,436,6936,8,
        436,1,436,1,436,5,436,6940,8,436,10,436,12,436,6943,9,436,1,436,
        1,436,1,436,3,436,6948,8,436,1,436,1,436,1,436,1,436,1,436,1,436,
        3,436,6956,8,436,3,436,6958,8,436,3,436,6960,8,436,1,437,1,437,3,
        437,6964,8,437,1,438,1,438,5,438,6968,8,438,10,438,12,438,6971,9,
        438,1,438,1,438,3,438,6975,8,438,1,438,1,438,3,438,6979,8,438,1,
        438,1,438,1,438,3,438,6984,8,438,1,438,1,438,5,438,6988,8,438,10,
        438,12,438,6991,9,438,1,438,1,438,5,438,6995,8,438,10,438,12,438,
        6998,9,438,3,438,7000,8,438,3,438,7002,8,438,1,439,3,439,7005,8,
        439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,3,439,7015,8,
        439,1,439,1,439,3,439,7019,8,439,1,439,1,439,1,439,1,439,3,439,7025,
        8,439,1,439,1,439,1,439,1,439,1,439,3,439,7032,8,439,1,439,1,439,
        1,439,3,439,7037,8,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,
        1,439,1,439,1,439,1,439,1,439,3,439,7051,8,439,1,439,1,439,1,439,
        3,439,7056,8,439,1,440,1,440,1,441,1,441,1,442,1,442,3,442,7064,
        8,442,1,442,1,442,1,442,3,442,7069,8,442,1,442,1,442,3,442,7073,
        8,442,1,442,3,442,7076,8,442,1,443,1,443,1,443,3,443,7081,8,443,
        1,443,1,443,3,443,7085,8,443,1,443,1,443,1,443,1,443,1,443,1,443,
        3,443,7093,8,443,1,443,1,443,1,443,1,443,1,443,1,443,3,443,7101,
        8,443,3,443,7103,8,443,1,444,1,444,1,444,1,444,1,444,3,444,7110,
        8,444,1,445,1,445,1,445,1,445,5,445,7116,8,445,10,445,12,445,7119,
        9,445,1,445,1,445,1,446,1,446,3,446,7125,8,446,1,446,3,446,7128,
        8,446,1,447,1,447,1,447,1,447,5,447,7134,8,447,10,447,12,447,7137,
        9,447,1,447,1,447,1,448,1,448,1,448,3,448,7144,8,448,3,448,7146,
        8,448,1,449,1,449,1,449,1,449,3,449,7152,8,449,1,450,1,450,1,451,
        1,451,3,451,7158,8,451,1,452,1,452,3,452,7162,8,452,1,452,1,452,
        1,452,1,452,1,452,3,452,7169,8,452,1,453,1,453,1,454,1,454,1,454,
        1,455,1,455,1,455,1,455,3,455,7180,8,455,1,456,1,456,1,457,1,457,
        1,457,1,458,1,458,3,458,7189,8,458,1,458,3,458,7192,8,458,1,458,
        1,458,1,458,3,458,7197,8,458,3,458,7199,8,458,1,458,3,458,7202,8,
        458,1,458,3,458,7205,8,458,1,458,1,458,3,458,7209,8,458,1,458,3,
        458,7212,8,458,1,458,1,458,3,458,7216,8,458,1,458,1,458,1,458,3,
        458,7221,8,458,1,458,3,458,7224,8,458,1,458,1,458,3,458,7228,8,458,
        1,458,3,458,7231,8,458,1,458,1,458,3,458,7235,8,458,1,458,1,458,
        1,458,3,458,7240,8,458,1,458,1,458,3,458,7244,8,458,1,458,1,458,
        1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,3,458,7256,8,458,
        1,458,1,458,3,458,7260,8,458,1,458,1,458,1,458,1,458,3,458,7266,
        8,458,1,458,3,458,7269,8,458,1,458,1,458,1,458,3,458,7274,8,458,
        1,458,1,458,3,458,7278,8,458,1,458,1,458,3,458,7282,8,458,1,458,
        1,458,1,458,3,458,7287,8,458,1,458,1,458,1,458,1,458,1,458,1,458,
        1,458,3,458,7296,8,458,1,458,3,458,7299,8,458,1,458,1,458,3,458,
        7303,8,458,1,458,1,458,3,458,7307,8,458,1,458,3,458,7310,8,458,1,
        458,1,458,3,458,7314,8,458,1,458,1,458,3,458,7318,8,458,1,458,1,
        458,1,458,3,458,7323,8,458,1,458,1,458,1,458,3,458,7328,8,458,1,
        458,1,458,1,458,1,458,3,458,7334,8,458,1,459,1,459,1,459,3,459,7339,
        8,459,1,460,1,460,1,460,3,460,7344,8,460,3,460,7346,8,460,1,461,
        1,461,1,461,3,461,7351,8,461,1,461,1,461,1,462,4,462,7356,8,462,
        11,462,12,462,7357,1,463,1,463,1,463,1,463,1,463,1,463,3,463,7366,
        8,463,1,463,1,463,1,463,1,463,3,463,7372,8,463,3,463,7374,8,463,
        1,464,1,464,3,464,7378,8,464,1,464,1,464,3,464,7382,8,464,1,465,
        1,465,3,465,7386,8,465,1,465,1,465,3,465,7390,8,465,1,466,1,466,
        1,466,1,466,1,467,1,467,1,467,1,467,1,468,1,468,1,468,1,468,3,468,
        7404,8,468,1,469,1,469,1,469,1,469,1,469,3,469,7411,8,469,1,470,
        1,470,3,470,7415,8,470,1,470,5,470,7418,8,470,10,470,12,470,7421,
        9,470,1,471,4,471,7424,8,471,11,471,12,471,7425,1,472,1,472,3,472,
        7430,8,472,1,472,1,472,1,472,1,472,3,472,7436,8,472,1,472,1,472,
        3,472,7440,8,472,1,472,1,472,3,472,7444,8,472,1,472,1,472,1,472,
        3,472,7449,8,472,1,472,1,472,1,472,3,472,7454,8,472,1,472,1,472,
        1,472,3,472,7459,8,472,1,472,1,472,1,472,3,472,7464,8,472,1,472,
        1,472,1,472,1,472,3,472,7470,8,472,1,472,1,472,1,472,1,472,3,472,
        7476,8,472,1,472,1,472,1,472,3,472,7481,8,472,1,472,1,472,1,472,
        3,472,7486,8,472,1,472,1,472,1,472,3,472,7491,8,472,1,472,1,472,
        1,472,3,472,7496,8,472,1,472,1,472,1,472,3,472,7501,8,472,1,472,
        1,472,1,472,3,472,7506,8,472,1,472,1,472,1,472,3,472,7511,8,472,
        1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,3,472,7521,8,472,
        1,472,1,472,1,472,1,472,3,472,7527,8,472,1,472,1,472,1,472,1,472,
        3,472,7533,8,472,1,472,1,472,1,472,1,472,3,472,7539,8,472,1,472,
        3,472,7542,8,472,1,472,1,472,1,472,1,472,1,472,3,472,7549,8,472,
        1,472,1,472,1,472,3,472,7554,8,472,1,472,3,472,7557,8,472,1,473,
        1,473,3,473,7561,8,473,1,474,3,474,7564,8,474,1,474,1,474,3,474,
        7568,8,474,1,474,1,474,1,475,3,475,7573,8,475,1,475,1,475,3,475,
        7577,8,475,1,475,1,475,1,476,3,476,7582,8,476,1,476,1,476,3,476,
        7586,8,476,1,476,1,476,1,477,1,477,1,477,1,477,1,477,3,477,7595,
        8,477,1,477,3,477,7598,8,477,1,477,3,477,7601,8,477,1,478,3,478,
        7604,8,478,1,478,1,478,3,478,7608,8,478,1,478,1,478,3,478,7612,8,
        478,1,478,1,478,3,478,7616,8,478,1,478,1,478,1,478,1,478,1,478,1,
        478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,3,478,7631,8,478,1,
        478,3,478,7634,8,478,3,478,7636,8,478,1,479,1,479,1,479,3,479,7641,
        8,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,3,479,7650,8,479,
        1,479,3,479,7653,8,479,1,479,1,479,3,479,7657,8,479,1,480,1,480,
        1,480,1,480,1,480,1,481,1,481,1,481,1,481,5,481,7668,8,481,10,481,
        12,481,7671,9,481,1,481,1,481,1,482,1,482,1,482,1,482,1,482,1,482,
        1,482,3,482,7682,8,482,1,482,1,482,1,482,3,482,7687,8,482,1,482,
        5,482,7690,8,482,10,482,12,482,7693,9,482,1,482,1,482,1,482,1,482,
        5,482,7699,8,482,10,482,12,482,7702,9,482,1,482,1,482,3,482,7706,
        8,482,1,483,1,483,1,483,1,483,1,483,5,483,7713,8,483,10,483,12,483,
        7716,9,483,1,483,1,483,3,483,7720,8,483,1,484,1,484,3,484,7724,8,
        484,1,484,1,484,3,484,7728,8,484,1,484,1,484,3,484,7732,8,484,1,
        484,1,484,1,484,3,484,7737,8,484,1,484,1,484,1,484,3,484,7742,8,
        484,1,484,1,484,1,484,1,484,3,484,7748,8,484,1,484,1,484,1,484,3,
        484,7753,8,484,1,484,3,484,7756,8,484,1,485,1,485,1,485,5,485,7761,
        8,485,10,485,12,485,7764,9,485,1,486,1,486,1,486,1,486,5,486,7770,
        8,486,10,486,12,486,7773,9,486,1,486,1,486,1,487,1,487,3,487,7779,
        8,487,1,488,1,488,1,488,1,488,1,489,1,489,1,489,1,490,1,490,1,490,
        1,490,1,491,3,491,7793,8,491,1,491,1,491,1,492,1,492,1,492,1,493,
        1,493,1,493,1,494,1,494,3,494,7805,8,494,1,495,1,495,1,495,1,495,
        1,495,1,495,1,496,1,496,1,496,5,496,7816,8,496,10,496,12,496,7819,
        9,496,1,497,1,497,1,497,5,497,7824,8,497,10,497,12,497,7827,9,497,
        1,498,1,498,1,498,1,498,3,498,7833,8,498,1,499,1,499,1,499,1,500,
        1,500,4,500,7840,8,500,11,500,12,500,7841,1,501,1,501,1,501,1,501,
        3,501,7848,8,501,1,501,1,501,1,501,1,501,1,501,1,501,3,501,7856,
        8,501,1,502,1,502,4,502,7860,8,502,11,502,12,502,7861,1,503,1,503,
        1,503,1,503,1,504,1,504,1,504,5,504,7871,8,504,10,504,12,504,7874,
        9,504,1,505,1,505,1,505,5,505,7879,8,505,10,505,12,505,7882,9,505,
        1,506,1,506,1,506,5,506,7887,8,506,10,506,12,506,7890,9,506,1,507,
        1,507,1,507,1,507,1,507,3,507,7897,8,507,1,507,1,507,1,507,1,507,
        1,507,1,507,1,507,1,507,3,507,7907,8,507,1,507,1,507,1,507,3,507,
        7912,8,507,1,507,1,507,1,507,3,507,7917,8,507,3,507,7919,8,507,1,
        508,1,508,1,508,1,508,3,508,7925,8,508,1,508,1,508,1,508,1,508,3,
        508,7931,8,508,1,508,3,508,7934,8,508,1,508,1,508,1,508,1,508,1,
        508,3,508,7941,8,508,3,508,7943,8,508,3,508,7945,8,508,1,508,3,508,
        7948,8,508,3,508,7950,8,508,1,509,1,509,1,509,1,509,1,510,1,510,
        1,510,1,510,1,511,1,511,1,511,1,512,1,512,1,512,1,512,3,512,7967,
        8,512,1,513,1,513,1,513,3,513,7972,8,513,3,513,7974,8,513,1,514,
        1,514,1,514,1,515,1,515,3,515,7981,8,515,1,516,1,516,1,517,1,517,
        1,518,1,518,1,518,1,518,1,519,1,519,1,519,3,519,7994,8,519,3,519,
        7996,8,519,1,520,1,520,1,520,1,520,3,520,8002,8,520,1,521,1,521,
        1,522,1,522,1,522,1,522,5,522,8010,8,522,10,522,12,522,8013,9,522,
        1,522,1,522,1,523,1,523,1,524,1,524,3,524,8021,8,524,1,525,1,525,
        1,526,1,526,1,527,1,527,1,527,1,527,1,527,3,527,8032,8,527,1,527,
        1,527,1,528,1,528,1,529,1,529,1,530,1,530,1,531,1,531,1,532,1,532,
        1,533,1,533,1,534,1,534,1,535,1,535,1,536,1,536,3,536,8054,8,536,
        1,537,1,537,3,537,8058,8,537,1,538,1,538,1,539,1,539,1,540,1,540,
        1,541,1,541,1,542,1,542,1,543,1,543,1,544,1,544,1,545,1,545,1,546,
        1,546,1,547,1,547,1,548,1,548,3,548,8082,8,548,1,549,1,549,1,549,
        1,550,1,550,1,550,1,550,1,550,1,550,3,550,8093,8,550,3,550,8095,
        8,550,1,551,1,551,3,551,8099,8,551,1,552,1,552,1,552,5,552,8104,
        8,552,10,552,12,552,8107,9,552,1,553,1,553,1,553,5,553,8112,8,553,
        10,553,12,553,8115,9,553,1,554,1,554,1,555,1,555,3,555,8121,8,555,
        1,556,1,556,1,557,1,557,3,557,8127,8,557,1,558,1,558,1,559,1,559,
        1,560,1,560,1,561,1,561,1,562,1,562,1,563,1,563,1,563,3,563,8142,
        8,563,1,564,1,564,3,564,8146,8,564,1,565,1,565,1,565,5,565,8151,
        8,565,10,565,12,565,8154,9,565,1,566,1,566,1,566,1,566,1,567,1,567,
        3,567,8162,8,567,1,568,1,568,1,568,3,568,8167,8,568,3,568,8169,8,
        568,1,568,1,568,1,568,1,568,3,568,8175,8,568,1,569,1,569,1,569,1,
        570,1,570,1,571,1,571,1,572,1,572,1,573,1,573,1,573,1,573,1,573,
        3,573,8191,8,573,1,574,1,574,1,574,1,574,1,574,1,574,3,574,8199,
        8,574,1,574,3,574,8202,8,574,1,575,1,575,1,575,1,575,1,575,3,575,
        8209,8,575,1,576,1,576,1,576,1,576,5,576,8215,8,576,10,576,12,576,
        8218,9,576,1,576,1,576,1,577,1,577,1,577,3,577,8225,8,577,1,578,
        1,578,1,578,3,578,8230,8,578,1,579,1,579,1,579,3,579,8235,8,579,
        1,580,3,580,8238,8,580,1,580,1,580,3,580,8242,8,580,1,580,5,580,
        8245,8,580,10,580,12,580,8248,9,580,1,581,1,581,1,582,1,582,1,582,
        5,582,8255,8,582,10,582,12,582,8258,9,582,1,583,1,583,1,584,1,584,
        1,585,1,585,1,586,1,586,1,586,1,586,1,586,1,586,3,586,8272,8,586,
        1,587,1,587,3,587,8276,8,587,1,588,1,588,1,589,1,589,1,589,1,589,
        1,589,1,589,1,590,1,590,3,590,8288,8,590,1,591,1,591,3,591,8292,
        8,591,1,592,1,592,3,592,8296,8,592,1,593,1,593,3,593,8300,8,593,
        1,594,1,594,1,594,1,595,1,595,1,596,1,596,1,597,1,597,1,597,1,597,
        1,597,1,597,3,597,8315,8,597,1,598,1,598,1,598,1,598,1,598,1,598,
        1,598,1,598,1,598,1,598,3,598,8327,8,598,1,599,1,599,1,599,1,599,
        1,599,1,599,1,599,1,599,3,599,8337,8,599,1,599,1,599,1,599,1,599,
        1,599,3,599,8344,8,599,3,599,8346,8,599,1,600,1,600,1,601,1,601,
        1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,
        3,602,8363,8,602,1,602,1,602,1,602,3,602,8368,8,602,3,602,8370,8,
        602,1,603,1,603,1,604,1,604,1,604,3,604,8377,8,604,1,605,1,605,1,
        605,3,605,8382,8,605,1,605,1,605,1,605,3,605,8387,8,605,3,605,8389,
        8,605,1,606,1,606,1,606,1,606,3,606,8395,8,606,1,607,1,607,1,608,
        1,608,1,608,1,608,1,608,3,608,8404,8,608,1,609,1,609,1,609,1,609,
        1,609,1,609,1,609,1,609,1,609,3,609,8415,8,609,1,609,0,4,676,678,
        686,688,610,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
        344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
        376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
        408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,
        440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
        472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,
        504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,
        536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,
        568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,
        600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,
        632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,
        664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,
        696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,
        728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,
        760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,
        792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,
        824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,
        856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,
        888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,
        920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,
        952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,
        984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,
        1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,
        1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,
        1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,
        1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,
        1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,
        1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,
        1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,
        1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,1218,0,146,
        1,0,722,723,2,0,17,17,590,590,2,0,49,49,471,471,1,0,645,646,2,0,
        4,4,148,148,2,0,434,434,436,436,1,0,724,725,2,0,50,50,284,284,2,
        0,232,232,458,458,4,0,126,126,249,249,437,437,556,556,2,0,130,130,
        250,250,2,0,440,440,603,603,2,0,441,441,604,604,2,0,374,374,638,
        638,3,0,335,335,578,578,602,602,2,0,6,6,28,28,3,0,133,133,242,242,
        614,614,2,0,197,197,415,415,2,0,571,571,574,574,3,0,232,232,295,
        295,431,431,2,0,191,191,367,367,4,0,191,191,268,268,367,367,419,
        419,2,0,750,750,753,756,3,0,131,131,223,223,295,295,1,0,626,627,
        2,0,82,82,295,295,2,0,112,112,653,653,2,0,278,278,484,484,2,0,131,
        131,295,295,7,0,10,10,143,143,223,223,531,532,534,534,536,536,555,
        555,2,0,381,381,773,773,2,0,747,749,787,787,3,0,432,432,484,484,
        683,683,2,0,18,18,134,134,2,0,272,272,478,478,2,0,98,98,239,239,
        2,0,10,10,143,143,2,0,198,198,232,232,2,0,236,236,265,265,2,0,386,
        386,649,649,2,0,29,29,543,543,2,0,261,261,472,472,2,0,32,32,316,
        316,2,0,383,383,743,744,2,0,528,528,530,530,2,0,449,449,538,538,
        2,0,543,543,552,552,2,0,123,123,148,148,3,0,369,369,539,539,650,
        650,2,0,287,287,611,611,2,0,128,128,719,719,3,0,206,206,422,422,
        574,574,4,0,242,242,443,443,497,497,614,614,13,0,133,133,148,148,
        170,170,173,173,188,188,236,236,423,423,427,427,451,451,510,510,
        565,565,594,594,616,616,4,0,483,483,572,572,618,618,636,636,2,0,
        65,65,514,514,2,0,97,97,148,148,2,0,128,128,369,369,2,0,180,180,
        431,431,5,0,56,56,180,180,184,184,333,333,431,431,3,0,180,180,431,
        431,619,619,2,0,76,76,601,601,4,0,10,10,32,32,128,128,383,383,2,
        0,487,487,710,710,3,0,289,289,354,354,547,547,2,0,203,203,251,251,
        2,0,33,33,446,446,2,0,235,236,263,263,2,0,166,166,639,639,2,0,547,
        547,631,631,6,0,10,10,96,96,256,256,334,334,522,522,567,567,2,0,
        84,84,430,430,5,0,136,136,225,225,421,421,547,547,617,617,5,0,32,
        32,163,163,165,165,208,208,515,515,2,0,618,618,710,710,2,0,140,140,
        156,156,2,0,134,135,178,178,3,0,183,183,596,596,610,610,2,0,15,15,
        767,767,2,0,394,394,770,770,2,0,10,10,16,16,2,0,750,750,752,757,
        3,0,145,145,349,349,760,762,1,0,758,759,1,0,765,766,2,0,758,759,
        764,764,2,0,35,36,38,38,4,0,678,679,692,692,694,694,696,696,2,0,
        684,684,686,686,2,0,681,681,685,685,2,0,191,191,268,268,2,0,232,
        232,695,695,2,0,5,5,558,558,1,0,114,115,1,0,584,585,4,0,113,113,
        116,116,583,583,586,586,2,0,371,371,745,745,2,0,745,745,763,763,
        5,0,118,121,226,228,341,342,494,494,655,655,9,0,122,122,229,229,
        337,337,343,343,350,350,429,429,495,495,640,640,656,656,3,0,92,92,
        175,175,605,605,2,0,377,377,485,485,10,0,53,53,64,64,73,73,87,89,
        107,107,336,336,355,355,492,492,557,557,576,576,2,0,554,554,637,
        637,3,0,128,128,152,152,192,192,3,0,128,128,142,142,334,334,3,0,
        204,204,402,402,513,513,3,0,44,44,220,220,488,488,1,0,661,662,2,
        0,599,599,621,621,5,0,31,31,249,249,331,331,516,516,588,588,4,0,
        126,126,192,192,195,195,378,378,1,0,41,42,2,0,290,290,330,330,4,
        0,211,212,279,279,351,353,411,412,3,0,512,512,612,612,657,657,1,
        0,544,546,2,0,61,61,575,575,6,0,78,78,80,80,128,128,152,152,192,
        192,442,442,3,0,191,191,268,268,373,373,2,0,142,142,334,334,2,0,
        280,280,432,432,2,0,323,323,344,344,2,0,112,112,236,236,3,0,240,
        240,251,251,397,397,2,0,541,541,579,579,2,0,380,380,385,385,2,0,
        284,284,375,375,2,0,795,795,797,797,3,0,747,749,788,788,790,791,
        2,0,747,749,788,788,2,0,747,749,790,791,1,0,788,789,2,0,183,183,
        596,596,2,0,376,376,786,786,1,0,750,751,5,0,214,214,284,284,502,
        502,658,658,673,673,3,0,173,173,510,510,714,714,32,0,19,19,29,29,
        46,47,58,58,61,61,75,75,77,77,90,90,123,123,147,147,159,159,196,
        197,219,219,222,222,234,234,245,245,267,267,373,373,415,415,417,
        417,455,455,468,468,480,480,489,489,512,512,514,514,543,543,552,
        552,597,597,606,607,651,651,677,677,9,0,170,170,188,188,369,369,
        423,423,427,427,451,451,459,459,565,565,709,709,161,0,2,3,5,9,12,
        12,16,16,21,21,23,27,33,33,37,37,40,42,44,44,50,50,53,54,56,57,63,
        68,70,71,73,74,76,76,78,82,84,85,87,89,91,91,96,96,101,101,107,107,
        111,113,116,116,122,122,129,130,132,132,138,142,150,152,156,156,
        158,158,160,160,162,166,168,169,171,172,176,177,179,181,184,185,
        189,192,201,202,204,204,208,208,210,213,216,216,220,220,224,225,
        229,230,233,233,235,235,238,238,243,244,250,250,255,256,258,259,
        262,262,264,264,268,268,270,270,273,274,279,280,286,286,288,289,
        296,296,298,314,316,319,321,324,327,328,333,337,340,340,343,344,
        346,346,348,348,350,358,361,361,363,363,365,368,374,374,377,377,
        379,379,381,381,384,384,386,387,390,390,398,404,406,413,418,419,
        421,421,424,426,429,431,434,434,438,439,441,442,445,449,452,452,
        454,454,456,456,460,466,470,470,472,474,476,476,481,483,485,486,
        488,488,490,490,492,492,495,496,500,501,503,503,508,508,513,513,
        515,515,517,517,519,522,528,530,532,532,535,535,538,538,540,540,
        542,542,544,547,553,553,556,561,566,568,571,572,575,578,580,581,
        583,586,592,593,598,599,601,604,610,610,613,613,615,615,617,619,
        625,625,627,627,631,631,636,636,638,641,646,648,650,650,652,653,
        656,656,659,662,664,664,669,671,674,675,680,680,682,682,689,690,
        693,693,695,695,697,698,702,708,711,713,715,725,727,730,732,732,
        735,738,4,0,583,583,586,586,731,731,733,744,54,0,2,2,12,12,19,19,
        27,27,29,29,46,47,58,58,61,61,66,66,75,75,77,77,90,90,123,123,147,
        147,159,159,196,197,201,201,210,210,219,219,222,222,224,224,245,
        245,267,267,373,373,387,387,390,390,398,398,401,401,405,405,413,
        413,415,415,417,417,452,452,455,455,468,468,470,470,480,480,489,
        489,496,496,503,503,512,512,514,514,519,520,543,543,552,552,597,
        597,606,607,615,615,648,648,651,651,659,659,661,662,677,677,720,
        723,155,0,3,3,5,9,13,13,16,16,21,26,33,33,37,37,40,42,44,44,50,50,
        53,54,56,57,63,65,67,68,70,71,73,74,76,76,78,82,84,85,87,89,91,91,
        93,93,96,96,101,101,107,107,111,113,116,116,122,122,129,130,132,
        132,136,136,138,142,150,152,156,156,158,158,160,160,162,166,168,
        169,171,171,176,176,179,181,184,185,189,192,202,202,204,204,208,
        208,211,214,216,216,220,220,225,225,229,230,233,233,235,235,238,
        238,243,244,250,250,255,256,258,259,262,262,264,264,268,268,270,
        270,273,274,279,280,284,284,286,286,288,289,296,296,298,314,316,
        319,321,325,327,328,333,337,340,340,343,344,346,346,348,348,350,
        358,361,361,363,363,365,368,374,374,377,377,379,379,381,382,384,
        384,399,400,402,404,406,412,418,419,421,421,424,426,429,431,434,
        434,438,442,445,449,454,454,456,456,460,466,472,474,476,476,481,
        483,485,486,488,488,490,490,492,492,495,495,500,502,508,508,513,
        513,515,515,517,517,521,522,528,530,532,533,535,535,538,538,540,
        540,542,542,544,547,553,553,556,561,565,568,571,572,575,578,580,
        581,583,586,592,593,598,604,610,610,613,613,617,619,627,627,631,
        631,636,636,638,641,647,647,650,650,652,653,656,656,664,664,669,
        671,674,676,680,680,682,682,689,690,693,693,695,695,697,698,702,
        708,711,712,716,717,719,719,724,725,727,728,5,0,99,99,206,206,234,
        234,484,484,487,487,6,0,172,172,177,177,386,386,565,565,625,625,
        646,646,9536,0,1232,1,0,0,0,2,1268,1,0,0,0,4,1270,1,0,0,0,6,1299,
        1,0,0,0,8,1314,1,0,0,0,10,1352,1,0,0,0,12,1361,1,0,0,0,14,1374,1,
        0,0,0,16,1376,1,0,0,0,18,1381,1,0,0,0,20,1405,1,0,0,0,22,1414,1,
        0,0,0,24,1416,1,0,0,0,26,1431,1,0,0,0,28,1529,1,0,0,0,30,1533,1,
        0,0,0,32,1549,1,0,0,0,34,1696,1,0,0,0,36,1701,1,0,0,0,38,1703,1,
        0,0,0,40,1705,1,0,0,0,42,1719,1,0,0,0,44,1727,1,0,0,0,46,1743,1,
        0,0,0,48,1745,1,0,0,0,50,1749,1,0,0,0,52,1754,1,0,0,0,54,1756,1,
        0,0,0,56,1793,1,0,0,0,58,1801,1,0,0,0,60,1811,1,0,0,0,62,1813,1,
        0,0,0,64,1833,1,0,0,0,66,1842,1,0,0,0,68,1845,1,0,0,0,70,1858,1,
        0,0,0,72,1863,1,0,0,0,74,1867,1,0,0,0,76,1874,1,0,0,0,78,1895,1,
        0,0,0,80,1910,1,0,0,0,82,1913,1,0,0,0,84,1944,1,0,0,0,86,1954,1,
        0,0,0,88,1957,1,0,0,0,90,1966,1,0,0,0,92,1968,1,0,0,0,94,1980,1,
        0,0,0,96,2005,1,0,0,0,98,2032,1,0,0,0,100,2046,1,0,0,0,102,2049,
        1,0,0,0,104,2070,1,0,0,0,106,2073,1,0,0,0,108,2130,1,0,0,0,110,2132,
        1,0,0,0,112,2136,1,0,0,0,114,2145,1,0,0,0,116,2161,1,0,0,0,118,2163,
        1,0,0,0,120,2171,1,0,0,0,122,2197,1,0,0,0,124,2199,1,0,0,0,126,2211,
        1,0,0,0,128,2226,1,0,0,0,130,2228,1,0,0,0,132,2231,1,0,0,0,134,2253,
        1,0,0,0,136,2255,1,0,0,0,138,2261,1,0,0,0,140,2267,1,0,0,0,142,2273,
        1,0,0,0,144,2279,1,0,0,0,146,2285,1,0,0,0,148,2292,1,0,0,0,150,2300,
        1,0,0,0,152,2302,1,0,0,0,154,2308,1,0,0,0,156,2314,1,0,0,0,158,2321,
        1,0,0,0,160,2339,1,0,0,0,162,2341,1,0,0,0,164,2345,1,0,0,0,166,2350,
        1,0,0,0,168,2366,1,0,0,0,170,2371,1,0,0,0,172,2404,1,0,0,0,174,2435,
        1,0,0,0,176,2452,1,0,0,0,178,2454,1,0,0,0,180,2474,1,0,0,0,182,2480,
        1,0,0,0,184,2486,1,0,0,0,186,2492,1,0,0,0,188,2499,1,0,0,0,190,2508,
        1,0,0,0,192,2525,1,0,0,0,194,2527,1,0,0,0,196,2534,1,0,0,0,198,2544,
        1,0,0,0,200,2558,1,0,0,0,202,2564,1,0,0,0,204,2572,1,0,0,0,206,2578,
        1,0,0,0,208,2586,1,0,0,0,210,2592,1,0,0,0,212,2602,1,0,0,0,214,2606,
        1,0,0,0,216,2612,1,0,0,0,218,2617,1,0,0,0,220,2628,1,0,0,0,222,2671,
        1,0,0,0,224,2677,1,0,0,0,226,2679,1,0,0,0,228,2686,1,0,0,0,230,2716,
        1,0,0,0,232,2718,1,0,0,0,234,2749,1,0,0,0,236,2756,1,0,0,0,238,2760,
        1,0,0,0,240,2768,1,0,0,0,242,2778,1,0,0,0,244,2780,1,0,0,0,246,2798,
        1,0,0,0,248,2810,1,0,0,0,250,2815,1,0,0,0,252,2821,1,0,0,0,254,2854,
        1,0,0,0,256,2856,1,0,0,0,258,2864,1,0,0,0,260,2873,1,0,0,0,262,2881,
        1,0,0,0,264,2893,1,0,0,0,266,2916,1,0,0,0,268,2930,1,0,0,0,270,2934,
        1,0,0,0,272,2966,1,0,0,0,274,2981,1,0,0,0,276,2996,1,0,0,0,278,2998,
        1,0,0,0,280,3025,1,0,0,0,282,3027,1,0,0,0,284,3029,1,0,0,0,286,3032,
        1,0,0,0,288,3035,1,0,0,0,290,3042,1,0,0,0,292,3044,1,0,0,0,294,3074,
        1,0,0,0,296,3086,1,0,0,0,298,3089,1,0,0,0,300,3098,1,0,0,0,302,3102,
        1,0,0,0,304,3107,1,0,0,0,306,3120,1,0,0,0,308,3125,1,0,0,0,310,3129,
        1,0,0,0,312,3145,1,0,0,0,314,3147,1,0,0,0,316,3165,1,0,0,0,318,3167,
        1,0,0,0,320,3176,1,0,0,0,322,3188,1,0,0,0,324,3195,1,0,0,0,326,3206,
        1,0,0,0,328,3208,1,0,0,0,330,3212,1,0,0,0,332,3214,1,0,0,0,334,3219,
        1,0,0,0,336,3227,1,0,0,0,338,3236,1,0,0,0,340,3239,1,0,0,0,342,3254,
        1,0,0,0,344,3257,1,0,0,0,346,3276,1,0,0,0,348,3281,1,0,0,0,350,3286,
        1,0,0,0,352,3290,1,0,0,0,354,3304,1,0,0,0,356,3307,1,0,0,0,358,3313,
        1,0,0,0,360,3326,1,0,0,0,362,3334,1,0,0,0,364,3360,1,0,0,0,366,3373,
        1,0,0,0,368,3380,1,0,0,0,370,3382,1,0,0,0,372,3394,1,0,0,0,374,3396,
        1,0,0,0,376,3406,1,0,0,0,378,3430,1,0,0,0,380,3432,1,0,0,0,382,3439,
        1,0,0,0,384,3449,1,0,0,0,386,3484,1,0,0,0,388,3494,1,0,0,0,390,3496,
        1,0,0,0,392,3500,1,0,0,0,394,3508,1,0,0,0,396,3510,1,0,0,0,398,3515,
        1,0,0,0,400,3519,1,0,0,0,402,3547,1,0,0,0,404,3549,1,0,0,0,406,3551,
        1,0,0,0,408,3559,1,0,0,0,410,3561,1,0,0,0,412,3569,1,0,0,0,414,3579,
        1,0,0,0,416,3583,1,0,0,0,418,3608,1,0,0,0,420,3635,1,0,0,0,422,3637,
        1,0,0,0,424,3647,1,0,0,0,426,3678,1,0,0,0,428,3702,1,0,0,0,430,3704,
        1,0,0,0,432,3718,1,0,0,0,434,3720,1,0,0,0,436,3755,1,0,0,0,438,3757,
        1,0,0,0,440,3799,1,0,0,0,442,3815,1,0,0,0,444,3817,1,0,0,0,446,3825,
        1,0,0,0,448,3834,1,0,0,0,450,3841,1,0,0,0,452,3940,1,0,0,0,454,3944,
        1,0,0,0,456,3946,1,0,0,0,458,3950,1,0,0,0,460,3964,1,0,0,0,462,3966,
        1,0,0,0,464,3979,1,0,0,0,466,4043,1,0,0,0,468,4045,1,0,0,0,470,4053,
        1,0,0,0,472,4061,1,0,0,0,474,4069,1,0,0,0,476,4071,1,0,0,0,478,4100,
        1,0,0,0,480,4109,1,0,0,0,482,4140,1,0,0,0,484,4142,1,0,0,0,486,4150,
        1,0,0,0,488,4152,1,0,0,0,490,4166,1,0,0,0,492,4168,1,0,0,0,494,4174,
        1,0,0,0,496,4182,1,0,0,0,498,4219,1,0,0,0,500,4221,1,0,0,0,502,4236,
        1,0,0,0,504,4238,1,0,0,0,506,4300,1,0,0,0,508,4302,1,0,0,0,510,4305,
        1,0,0,0,512,4330,1,0,0,0,514,4339,1,0,0,0,516,4341,1,0,0,0,518,4346,
        1,0,0,0,520,4392,1,0,0,0,522,4394,1,0,0,0,524,4402,1,0,0,0,526,4451,
        1,0,0,0,528,4464,1,0,0,0,530,4466,1,0,0,0,532,4469,1,0,0,0,534,4480,
        1,0,0,0,536,4485,1,0,0,0,538,4488,1,0,0,0,540,4503,1,0,0,0,542,4553,
        1,0,0,0,544,4555,1,0,0,0,546,4557,1,0,0,0,548,4606,1,0,0,0,550,4624,
        1,0,0,0,552,4626,1,0,0,0,554,4642,1,0,0,0,556,4654,1,0,0,0,558,4679,
        1,0,0,0,560,4681,1,0,0,0,562,4689,1,0,0,0,564,4738,1,0,0,0,566,4753,
        1,0,0,0,568,4758,1,0,0,0,570,4760,1,0,0,0,572,4784,1,0,0,0,574,4786,
        1,0,0,0,576,4845,1,0,0,0,578,4856,1,0,0,0,580,4858,1,0,0,0,582,4861,
        1,0,0,0,584,4874,1,0,0,0,586,4902,1,0,0,0,588,4910,1,0,0,0,590,4912,
        1,0,0,0,592,4923,1,0,0,0,594,4925,1,0,0,0,596,4933,1,0,0,0,598,4935,
        1,0,0,0,600,5163,1,0,0,0,602,5170,1,0,0,0,604,5172,1,0,0,0,606,5174,
        1,0,0,0,608,5184,1,0,0,0,610,5223,1,0,0,0,612,5227,1,0,0,0,614,5229,
        1,0,0,0,616,5237,1,0,0,0,618,5241,1,0,0,0,620,5249,1,0,0,0,622,5258,
        1,0,0,0,624,5260,1,0,0,0,626,5283,1,0,0,0,628,5285,1,0,0,0,630,5287,
        1,0,0,0,632,5303,1,0,0,0,634,5315,1,0,0,0,636,5317,1,0,0,0,638,5325,
        1,0,0,0,640,5333,1,0,0,0,642,5342,1,0,0,0,644,5344,1,0,0,0,646,5362,
        1,0,0,0,648,5376,1,0,0,0,650,5381,1,0,0,0,652,5387,1,0,0,0,654,5389,
        1,0,0,0,656,5405,1,0,0,0,658,5413,1,0,0,0,660,5423,1,0,0,0,662,5436,
        1,0,0,0,664,5438,1,0,0,0,666,5444,1,0,0,0,668,5476,1,0,0,0,670,5478,
        1,0,0,0,672,5481,1,0,0,0,674,5484,1,0,0,0,676,5497,1,0,0,0,678,5513,
        1,0,0,0,680,5536,1,0,0,0,682,5538,1,0,0,0,684,5575,1,0,0,0,686,5577,
        1,0,0,0,688,5718,1,0,0,0,690,5731,1,0,0,0,692,5740,1,0,0,0,694,5873,
        1,0,0,0,696,5875,1,0,0,0,698,5922,1,0,0,0,700,5924,1,0,0,0,702,5929,
        1,0,0,0,704,5938,1,0,0,0,706,5957,1,0,0,0,708,5960,1,0,0,0,710,5969,
        1,0,0,0,712,5971,1,0,0,0,714,5994,1,0,0,0,716,6269,1,0,0,0,718,6302,
        1,0,0,0,720,6304,1,0,0,0,722,6310,1,0,0,0,724,6313,1,0,0,0,726,6328,
        1,0,0,0,728,6336,1,0,0,0,730,6338,1,0,0,0,732,6367,1,0,0,0,734,6400,
        1,0,0,0,736,6402,1,0,0,0,738,6410,1,0,0,0,740,6416,1,0,0,0,742,6421,
        1,0,0,0,744,6423,1,0,0,0,746,6445,1,0,0,0,748,6447,1,0,0,0,750,6450,
        1,0,0,0,752,6453,1,0,0,0,754,6501,1,0,0,0,756,6503,1,0,0,0,758,6514,
        1,0,0,0,760,6516,1,0,0,0,762,6518,1,0,0,0,764,6522,1,0,0,0,766,6524,
        1,0,0,0,768,6526,1,0,0,0,770,6530,1,0,0,0,772,6534,1,0,0,0,774,6538,
        1,0,0,0,776,6546,1,0,0,0,778,6550,1,0,0,0,780,6558,1,0,0,0,782,6560,
        1,0,0,0,784,6578,1,0,0,0,786,6580,1,0,0,0,788,6583,1,0,0,0,790,6588,
        1,0,0,0,792,6596,1,0,0,0,794,6602,1,0,0,0,796,6606,1,0,0,0,798,6623,
        1,0,0,0,800,6626,1,0,0,0,802,6631,1,0,0,0,804,6633,1,0,0,0,806,6636,
        1,0,0,0,808,6645,1,0,0,0,810,6653,1,0,0,0,812,6655,1,0,0,0,814,6660,
        1,0,0,0,816,6667,1,0,0,0,818,6677,1,0,0,0,820,6685,1,0,0,0,822,6687,
        1,0,0,0,824,6697,1,0,0,0,826,6705,1,0,0,0,828,6707,1,0,0,0,830,6713,
        1,0,0,0,832,6734,1,0,0,0,834,6736,1,0,0,0,836,6742,1,0,0,0,838,6745,
        1,0,0,0,840,6748,1,0,0,0,842,6778,1,0,0,0,844,6782,1,0,0,0,846,6789,
        1,0,0,0,848,6796,1,0,0,0,850,6798,1,0,0,0,852,6814,1,0,0,0,854,6830,
        1,0,0,0,856,6834,1,0,0,0,858,6837,1,0,0,0,860,6840,1,0,0,0,862,6864,
        1,0,0,0,864,6866,1,0,0,0,866,6874,1,0,0,0,868,6876,1,0,0,0,870,6880,
        1,0,0,0,872,6959,1,0,0,0,874,6961,1,0,0,0,876,6965,1,0,0,0,878,7055,
        1,0,0,0,880,7057,1,0,0,0,882,7059,1,0,0,0,884,7075,1,0,0,0,886,7077,
        1,0,0,0,888,7109,1,0,0,0,890,7111,1,0,0,0,892,7122,1,0,0,0,894,7129,
        1,0,0,0,896,7145,1,0,0,0,898,7151,1,0,0,0,900,7153,1,0,0,0,902,7157,
        1,0,0,0,904,7168,1,0,0,0,906,7170,1,0,0,0,908,7172,1,0,0,0,910,7179,
        1,0,0,0,912,7181,1,0,0,0,914,7183,1,0,0,0,916,7333,1,0,0,0,918,7338,
        1,0,0,0,920,7345,1,0,0,0,922,7347,1,0,0,0,924,7355,1,0,0,0,926,7373,
        1,0,0,0,928,7381,1,0,0,0,930,7389,1,0,0,0,932,7391,1,0,0,0,934,7395,
        1,0,0,0,936,7403,1,0,0,0,938,7410,1,0,0,0,940,7412,1,0,0,0,942,7423,
        1,0,0,0,944,7556,1,0,0,0,946,7560,1,0,0,0,948,7563,1,0,0,0,950,7572,
        1,0,0,0,952,7581,1,0,0,0,954,7589,1,0,0,0,956,7635,1,0,0,0,958,7637,
        1,0,0,0,960,7658,1,0,0,0,962,7663,1,0,0,0,964,7674,1,0,0,0,966,7719,
        1,0,0,0,968,7755,1,0,0,0,970,7757,1,0,0,0,972,7765,1,0,0,0,974,7778,
        1,0,0,0,976,7780,1,0,0,0,978,7784,1,0,0,0,980,7787,1,0,0,0,982,7792,
        1,0,0,0,984,7796,1,0,0,0,986,7799,1,0,0,0,988,7802,1,0,0,0,990,7806,
        1,0,0,0,992,7812,1,0,0,0,994,7820,1,0,0,0,996,7828,1,0,0,0,998,7834,
        1,0,0,0,1000,7837,1,0,0,0,1002,7855,1,0,0,0,1004,7857,1,0,0,0,1006,
        7863,1,0,0,0,1008,7867,1,0,0,0,1010,7875,1,0,0,0,1012,7883,1,0,0,
        0,1014,7891,1,0,0,0,1016,7920,1,0,0,0,1018,7951,1,0,0,0,1020,7955,
        1,0,0,0,1022,7959,1,0,0,0,1024,7962,1,0,0,0,1026,7973,1,0,0,0,1028,
        7975,1,0,0,0,1030,7980,1,0,0,0,1032,7982,1,0,0,0,1034,7984,1,0,0,
        0,1036,7986,1,0,0,0,1038,7995,1,0,0,0,1040,8001,1,0,0,0,1042,8003,
        1,0,0,0,1044,8005,1,0,0,0,1046,8016,1,0,0,0,1048,8020,1,0,0,0,1050,
        8022,1,0,0,0,1052,8024,1,0,0,0,1054,8026,1,0,0,0,1056,8035,1,0,0,
        0,1058,8037,1,0,0,0,1060,8039,1,0,0,0,1062,8041,1,0,0,0,1064,8043,
        1,0,0,0,1066,8045,1,0,0,0,1068,8047,1,0,0,0,1070,8049,1,0,0,0,1072,
        8053,1,0,0,0,1074,8057,1,0,0,0,1076,8059,1,0,0,0,1078,8061,1,0,0,
        0,1080,8063,1,0,0,0,1082,8065,1,0,0,0,1084,8067,1,0,0,0,1086,8069,
        1,0,0,0,1088,8071,1,0,0,0,1090,8073,1,0,0,0,1092,8075,1,0,0,0,1094,
        8077,1,0,0,0,1096,8081,1,0,0,0,1098,8083,1,0,0,0,1100,8086,1,0,0,
        0,1102,8098,1,0,0,0,1104,8100,1,0,0,0,1106,8108,1,0,0,0,1108,8116,
        1,0,0,0,1110,8120,1,0,0,0,1112,8122,1,0,0,0,1114,8126,1,0,0,0,1116,
        8128,1,0,0,0,1118,8130,1,0,0,0,1120,8132,1,0,0,0,1122,8134,1,0,0,
        0,1124,8136,1,0,0,0,1126,8141,1,0,0,0,1128,8145,1,0,0,0,1130,8147,
        1,0,0,0,1132,8155,1,0,0,0,1134,8159,1,0,0,0,1136,8174,1,0,0,0,1138,
        8176,1,0,0,0,1140,8179,1,0,0,0,1142,8181,1,0,0,0,1144,8183,1,0,0,
        0,1146,8190,1,0,0,0,1148,8201,1,0,0,0,1150,8208,1,0,0,0,1152,8210,
        1,0,0,0,1154,8224,1,0,0,0,1156,8229,1,0,0,0,1158,8234,1,0,0,0,1160,
        8241,1,0,0,0,1162,8249,1,0,0,0,1164,8251,1,0,0,0,1166,8259,1,0,0,
        0,1168,8261,1,0,0,0,1170,8263,1,0,0,0,1172,8271,1,0,0,0,1174,8275,
        1,0,0,0,1176,8277,1,0,0,0,1178,8279,1,0,0,0,1180,8287,1,0,0,0,1182,
        8291,1,0,0,0,1184,8295,1,0,0,0,1186,8299,1,0,0,0,1188,8301,1,0,0,
        0,1190,8304,1,0,0,0,1192,8306,1,0,0,0,1194,8314,1,0,0,0,1196,8326,
        1,0,0,0,1198,8345,1,0,0,0,1200,8347,1,0,0,0,1202,8349,1,0,0,0,1204,
        8369,1,0,0,0,1206,8371,1,0,0,0,1208,8376,1,0,0,0,1210,8388,1,0,0,
        0,1212,8394,1,0,0,0,1214,8396,1,0,0,0,1216,8403,1,0,0,0,1218,8414,
        1,0,0,0,1220,1233,5,0,0,1,1221,1224,3,2,1,0,1222,1224,3,422,211,
        0,1223,1221,1,0,0,0,1223,1222,1,0,0,0,1224,1230,1,0,0,0,1225,1227,
        5,774,0,0,1226,1228,5,0,0,1,1227,1226,1,0,0,0,1227,1228,1,0,0,0,
        1228,1231,1,0,0,0,1229,1231,5,0,0,1,1230,1225,1,0,0,0,1230,1229,
        1,0,0,0,1231,1233,1,0,0,0,1232,1220,1,0,0,0,1232,1223,1,0,0,0,1233,
        1,1,0,0,0,1234,1269,3,4,2,0,1235,1269,3,76,38,0,1236,1269,3,178,
        89,0,1237,1269,3,210,105,0,1238,1269,3,214,107,0,1239,1240,4,1,0,
        0,1240,1269,3,216,108,0,1241,1269,3,218,109,0,1242,1269,3,220,110,
        0,1243,1269,3,226,113,0,1244,1269,3,228,114,0,1245,1269,3,232,116,
        0,1246,1269,3,252,126,0,1247,1269,3,264,132,0,1248,1269,3,266,133,
        0,1249,1269,3,416,208,0,1250,1269,3,418,209,0,1251,1269,3,440,220,
        0,1252,1269,3,490,245,0,1253,1254,4,1,1,0,1254,1269,3,496,248,0,
        1255,1269,3,502,251,0,1256,1269,3,564,282,0,1257,1269,3,572,286,
        0,1258,1269,3,574,287,0,1259,1269,3,598,299,0,1260,1261,4,1,2,0,
        1261,1269,3,642,321,0,1262,1269,3,610,305,0,1263,1269,3,662,331,
        0,1264,1265,4,1,3,0,1265,1269,3,840,420,0,1266,1269,3,850,425,0,
        1267,1269,3,852,426,0,1268,1234,1,0,0,0,1268,1235,1,0,0,0,1268,1236,
        1,0,0,0,1268,1237,1,0,0,0,1268,1238,1,0,0,0,1268,1239,1,0,0,0,1268,
        1241,1,0,0,0,1268,1242,1,0,0,0,1268,1243,1,0,0,0,1268,1244,1,0,0,
        0,1268,1245,1,0,0,0,1268,1246,1,0,0,0,1268,1247,1,0,0,0,1268,1248,
        1,0,0,0,1268,1249,1,0,0,0,1268,1250,1,0,0,0,1268,1251,1,0,0,0,1268,
        1252,1,0,0,0,1268,1253,1,0,0,0,1268,1255,1,0,0,0,1268,1256,1,0,0,
        0,1268,1257,1,0,0,0,1268,1258,1,0,0,0,1268,1259,1,0,0,0,1268,1260,
        1,0,0,0,1268,1262,1,0,0,0,1268,1263,1,0,0,0,1268,1264,1,0,0,0,1268,
        1266,1,0,0,0,1268,1267,1,0,0,0,1269,3,1,0,0,0,1270,1297,5,11,0,0,
        1271,1298,3,18,9,0,1272,1298,3,6,3,0,1273,1274,5,422,0,0,1274,1276,
        3,1062,531,0,1275,1277,3,102,51,0,1276,1275,1,0,0,0,1276,1277,1,
        0,0,0,1277,1298,1,0,0,0,1278,1279,5,206,0,0,1279,1281,3,1066,533,
        0,1280,1282,3,102,51,0,1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,
        1298,1,0,0,0,1283,1298,3,68,34,0,1284,1298,3,8,4,0,1285,1298,3,54,
        27,0,1286,1287,4,2,4,0,1287,1298,3,56,28,0,1288,1298,3,10,5,0,1289,
        1298,3,16,8,0,1290,1291,4,2,5,0,1291,1292,5,244,0,0,1292,1293,5,
        482,0,0,1293,1294,3,1180,590,0,1294,1295,5,316,0,0,1295,1296,5,265,
        0,0,1296,1298,1,0,0,0,1297,1271,1,0,0,0,1297,1272,1,0,0,0,1297,1273,
        1,0,0,0,1297,1278,1,0,0,0,1297,1283,1,0,0,0,1297,1284,1,0,0,0,1297,
        1285,1,0,0,0,1297,1286,1,0,0,0,1297,1288,1,0,0,0,1297,1289,1,0,0,
        0,1297,1290,1,0,0,0,1298,5,1,0,0,0,1299,1300,5,109,0,0,1300,1311,
        3,1058,529,0,1301,1303,3,80,40,0,1302,1301,1,0,0,0,1303,1304,1,0,
        0,0,1304,1302,1,0,0,0,1304,1305,1,0,0,0,1305,1312,1,0,0,0,1306,1307,
        4,3,6,0,1307,1308,5,615,0,0,1308,1309,5,112,0,0,1309,1310,5,139,
        0,0,1310,1312,5,357,0,0,1311,1302,1,0,0,0,1311,1306,1,0,0,0,1312,
        7,1,0,0,0,1313,1315,3,976,488,0,1314,1313,1,0,0,0,1314,1315,1,0,
        0,0,1315,1316,1,0,0,0,1316,1317,5,170,0,0,1317,1321,3,1086,543,0,
        1318,1319,5,383,0,0,1319,1320,5,490,0,0,1320,1322,3,862,431,0,1321,
        1318,1,0,0,0,1321,1322,1,0,0,0,1322,1329,1,0,0,0,1323,1324,5,383,
        0,0,1324,1326,5,79,0,0,1325,1327,5,371,0,0,1326,1325,1,0,0,0,1326,
        1327,1,0,0,0,1327,1328,1,0,0,0,1328,1330,5,418,0,0,1329,1323,1,0,
        0,0,1329,1330,1,0,0,0,1330,1334,1,0,0,0,1331,1332,5,453,0,0,1332,
        1333,5,590,0,0,1333,1335,3,1128,564,0,1334,1331,1,0,0,0,1334,1335,
        1,0,0,0,1335,1342,1,0,0,0,1336,1343,5,156,0,0,1337,1340,5,140,0,
        0,1338,1339,5,383,0,0,1339,1341,5,514,0,0,1340,1338,1,0,0,0,1340,
        1341,1,0,0,0,1341,1343,1,0,0,0,1342,1336,1,0,0,0,1342,1337,1,0,0,
        0,1342,1343,1,0,0,0,1343,1346,1,0,0,0,1344,1345,5,75,0,0,1345,1347,
        3,1160,580,0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,1350,1,0,0,
        0,1348,1349,5,147,0,0,1349,1351,3,784,392,0,1350,1348,1,0,0,0,1350,
        1351,1,0,0,0,1351,9,1,0,0,0,1352,1353,5,288,0,0,1353,1354,5,217,
        0,0,1354,1355,3,1082,541,0,1355,1356,5,4,0,0,1356,1357,5,603,0,0,
        1357,1359,3,1160,580,0,1358,1360,3,12,6,0,1359,1358,1,0,0,0,1359,
        1360,1,0,0,0,1360,11,1,0,0,0,1361,1368,3,14,7,0,1362,1364,5,773,
        0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1367,
        3,14,7,0,1366,1363,1,0,0,0,1367,1370,1,0,0,0,1368,1366,1,0,0,0,1368,
        1369,1,0,0,0,1369,13,1,0,0,0,1370,1368,1,0,0,0,1371,1375,3,136,68,
        0,1372,1375,3,148,74,0,1373,1375,3,150,75,0,1374,1371,1,0,0,0,1374,
        1372,1,0,0,0,1374,1373,1,0,0,0,1375,15,1,0,0,0,1376,1377,5,503,0,
        0,1377,1378,3,1092,546,0,1378,1379,3,120,60,0,1379,17,1,0,0,0,1380,
        1382,3,1032,516,0,1381,1380,1,0,0,0,1381,1382,1,0,0,0,1382,1385,
        1,0,0,0,1383,1384,4,9,7,0,1384,1386,5,232,0,0,1385,1383,1,0,0,0,
        1385,1386,1,0,0,0,1386,1387,1,0,0,0,1387,1388,5,574,0,0,1388,1390,
        3,1102,551,0,1389,1391,3,20,10,0,1390,1389,1,0,0,0,1390,1391,1,0,
        0,0,1391,19,1,0,0,0,1392,1395,3,22,11,0,1393,1396,3,954,477,0,1394,
        1396,3,50,25,0,1395,1393,1,0,0,0,1395,1394,1,0,0,0,1395,1396,1,0,
        0,0,1396,1406,1,0,0,0,1397,1406,3,954,477,0,1398,1406,3,50,25,0,
        1399,1400,3,24,12,0,1400,1401,5,773,0,0,1401,1403,1,0,0,0,1402,1399,
        1,0,0,0,1402,1403,1,0,0,0,1403,1404,1,0,0,0,1404,1406,3,26,13,0,
        1405,1392,1,0,0,0,1405,1397,1,0,0,0,1405,1398,1,0,0,0,1405,1402,
        1,0,0,0,1406,21,1,0,0,0,1407,1415,3,24,12,0,1408,1409,3,24,12,0,
        1409,1410,5,773,0,0,1410,1412,1,0,0,0,1411,1408,1,0,0,0,1411,1412,
        1,0,0,0,1412,1413,1,0,0,0,1413,1415,3,30,15,0,1414,1407,1,0,0,0,
        1414,1411,1,0,0,0,1415,23,1,0,0,0,1416,1421,3,32,16,0,1417,1418,
        5,773,0,0,1418,1420,3,32,16,0,1419,1417,1,0,0,0,1420,1423,1,0,0,
        0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,25,1,0,0,0,1423,1421,
        1,0,0,0,1424,1425,5,141,0,0,1425,1432,5,572,0,0,1426,1427,5,234,
        0,0,1427,1432,5,572,0,0,1428,1432,3,28,14,0,1429,1430,4,13,8,0,1430,
        1432,7,0,0,0,1431,1424,1,0,0,0,1431,1426,1,0,0,0,1431,1428,1,0,0,
        0,1431,1429,1,0,0,0,1432,27,1,0,0,0,1433,1434,5,4,0,0,1434,1436,
        5,405,0,0,1435,1437,3,1034,517,0,1436,1435,1,0,0,0,1436,1437,1,0,
        0,0,1437,1441,1,0,0,0,1438,1442,3,962,481,0,1439,1440,5,404,0,0,
        1440,1442,3,1142,571,0,1441,1438,1,0,0,0,1441,1439,1,0,0,0,1442,
        1530,1,0,0,0,1443,1444,5,148,0,0,1444,1445,5,405,0,0,1445,1530,3,
        1130,565,0,1446,1447,5,438,0,0,1447,1449,5,405,0,0,1448,1450,3,1034,
        517,0,1449,1448,1,0,0,0,1449,1450,1,0,0,0,1450,1451,1,0,0,0,1451,
        1530,3,52,26,0,1452,1453,5,388,0,0,1453,1455,5,405,0,0,1454,1456,
        3,1034,517,0,1455,1454,1,0,0,0,1455,1456,1,0,0,0,1456,1457,1,0,0,
        0,1457,1459,3,52,26,0,1458,1460,3,1034,517,0,1459,1458,1,0,0,0,1459,
        1460,1,0,0,0,1460,1530,1,0,0,0,1461,1462,5,14,0,0,1462,1464,5,405,
        0,0,1463,1465,3,1034,517,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,
        1466,1,0,0,0,1466,1530,3,52,26,0,1467,1468,5,62,0,0,1468,1469,5,
        405,0,0,1469,1473,3,52,26,0,1470,1472,3,568,284,0,1471,1470,1,0,
        0,0,1472,1475,1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,1530,
        1,0,0,0,1475,1473,1,0,0,0,1476,1477,5,455,0,0,1477,1479,5,405,0,
        0,1478,1480,3,1034,517,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,
        1481,1,0,0,0,1481,1485,3,52,26,0,1482,1484,3,570,285,0,1483,1482,
        1,0,0,0,1484,1487,1,0,0,0,1485,1483,1,0,0,0,1485,1486,1,0,0,0,1486,
        1530,1,0,0,0,1487,1485,1,0,0,0,1488,1489,5,67,0,0,1489,1491,5,405,
        0,0,1490,1492,3,1034,517,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,
        1493,1,0,0,0,1493,1530,3,1142,571,0,1494,1495,5,597,0,0,1495,1496,
        5,405,0,0,1496,1530,3,52,26,0,1497,1498,5,454,0,0,1498,1500,5,405,
        0,0,1499,1501,3,1034,517,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,
        1506,1,0,0,0,1502,1503,3,1130,565,0,1503,1504,5,248,0,0,1504,1505,
        3,962,481,0,1505,1507,1,0,0,0,1506,1502,1,0,0,0,1506,1507,1,0,0,
        0,1507,1530,1,0,0,0,1508,1509,5,172,0,0,1509,1510,5,405,0,0,1510,
        1511,3,1128,564,0,1511,1512,5,645,0,0,1512,1513,5,574,0,0,1513,1515,
        3,1102,551,0,1514,1516,3,48,24,0,1515,1514,1,0,0,0,1515,1516,1,0,
        0,0,1516,1530,1,0,0,0,1517,1518,4,14,9,0,1518,1519,5,141,0,0,1519,
        1520,5,405,0,0,1520,1521,3,52,26,0,1521,1522,5,572,0,0,1522,1530,
        1,0,0,0,1523,1524,4,14,10,0,1524,1525,5,234,0,0,1525,1526,5,405,
        0,0,1526,1527,3,52,26,0,1527,1528,5,572,0,0,1528,1530,1,0,0,0,1529,
        1433,1,0,0,0,1529,1443,1,0,0,0,1529,1446,1,0,0,0,1529,1452,1,0,0,
        0,1529,1461,1,0,0,0,1529,1467,1,0,0,0,1529,1476,1,0,0,0,1529,1488,
        1,0,0,0,1529,1494,1,0,0,0,1529,1497,1,0,0,0,1529,1508,1,0,0,0,1529,
        1517,1,0,0,0,1529,1523,1,0,0,0,1530,29,1,0,0,0,1531,1534,3,34,17,
        0,1532,1534,3,942,471,0,1533,1531,1,0,0,0,1533,1532,1,0,0,0,1534,
        1543,1,0,0,0,1535,1539,5,773,0,0,1536,1540,3,34,17,0,1537,1540,3,
        32,16,0,1538,1540,3,942,471,0,1539,1536,1,0,0,0,1539,1537,1,0,0,
        0,1539,1538,1,0,0,0,1540,1542,1,0,0,0,1541,1535,1,0,0,0,1542,1545,
        1,0,0,0,1543,1541,1,0,0,0,1543,1544,1,0,0,0,1544,31,1,0,0,0,1545,
        1543,1,0,0,0,1546,1550,3,42,21,0,1547,1550,3,44,22,0,1548,1550,3,
        48,24,0,1549,1546,1,0,0,0,1549,1547,1,0,0,0,1549,1548,1,0,0,0,1550,
        33,1,0,0,0,1551,1553,5,4,0,0,1552,1554,5,72,0,0,1553,1552,1,0,0,
        0,1553,1554,1,0,0,0,1554,1567,1,0,0,0,1555,1556,3,1128,564,0,1556,
        1558,3,876,438,0,1557,1559,3,866,433,0,1558,1557,1,0,0,0,1558,1559,
        1,0,0,0,1559,1561,1,0,0,0,1560,1562,3,36,18,0,1561,1560,1,0,0,0,
        1561,1562,1,0,0,0,1562,1568,1,0,0,0,1563,1564,5,776,0,0,1564,1565,
        3,84,42,0,1565,1566,5,777,0,0,1566,1568,1,0,0,0,1567,1555,1,0,0,
        0,1567,1563,1,0,0,0,1568,1697,1,0,0,0,1569,1570,5,4,0,0,1570,1697,
        3,872,436,0,1571,1573,5,55,0,0,1572,1574,5,72,0,0,1573,1572,1,0,
        0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1576,3,1042,521,0,1576,
        1577,3,1128,564,0,1577,1579,3,876,438,0,1578,1580,3,36,18,0,1579,
        1578,1,0,0,0,1579,1580,1,0,0,0,1580,1697,1,0,0,0,1581,1583,5,348,
        0,0,1582,1584,5,72,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,
        1585,1,0,0,0,1585,1586,3,1042,521,0,1586,1588,3,876,438,0,1587,1589,
        3,36,18,0,1588,1587,1,0,0,0,1588,1589,1,0,0,0,1589,1697,1,0,0,0,
        1590,1619,5,148,0,0,1591,1593,5,72,0,0,1592,1591,1,0,0,0,1592,1593,
        1,0,0,0,1593,1594,1,0,0,0,1594,1596,3,1042,521,0,1595,1597,3,38,
        19,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,1620,1,0,0,0,1598,
        1599,5,199,0,0,1599,1606,5,265,0,0,1600,1601,4,17,11,0,1601,1607,
        3,1042,521,0,1602,1604,4,17,12,0,1603,1605,3,1042,521,0,1604,1603,
        1,0,0,0,1604,1605,1,0,0,0,1605,1607,1,0,0,0,1606,1600,1,0,0,0,1606,
        1602,1,0,0,0,1607,1620,1,0,0,0,1608,1609,5,420,0,0,1609,1620,5,265,
        0,0,1610,1611,3,406,203,0,1611,1612,3,1052,526,0,1612,1620,1,0,0,
        0,1613,1614,4,17,13,0,1614,1615,5,62,0,0,1615,1620,3,1128,564,0,
        1616,1617,4,17,14,0,1617,1618,5,86,0,0,1618,1620,3,1128,564,0,1619,
        1592,1,0,0,0,1619,1598,1,0,0,0,1619,1608,1,0,0,0,1619,1610,1,0,0,
        0,1619,1613,1,0,0,0,1619,1616,1,0,0,0,1620,1697,1,0,0,0,1621,1622,
        5,140,0,0,1622,1697,5,263,0,0,1623,1624,5,156,0,0,1624,1697,5,263,
        0,0,1625,1627,5,11,0,0,1626,1628,5,72,0,0,1627,1626,1,0,0,0,1627,
        1628,1,0,0,0,1628,1629,1,0,0,0,1629,1639,3,1042,521,0,1630,1631,
        5,506,0,0,1631,1635,5,128,0,0,1632,1633,4,17,15,0,1633,1636,3,770,
        385,0,1634,1636,3,1150,575,0,1635,1632,1,0,0,0,1635,1634,1,0,0,0,
        1636,1640,1,0,0,0,1637,1638,5,148,0,0,1638,1640,5,128,0,0,1639,1630,
        1,0,0,0,1639,1637,1,0,0,0,1640,1697,1,0,0,0,1641,1642,4,17,16,0,
        1642,1643,5,11,0,0,1643,1644,5,236,0,0,1644,1645,3,1052,526,0,1645,
        1646,3,906,453,0,1646,1697,1,0,0,0,1647,1648,4,17,17,0,1648,1649,
        5,11,0,0,1649,1650,5,62,0,0,1650,1651,3,1128,564,0,1651,1652,3,870,
        435,0,1652,1697,1,0,0,0,1653,1654,4,17,18,0,1654,1655,5,11,0,0,1655,
        1656,5,86,0,0,1656,1657,3,1128,564,0,1657,1658,3,870,435,0,1658,
        1697,1,0,0,0,1659,1660,4,17,19,0,1660,1661,5,453,0,0,1661,1662,5,
        72,0,0,1662,1663,3,1042,521,0,1663,1664,5,590,0,0,1664,1665,3,1128,
        564,0,1665,1697,1,0,0,0,1666,1668,5,453,0,0,1667,1669,7,1,0,0,1668,
        1667,1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,0,0,1670,1697,3,1096,
        548,0,1671,1672,4,17,20,0,1672,1673,5,453,0,0,1673,1674,3,406,203,
        0,1674,1675,3,1052,526,0,1675,1676,5,590,0,0,1676,1677,3,1050,525,
        0,1677,1697,1,0,0,0,1678,1679,5,94,0,0,1679,1680,5,590,0,0,1680,
        1684,3,758,379,0,1681,1682,4,17,21,0,1682,1685,5,128,0,0,1683,1685,
        3,936,468,0,1684,1681,1,0,0,0,1684,1683,1,0,0,0,1685,1687,1,0,0,
        0,1686,1688,3,986,493,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,
        1697,1,0,0,0,1689,1697,5,198,0,0,1690,1691,5,393,0,0,1691,1692,5,
        45,0,0,1692,1697,3,40,20,0,1693,1694,4,17,22,0,1694,1695,5,615,0,
        0,1695,1697,5,403,0,0,1696,1551,1,0,0,0,1696,1569,1,0,0,0,1696,1571,
        1,0,0,0,1696,1581,1,0,0,0,1696,1590,1,0,0,0,1696,1621,1,0,0,0,1696,
        1623,1,0,0,0,1696,1625,1,0,0,0,1696,1641,1,0,0,0,1696,1647,1,0,0,
        0,1696,1653,1,0,0,0,1696,1659,1,0,0,0,1696,1666,1,0,0,0,1696,1671,
        1,0,0,0,1696,1678,1,0,0,0,1696,1689,1,0,0,0,1696,1690,1,0,0,0,1696,
        1693,1,0,0,0,1697,35,1,0,0,0,1698,1699,5,6,0,0,1699,1702,3,1128,
        564,0,1700,1702,5,191,0,0,1701,1698,1,0,0,0,1701,1700,1,0,0,0,1702,
        37,1,0,0,0,1703,1704,7,2,0,0,1704,39,1,0,0,0,1705,1707,3,1128,564,
        0,1706,1708,3,330,165,0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,
        1716,1,0,0,0,1709,1710,5,773,0,0,1710,1712,3,1128,564,0,1711,1713,
        3,330,165,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,
        0,1714,1709,1,0,0,0,1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,1717,
        1,0,0,0,1717,41,1,0,0,0,1718,1716,1,0,0,0,1719,1721,5,9,0,0,1720,
        1722,5,750,0,0,1721,1720,1,0,0,0,1721,1722,1,0,0,0,1722,1725,1,0,
        0,0,1723,1726,5,128,0,0,1724,1726,3,1128,564,0,1725,1723,1,0,0,0,
        1725,1724,1,0,0,0,1726,43,1,0,0,0,1727,1729,5,287,0,0,1728,1730,
        5,750,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1733,1,0,0,0,
        1731,1734,5,128,0,0,1732,1734,3,1128,564,0,1733,1731,1,0,0,0,1733,
        1732,1,0,0,0,1734,45,1,0,0,0,1735,1737,3,42,21,0,1736,1738,3,44,
        22,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1744,1,0,0,0,1739,
        1741,3,44,22,0,1740,1742,3,42,21,0,1741,1740,1,0,0,0,1741,1742,1,
        0,0,0,1742,1744,1,0,0,0,1743,1735,1,0,0,0,1743,1739,1,0,0,0,1744,
        47,1,0,0,0,1745,1746,4,24,23,0,1746,1747,7,3,0,0,1747,1748,5,625,
        0,0,1748,49,1,0,0,0,1749,1750,5,452,0,0,1750,1751,5,403,0,0,1751,
        51,1,0,0,0,1752,1755,5,10,0,0,1753,1755,3,1130,565,0,1754,1752,1,
        0,0,0,1754,1753,1,0,0,0,1755,53,1,0,0,0,1756,1757,5,572,0,0,1757,
        1791,3,1078,539,0,1758,1759,7,4,0,0,1759,1760,5,111,0,0,1760,1762,
        3,1160,580,0,1761,1763,3,62,31,0,1762,1761,1,0,0,0,1762,1763,1,0,
        0,0,1763,1792,1,0,0,0,1764,1784,4,27,24,0,1765,1785,1,0,0,0,1766,
        1767,5,55,0,0,1767,1768,5,111,0,0,1768,1779,3,1160,580,0,1769,1776,
        3,66,33,0,1770,1772,5,773,0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,
        0,1772,1773,1,0,0,0,1773,1775,3,66,33,0,1774,1771,1,0,0,0,1775,1778,
        1,0,0,0,1776,1774,1,0,0,0,1776,1777,1,0,0,0,1777,1780,1,0,0,0,1778,
        1776,1,0,0,0,1779,1769,1,0,0,0,1779,1780,1,0,0,0,1780,1785,1,0,0,
        0,1781,1785,7,5,0,0,1782,1783,5,371,0,0,1783,1785,5,1,0,0,1784,1765,
        1,0,0,0,1784,1766,1,0,0,0,1784,1781,1,0,0,0,1784,1782,1,0,0,0,1785,
        1792,1,0,0,0,1786,1787,5,453,0,0,1787,1788,5,590,0,0,1788,1792,3,
        1128,564,0,1789,1790,4,27,25,0,1790,1792,3,62,31,0,1791,1758,1,0,
        0,0,1791,1764,1,0,0,0,1791,1786,1,0,0,0,1791,1789,1,0,0,0,1792,55,
        1,0,0,0,1793,1794,5,605,0,0,1794,1795,5,572,0,0,1795,1796,3,1078,
        539,0,1796,1797,5,506,0,0,1797,1799,7,6,0,0,1798,1800,3,58,29,0,
        1799,1798,1,0,0,0,1799,1800,1,0,0,0,1800,57,1,0,0,0,1801,1808,3,
        60,30,0,1802,1804,5,773,0,0,1803,1802,1,0,0,0,1803,1804,1,0,0,0,
        1804,1805,1,0,0,0,1805,1807,3,60,30,0,1806,1803,1,0,0,0,1807,1810,
        1,0,0,0,1808,1806,1,0,0,0,1808,1809,1,0,0,0,1809,59,1,0,0,0,1810,
        1808,1,0,0,0,1811,1812,3,148,74,0,1812,61,1,0,0,0,1813,1820,3,64,
        32,0,1814,1816,5,773,0,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,
        1817,1,0,0,0,1817,1819,3,64,32,0,1818,1815,1,0,0,0,1819,1822,1,0,
        0,0,1820,1818,1,0,0,0,1820,1821,1,0,0,0,1821,63,1,0,0,0,1822,1820,
        1,0,0,0,1823,1825,5,238,0,0,1824,1826,5,750,0,0,1825,1824,1,0,0,
        0,1825,1826,1,0,0,0,1826,1827,1,0,0,0,1827,1834,3,1186,593,0,1828,
        1834,3,140,70,0,1829,1834,3,142,71,0,1830,1834,3,148,74,0,1831,1834,
        3,150,75,0,1832,1834,3,156,78,0,1833,1823,1,0,0,0,1833,1828,1,0,
        0,0,1833,1829,1,0,0,0,1833,1830,1,0,0,0,1833,1831,1,0,0,0,1833,1832,
        1,0,0,0,1834,65,1,0,0,0,1835,1837,5,238,0,0,1836,1838,5,750,0,0,
        1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1839,1,0,0,0,1839,1843,
        3,1186,593,0,1840,1843,3,140,70,0,1841,1843,3,142,71,0,1842,1835,
        1,0,0,0,1842,1840,1,0,0,0,1842,1841,1,0,0,0,1843,67,1,0,0,0,1844,
        1846,3,162,81,0,1845,1844,1,0,0,0,1845,1846,1,0,0,0,1846,1848,1,
        0,0,0,1847,1849,3,976,488,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,
        1849,1851,1,0,0,0,1850,1852,3,164,82,0,1851,1850,1,0,0,0,1851,1852,
        1,0,0,0,1852,1853,1,0,0,0,1853,1854,5,636,0,0,1854,1855,3,1074,537,
        0,1855,1856,3,70,35,0,1856,69,1,0,0,0,1857,1859,3,1044,522,0,1858,
        1857,1,0,0,0,1858,1859,1,0,0,0,1859,1860,1,0,0,0,1860,1861,5,17,
        0,0,1861,1862,3,72,36,0,1862,71,1,0,0,0,1863,1865,3,90,45,0,1864,
        1866,3,74,37,0,1865,1864,1,0,0,0,1865,1866,1,0,0,0,1866,73,1,0,0,
        0,1867,1869,5,645,0,0,1868,1870,7,7,0,0,1869,1868,1,0,0,0,1869,1870,
        1,0,0,0,1870,1871,1,0,0,0,1871,1872,5,62,0,0,1872,1873,5,391,0,0,
        1873,75,1,0,0,0,1874,1893,5,97,0,0,1875,1894,3,78,39,0,1876,1894,
        3,82,41,0,1877,1894,3,96,48,0,1878,1894,3,94,47,0,1879,1894,3,98,
        49,0,1880,1894,3,112,56,0,1881,1894,3,158,79,0,1882,1894,3,166,83,
        0,1883,1894,3,106,53,0,1884,1894,3,118,59,0,1885,1894,3,124,62,0,
        1886,1894,3,170,85,0,1887,1888,4,38,26,0,1888,1894,3,172,86,0,1889,
        1890,4,38,27,0,1890,1894,3,174,87,0,1891,1892,4,38,28,0,1892,1894,
        3,126,63,0,1893,1875,1,0,0,0,1893,1876,1,0,0,0,1893,1877,1,0,0,0,
        1893,1878,1,0,0,0,1893,1879,1,0,0,0,1893,1880,1,0,0,0,1893,1881,
        1,0,0,0,1893,1882,1,0,0,0,1893,1883,1,0,0,0,1893,1884,1,0,0,0,1893,
        1885,1,0,0,0,1893,1886,1,0,0,0,1893,1887,1,0,0,0,1893,1889,1,0,0,
        0,1893,1891,1,0,0,0,1894,77,1,0,0,0,1895,1897,5,109,0,0,1896,1898,
        3,980,490,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,
        0,1899,1903,3,1056,528,0,1900,1902,3,80,40,0,1901,1900,1,0,0,0,1902,
        1905,1,0,0,0,1903,1901,1,0,0,0,1903,1904,1,0,0,0,1904,79,1,0,0,0,
        1905,1903,1,0,0,0,1906,1911,3,952,476,0,1907,1911,3,948,474,0,1908,
        1909,4,40,29,0,1909,1911,3,950,475,0,1910,1906,1,0,0,0,1910,1907,
        1,0,0,0,1910,1908,1,0,0,0,1911,81,1,0,0,0,1912,1914,5,577,0,0,1913,
        1912,1,0,0,0,1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1917,5,574,
        0,0,1916,1918,3,980,490,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,
        1919,1,0,0,0,1919,1942,3,1096,548,0,1920,1921,5,776,0,0,1921,1922,
        3,84,42,0,1922,1923,5,777,0,0,1923,1925,1,0,0,0,1924,1920,1,0,0,
        0,1924,1925,1,0,0,0,1925,1927,1,0,0,0,1926,1928,3,940,470,0,1927,
        1926,1,0,0,0,1927,1928,1,0,0,0,1928,1930,1,0,0,0,1929,1931,3,954,
        477,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,1933,1,0,0,0,1932,
        1934,3,88,44,0,1933,1932,1,0,0,0,1933,1934,1,0,0,0,1934,1943,1,0,
        0,0,1935,1936,5,275,0,0,1936,1943,3,1102,551,0,1937,1938,5,776,0,
        0,1938,1939,5,275,0,0,1939,1940,3,1102,551,0,1940,1941,5,777,0,0,
        1941,1943,1,0,0,0,1942,1924,1,0,0,0,1942,1935,1,0,0,0,1942,1937,
        1,0,0,0,1943,83,1,0,0,0,1944,1949,3,86,43,0,1945,1946,5,773,0,0,
        1946,1948,3,86,43,0,1947,1945,1,0,0,0,1948,1951,1,0,0,0,1949,1947,
        1,0,0,0,1949,1950,1,0,0,0,1950,85,1,0,0,0,1951,1949,1,0,0,0,1952,
        1955,3,864,432,0,1953,1955,3,872,436,0,1954,1952,1,0,0,0,1954,1953,
        1,0,0,0,1955,87,1,0,0,0,1956,1958,7,8,0,0,1957,1956,1,0,0,0,1957,
        1958,1,0,0,0,1958,1960,1,0,0,0,1959,1961,5,17,0,0,1960,1959,1,0,
        0,0,1960,1961,1,0,0,0,1961,1962,1,0,0,0,1962,1963,3,90,45,0,1963,
        89,1,0,0,0,1964,1967,3,270,135,0,1965,1967,3,274,137,0,1966,1964,
        1,0,0,0,1966,1965,1,0,0,0,1967,91,1,0,0,0,1968,1972,5,97,0,0,1969,
        1973,3,94,47,0,1970,1973,3,96,48,0,1971,1973,3,98,49,0,1972,1969,
        1,0,0,0,1972,1970,1,0,0,0,1972,1971,1,0,0,0,1973,1975,1,0,0,0,1974,
        1976,5,774,0,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,
        0,0,1977,1978,5,0,0,1,1978,93,1,0,0,0,1979,1981,3,976,488,0,1980,
        1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,1983,5,422,
        0,0,1983,1984,3,1060,530,0,1984,1993,5,776,0,0,1985,1990,3,982,491,
        0,1986,1987,5,773,0,0,1987,1989,3,982,491,0,1988,1986,1,0,0,0,1989,
        1992,1,0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,0,1991,1994,1,0,0,
        0,1992,1990,1,0,0,0,1993,1985,1,0,0,0,1993,1994,1,0,0,0,1994,1995,
        1,0,0,0,1995,1999,5,777,0,0,1996,1998,3,100,50,0,1997,1996,1,0,0,
        0,1998,2001,1,0,0,0,1999,1997,1,0,0,0,1999,2000,1,0,0,0,2000,2002,
        1,0,0,0,2001,1999,1,0,0,0,2002,2003,3,784,392,0,2003,95,1,0,0,0,
        2004,2006,3,976,488,0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,2007,
        1,0,0,0,2007,2008,5,206,0,0,2008,2009,3,1064,532,0,2009,2018,5,776,
        0,0,2010,2015,3,984,492,0,2011,2012,5,773,0,0,2012,2014,3,984,492,
        0,2013,2011,1,0,0,0,2014,2017,1,0,0,0,2015,2013,1,0,0,0,2015,2016,
        1,0,0,0,2016,2019,1,0,0,0,2017,2015,1,0,0,0,2018,2010,1,0,0,0,2018,
        2019,1,0,0,0,2019,2020,1,0,0,0,2020,2021,5,777,0,0,2021,2022,5,474,
        0,0,2022,2026,3,988,494,0,2023,2025,3,100,50,0,2024,2023,1,0,0,0,
        2025,2028,1,0,0,0,2026,2024,1,0,0,0,2026,2027,1,0,0,0,2027,2029,
        1,0,0,0,2028,2026,1,0,0,0,2029,2030,3,784,392,0,2030,97,1,0,0,0,
        2031,2033,5,8,0,0,2032,2031,1,0,0,0,2032,2033,1,0,0,0,2033,2034,
        1,0,0,0,2034,2035,5,206,0,0,2035,2036,3,1088,544,0,2036,2037,5,474,
        0,0,2037,2038,7,9,0,0,2038,2039,5,520,0,0,2039,2040,3,1160,580,0,
        2040,99,1,0,0,0,2041,2047,3,104,52,0,2042,2044,5,371,0,0,2043,2042,
        1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2047,5,137,0,0,
        2046,2041,1,0,0,0,2046,2043,1,0,0,0,2047,101,1,0,0,0,2048,2050,3,
        100,50,0,2049,2048,1,0,0,0,2050,2051,1,0,0,0,2051,2049,1,0,0,0,2051,
        2052,1,0,0,0,2052,103,1,0,0,0,2053,2054,5,75,0,0,2054,2071,3,1160,
        580,0,2055,2056,5,267,0,0,2056,2071,5,537,0,0,2057,2058,5,373,0,
        0,2058,2071,5,537,0,0,2059,2060,5,90,0,0,2060,2071,5,537,0,0,2061,
        2062,5,433,0,0,2062,2063,5,537,0,0,2063,2071,5,112,0,0,2064,2065,
        5,347,0,0,2065,2066,5,537,0,0,2066,2071,5,112,0,0,2067,2068,5,537,
        0,0,2068,2069,5,496,0,0,2069,2071,7,10,0,0,2070,2053,1,0,0,0,2070,
        2055,1,0,0,0,2070,2057,1,0,0,0,2070,2059,1,0,0,0,2070,2061,1,0,0,
        0,2070,2064,1,0,0,0,2070,2067,1,0,0,0,2071,105,1,0,0,0,2072,2074,
        3,1032,516,0,2073,2072,1,0,0,0,2073,2074,1,0,0,0,2074,2116,1,0,0,
        0,2075,2077,5,609,0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2078,
        1,0,0,0,2078,2087,5,236,0,0,2079,2080,4,53,30,0,2080,2082,3,1050,
        525,0,2081,2083,3,908,454,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,
        2083,2088,1,0,0,0,2084,2086,3,108,54,0,2085,2084,1,0,0,0,2085,2086,
        1,0,0,0,2086,2088,1,0,0,0,2087,2079,1,0,0,0,2087,2085,1,0,0,0,2088,
        2089,1,0,0,0,2089,2093,3,110,55,0,2090,2092,3,902,451,0,2091,2090,
        1,0,0,0,2092,2095,1,0,0,0,2093,2091,1,0,0,0,2093,2094,1,0,0,0,2094,
        2117,1,0,0,0,2095,2093,1,0,0,0,2096,2097,5,205,0,0,2097,2098,5,236,
        0,0,2098,2099,3,1050,525,0,2099,2103,3,110,55,0,2100,2102,3,910,
        455,0,2101,2100,1,0,0,0,2102,2105,1,0,0,0,2103,2101,1,0,0,0,2103,
        2104,1,0,0,0,2104,2117,1,0,0,0,2105,2103,1,0,0,0,2106,2107,5,523,
        0,0,2107,2108,5,236,0,0,2108,2109,3,1050,525,0,2109,2113,3,110,55,
        0,2110,2112,3,912,456,0,2111,2110,1,0,0,0,2112,2115,1,0,0,0,2113,
        2111,1,0,0,0,2113,2114,1,0,0,0,2114,2117,1,0,0,0,2115,2113,1,0,0,
        0,2116,2076,1,0,0,0,2116,2096,1,0,0,0,2116,2106,1,0,0,0,2117,2119,
        1,0,0,0,2118,2120,3,46,23,0,2119,2118,1,0,0,0,2119,2120,1,0,0,0,
        2120,107,1,0,0,0,2121,2124,3,1050,525,0,2122,2123,5,621,0,0,2123,
        2125,3,900,450,0,2124,2122,1,0,0,0,2124,2125,1,0,0,0,2125,2131,1,
        0,0,0,2126,2127,3,1050,525,0,2127,2128,5,599,0,0,2128,2129,3,900,
        450,0,2129,2131,1,0,0,0,2130,2121,1,0,0,0,2130,2126,1,0,0,0,2131,
        109,1,0,0,0,2132,2133,5,383,0,0,2133,2134,3,1102,551,0,2134,2135,
        3,898,449,0,2135,111,1,0,0,0,2136,2137,5,288,0,0,2137,2138,5,217,
        0,0,2138,2139,3,1080,540,0,2139,2140,5,4,0,0,2140,2141,7,11,0,0,
        2141,2143,3,1160,580,0,2142,2144,3,114,57,0,2143,2142,1,0,0,0,2143,
        2144,1,0,0,0,2144,113,1,0,0,0,2145,2152,3,116,58,0,2146,2148,5,773,
        0,0,2147,2146,1,0,0,0,2147,2148,1,0,0,0,2148,2149,1,0,0,0,2149,2151,
        3,116,58,0,2150,2147,1,0,0,0,2151,2154,1,0,0,0,2152,2150,1,0,0,0,
        2152,2153,1,0,0,0,2153,115,1,0,0,0,2154,2152,1,0,0,0,2155,2162,3,
        136,68,0,2156,2162,3,138,69,0,2157,2162,3,146,73,0,2158,2162,3,148,
        74,0,2159,2162,3,150,75,0,2160,2162,3,152,76,0,2161,2155,1,0,0,0,
        2161,2156,1,0,0,0,2161,2157,1,0,0,0,2161,2158,1,0,0,0,2161,2159,
        1,0,0,0,2161,2160,1,0,0,0,2162,117,1,0,0,0,2163,2164,5,503,0,0,2164,
        2165,3,1090,545,0,2165,2166,5,199,0,0,2166,2167,5,112,0,0,2167,2168,
        5,648,0,0,2168,2169,3,1180,590,0,2169,2170,3,120,60,0,2170,119,1,
        0,0,0,2171,2172,5,390,0,0,2172,2173,5,776,0,0,2173,2178,3,122,61,
        0,2174,2175,5,773,0,0,2175,2177,3,122,61,0,2176,2174,1,0,0,0,2177,
        2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,2181,1,0,0,
        0,2180,2178,1,0,0,0,2181,2182,5,777,0,0,2182,121,1,0,0,0,2183,2184,
        5,224,0,0,2184,2198,3,1160,580,0,2185,2186,5,109,0,0,2186,2198,3,
        1160,580,0,2187,2188,5,618,0,0,2188,2198,3,1160,580,0,2189,2190,
        5,406,0,0,2190,2198,3,1160,580,0,2191,2192,5,519,0,0,2192,2198,3,
        1160,580,0,2193,2194,5,398,0,0,2194,2198,3,1160,580,0,2195,2196,
        5,413,0,0,2196,2198,3,1140,570,0,2197,2183,1,0,0,0,2197,2185,1,0,
        0,0,2197,2187,1,0,0,0,2197,2189,1,0,0,0,2197,2191,1,0,0,0,2197,2193,
        1,0,0,0,2197,2195,1,0,0,0,2198,123,1,0,0,0,2199,2200,5,572,0,0,2200,
        2201,3,1076,538,0,2201,2206,3,128,64,0,2202,2203,5,620,0,0,2203,
        2204,5,288,0,0,2204,2205,5,217,0,0,2205,2207,3,1082,541,0,2206,2202,
        1,0,0,0,2206,2207,1,0,0,0,2207,2209,1,0,0,0,2208,2210,3,132,66,0,
        2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,125,1,0,0,0,2211,2212,5,
        605,0,0,2212,2213,5,572,0,0,2213,2214,3,1076,538,0,2214,2215,5,4,
        0,0,2215,2217,3,130,65,0,2216,2218,3,58,29,0,2217,2216,1,0,0,0,2217,
        2218,1,0,0,0,2218,127,1,0,0,0,2219,2222,4,64,31,0,2220,2221,5,4,
        0,0,2221,2223,3,130,65,0,2222,2220,1,0,0,0,2222,2223,1,0,0,0,2223,
        2227,1,0,0,0,2224,2225,5,4,0,0,2225,2227,3,130,65,0,2226,2219,1,
        0,0,0,2226,2224,1,0,0,0,2227,129,1,0,0,0,2228,2229,5,111,0,0,2229,
        2230,3,1160,580,0,2230,131,1,0,0,0,2231,2238,3,134,67,0,2232,2234,
        5,773,0,0,2233,2232,1,0,0,0,2233,2234,1,0,0,0,2234,2235,1,0,0,0,
        2235,2237,3,134,67,0,2236,2233,1,0,0,0,2237,2240,1,0,0,0,2238,2236,
        1,0,0,0,2238,2239,1,0,0,0,2239,133,1,0,0,0,2240,2238,1,0,0,0,2241,
        2254,3,136,68,0,2242,2254,3,140,70,0,2243,2254,3,142,71,0,2244,2254,
        3,144,72,0,2245,2254,3,146,73,0,2246,2254,3,148,74,0,2247,2254,3,
        150,75,0,2248,2254,3,152,76,0,2249,2250,4,67,32,0,2250,2254,3,154,
        77,0,2251,2252,4,67,33,0,2252,2254,3,156,78,0,2253,2241,1,0,0,0,
        2253,2242,1,0,0,0,2253,2243,1,0,0,0,2253,2244,1,0,0,0,2253,2245,
        1,0,0,0,2253,2246,1,0,0,0,2253,2247,1,0,0,0,2253,2248,1,0,0,0,2253,
        2249,1,0,0,0,2253,2251,1,0,0,0,2254,135,1,0,0,0,2255,2257,5,238,
        0,0,2256,2258,5,750,0,0,2257,2256,1,0,0,0,2257,2258,1,0,0,0,2258,
        2259,1,0,0,0,2259,2260,3,1186,593,0,2260,137,1,0,0,0,2261,2263,7,
        12,0,0,2262,2264,5,750,0,0,2263,2262,1,0,0,0,2263,2264,1,0,0,0,2264,
        2265,1,0,0,0,2265,2266,3,1186,593,0,2266,139,1,0,0,0,2267,2269,5,
        23,0,0,2268,2270,5,750,0,0,2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,
        2271,1,0,0,0,2271,2272,3,1186,593,0,2272,141,1,0,0,0,2273,2275,5,
        324,0,0,2274,2276,5,750,0,0,2275,2274,1,0,0,0,2275,2276,1,0,0,0,
        2276,2277,1,0,0,0,2277,2278,3,1186,593,0,2278,143,1,0,0,0,2279,2281,
        5,181,0,0,2280,2282,5,750,0,0,2281,2280,1,0,0,0,2281,2282,1,0,0,
        0,2282,2283,1,0,0,0,2283,2284,3,1186,593,0,2284,145,1,0,0,0,2285,
        2287,5,368,0,0,2286,2288,5,750,0,0,2287,2286,1,0,0,0,2287,2288,1,
        0,0,0,2288,2289,1,0,0,0,2289,2290,3,1142,571,0,2290,147,1,0,0,0,
        2291,2293,5,553,0,0,2292,2291,1,0,0,0,2292,2293,1,0,0,0,2293,2294,
        1,0,0,0,2294,2296,5,163,0,0,2295,2297,5,750,0,0,2296,2295,1,0,0,
        0,2296,2297,1,0,0,0,2297,2298,1,0,0,0,2298,2299,3,1094,547,0,2299,
        149,1,0,0,0,2300,2301,7,13,0,0,2301,151,1,0,0,0,2302,2304,5,75,0,
        0,2303,2305,5,750,0,0,2304,2303,1,0,0,0,2304,2305,1,0,0,0,2305,2306,
        1,0,0,0,2306,2307,3,1160,580,0,2307,153,1,0,0,0,2308,2310,5,189,
        0,0,2309,2311,5,750,0,0,2310,2309,1,0,0,0,2310,2311,1,0,0,0,2311,
        2312,1,0,0,0,2312,2313,3,1186,593,0,2313,155,1,0,0,0,2314,2316,5,
        158,0,0,2315,2317,5,750,0,0,2316,2315,1,0,0,0,2316,2317,1,0,0,0,
        2317,2318,1,0,0,0,2318,2319,3,1154,577,0,2319,157,1,0,0,0,2320,2322,
        3,160,80,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,2324,1,0,0,0,
        2323,2325,3,976,488,0,2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,2327,
        1,0,0,0,2326,2328,3,164,82,0,2327,2326,1,0,0,0,2327,2328,1,0,0,0,
        2328,2329,1,0,0,0,2329,2330,5,636,0,0,2330,2331,3,1072,536,0,2331,
        2332,3,70,35,0,2332,159,1,0,0,0,2333,2334,5,394,0,0,2334,2336,5,
        458,0,0,2335,2337,3,162,81,0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,
        2337,2340,1,0,0,0,2338,2340,3,162,81,0,2339,2333,1,0,0,0,2339,2338,
        1,0,0,0,2340,161,1,0,0,0,2341,2342,5,9,0,0,2342,2343,5,750,0,0,2343,
        2344,7,14,0,0,2344,163,1,0,0,0,2345,2346,5,537,0,0,2346,2347,5,496,
        0,0,2347,2348,7,10,0,0,2348,165,1,0,0,0,2349,2351,3,976,488,0,2350,
        2349,1,0,0,0,2350,2351,1,0,0,0,2351,2352,1,0,0,0,2352,2353,5,594,
        0,0,2353,2354,3,1068,534,0,2354,2355,7,15,0,0,2355,2356,7,16,0,0,
        2356,2357,5,383,0,0,2357,2358,3,1102,551,0,2358,2359,5,200,0,0,2359,
        2360,5,153,0,0,2360,2362,5,487,0,0,2361,2363,3,168,84,0,2362,2361,
        1,0,0,0,2362,2363,1,0,0,0,2363,2364,1,0,0,0,2364,2365,3,784,392,
        0,2365,167,1,0,0,0,2366,2367,4,84,34,0,2367,2368,7,17,0,0,2368,2369,
        3,1180,590,0,2369,169,1,0,0,0,2370,2372,3,976,488,0,2371,2370,1,
        0,0,0,2371,2372,1,0,0,0,2372,2373,1,0,0,0,2373,2375,5,170,0,0,2374,
        2376,3,980,490,0,2375,2374,1,0,0,0,2375,2376,1,0,0,0,2376,2377,1,
        0,0,0,2377,2378,3,1084,542,0,2378,2379,5,383,0,0,2379,2380,5,490,
        0,0,2380,2387,3,862,431,0,2381,2382,5,383,0,0,2382,2384,5,79,0,0,
        2383,2385,5,371,0,0,2384,2383,1,0,0,0,2384,2385,1,0,0,0,2385,2386,
        1,0,0,0,2386,2388,5,418,0,0,2387,2381,1,0,0,0,2387,2388,1,0,0,0,
        2388,2395,1,0,0,0,2389,2396,5,156,0,0,2390,2393,5,140,0,0,2391,2392,
        5,383,0,0,2392,2394,5,514,0,0,2393,2391,1,0,0,0,2393,2394,1,0,0,
        0,2394,2396,1,0,0,0,2395,2389,1,0,0,0,2395,2390,1,0,0,0,2395,2396,
        1,0,0,0,2396,2399,1,0,0,0,2397,2398,5,75,0,0,2398,2400,3,1160,580,
        0,2399,2397,1,0,0,0,2399,2400,1,0,0,0,2400,2401,1,0,0,0,2401,2402,
        5,147,0,0,2402,2403,3,784,392,0,2403,171,1,0,0,0,2404,2406,5,659,
        0,0,2405,2407,3,980,490,0,2406,2405,1,0,0,0,2406,2407,1,0,0,0,2407,
        2408,1,0,0,0,2408,2409,3,560,280,0,2409,173,1,0,0,0,2410,2411,5,
        394,0,0,2411,2412,5,458,0,0,2412,2413,5,523,0,0,2413,2414,5,718,
        0,0,2414,2415,5,710,0,0,2415,2419,3,1146,573,0,2416,2418,3,176,88,
        0,2417,2416,1,0,0,0,2418,2421,1,0,0,0,2419,2417,1,0,0,0,2419,2420,
        1,0,0,0,2420,2436,1,0,0,0,2421,2419,1,0,0,0,2422,2423,5,523,0,0,
        2423,2424,5,718,0,0,2424,2426,5,710,0,0,2425,2427,3,980,490,0,2426,
        2425,1,0,0,0,2426,2427,1,0,0,0,2427,2428,1,0,0,0,2428,2432,3,1146,
        573,0,2429,2431,3,176,88,0,2430,2429,1,0,0,0,2431,2434,1,0,0,0,2432,
        2430,1,0,0,0,2432,2433,1,0,0,0,2433,2436,1,0,0,0,2434,2432,1,0,0,
        0,2435,2410,1,0,0,0,2435,2422,1,0,0,0,2436,175,1,0,0,0,2437,2438,
        5,357,0,0,2438,2439,5,580,0,0,2439,2453,3,1162,581,0,2440,2441,5,
        715,0,0,2441,2442,5,580,0,0,2442,2453,3,1162,581,0,2443,2444,5,717,
        0,0,2444,2445,3,1162,581,0,2445,2446,5,230,0,0,2446,2447,5,45,0,
        0,2447,2448,3,1146,573,0,2448,2453,1,0,0,0,2449,2450,5,716,0,0,2450,
        2451,5,580,0,0,2451,2453,3,1162,581,0,2452,2437,1,0,0,0,2452,2440,
        1,0,0,0,2452,2443,1,0,0,0,2452,2449,1,0,0,0,2453,177,1,0,0,0,2454,
        2472,5,148,0,0,2455,2473,3,180,90,0,2456,2473,3,182,91,0,2457,2473,
        3,184,92,0,2458,2473,3,186,93,0,2459,2473,3,188,94,0,2460,2473,3,
        190,95,0,2461,2473,3,194,97,0,2462,2473,3,196,98,0,2463,2473,3,198,
        99,0,2464,2473,3,200,100,0,2465,2473,3,202,101,0,2466,2467,4,89,
        35,0,2467,2473,3,204,102,0,2468,2469,4,89,36,0,2469,2473,3,206,103,
        0,2470,2471,4,89,37,0,2471,2473,3,208,104,0,2472,2455,1,0,0,0,2472,
        2456,1,0,0,0,2472,2457,1,0,0,0,2472,2458,1,0,0,0,2472,2459,1,0,0,
        0,2472,2460,1,0,0,0,2472,2461,1,0,0,0,2472,2462,1,0,0,0,2472,2463,
        1,0,0,0,2472,2464,1,0,0,0,2472,2465,1,0,0,0,2472,2466,1,0,0,0,2472,
        2468,1,0,0,0,2472,2470,1,0,0,0,2473,179,1,0,0,0,2474,2476,5,109,
        0,0,2475,2477,3,978,489,0,2476,2475,1,0,0,0,2476,2477,1,0,0,0,2477,
        2478,1,0,0,0,2478,2479,3,1058,529,0,2479,181,1,0,0,0,2480,2482,5,
        170,0,0,2481,2483,3,978,489,0,2482,2481,1,0,0,0,2482,2483,1,0,0,
        0,2483,2484,1,0,0,0,2484,2485,3,1086,543,0,2485,183,1,0,0,0,2486,
        2488,5,206,0,0,2487,2489,3,978,489,0,2488,2487,1,0,0,0,2488,2489,
        1,0,0,0,2489,2490,1,0,0,0,2490,2491,3,1066,533,0,2491,185,1,0,0,
        0,2492,2494,5,422,0,0,2493,2495,3,978,489,0,2494,2493,1,0,0,0,2494,
        2495,1,0,0,0,2495,2496,1,0,0,0,2496,2497,3,1062,531,0,2497,187,1,
        0,0,0,2498,2500,3,1032,516,0,2499,2498,1,0,0,0,2499,2500,1,0,0,0,
        2500,2501,1,0,0,0,2501,2502,5,236,0,0,2502,2503,3,1052,526,0,2503,
        2504,5,383,0,0,2504,2506,3,1102,551,0,2505,2507,3,46,23,0,2506,2505,
        1,0,0,0,2506,2507,1,0,0,0,2507,189,1,0,0,0,2508,2509,5,288,0,0,2509,
        2510,5,217,0,0,2510,2521,3,1082,541,0,2511,2518,3,192,96,0,2512,
        2514,5,773,0,0,2513,2512,1,0,0,0,2513,2514,1,0,0,0,2514,2515,1,0,
        0,0,2515,2517,3,192,96,0,2516,2513,1,0,0,0,2517,2520,1,0,0,0,2518,
        2516,1,0,0,0,2518,2519,1,0,0,0,2519,2522,1,0,0,0,2520,2518,1,0,0,
        0,2521,2511,1,0,0,0,2521,2522,1,0,0,0,2522,191,1,0,0,0,2523,2526,
        3,150,75,0,2524,2526,3,148,74,0,2525,2523,1,0,0,0,2525,2524,1,0,
        0,0,2526,193,1,0,0,0,2527,2529,5,503,0,0,2528,2530,3,978,489,0,2529,
        2528,1,0,0,0,2529,2530,1,0,0,0,2530,2531,1,0,0,0,2531,2532,3,1092,
        546,0,2532,195,1,0,0,0,2533,2535,5,577,0,0,2534,2533,1,0,0,0,2534,
        2535,1,0,0,0,2535,2536,1,0,0,0,2536,2538,7,18,0,0,2537,2539,3,978,
        489,0,2538,2537,1,0,0,0,2538,2539,1,0,0,0,2539,2540,1,0,0,0,2540,
        2542,3,1104,552,0,2541,2543,7,2,0,0,2542,2541,1,0,0,0,2542,2543,
        1,0,0,0,2543,197,1,0,0,0,2544,2545,5,572,0,0,2545,2556,3,1078,539,
        0,2546,2553,3,192,96,0,2547,2549,5,773,0,0,2548,2547,1,0,0,0,2548,
        2549,1,0,0,0,2549,2550,1,0,0,0,2550,2552,3,192,96,0,2551,2548,1,
        0,0,0,2552,2555,1,0,0,0,2553,2551,1,0,0,0,2553,2554,1,0,0,0,2554,
        2557,1,0,0,0,2555,2553,1,0,0,0,2556,2546,1,0,0,0,2556,2557,1,0,0,
        0,2557,199,1,0,0,0,2558,2560,5,594,0,0,2559,2561,3,978,489,0,2560,
        2559,1,0,0,0,2560,2561,1,0,0,0,2561,2562,1,0,0,0,2562,2563,3,1070,
        535,0,2563,201,1,0,0,0,2564,2566,5,636,0,0,2565,2567,3,978,489,0,
        2566,2565,1,0,0,0,2566,2567,1,0,0,0,2567,2568,1,0,0,0,2568,2570,
        3,992,496,0,2569,2571,7,2,0,0,2570,2569,1,0,0,0,2570,2571,1,0,0,
        0,2571,203,1,0,0,0,2572,2574,5,659,0,0,2573,2575,3,978,489,0,2574,
        2573,1,0,0,0,2574,2575,1,0,0,0,2575,2576,1,0,0,0,2576,2577,3,560,
        280,0,2577,205,1,0,0,0,2578,2579,5,523,0,0,2579,2580,5,718,0,0,2580,
        2582,5,710,0,0,2581,2583,3,978,489,0,2582,2581,1,0,0,0,2582,2583,
        1,0,0,0,2583,2584,1,0,0,0,2584,2585,3,1146,573,0,2585,207,1,0,0,
        0,2586,2587,5,605,0,0,2587,2588,5,572,0,0,2588,2590,3,1078,539,0,
        2589,2591,3,58,29,0,2590,2589,1,0,0,0,2590,2591,1,0,0,0,2591,209,
        1,0,0,0,2592,2593,5,453,0,0,2593,2594,7,18,0,0,2594,2599,3,212,106,
        0,2595,2596,5,773,0,0,2596,2598,3,212,106,0,2597,2595,1,0,0,0,2598,
        2601,1,0,0,0,2599,2597,1,0,0,0,2599,2600,1,0,0,0,2600,211,1,0,0,
        0,2601,2599,1,0,0,0,2602,2603,3,1102,551,0,2603,2604,5,590,0,0,2604,
        2605,3,1096,548,0,2605,213,1,0,0,0,2606,2608,5,597,0,0,2607,2609,
        5,574,0,0,2608,2607,1,0,0,0,2608,2609,1,0,0,0,2609,2610,1,0,0,0,
        2610,2611,3,1102,551,0,2611,215,1,0,0,0,2612,2613,5,234,0,0,2613,
        2614,5,574,0,0,2614,2615,5,203,0,0,2615,2616,3,1164,582,0,2616,217,
        1,0,0,0,2617,2618,5,48,0,0,2618,2624,3,1062,531,0,2619,2621,5,776,
        0,0,2620,2622,3,756,378,0,2621,2620,1,0,0,0,2621,2622,1,0,0,0,2622,
        2623,1,0,0,0,2623,2625,5,777,0,0,2624,2619,1,0,0,0,2624,2625,1,0,
        0,0,2625,219,1,0,0,0,2626,2627,4,110,38,0,2627,2629,3,320,160,0,
        2628,2626,1,0,0,0,2628,2629,1,0,0,0,2629,2630,1,0,0,0,2630,2634,
        5,133,0,0,2631,2633,3,224,112,0,2632,2631,1,0,0,0,2633,2636,1,0,
        0,0,2634,2632,1,0,0,0,2634,2635,1,0,0,0,2635,2669,1,0,0,0,2636,2634,
        1,0,0,0,2637,2661,5,203,0,0,2638,2639,3,1106,553,0,2639,2640,5,621,
        0,0,2640,2642,3,334,167,0,2641,2643,3,358,179,0,2642,2641,1,0,0,
        0,2642,2643,1,0,0,0,2643,2662,1,0,0,0,2644,2647,3,1102,551,0,2645,
        2646,4,110,39,0,2646,2648,3,398,199,0,2647,2645,1,0,0,0,2647,2648,
        1,0,0,0,2648,2650,1,0,0,0,2649,2651,3,222,111,0,2650,2649,1,0,0,
        0,2650,2651,1,0,0,0,2651,2653,1,0,0,0,2652,2654,3,358,179,0,2653,
        2652,1,0,0,0,2653,2654,1,0,0,0,2654,2656,1,0,0,0,2655,2657,3,328,
        164,0,2656,2655,1,0,0,0,2656,2657,1,0,0,0,2657,2659,1,0,0,0,2658,
        2660,3,286,143,0,2659,2658,1,0,0,0,2659,2660,1,0,0,0,2660,2662,1,
        0,0,0,2661,2638,1,0,0,0,2661,2644,1,0,0,0,2662,2670,1,0,0,0,2663,
        2664,3,1106,553,0,2664,2665,5,203,0,0,2665,2667,3,334,167,0,2666,
        2668,3,358,179,0,2667,2666,1,0,0,0,2667,2668,1,0,0,0,2668,2670,1,
        0,0,0,2669,2637,1,0,0,0,2669,2663,1,0,0,0,2670,221,1,0,0,0,2671,
        2672,4,111,40,0,2672,2673,5,405,0,0,2673,2674,5,776,0,0,2674,2675,
        3,1130,565,0,2675,2676,5,777,0,0,2676,223,1,0,0,0,2677,2678,7,19,
        0,0,2678,225,1,0,0,0,2679,2684,5,147,0,0,2680,2681,4,113,41,0,2681,
        2685,3,756,378,0,2682,2683,4,113,42,0,2683,2685,3,352,176,0,2684,
        2680,1,0,0,0,2684,2682,1,0,0,0,2685,227,1,0,0,0,2686,2704,5,219,
        0,0,2687,2688,3,1102,551,0,2688,2690,5,387,0,0,2689,2691,3,398,199,
        0,2690,2689,1,0,0,0,2690,2691,1,0,0,0,2691,2705,1,0,0,0,2692,2702,
        3,1128,564,0,2693,2703,5,66,0,0,2694,2695,5,435,0,0,2695,2697,3,
        230,115,0,2696,2698,3,358,179,0,2697,2696,1,0,0,0,2697,2698,1,0,
        0,0,2698,2700,1,0,0,0,2699,2701,3,284,142,0,2700,2699,1,0,0,0,2700,
        2701,1,0,0,0,2701,2703,1,0,0,0,2702,2693,1,0,0,0,2702,2694,1,0,0,
        0,2703,2705,1,0,0,0,2704,2687,1,0,0,0,2704,2692,1,0,0,0,2705,229,
        1,0,0,0,2706,2717,7,20,0,0,2707,2714,3,1128,564,0,2708,2715,7,21,
        0,0,2709,2710,7,22,0,0,2710,2711,5,776,0,0,2711,2712,3,246,123,0,
        2712,2713,5,777,0,0,2713,2715,1,0,0,0,2714,2708,1,0,0,0,2714,2709,
        1,0,0,0,2715,2717,1,0,0,0,2716,2706,1,0,0,0,2716,2707,1,0,0,0,2717,
        231,1,0,0,0,2718,2720,5,242,0,0,2719,2721,3,234,117,0,2720,2719,
        1,0,0,0,2720,2721,1,0,0,0,2721,2723,1,0,0,0,2722,2724,5,232,0,0,
        2723,2722,1,0,0,0,2723,2724,1,0,0,0,2724,2726,1,0,0,0,2725,2727,
        5,248,0,0,2726,2725,1,0,0,0,2726,2727,1,0,0,0,2727,2728,1,0,0,0,
        2728,2730,3,1102,551,0,2729,2731,3,1036,518,0,2730,2729,1,0,0,0,
        2730,2731,1,0,0,0,2731,2744,1,0,0,0,2732,2735,3,236,118,0,2733,2734,
        4,116,43,0,2734,2736,3,248,124,0,2735,2733,1,0,0,0,2735,2736,1,0,
        0,0,2736,2745,1,0,0,0,2737,2738,5,506,0,0,2738,2741,3,994,497,0,
        2739,2740,4,116,44,0,2740,2742,3,248,124,0,2741,2739,1,0,0,0,2741,
        2742,1,0,0,0,2742,2745,1,0,0,0,2743,2745,3,242,121,0,2744,2732,1,
        0,0,0,2744,2737,1,0,0,0,2744,2743,1,0,0,0,2745,2747,1,0,0,0,2746,
        2748,3,250,125,0,2747,2746,1,0,0,0,2747,2748,1,0,0,0,2748,233,1,
        0,0,0,2749,2750,7,23,0,0,2750,235,1,0,0,0,2751,2753,5,776,0,0,2752,
        2754,3,238,119,0,2753,2752,1,0,0,0,2753,2754,1,0,0,0,2754,2755,1,
        0,0,0,2755,2757,5,777,0,0,2756,2751,1,0,0,0,2756,2757,1,0,0,0,2757,
        2758,1,0,0,0,2758,2759,3,240,120,0,2759,237,1,0,0,0,2760,2765,3,
        1048,524,0,2761,2762,5,773,0,0,2762,2764,3,1048,524,0,2763,2761,
        1,0,0,0,2764,2767,1,0,0,0,2765,2763,1,0,0,0,2765,2766,1,0,0,0,2766,
        239,1,0,0,0,2767,2765,1,0,0,0,2768,2769,7,24,0,0,2769,2770,3,244,
        122,0,2770,241,1,0,0,0,2771,2779,3,90,45,0,2772,2774,5,776,0,0,2773,
        2775,3,238,119,0,2774,2773,1,0,0,0,2774,2775,1,0,0,0,2775,2776,1,
        0,0,0,2776,2777,5,777,0,0,2777,2779,3,90,45,0,2778,2771,1,0,0,0,
        2778,2772,1,0,0,0,2779,243,1,0,0,0,2780,2782,5,776,0,0,2781,2783,
        3,246,123,0,2782,2781,1,0,0,0,2782,2783,1,0,0,0,2783,2784,1,0,0,
        0,2784,2793,5,777,0,0,2785,2786,5,773,0,0,2786,2788,5,776,0,0,2787,
        2789,3,246,123,0,2788,2787,1,0,0,0,2788,2789,1,0,0,0,2789,2790,1,
        0,0,0,2790,2792,5,777,0,0,2791,2785,1,0,0,0,2792,2795,1,0,0,0,2793,
        2791,1,0,0,0,2793,2794,1,0,0,0,2794,245,1,0,0,0,2795,2793,1,0,0,
        0,2796,2799,3,676,338,0,2797,2799,5,128,0,0,2798,2796,1,0,0,0,2798,
        2797,1,0,0,0,2799,2807,1,0,0,0,2800,2803,5,773,0,0,2801,2804,3,676,
        338,0,2802,2804,5,128,0,0,2803,2801,1,0,0,0,2803,2802,1,0,0,0,2804,
        2806,1,0,0,0,2805,2800,1,0,0,0,2806,2809,1,0,0,0,2807,2805,1,0,0,
        0,2807,2808,1,0,0,0,2808,247,1,0,0,0,2809,2807,1,0,0,0,2810,2811,
        5,17,0,0,2811,2813,3,1128,564,0,2812,2814,3,1044,522,0,2813,2812,
        1,0,0,0,2813,2814,1,0,0,0,2814,249,1,0,0,0,2815,2816,5,383,0,0,2816,
        2817,5,151,0,0,2817,2818,5,265,0,0,2818,2819,5,614,0,0,2819,2820,
        3,994,497,0,2820,251,1,0,0,0,2821,2822,5,281,0,0,2822,2824,3,254,
        127,0,2823,2825,7,25,0,0,2824,2823,1,0,0,0,2824,2825,1,0,0,0,2825,
        2827,1,0,0,0,2826,2828,5,284,0,0,2827,2826,1,0,0,0,2827,2828,1,0,
        0,0,2828,2829,1,0,0,0,2829,2830,5,237,0,0,2830,2832,3,1160,580,0,
        2831,2833,7,8,0,0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,2833,2834,
        1,0,0,0,2834,2835,5,248,0,0,2835,2836,5,574,0,0,2836,2838,3,1102,
        551,0,2837,2839,3,1036,518,0,2838,2837,1,0,0,0,2838,2839,1,0,0,0,
        2839,2841,1,0,0,0,2840,2842,3,998,499,0,2841,2840,1,0,0,0,2841,2842,
        1,0,0,0,2842,2844,1,0,0,0,2843,2845,3,256,128,0,2844,2843,1,0,0,
        0,2844,2845,1,0,0,0,2845,2847,1,0,0,0,2846,2848,3,1000,500,0,2847,
        2846,1,0,0,0,2847,2848,1,0,0,0,2848,2850,1,0,0,0,2849,2851,3,1004,
        502,0,2850,2849,1,0,0,0,2850,2851,1,0,0,0,2851,2852,1,0,0,0,2852,
        2853,3,258,129,0,2853,253,1,0,0,0,2854,2855,7,26,0,0,2855,255,1,
        0,0,0,2856,2857,5,484,0,0,2857,2858,5,230,0,0,2858,2859,5,45,0,0,
        2859,2860,3,1156,578,0,2860,257,1,0,0,0,2861,2862,5,232,0,0,2862,
        2863,5,747,0,0,2863,2865,7,27,0,0,2864,2861,1,0,0,0,2864,2865,1,
        0,0,0,2865,2867,1,0,0,0,2866,2868,3,260,130,0,2867,2866,1,0,0,0,
        2867,2868,1,0,0,0,2868,2871,1,0,0,0,2869,2870,5,506,0,0,2870,2872,
        3,994,497,0,2871,2869,1,0,0,0,2871,2872,1,0,0,0,2872,259,1,0,0,0,
        2873,2875,5,776,0,0,2874,2876,3,262,131,0,2875,2874,1,0,0,0,2875,
        2876,1,0,0,0,2876,2877,1,0,0,0,2877,2878,5,777,0,0,2878,261,1,0,
        0,0,2879,2882,3,1046,523,0,2880,2882,3,742,371,0,2881,2879,1,0,0,
        0,2881,2880,1,0,0,0,2882,2890,1,0,0,0,2883,2886,5,773,0,0,2884,2887,
        3,1046,523,0,2885,2887,3,742,371,0,2886,2884,1,0,0,0,2886,2885,1,
        0,0,0,2887,2889,1,0,0,0,2888,2883,1,0,0,0,2889,2892,1,0,0,0,2890,
        2888,1,0,0,0,2890,2891,1,0,0,0,2891,263,1,0,0,0,2892,2890,1,0,0,
        0,2893,2895,5,458,0,0,2894,2896,7,28,0,0,2895,2894,1,0,0,0,2895,
        2896,1,0,0,0,2896,2898,1,0,0,0,2897,2899,5,248,0,0,2898,2897,1,0,
        0,0,2898,2899,1,0,0,0,2899,2900,1,0,0,0,2900,2902,3,1102,551,0,2901,
        2903,3,1036,518,0,2902,2901,1,0,0,0,2902,2903,1,0,0,0,2903,2908,
        1,0,0,0,2904,2909,3,236,118,0,2905,2906,5,506,0,0,2906,2909,3,994,
        497,0,2907,2909,3,242,121,0,2908,2904,1,0,0,0,2908,2905,1,0,0,0,
        2908,2907,1,0,0,0,2909,265,1,0,0,0,2910,2912,3,270,135,0,2911,2913,
        3,344,172,0,2912,2911,1,0,0,0,2912,2913,1,0,0,0,2913,2917,1,0,0,
        0,2914,2917,3,274,137,0,2915,2917,3,268,134,0,2916,2910,1,0,0,0,
        2916,2914,1,0,0,0,2916,2915,1,0,0,0,2917,267,1,0,0,0,2918,2919,5,
        776,0,0,2919,2920,3,268,134,0,2920,2921,5,777,0,0,2921,2931,1,0,
        0,0,2922,2923,3,270,135,0,2923,2925,3,292,146,0,2924,2926,3,344,
        172,0,2925,2924,1,0,0,0,2925,2926,1,0,0,0,2926,2931,1,0,0,0,2927,
        2928,3,344,172,0,2928,2929,3,292,146,0,2929,2931,1,0,0,0,2930,2918,
        1,0,0,0,2930,2922,1,0,0,0,2930,2927,1,0,0,0,2931,269,1,0,0,0,2932,
        2933,4,135,45,0,2933,2935,3,320,160,0,2934,2932,1,0,0,0,2934,2935,
        1,0,0,0,2935,2950,1,0,0,0,2936,2938,3,272,136,0,2937,2939,3,328,
        164,0,2938,2937,1,0,0,0,2938,2939,1,0,0,0,2939,2941,1,0,0,0,2940,
        2942,3,284,142,0,2941,2940,1,0,0,0,2941,2942,1,0,0,0,2942,2951,1,
        0,0,0,2943,2945,3,274,137,0,2944,2946,3,328,164,0,2945,2944,1,0,
        0,0,2945,2946,1,0,0,0,2946,2948,1,0,0,0,2947,2949,3,284,142,0,2948,
        2947,1,0,0,0,2948,2949,1,0,0,0,2949,2951,1,0,0,0,2950,2936,1,0,0,
        0,2950,2943,1,0,0,0,2951,2954,1,0,0,0,2952,2953,4,135,46,0,2953,
        2955,3,294,147,0,2954,2952,1,0,0,0,2954,2955,1,0,0,0,2955,271,1,
        0,0,0,2956,2967,3,276,138,0,2957,2958,3,274,137,0,2958,2960,5,608,
        0,0,2959,2961,3,396,198,0,2960,2959,1,0,0,0,2960,2961,1,0,0,0,2961,
        2964,1,0,0,0,2962,2965,3,276,138,0,2963,2965,3,274,137,0,2964,2962,
        1,0,0,0,2964,2963,1,0,0,0,2965,2967,1,0,0,0,2966,2956,1,0,0,0,2966,
        2957,1,0,0,0,2967,2978,1,0,0,0,2968,2970,5,608,0,0,2969,2971,3,396,
        198,0,2970,2969,1,0,0,0,2970,2971,1,0,0,0,2971,2974,1,0,0,0,2972,
        2975,3,276,138,0,2973,2975,3,274,137,0,2974,2972,1,0,0,0,2974,2973,
        1,0,0,0,2975,2977,1,0,0,0,2976,2968,1,0,0,0,2977,2980,1,0,0,0,2978,
        2976,1,0,0,0,2978,2979,1,0,0,0,2979,273,1,0,0,0,2980,2978,1,0,0,
        0,2981,2987,5,776,0,0,2982,2988,3,274,137,0,2983,2985,3,270,135,
        0,2984,2986,3,344,172,0,2985,2984,1,0,0,0,2985,2986,1,0,0,0,2986,
        2988,1,0,0,0,2987,2982,1,0,0,0,2987,2983,1,0,0,0,2988,2989,1,0,0,
        0,2989,2990,5,777,0,0,2990,275,1,0,0,0,2991,2997,3,278,139,0,2992,
        2993,4,138,47,0,2993,2997,3,336,168,0,2994,2995,4,138,48,0,2995,
        2997,3,338,169,0,2996,2991,1,0,0,0,2996,2992,1,0,0,0,2996,2994,1,
        0,0,0,2997,277,1,0,0,0,2998,3002,5,497,0,0,2999,3001,3,342,171,0,
        3000,2999,1,0,0,0,3001,3004,1,0,0,0,3002,3000,1,0,0,0,3002,3003,
        1,0,0,0,3003,3005,1,0,0,0,3004,3002,1,0,0,0,3005,3007,3,352,176,
        0,3006,3008,3,292,146,0,3007,3006,1,0,0,0,3007,3008,1,0,0,0,3008,
        3010,1,0,0,0,3009,3011,3,332,166,0,3010,3009,1,0,0,0,3010,3011,1,
        0,0,0,3011,3013,1,0,0,0,3012,3014,3,358,179,0,3013,3012,1,0,0,0,
        3013,3014,1,0,0,0,3014,3016,1,0,0,0,3015,3017,3,324,162,0,3016,3015,
        1,0,0,0,3016,3017,1,0,0,0,3017,3019,1,0,0,0,3018,3020,3,296,148,
        0,3019,3018,1,0,0,0,3019,3020,1,0,0,0,3020,3023,1,0,0,0,3021,3022,
        4,139,49,0,3022,3024,3,298,149,0,3023,3021,1,0,0,0,3023,3024,1,0,
        0,0,3024,279,1,0,0,0,3025,3026,3,274,137,0,3026,281,1,0,0,0,3027,
        3028,7,29,0,0,3028,283,1,0,0,0,3029,3030,5,276,0,0,3030,3031,3,288,
        144,0,3031,285,1,0,0,0,3032,3033,5,276,0,0,3033,3034,3,290,145,0,
        3034,287,1,0,0,0,3035,3038,3,290,145,0,3036,3037,7,30,0,0,3037,3039,
        3,290,145,0,3038,3036,1,0,0,0,3038,3039,1,0,0,0,3039,289,1,0,0,0,
        3040,3043,3,1128,564,0,3041,3043,7,31,0,0,3042,3040,1,0,0,0,3042,
        3041,1,0,0,0,3043,291,1,0,0,0,3044,3072,5,248,0,0,3045,3046,5,396,
        0,0,3046,3048,3,1154,577,0,3047,3049,3,998,499,0,3048,3047,1,0,0,
        0,3048,3049,1,0,0,0,3049,3051,1,0,0,0,3050,3052,3,1000,500,0,3051,
        3050,1,0,0,0,3051,3052,1,0,0,0,3052,3054,1,0,0,0,3053,3055,3,1004,
        502,0,3054,3053,1,0,0,0,3054,3055,1,0,0,0,3055,3073,1,0,0,0,3056,
        3057,5,150,0,0,3057,3073,3,1154,577,0,3058,3061,3,1180,590,0,3059,
        3061,3,742,371,0,3060,3058,1,0,0,0,3060,3059,1,0,0,0,3061,3069,1,
        0,0,0,3062,3065,5,773,0,0,3063,3066,3,1180,590,0,3064,3066,3,742,
        371,0,3065,3063,1,0,0,0,3065,3064,1,0,0,0,3066,3068,1,0,0,0,3067,
        3062,1,0,0,0,3068,3071,1,0,0,0,3069,3067,1,0,0,0,3069,3070,1,0,0,
        0,3070,3073,1,0,0,0,3071,3069,1,0,0,0,3072,3045,1,0,0,0,3072,3056,
        1,0,0,0,3072,3060,1,0,0,0,3073,293,1,0,0,0,3074,3075,5,422,0,0,3075,
        3076,5,13,0,0,3076,3082,5,776,0,0,3077,3080,5,747,0,0,3078,3079,
        5,773,0,0,3079,3081,5,747,0,0,3080,3078,1,0,0,0,3080,3081,1,0,0,
        0,3081,3083,1,0,0,0,3082,3077,1,0,0,0,3082,3083,1,0,0,0,3083,3084,
        1,0,0,0,3084,3085,5,777,0,0,3085,295,1,0,0,0,3086,3087,5,221,0,0,
        3087,3088,3,676,338,0,3088,297,1,0,0,0,3089,3090,5,699,0,0,3090,
        3095,3,300,150,0,3091,3092,5,773,0,0,3092,3094,3,300,150,0,3093,
        3091,1,0,0,0,3094,3097,1,0,0,0,3095,3093,1,0,0,0,3095,3096,1,0,0,
        0,3096,299,1,0,0,0,3097,3095,1,0,0,0,3098,3099,3,1124,562,0,3099,
        3100,5,17,0,0,3100,3101,3,302,151,0,3101,301,1,0,0,0,3102,3103,5,
        776,0,0,3103,3104,3,304,152,0,3104,3105,5,777,0,0,3105,303,1,0,0,
        0,3106,3108,3,1124,562,0,3107,3106,1,0,0,0,3107,3108,1,0,0,0,3108,
        3112,1,0,0,0,3109,3110,5,405,0,0,3110,3111,5,45,0,0,3111,3113,3,
        774,387,0,3112,3109,1,0,0,0,3112,3113,1,0,0,0,3113,3115,1,0,0,0,
        3114,3116,3,328,164,0,3115,3114,1,0,0,0,3115,3116,1,0,0,0,3116,3118,
        1,0,0,0,3117,3119,3,306,153,0,3118,3117,1,0,0,0,3118,3119,1,0,0,
        0,3119,305,1,0,0,0,3120,3121,3,308,154,0,3121,3123,3,310,155,0,3122,
        3124,3,318,159,0,3123,3122,1,0,0,0,3123,3124,1,0,0,0,3124,307,1,
        0,0,0,3125,3126,7,32,0,0,3126,309,1,0,0,0,3127,3130,3,312,156,0,
        3128,3130,3,314,157,0,3129,3127,1,0,0,0,3129,3128,1,0,0,0,3130,311,
        1,0,0,0,3131,3132,5,698,0,0,3132,3146,5,693,0,0,3133,3134,3,1144,
        572,0,3134,3135,5,693,0,0,3135,3146,1,0,0,0,3136,3137,5,787,0,0,
        3137,3146,5,693,0,0,3138,3139,5,247,0,0,3139,3140,3,676,338,0,3140,
        3141,3,764,382,0,3141,3142,5,693,0,0,3142,3146,1,0,0,0,3143,3144,
        5,101,0,0,3144,3146,5,487,0,0,3145,3131,1,0,0,0,3145,3133,1,0,0,
        0,3145,3136,1,0,0,0,3145,3138,1,0,0,0,3145,3143,1,0,0,0,3146,313,
        1,0,0,0,3147,3148,5,30,0,0,3148,3149,3,316,158,0,3149,3150,5,15,
        0,0,3150,3151,3,316,158,0,3151,315,1,0,0,0,3152,3166,3,312,156,0,
        3153,3154,5,698,0,0,3154,3166,5,682,0,0,3155,3156,3,1144,572,0,3156,
        3157,5,682,0,0,3157,3166,1,0,0,0,3158,3159,5,787,0,0,3159,3166,5,
        682,0,0,3160,3161,5,247,0,0,3161,3162,3,676,338,0,3162,3163,3,764,
        382,0,3163,3164,5,682,0,0,3164,3166,1,0,0,0,3165,3152,1,0,0,0,3165,
        3153,1,0,0,0,3165,3155,1,0,0,0,3165,3158,1,0,0,0,3165,3160,1,0,0,
        0,3166,317,1,0,0,0,3167,3174,5,680,0,0,3168,3169,5,101,0,0,3169,
        3175,5,487,0,0,3170,3175,5,217,0,0,3171,3175,5,697,0,0,3172,3173,
        5,373,0,0,3173,3175,5,690,0,0,3174,3168,1,0,0,0,3174,3170,1,0,0,
        0,3174,3171,1,0,0,0,3174,3172,1,0,0,0,3175,319,1,0,0,0,3176,3178,
        5,645,0,0,3177,3179,5,665,0,0,3178,3177,1,0,0,0,3178,3179,1,0,0,
        0,3179,3180,1,0,0,0,3180,3185,3,322,161,0,3181,3182,5,773,0,0,3182,
        3184,3,322,161,0,3183,3181,1,0,0,0,3184,3187,1,0,0,0,3185,3183,1,
        0,0,0,3185,3186,1,0,0,0,3186,321,1,0,0,0,3187,3185,1,0,0,0,3188,
        3190,3,1128,564,0,3189,3191,3,1044,522,0,3190,3189,1,0,0,0,3190,
        3191,1,0,0,0,3191,3192,1,0,0,0,3192,3193,5,17,0,0,3193,3194,3,280,
        140,0,3194,323,1,0,0,0,3195,3196,5,217,0,0,3196,3197,5,45,0,0,3197,
        3199,3,774,387,0,3198,3200,3,326,163,0,3199,3198,1,0,0,0,3199,3200,
        1,0,0,0,3200,325,1,0,0,0,3201,3202,5,645,0,0,3202,3207,5,481,0,0,
        3203,3204,4,163,50,0,3204,3205,5,645,0,0,3205,3207,5,99,0,0,3206,
        3201,1,0,0,0,3206,3203,1,0,0,0,3207,327,1,0,0,0,3208,3209,5,393,
        0,0,3209,3210,5,45,0,0,3210,3211,3,774,387,0,3211,329,1,0,0,0,3212,
        3213,7,33,0,0,3213,331,1,0,0,0,3214,3217,5,203,0,0,3215,3218,5,149,
        0,0,3216,3218,3,334,167,0,3217,3215,1,0,0,0,3217,3216,1,0,0,0,3218,
        333,1,0,0,0,3219,3224,3,360,180,0,3220,3221,5,773,0,0,3221,3223,
        3,360,180,0,3222,3220,1,0,0,0,3223,3226,1,0,0,0,3224,3222,1,0,0,
        0,3224,3225,1,0,0,0,3225,335,1,0,0,0,3226,3224,1,0,0,0,3227,3228,
        5,626,0,0,3228,3233,3,340,170,0,3229,3230,5,773,0,0,3230,3232,3,
        340,170,0,3231,3229,1,0,0,0,3232,3235,1,0,0,0,3233,3231,1,0,0,0,
        3233,3234,1,0,0,0,3234,337,1,0,0,0,3235,3233,1,0,0,0,3236,3237,5,
        574,0,0,3237,3238,3,1102,551,0,3238,339,1,0,0,0,3239,3240,5,487,
        0,0,3240,3242,5,776,0,0,3241,3243,3,246,123,0,3242,3241,1,0,0,0,
        3242,3243,1,0,0,0,3243,3244,1,0,0,0,3244,3245,5,777,0,0,3245,341,
        1,0,0,0,3246,3255,3,282,141,0,3247,3255,5,535,0,0,3248,3249,4,171,
        51,0,3249,3255,5,533,0,0,3250,3251,4,171,52,0,3251,3252,5,325,0,
        0,3252,3253,5,750,0,0,3253,3255,3,1142,571,0,3254,3246,1,0,0,0,3254,
        3247,1,0,0,0,3254,3248,1,0,0,0,3254,3250,1,0,0,0,3255,343,1,0,0,
        0,3256,3258,3,346,173,0,3257,3256,1,0,0,0,3258,3259,1,0,0,0,3259,
        3257,1,0,0,0,3259,3260,1,0,0,0,3260,345,1,0,0,0,3261,3262,5,200,
        0,0,3262,3266,3,348,174,0,3263,3264,4,173,53,0,3264,3265,5,668,0,
        0,3265,3267,3,1106,553,0,3266,3263,1,0,0,0,3266,3267,1,0,0,0,3267,
        3270,1,0,0,0,3268,3269,4,173,54,0,3269,3271,3,350,175,0,3270,3268,
        1,0,0,0,3270,3271,1,0,0,0,3271,3277,1,0,0,0,3272,3273,5,287,0,0,
        3273,3274,5,251,0,0,3274,3275,5,508,0,0,3275,3277,5,346,0,0,3276,
        3261,1,0,0,0,3276,3272,1,0,0,0,3277,347,1,0,0,0,3278,3282,5,614,
        0,0,3279,3280,4,174,55,0,3280,3282,5,508,0,0,3281,3278,1,0,0,0,3281,
        3279,1,0,0,0,3282,349,1,0,0,0,3283,3284,5,669,0,0,3284,3287,5,670,
        0,0,3285,3287,5,671,0,0,3286,3283,1,0,0,0,3286,3285,1,0,0,0,3287,
        351,1,0,0,0,3288,3291,3,354,177,0,3289,3291,5,760,0,0,3290,3288,
        1,0,0,0,3290,3289,1,0,0,0,3291,3296,1,0,0,0,3292,3293,5,773,0,0,
        3293,3295,3,354,177,0,3294,3292,1,0,0,0,3295,3298,1,0,0,0,3296,3294,
        1,0,0,0,3296,3297,1,0,0,0,3297,353,1,0,0,0,3298,3296,1,0,0,0,3299,
        3305,3,1054,527,0,3300,3302,3,676,338,0,3301,3303,3,356,178,0,3302,
        3301,1,0,0,0,3302,3303,1,0,0,0,3303,3305,1,0,0,0,3304,3299,1,0,0,
        0,3304,3300,1,0,0,0,3305,355,1,0,0,0,3306,3308,5,17,0,0,3307,3306,
        1,0,0,0,3307,3308,1,0,0,0,3308,3311,1,0,0,0,3309,3312,3,1128,564,
        0,3310,3312,3,1154,577,0,3311,3309,1,0,0,0,3311,3310,1,0,0,0,3312,
        357,1,0,0,0,3313,3314,5,643,0,0,3314,3315,3,676,338,0,3315,359,1,
        0,0,0,3316,3327,3,372,186,0,3317,3321,5,778,0,0,3318,3319,4,180,
        56,0,3319,3322,3,1128,564,0,3320,3322,5,732,0,0,3321,3318,1,0,0,
        0,3321,3320,1,0,0,0,3322,3323,1,0,0,0,3323,3324,3,362,181,0,3324,
        3325,5,779,0,0,3325,3327,1,0,0,0,3326,3316,1,0,0,0,3326,3317,1,0,
        0,0,3327,3331,1,0,0,0,3328,3330,3,364,182,0,3329,3328,1,0,0,0,3330,
        3333,1,0,0,0,3331,3329,1,0,0,0,3331,3332,1,0,0,0,3332,361,1,0,0,
        0,3333,3331,1,0,0,0,3334,3338,3,372,186,0,3335,3337,3,364,182,0,
        3336,3335,1,0,0,0,3337,3340,1,0,0,0,3338,3336,1,0,0,0,3338,3339,
        1,0,0,0,3339,363,1,0,0,0,3340,3338,1,0,0,0,3341,3342,3,368,184,0,
        3342,3347,3,360,180,0,3343,3344,5,383,0,0,3344,3348,3,676,338,0,
        3345,3346,5,621,0,0,3346,3348,3,1132,566,0,3347,3343,1,0,0,0,3347,
        3345,1,0,0,0,3347,3348,1,0,0,0,3348,3361,1,0,0,0,3349,3350,3,370,
        185,0,3350,3355,3,360,180,0,3351,3352,5,383,0,0,3352,3356,3,676,
        338,0,3353,3354,5,621,0,0,3354,3356,3,1132,566,0,3355,3351,1,0,0,
        0,3355,3353,1,0,0,0,3356,3361,1,0,0,0,3357,3358,3,366,183,0,3358,
        3359,3,372,186,0,3359,3361,1,0,0,0,3360,3341,1,0,0,0,3360,3349,1,
        0,0,0,3360,3357,1,0,0,0,3361,365,1,0,0,0,3362,3364,5,359,0,0,3363,
        3365,5,239,0,0,3364,3363,1,0,0,0,3364,3365,1,0,0,0,3365,3366,1,0,
        0,0,3366,3374,5,261,0,0,3367,3368,5,359,0,0,3368,3370,7,34,0,0,3369,
        3371,5,395,0,0,3370,3369,1,0,0,0,3370,3371,1,0,0,0,3371,3372,1,0,
        0,0,3372,3374,5,261,0,0,3373,3362,1,0,0,0,3373,3367,1,0,0,0,3374,
        367,1,0,0,0,3375,3377,7,35,0,0,3376,3375,1,0,0,0,3376,3377,1,0,0,
        0,3377,3378,1,0,0,0,3378,3381,5,261,0,0,3379,3381,5,555,0,0,3380,
        3376,1,0,0,0,3380,3379,1,0,0,0,3381,369,1,0,0,0,3382,3384,7,34,0,
        0,3383,3385,5,395,0,0,3384,3383,1,0,0,0,3384,3385,1,0,0,0,3385,3386,
        1,0,0,0,3386,3387,5,261,0,0,3387,371,1,0,0,0,3388,3395,3,374,187,
        0,3389,3395,3,376,188,0,3390,3395,3,378,189,0,3391,3395,3,380,190,
        0,3392,3393,4,186,57,0,3393,3395,3,382,191,0,3394,3388,1,0,0,0,3394,
        3389,1,0,0,0,3394,3390,1,0,0,0,3394,3391,1,0,0,0,3394,3392,1,0,0,
        0,3395,373,1,0,0,0,3396,3398,3,1102,551,0,3397,3399,3,1036,518,0,
        3398,3397,1,0,0,0,3398,3399,1,0,0,0,3399,3401,1,0,0,0,3400,3402,
        3,398,199,0,3401,3400,1,0,0,0,3401,3402,1,0,0,0,3402,3404,1,0,0,
        0,3403,3405,3,400,200,0,3404,3403,1,0,0,0,3404,3405,1,0,0,0,3405,
        375,1,0,0,0,3406,3409,5,776,0,0,3407,3410,3,374,187,0,3408,3410,
        3,376,188,0,3409,3407,1,0,0,0,3409,3408,1,0,0,0,3410,3411,1,0,0,
        0,3411,3412,5,777,0,0,3412,377,1,0,0,0,3413,3415,3,280,140,0,3414,
        3416,3,398,199,0,3415,3414,1,0,0,0,3415,3416,1,0,0,0,3416,3419,1,
        0,0,0,3417,3418,4,189,58,0,3418,3420,3,1044,522,0,3419,3417,1,0,
        0,0,3419,3420,1,0,0,0,3420,3431,1,0,0,0,3421,3422,4,189,59,0,3422,
        3423,5,726,0,0,3423,3425,3,280,140,0,3424,3426,3,398,199,0,3425,
        3424,1,0,0,0,3425,3426,1,0,0,0,3426,3428,1,0,0,0,3427,3429,3,1044,
        522,0,3428,3427,1,0,0,0,3428,3429,1,0,0,0,3429,3431,1,0,0,0,3430,
        3413,1,0,0,0,3430,3421,1,0,0,0,3431,379,1,0,0,0,3432,3435,5,776,
        0,0,3433,3436,3,334,167,0,3434,3436,3,380,190,0,3435,3433,1,0,0,
        0,3435,3434,1,0,0,0,3436,3437,1,0,0,0,3437,3438,5,777,0,0,3438,381,
        1,0,0,0,3439,3440,5,701,0,0,3440,3441,5,776,0,0,3441,3442,3,676,
        338,0,3442,3443,5,773,0,0,3443,3444,3,1154,577,0,3444,3445,3,384,
        192,0,3445,3447,5,777,0,0,3446,3448,3,398,199,0,3447,3446,1,0,0,
        0,3447,3448,1,0,0,0,3448,383,1,0,0,0,3449,3450,5,71,0,0,3450,3451,
        5,776,0,0,3451,3456,3,386,193,0,3452,3453,5,773,0,0,3453,3455,3,
        386,193,0,3454,3452,1,0,0,0,3455,3458,1,0,0,0,3456,3454,1,0,0,0,
        3456,3457,1,0,0,0,3457,3459,1,0,0,0,3458,3456,1,0,0,0,3459,3460,
        5,777,0,0,3460,385,1,0,0,0,3461,3462,3,1128,564,0,3462,3463,5,200,
        0,0,3463,3464,5,703,0,0,3464,3485,1,0,0,0,3465,3466,3,1128,564,0,
        3466,3469,3,916,458,0,3467,3468,4,193,60,0,3468,3470,3,986,493,0,
        3469,3467,1,0,0,0,3469,3470,1,0,0,0,3470,3472,1,0,0,0,3471,3473,
        5,174,0,0,3472,3471,1,0,0,0,3472,3473,1,0,0,0,3473,3474,1,0,0,0,
        3474,3475,5,704,0,0,3475,3477,3,1154,577,0,3476,3478,3,388,194,0,
        3477,3476,1,0,0,0,3477,3478,1,0,0,0,3478,3485,1,0,0,0,3479,3480,
        5,702,0,0,3480,3481,5,704,0,0,3481,3482,3,1154,577,0,3482,3483,3,
        384,192,0,3483,3485,1,0,0,0,3484,3461,1,0,0,0,3484,3465,1,0,0,0,
        3484,3479,1,0,0,0,3485,387,1,0,0,0,3486,3488,3,390,195,0,3487,3489,
        3,392,196,0,3488,3487,1,0,0,0,3488,3489,1,0,0,0,3489,3495,1,0,0,
        0,3490,3492,3,392,196,0,3491,3493,3,390,195,0,3492,3491,1,0,0,0,
        3492,3493,1,0,0,0,3493,3495,1,0,0,0,3494,3486,1,0,0,0,3494,3490,
        1,0,0,0,3495,389,1,0,0,0,3496,3497,3,394,197,0,3497,3498,5,383,0,
        0,3498,3499,5,700,0,0,3499,391,1,0,0,0,3500,3501,3,394,197,0,3501,
        3502,5,383,0,0,3502,3503,5,165,0,0,3503,393,1,0,0,0,3504,3509,5,
        165,0,0,3505,3509,5,376,0,0,3506,3507,5,128,0,0,3507,3509,3,1154,
        577,0,3508,3504,1,0,0,0,3508,3505,1,0,0,0,3508,3506,1,0,0,0,3509,
        395,1,0,0,0,3510,3511,7,36,0,0,3511,397,1,0,0,0,3512,3516,5,17,0,
        0,3513,3514,4,199,61,0,3514,3516,5,750,0,0,3515,3512,1,0,0,0,3515,
        3513,1,0,0,0,3515,3516,1,0,0,0,3516,3517,1,0,0,0,3517,3518,3,1128,
        564,0,3518,399,1,0,0,0,3519,3524,3,402,201,0,3520,3521,5,773,0,0,
        3521,3523,3,402,201,0,3522,3520,1,0,0,0,3523,3526,1,0,0,0,3524,3522,
        1,0,0,0,3524,3525,1,0,0,0,3525,401,1,0,0,0,3526,3524,1,0,0,0,3527,
        3528,3,404,202,0,3528,3530,3,406,203,0,3529,3531,3,410,205,0,3530,
        3529,1,0,0,0,3530,3531,1,0,0,0,3531,3532,1,0,0,0,3532,3533,5,776,
        0,0,3533,3534,3,412,206,0,3534,3535,5,777,0,0,3535,3548,1,0,0,0,
        3536,3537,5,620,0,0,3537,3539,3,406,203,0,3538,3540,3,410,205,0,
        3539,3538,1,0,0,0,3539,3540,1,0,0,0,3540,3541,1,0,0,0,3541,3543,
        5,776,0,0,3542,3544,3,412,206,0,3543,3542,1,0,0,0,3543,3544,1,0,
        0,0,3544,3545,1,0,0,0,3545,3546,5,777,0,0,3546,3548,1,0,0,0,3547,
        3527,1,0,0,0,3547,3536,1,0,0,0,3548,403,1,0,0,0,3549,3550,7,37,0,
        0,3550,405,1,0,0,0,3551,3552,7,38,0,0,3552,407,1,0,0,0,3553,3554,
        5,420,0,0,3554,3560,5,265,0,0,3555,3557,5,609,0,0,3556,3558,3,406,
        203,0,3557,3556,1,0,0,0,3557,3558,1,0,0,0,3558,3560,1,0,0,0,3559,
        3553,1,0,0,0,3559,3555,1,0,0,0,3560,409,1,0,0,0,3561,3567,5,200,
        0,0,3562,3568,5,261,0,0,3563,3564,5,393,0,0,3564,3568,5,45,0,0,3565,
        3566,5,217,0,0,3566,3568,5,45,0,0,3567,3562,1,0,0,0,3567,3563,1,
        0,0,0,3567,3565,1,0,0,0,3568,411,1,0,0,0,3569,3574,3,414,207,0,3570,
        3571,5,773,0,0,3571,3573,3,414,207,0,3572,3570,1,0,0,0,3573,3576,
        1,0,0,0,3574,3572,1,0,0,0,3574,3575,1,0,0,0,3575,413,1,0,0,0,3576,
        3574,1,0,0,0,3577,3580,3,1128,564,0,3578,3580,5,420,0,0,3579,3577,
        1,0,0,0,3579,3578,1,0,0,0,3580,415,1,0,0,0,3581,3582,4,208,62,0,
        3582,3584,3,320,160,0,3583,3581,1,0,0,0,3583,3584,1,0,0,0,3584,3585,
        1,0,0,0,3585,3587,5,614,0,0,3586,3588,5,295,0,0,3587,3586,1,0,0,
        0,3587,3588,1,0,0,0,3588,3590,1,0,0,0,3589,3591,5,232,0,0,3590,3589,
        1,0,0,0,3590,3591,1,0,0,0,3591,3592,1,0,0,0,3592,3593,3,334,167,
        0,3593,3594,5,506,0,0,3594,3596,3,994,497,0,3595,3597,3,358,179,
        0,3596,3595,1,0,0,0,3596,3597,1,0,0,0,3597,3599,1,0,0,0,3598,3600,
        3,328,164,0,3599,3598,1,0,0,0,3599,3600,1,0,0,0,3600,3602,1,0,0,
        0,3601,3603,3,286,143,0,3602,3601,1,0,0,0,3602,3603,1,0,0,0,3603,
        417,1,0,0,0,3604,3609,3,420,210,0,3605,3609,3,426,213,0,3606,3609,
        3,428,214,0,3607,3609,3,434,217,0,3608,3604,1,0,0,0,3608,3605,1,
        0,0,0,3608,3606,1,0,0,0,3608,3607,1,0,0,0,3609,419,1,0,0,0,3610,
        3611,5,543,0,0,3611,3615,5,592,0,0,3612,3614,3,424,212,0,3613,3612,
        1,0,0,0,3614,3617,1,0,0,0,3615,3613,1,0,0,0,3615,3616,1,0,0,0,3616,
        3636,1,0,0,0,3617,3615,1,0,0,0,3618,3620,5,77,0,0,3619,3621,5,647,
        0,0,3620,3619,1,0,0,0,3620,3621,1,0,0,0,3621,3627,1,0,0,0,3622,3624,
        5,15,0,0,3623,3625,5,373,0,0,3624,3623,1,0,0,0,3624,3625,1,0,0,0,
        3625,3626,1,0,0,0,3626,3628,5,54,0,0,3627,3622,1,0,0,0,3627,3628,
        1,0,0,0,3628,3633,1,0,0,0,3629,3631,5,373,0,0,3630,3629,1,0,0,0,
        3630,3631,1,0,0,0,3631,3632,1,0,0,0,3632,3634,5,450,0,0,3633,3630,
        1,0,0,0,3633,3634,1,0,0,0,3634,3636,1,0,0,0,3635,3610,1,0,0,0,3635,
        3618,1,0,0,0,3636,421,1,0,0,0,3637,3639,5,29,0,0,3638,3640,5,647,
        0,0,3639,3638,1,0,0,0,3639,3640,1,0,0,0,3640,423,1,0,0,0,3641,3642,
        5,645,0,0,3642,3643,5,85,0,0,3643,3648,5,517,0,0,3644,3645,4,212,
        63,0,3645,3646,5,435,0,0,3646,3648,7,39,0,0,3647,3641,1,0,0,0,3647,
        3644,1,0,0,0,3648,425,1,0,0,0,3649,3650,5,489,0,0,3650,3679,3,1128,
        564,0,3651,3653,5,480,0,0,3652,3654,5,647,0,0,3653,3652,1,0,0,0,
        3653,3654,1,0,0,0,3654,3673,1,0,0,0,3655,3657,5,590,0,0,3656,3658,
        5,489,0,0,3657,3656,1,0,0,0,3657,3658,1,0,0,0,3658,3659,1,0,0,0,
        3659,3674,3,1128,564,0,3660,3662,5,15,0,0,3661,3663,5,373,0,0,3662,
        3661,1,0,0,0,3662,3663,1,0,0,0,3663,3664,1,0,0,0,3664,3666,5,54,
        0,0,3665,3660,1,0,0,0,3665,3666,1,0,0,0,3666,3671,1,0,0,0,3667,3669,
        5,373,0,0,3668,3667,1,0,0,0,3668,3669,1,0,0,0,3669,3670,1,0,0,0,
        3670,3672,5,450,0,0,3671,3668,1,0,0,0,3671,3672,1,0,0,0,3672,3674,
        1,0,0,0,3673,3655,1,0,0,0,3673,3665,1,0,0,0,3674,3679,1,0,0,0,3675,
        3676,5,450,0,0,3676,3677,5,489,0,0,3677,3679,3,1128,564,0,3678,3649,
        1,0,0,0,3678,3651,1,0,0,0,3678,3675,1,0,0,0,3679,427,1,0,0,0,3680,
        3681,5,287,0,0,3681,3682,7,18,0,0,3682,3687,3,430,215,0,3683,3684,
        5,773,0,0,3684,3686,3,430,215,0,3685,3683,1,0,0,0,3686,3689,1,0,
        0,0,3687,3685,1,0,0,0,3687,3688,1,0,0,0,3688,3703,1,0,0,0,3689,3687,
        1,0,0,0,3690,3691,4,214,64,0,3691,3692,5,287,0,0,3692,3693,5,244,
        0,0,3693,3694,5,200,0,0,3694,3703,5,27,0,0,3695,3700,5,611,0,0,3696,
        3701,5,571,0,0,3697,3701,5,574,0,0,3698,3699,4,214,65,0,3699,3701,
        5,244,0,0,3700,3696,1,0,0,0,3700,3697,1,0,0,0,3700,3698,1,0,0,0,
        3701,3703,1,0,0,0,3702,3680,1,0,0,0,3702,3690,1,0,0,0,3702,3695,
        1,0,0,0,3703,429,1,0,0,0,3704,3706,3,1102,551,0,3705,3707,3,398,
        199,0,3706,3705,1,0,0,0,3706,3707,1,0,0,0,3707,3708,1,0,0,0,3708,
        3709,3,432,216,0,3709,431,1,0,0,0,3710,3712,5,435,0,0,3711,3713,
        5,284,0,0,3712,3711,1,0,0,0,3712,3713,1,0,0,0,3713,3719,1,0,0,0,
        3714,3716,5,295,0,0,3715,3714,1,0,0,0,3715,3716,1,0,0,0,3716,3717,
        1,0,0,0,3717,3719,5,649,0,0,3718,3710,1,0,0,0,3718,3715,1,0,0,0,
        3719,433,1,0,0,0,3720,3747,5,651,0,0,3721,3722,7,40,0,0,3722,3724,
        3,438,219,0,3723,3725,7,41,0,0,3724,3723,1,0,0,0,3724,3725,1,0,0,
        0,3725,3748,1,0,0,0,3726,3727,5,159,0,0,3727,3733,3,438,219,0,3728,
        3731,5,566,0,0,3729,3730,5,200,0,0,3730,3732,5,340,0,0,3731,3729,
        1,0,0,0,3731,3732,1,0,0,0,3732,3734,1,0,0,0,3733,3728,1,0,0,0,3733,
        3734,1,0,0,0,3734,3748,1,0,0,0,3735,3736,5,417,0,0,3736,3748,3,438,
        219,0,3737,3738,5,77,0,0,3738,3741,3,438,219,0,3739,3740,5,384,0,
        0,3740,3742,5,407,0,0,3741,3739,1,0,0,0,3741,3742,1,0,0,0,3742,3748,
        1,0,0,0,3743,3744,5,480,0,0,3744,3748,3,438,219,0,3745,3746,5,439,
        0,0,3746,3748,3,436,218,0,3747,3721,1,0,0,0,3747,3726,1,0,0,0,3747,
        3735,1,0,0,0,3747,3737,1,0,0,0,3747,3743,1,0,0,0,3747,3745,1,0,0,
        0,3748,435,1,0,0,0,3749,3752,4,218,66,0,3750,3751,5,94,0,0,3751,
        3753,5,652,0,0,3752,3750,1,0,0,0,3752,3753,1,0,0,0,3753,3756,1,0,
        0,0,3754,3756,1,0,0,0,3755,3749,1,0,0,0,3755,3754,1,0,0,0,3756,437,
        1,0,0,0,3757,3764,3,1156,578,0,3758,3759,5,773,0,0,3759,3762,3,1156,
        578,0,3760,3761,5,773,0,0,3761,3763,3,1140,570,0,3762,3760,1,0,0,
        0,3762,3763,1,0,0,0,3763,3765,1,0,0,0,3764,3758,1,0,0,0,3764,3765,
        1,0,0,0,3765,439,1,0,0,0,3766,3767,5,428,0,0,3767,3768,7,42,0,0,
        3768,3773,5,289,0,0,3769,3770,5,590,0,0,3770,3774,3,1160,580,0,3771,
        3772,5,28,0,0,3772,3774,3,676,338,0,3773,3769,1,0,0,0,3773,3771,
        1,0,0,0,3774,3800,1,0,0,0,3775,3800,3,448,224,0,3776,3777,5,468,
        0,0,3777,3782,3,442,221,0,3778,3779,5,773,0,0,3779,3781,3,442,221,
        0,3780,3778,1,0,0,0,3781,3784,1,0,0,0,3782,3780,1,0,0,0,3782,3783,
        1,0,0,0,3783,3800,1,0,0,0,3784,3782,1,0,0,0,3785,3786,4,220,67,0,
        3786,3787,5,468,0,0,3787,3791,5,658,0,0,3788,3789,3,978,489,0,3789,
        3790,3,1128,564,0,3790,3792,1,0,0,0,3791,3788,1,0,0,0,3791,3792,
        1,0,0,0,3792,3800,1,0,0,0,3793,3800,3,478,239,0,3794,3795,4,220,
        68,0,3795,3800,3,464,232,0,3796,3800,3,446,223,0,3797,3798,4,220,
        69,0,3798,3800,3,488,244,0,3799,3766,1,0,0,0,3799,3775,1,0,0,0,3799,
        3776,1,0,0,0,3799,3785,1,0,0,0,3799,3793,1,0,0,0,3799,3794,1,0,0,
        0,3799,3796,1,0,0,0,3799,3797,1,0,0,0,3800,441,1,0,0,0,3801,3803,
        5,316,0,0,3802,3804,3,444,222,0,3803,3802,1,0,0,0,3803,3804,1,0,
        0,0,3804,3816,1,0,0,0,3805,3806,4,221,70,0,3806,3807,5,430,0,0,3807,
        3816,5,47,0,0,3808,3810,5,514,0,0,3809,3811,5,10,0,0,3810,3809,1,
        0,0,0,3810,3811,1,0,0,0,3811,3813,1,0,0,0,3812,3814,3,782,391,0,
        3813,3812,1,0,0,0,3813,3814,1,0,0,0,3814,3816,1,0,0,0,3815,3801,
        1,0,0,0,3815,3805,1,0,0,0,3815,3808,1,0,0,0,3816,443,1,0,0,0,3817,
        3818,4,222,71,0,3818,3823,5,590,0,0,3819,3820,4,222,72,0,3820,3824,
        3,1142,571,0,3821,3822,4,222,73,0,3822,3824,3,1146,573,0,3823,3819,
        1,0,0,0,3823,3821,1,0,0,0,3824,445,1,0,0,0,3825,3829,5,281,0,0,3826,
        3830,5,112,0,0,3827,3828,5,574,0,0,3828,3830,3,1102,551,0,3829,3826,
        1,0,0,0,3829,3827,1,0,0,0,3830,3831,1,0,0,0,3831,3832,5,203,0,0,
        3832,3833,5,316,0,0,3833,447,1,0,0,0,3834,3835,5,55,0,0,3835,3836,
        5,316,0,0,3836,3837,5,590,0,0,3837,3839,3,450,225,0,3838,3840,3,
        782,391,0,3839,3838,1,0,0,0,3839,3840,1,0,0,0,3840,449,1,0,0,0,3841,
        3846,3,452,226,0,3842,3843,5,773,0,0,3843,3845,3,452,226,0,3844,
        3842,1,0,0,0,3845,3848,1,0,0,0,3846,3844,1,0,0,0,3846,3847,1,0,0,
        0,3847,451,1,0,0,0,3848,3846,1,0,0,0,3849,3850,5,300,0,0,3850,3851,
        5,750,0,0,3851,3941,3,1162,581,0,3852,3853,5,729,0,0,3853,3854,5,
        750,0,0,3854,3941,3,1162,581,0,3855,3856,5,297,0,0,3856,3857,5,750,
        0,0,3857,3941,3,1162,581,0,3858,3859,5,318,0,0,3859,3860,5,750,0,
        0,3860,3941,3,1162,581,0,3861,3862,5,303,0,0,3862,3863,5,750,0,0,
        3863,3941,3,1162,581,0,3864,3865,5,304,0,0,3865,3866,5,750,0,0,3866,
        3941,3,1140,570,0,3867,3868,5,298,0,0,3868,3869,5,750,0,0,3869,3941,
        3,1140,570,0,3870,3871,5,305,0,0,3871,3872,5,750,0,0,3872,3941,3,
        1140,570,0,3873,3874,5,299,0,0,3874,3875,5,750,0,0,3875,3941,3,1140,
        570,0,3876,3877,5,314,0,0,3877,3878,5,750,0,0,3878,3941,3,1140,570,
        0,3879,3880,5,308,0,0,3880,3881,5,750,0,0,3881,3941,3,1162,581,0,
        3882,3883,5,307,0,0,3883,3884,5,750,0,0,3884,3941,3,1162,581,0,3885,
        3886,5,317,0,0,3886,3887,5,750,0,0,3887,3941,3,1162,581,0,3888,3889,
        5,309,0,0,3889,3890,5,750,0,0,3890,3941,3,1162,581,0,3891,3892,5,
        738,0,0,3892,3893,5,750,0,0,3893,3941,3,458,229,0,3894,3895,5,310,
        0,0,3895,3896,5,750,0,0,3896,3941,3,1162,581,0,3897,3898,5,313,0,
        0,3898,3899,5,750,0,0,3899,3941,3,1162,581,0,3900,3901,5,315,0,0,
        3901,3902,5,750,0,0,3902,3941,3,1140,570,0,3903,3904,5,311,0,0,3904,
        3905,5,750,0,0,3905,3941,3,1160,580,0,3906,3907,5,312,0,0,3907,3908,
        5,750,0,0,3908,3941,3,1162,581,0,3909,3910,5,712,0,0,3910,3911,5,
        750,0,0,3911,3941,3,1162,581,0,3912,3913,5,713,0,0,3913,3914,5,750,
        0,0,3914,3941,3,1140,570,0,3915,3916,5,319,0,0,3916,3917,5,750,0,
        0,3917,3941,3,1140,570,0,3918,3919,5,233,0,0,3919,3920,5,750,0,0,
        3920,3941,3,462,231,0,3921,3922,5,735,0,0,3922,3923,5,750,0,0,3923,
        3941,3,1154,577,0,3924,3925,5,736,0,0,3925,3926,5,750,0,0,3926,3941,
        3,1140,570,0,3927,3928,5,296,0,0,3928,3929,5,750,0,0,3929,3941,3,
        1140,570,0,3930,3931,5,737,0,0,3931,3932,5,750,0,0,3932,3941,3,454,
        227,0,3933,3934,5,739,0,0,3934,3935,5,750,0,0,3935,3941,3,1140,570,
        0,3936,3937,5,742,0,0,3937,3938,5,750,0,0,3938,3941,3,456,228,0,
        3939,3941,3,460,230,0,3940,3849,1,0,0,0,3940,3852,1,0,0,0,3940,3855,
        1,0,0,0,3940,3858,1,0,0,0,3940,3861,1,0,0,0,3940,3864,1,0,0,0,3940,
        3867,1,0,0,0,3940,3870,1,0,0,0,3940,3873,1,0,0,0,3940,3876,1,0,0,
        0,3940,3879,1,0,0,0,3940,3882,1,0,0,0,3940,3885,1,0,0,0,3940,3888,
        1,0,0,0,3940,3891,1,0,0,0,3940,3894,1,0,0,0,3940,3897,1,0,0,0,3940,
        3900,1,0,0,0,3940,3903,1,0,0,0,3940,3906,1,0,0,0,3940,3909,1,0,0,
        0,3940,3912,1,0,0,0,3940,3915,1,0,0,0,3940,3918,1,0,0,0,3940,3921,
        1,0,0,0,3940,3924,1,0,0,0,3940,3927,1,0,0,0,3940,3930,1,0,0,0,3940,
        3933,1,0,0,0,3940,3936,1,0,0,0,3940,3939,1,0,0,0,3941,453,1,0,0,
        0,3942,3945,3,1024,512,0,3943,3945,5,376,0,0,3944,3942,1,0,0,0,3944,
        3943,1,0,0,0,3945,455,1,0,0,0,3946,3947,7,43,0,0,3947,457,1,0,0,
        0,3948,3951,3,1162,581,0,3949,3951,5,376,0,0,3950,3948,1,0,0,0,3950,
        3949,1,0,0,0,3951,459,1,0,0,0,3952,3953,5,301,0,0,3953,3954,5,750,
        0,0,3954,3965,3,1162,581,0,3955,3956,5,302,0,0,3956,3957,5,750,0,
        0,3957,3965,3,1144,572,0,3958,3959,5,447,0,0,3959,3960,5,750,0,0,
        3960,3965,3,1162,581,0,3961,3962,5,448,0,0,3962,3963,5,750,0,0,3963,
        3965,3,1140,570,0,3964,3952,1,0,0,0,3964,3955,1,0,0,0,3964,3958,
        1,0,0,0,3964,3961,1,0,0,0,3965,461,1,0,0,0,3966,3975,5,776,0,0,3967,
        3972,3,1140,570,0,3968,3969,5,773,0,0,3969,3971,3,1140,570,0,3970,
        3968,1,0,0,0,3971,3974,1,0,0,0,3972,3970,1,0,0,0,3972,3973,1,0,0,
        0,3973,3976,1,0,0,0,3974,3972,1,0,0,0,3975,3967,1,0,0,0,3975,3976,
        1,0,0,0,3976,3977,1,0,0,0,3977,3978,5,777,0,0,3978,463,1,0,0,0,3979,
        3980,5,55,0,0,3980,3981,5,459,0,0,3981,3982,5,190,0,0,3982,3987,
        3,466,233,0,3983,3984,5,773,0,0,3984,3986,3,466,233,0,3985,3983,
        1,0,0,0,3986,3989,1,0,0,0,3987,3985,1,0,0,0,3987,3988,1,0,0,0,3988,
        3992,1,0,0,0,3989,3987,1,0,0,0,3990,3991,4,232,74,0,3991,3993,3,
        782,391,0,3992,3990,1,0,0,0,3992,3993,1,0,0,0,3993,465,1,0,0,0,3994,
        3995,5,460,0,0,3995,3996,5,750,0,0,3996,3998,5,776,0,0,3997,3999,
        3,468,234,0,3998,3997,1,0,0,0,3998,3999,1,0,0,0,3999,4000,1,0,0,
        0,4000,4044,5,777,0,0,4001,4002,5,461,0,0,4002,4003,5,750,0,0,4003,
        4005,5,776,0,0,4004,4006,3,468,234,0,4005,4004,1,0,0,0,4005,4006,
        1,0,0,0,4006,4007,1,0,0,0,4007,4044,5,777,0,0,4008,4009,5,462,0,
        0,4009,4010,5,750,0,0,4010,4012,5,776,0,0,4011,4013,3,470,235,0,
        4012,4011,1,0,0,0,4012,4013,1,0,0,0,4013,4014,1,0,0,0,4014,4044,
        5,777,0,0,4015,4016,5,463,0,0,4016,4017,5,750,0,0,4017,4019,5,776,
        0,0,4018,4020,3,470,235,0,4019,4018,1,0,0,0,4019,4020,1,0,0,0,4020,
        4021,1,0,0,0,4021,4044,5,777,0,0,4022,4023,5,464,0,0,4023,4024,5,
        750,0,0,4024,4026,5,776,0,0,4025,4027,3,472,236,0,4026,4025,1,0,
        0,0,4026,4027,1,0,0,0,4027,4028,1,0,0,0,4028,4044,5,777,0,0,4029,
        4030,5,465,0,0,4030,4031,5,750,0,0,4031,4033,5,776,0,0,4032,4034,
        3,472,236,0,4033,4032,1,0,0,0,4033,4034,1,0,0,0,4034,4035,1,0,0,
        0,4035,4044,5,777,0,0,4036,4037,5,466,0,0,4037,4038,5,750,0,0,4038,
        4040,5,776,0,0,4039,4041,3,476,238,0,4040,4039,1,0,0,0,4040,4041,
        1,0,0,0,4041,4042,1,0,0,0,4042,4044,5,777,0,0,4043,3994,1,0,0,0,
        4043,4001,1,0,0,0,4043,4008,1,0,0,0,4043,4015,1,0,0,0,4043,4022,
        1,0,0,0,4043,4029,1,0,0,0,4043,4036,1,0,0,0,4044,467,1,0,0,0,4045,
        4050,3,1058,529,0,4046,4047,5,773,0,0,4047,4049,3,1058,529,0,4048,
        4046,1,0,0,0,4049,4052,1,0,0,0,4050,4048,1,0,0,0,4050,4051,1,0,0,
        0,4051,469,1,0,0,0,4052,4050,1,0,0,0,4053,4058,3,1098,549,0,4054,
        4055,5,773,0,0,4055,4057,3,1098,549,0,4056,4054,1,0,0,0,4057,4060,
        1,0,0,0,4058,4056,1,0,0,0,4058,4059,1,0,0,0,4059,471,1,0,0,0,4060,
        4058,1,0,0,0,4061,4066,3,474,237,0,4062,4063,5,773,0,0,4063,4065,
        3,474,237,0,4064,4062,1,0,0,0,4065,4068,1,0,0,0,4066,4064,1,0,0,
        0,4066,4067,1,0,0,0,4067,473,1,0,0,0,4068,4066,1,0,0,0,4069,4070,
        3,1162,581,0,4070,475,1,0,0,0,4071,4076,3,990,495,0,4072,4073,5,
        773,0,0,4073,4075,3,990,495,0,4074,4072,1,0,0,0,4075,4078,1,0,0,
        0,4076,4074,1,0,0,0,4076,4077,1,0,0,0,4077,477,1,0,0,0,4078,4076,
        1,0,0,0,4079,4080,5,543,0,0,4080,4082,5,514,0,0,4081,4083,3,484,
        242,0,4082,4081,1,0,0,0,4082,4083,1,0,0,0,4083,4086,1,0,0,0,4084,
        4085,5,613,0,0,4085,4087,3,480,240,0,4086,4084,1,0,0,0,4086,4087,
        1,0,0,0,4087,4088,1,0,0,0,4088,4090,3,482,241,0,4089,4091,3,782,
        391,0,4090,4089,1,0,0,0,4090,4091,1,0,0,0,4091,4101,1,0,0,0,4092,
        4093,5,552,0,0,4093,4095,5,514,0,0,4094,4096,3,484,242,0,4095,4094,
        1,0,0,0,4095,4096,1,0,0,0,4096,4098,1,0,0,0,4097,4099,3,782,391,
        0,4098,4097,1,0,0,0,4098,4099,1,0,0,0,4099,4101,1,0,0,0,4100,4079,
        1,0,0,0,4100,4092,1,0,0,0,4101,479,1,0,0,0,4102,4110,3,460,230,0,
        4103,4104,4,240,75,0,4104,4105,7,44,0,0,4105,4106,5,750,0,0,4106,
        4110,3,1156,578,0,4107,4108,4,240,76,0,4108,4110,5,529,0,0,4109,
        4102,1,0,0,0,4109,4103,1,0,0,0,4109,4107,1,0,0,0,4110,4115,1,0,0,
        0,4111,4112,5,773,0,0,4112,4114,3,460,230,0,4113,4111,1,0,0,0,4114,
        4117,1,0,0,0,4115,4113,1,0,0,0,4115,4116,1,0,0,0,4116,481,1,0,0,
        0,4117,4115,1,0,0,0,4118,4122,4,241,77,0,4119,4120,5,618,0,0,4120,
        4121,5,750,0,0,4121,4123,3,1156,578,0,4122,4119,1,0,0,0,4122,4123,
        1,0,0,0,4123,4127,1,0,0,0,4124,4125,5,406,0,0,4125,4126,5,750,0,
        0,4126,4128,3,1156,578,0,4127,4124,1,0,0,0,4127,4128,1,0,0,0,4128,
        4132,1,0,0,0,4129,4130,5,129,0,0,4130,4131,5,750,0,0,4131,4133,3,
        1156,578,0,4132,4129,1,0,0,0,4132,4133,1,0,0,0,4133,4137,1,0,0,0,
        4134,4135,5,409,0,0,4135,4136,5,750,0,0,4136,4138,3,1156,578,0,4137,
        4134,1,0,0,0,4137,4138,1,0,0,0,4138,4141,1,0,0,0,4139,4141,1,0,0,
        0,4140,4118,1,0,0,0,4140,4139,1,0,0,0,4141,483,1,0,0,0,4142,4147,
        3,486,243,0,4143,4144,5,773,0,0,4144,4146,3,486,243,0,4145,4143,
        1,0,0,0,4146,4149,1,0,0,0,4147,4145,1,0,0,0,4147,4148,1,0,0,0,4148,
        485,1,0,0,0,4149,4147,1,0,0,0,4150,4151,7,45,0,0,4151,487,1,0,0,
        0,4152,4153,7,46,0,0,4153,4154,5,210,0,0,4154,489,1,0,0,0,4155,4156,
        5,417,0,0,4156,4157,3,1128,564,0,4157,4160,5,203,0,0,4158,4161,3,
        1160,580,0,4159,4161,3,742,371,0,4160,4158,1,0,0,0,4160,4159,1,0,
        0,0,4161,4167,1,0,0,0,4162,4167,3,492,246,0,4163,4164,7,47,0,0,4164,
        4165,5,417,0,0,4165,4167,3,1128,564,0,4166,4155,1,0,0,0,4166,4162,
        1,0,0,0,4166,4163,1,0,0,0,4167,491,1,0,0,0,4168,4169,5,173,0,0,4169,
        4172,3,1128,564,0,4170,4171,5,621,0,0,4171,4173,3,494,247,0,4172,
        4170,1,0,0,0,4172,4173,1,0,0,0,4173,493,1,0,0,0,4174,4179,3,742,
        371,0,4175,4176,5,773,0,0,4176,4178,3,742,371,0,4177,4175,1,0,0,
        0,4178,4181,1,0,0,0,4179,4177,1,0,0,0,4179,4180,1,0,0,0,4180,495,
        1,0,0,0,4181,4179,1,0,0,0,4182,4207,5,677,0,0,4183,4184,5,284,0,
        0,4184,4185,5,112,0,0,4185,4187,5,139,0,0,4186,4188,3,1190,595,0,
        4187,4186,1,0,0,0,4187,4188,1,0,0,0,4188,4189,1,0,0,0,4189,4208,
        3,1154,577,0,4190,4193,5,676,0,0,4191,4192,5,200,0,0,4192,4194,5,
        459,0,0,4193,4191,1,0,0,0,4193,4194,1,0,0,0,4194,4208,1,0,0,0,4195,
        4196,4,248,78,0,4196,4197,5,244,0,0,4197,4198,5,203,0,0,4198,4199,
        3,1026,513,0,4199,4200,5,775,0,0,4200,4201,3,1140,570,0,4201,4202,
        5,230,0,0,4202,4203,5,45,0,0,4203,4205,3,1154,577,0,4204,4206,3,
        498,249,0,4205,4204,1,0,0,0,4205,4206,1,0,0,0,4206,4208,1,0,0,0,
        4207,4183,1,0,0,0,4207,4190,1,0,0,0,4207,4195,1,0,0,0,4208,497,1,
        0,0,0,4209,4220,3,500,250,0,4210,4211,5,112,0,0,4211,4213,5,139,
        0,0,4212,4214,3,1190,595,0,4213,4212,1,0,0,0,4213,4214,1,0,0,0,4214,
        4215,1,0,0,0,4215,4217,3,1154,577,0,4216,4218,3,500,250,0,4217,4216,
        1,0,0,0,4217,4218,1,0,0,0,4218,4220,1,0,0,0,4219,4209,1,0,0,0,4219,
        4210,1,0,0,0,4220,499,1,0,0,0,4221,4223,5,467,0,0,4222,4224,5,373,
        0,0,4223,4222,1,0,0,0,4223,4224,1,0,0,0,4224,4225,1,0,0,0,4225,4226,
        5,539,0,0,4226,501,1,0,0,0,4227,4228,4,251,79,0,4228,4237,3,504,
        252,0,4229,4237,3,510,255,0,4230,4237,3,522,261,0,4231,4237,3,524,
        262,0,4232,4237,3,538,269,0,4233,4237,3,540,270,0,4234,4235,4,251,
        80,0,4235,4237,3,558,279,0,4236,4227,1,0,0,0,4236,4229,1,0,0,0,4236,
        4230,1,0,0,0,4236,4231,1,0,0,0,4236,4232,1,0,0,0,4236,4233,1,0,0,
        0,4236,4234,1,0,0,0,4237,503,1,0,0,0,4238,4239,5,11,0,0,4239,4242,
        5,618,0,0,4240,4241,4,252,81,0,4241,4243,3,978,489,0,4242,4240,1,
        0,0,0,4242,4243,1,0,0,0,4243,4244,1,0,0,0,4244,4245,3,506,253,0,
        4245,505,1,0,0,0,4246,4247,4,253,82,0,4247,4251,3,1010,505,0,4248,
        4249,4,253,83,0,4249,4251,3,1012,506,0,4250,4246,1,0,0,0,4250,4248,
        1,0,0,0,4251,4252,1,0,0,0,4252,4253,3,512,256,0,4253,4301,1,0,0,
        0,4254,4255,4,253,84,0,4255,4256,3,1026,513,0,4256,4257,5,230,0,
        0,4257,4258,5,45,0,0,4258,4261,3,1156,578,0,4259,4260,4,253,85,0,
        4260,4262,3,1022,511,0,4261,4259,1,0,0,0,4261,4262,1,0,0,0,4262,
        4265,1,0,0,0,4263,4264,4,253,86,0,4264,4266,3,1018,509,0,4265,4263,
        1,0,0,0,4265,4266,1,0,0,0,4266,4301,1,0,0,0,4267,4268,4,253,87,0,
        4268,4269,3,1026,513,0,4269,4270,3,1020,510,0,4270,4301,1,0,0,0,
        4271,4272,4,253,88,0,4272,4273,3,1026,513,0,4273,4274,5,128,0,0,
        4274,4278,5,659,0,0,4275,4279,5,10,0,0,4276,4279,5,369,0,0,4277,
        4279,3,560,280,0,4278,4275,1,0,0,0,4278,4276,1,0,0,0,4278,4277,1,
        0,0,0,4279,4301,1,0,0,0,4280,4281,4,253,89,0,4281,4282,3,1026,513,
        0,4282,4285,5,230,0,0,4283,4284,5,645,0,0,4284,4286,3,1180,590,0,
        4285,4283,1,0,0,0,4285,4286,1,0,0,0,4286,4287,1,0,0,0,4287,4288,
        5,45,0,0,4288,4289,5,734,0,0,4289,4291,5,406,0,0,4290,4292,3,1018,
        509,0,4291,4290,1,0,0,0,4291,4292,1,0,0,0,4292,4301,1,0,0,0,4293,
        4294,5,741,0,0,4294,4301,3,1142,571,0,4295,4298,5,740,0,0,4296,4299,
        3,1142,571,0,4297,4299,5,698,0,0,4298,4296,1,0,0,0,4298,4297,1,0,
        0,0,4299,4301,1,0,0,0,4300,4250,1,0,0,0,4300,4254,1,0,0,0,4300,4267,
        1,0,0,0,4300,4271,1,0,0,0,4300,4280,1,0,0,0,4300,4293,1,0,0,0,4300,
        4295,1,0,0,0,4301,507,1,0,0,0,4302,4303,5,618,0,0,4303,4304,3,1188,
        594,0,4304,509,1,0,0,0,4305,4306,5,97,0,0,4306,4310,5,618,0,0,4307,
        4308,4,255,90,0,4308,4311,3,980,490,0,4309,4311,1,0,0,0,4310,4307,
        1,0,0,0,4310,4309,1,0,0,0,4311,4312,1,0,0,0,4312,4313,3,1010,505,
        0,4313,4314,3,514,257,0,4314,4315,3,512,256,0,4315,511,1,0,0,0,4316,
        4318,4,256,91,0,4317,4319,3,516,258,0,4318,4317,1,0,0,0,4318,4319,
        1,0,0,0,4319,4321,1,0,0,0,4320,4322,3,518,259,0,4321,4320,1,0,0,
        0,4321,4322,1,0,0,0,4322,4326,1,0,0,0,4323,4325,3,520,260,0,4324,
        4323,1,0,0,0,4325,4328,1,0,0,0,4326,4324,1,0,0,0,4326,4327,1,0,0,
        0,4327,4331,1,0,0,0,4328,4326,1,0,0,0,4329,4331,1,0,0,0,4330,4316,
        1,0,0,0,4330,4329,1,0,0,0,4331,513,1,0,0,0,4332,4336,4,257,92,0,
        4333,4334,5,128,0,0,4334,4335,5,659,0,0,4335,4337,3,560,280,0,4336,
        4333,1,0,0,0,4336,4337,1,0,0,0,4337,4340,1,0,0,0,4338,4340,1,0,0,
        0,4339,4332,1,0,0,0,4339,4338,1,0,0,0,4340,515,1,0,0,0,4341,4344,
        5,467,0,0,4342,4345,3,552,276,0,4343,4345,7,48,0,0,4344,4342,1,0,
        0,0,4344,4343,1,0,0,0,4345,517,1,0,0,0,4346,4355,5,645,0,0,4347,
        4348,5,322,0,0,4348,4356,3,1140,570,0,4349,4350,5,327,0,0,4350,4356,
        3,1140,570,0,4351,4352,5,321,0,0,4352,4356,3,1140,570,0,4353,4354,
        5,328,0,0,4354,4356,3,1140,570,0,4355,4347,1,0,0,0,4355,4349,1,0,
        0,0,4355,4351,1,0,0,0,4355,4353,1,0,0,0,4356,4357,1,0,0,0,4357,4355,
        1,0,0,0,4357,4358,1,0,0,0,4358,519,1,0,0,0,4359,4360,5,2,0,0,4360,
        4393,7,49,0,0,4361,4390,5,406,0,0,4362,4369,5,177,0,0,4363,4364,
        5,247,0,0,4364,4365,3,1142,571,0,4365,4366,5,122,0,0,4366,4370,1,
        0,0,0,4367,4370,5,365,0,0,4368,4370,5,128,0,0,4369,4363,1,0,0,0,
        4369,4367,1,0,0,0,4369,4368,1,0,0,0,4369,4370,1,0,0,0,4370,4391,
        1,0,0,0,4371,4374,5,705,0,0,4372,4375,3,1142,571,0,4373,4375,5,128,
        0,0,4374,4372,1,0,0,0,4374,4373,1,0,0,0,4375,4391,1,0,0,0,4376,4377,
        5,706,0,0,4377,4382,5,247,0,0,4378,4379,3,1142,571,0,4379,4380,5,
        122,0,0,4380,4383,1,0,0,0,4381,4383,5,128,0,0,4382,4378,1,0,0,0,
        4382,4381,1,0,0,0,4383,4391,1,0,0,0,4384,4385,4,260,93,0,4385,4386,
        5,467,0,0,4386,4388,5,101,0,0,4387,4389,7,50,0,0,4388,4387,1,0,0,
        0,4388,4389,1,0,0,0,4389,4391,1,0,0,0,4390,4362,1,0,0,0,4390,4371,
        1,0,0,0,4390,4376,1,0,0,0,4390,4384,1,0,0,0,4391,4393,1,0,0,0,4392,
        4359,1,0,0,0,4392,4361,1,0,0,0,4393,521,1,0,0,0,4394,4395,5,148,
        0,0,4395,4398,5,618,0,0,4396,4397,4,261,94,0,4397,4399,3,978,489,
        0,4398,4396,1,0,0,0,4398,4399,1,0,0,0,4399,4400,1,0,0,0,4400,4401,
        3,1008,504,0,4401,523,1,0,0,0,4402,4445,5,215,0,0,4403,4404,4,262,
        95,0,4404,4405,3,546,273,0,4405,4406,5,590,0,0,4406,4410,3,1008,
        504,0,4407,4408,5,645,0,0,4408,4409,5,660,0,0,4409,4411,5,391,0,
        0,4410,4407,1,0,0,0,4410,4411,1,0,0,0,4411,4446,1,0,0,0,4412,4418,
        3,546,273,0,4413,4415,5,10,0,0,4414,4416,5,421,0,0,4415,4414,1,0,
        0,0,4415,4416,1,0,0,0,4416,4418,1,0,0,0,4417,4412,1,0,0,0,4417,4413,
        1,0,0,0,4418,4419,1,0,0,0,4419,4421,5,383,0,0,4420,4422,3,544,272,
        0,4421,4420,1,0,0,0,4421,4422,1,0,0,0,4422,4423,1,0,0,0,4423,4424,
        3,550,275,0,4424,4425,5,590,0,0,4425,4427,3,526,263,0,4426,4428,
        3,536,268,0,4427,4426,1,0,0,0,4427,4428,1,0,0,0,4428,4430,1,0,0,
        0,4429,4431,3,528,264,0,4430,4429,1,0,0,0,4430,4431,1,0,0,0,4431,
        4433,1,0,0,0,4432,4434,3,534,267,0,4433,4432,1,0,0,0,4433,4434,1,
        0,0,0,4434,4446,1,0,0,0,4435,4436,5,427,0,0,4436,4437,5,383,0,0,
        4437,4438,3,1026,513,0,4438,4439,5,590,0,0,4439,4443,3,526,263,0,
        4440,4441,5,645,0,0,4441,4442,5,215,0,0,4442,4444,5,391,0,0,4443,
        4440,1,0,0,0,4443,4444,1,0,0,0,4444,4446,1,0,0,0,4445,4403,1,0,0,
        0,4445,4417,1,0,0,0,4445,4435,1,0,0,0,4446,525,1,0,0,0,4447,4448,
        4,263,96,0,4448,4452,3,1010,505,0,4449,4450,4,263,97,0,4450,4452,
        3,1008,504,0,4451,4447,1,0,0,0,4451,4449,1,0,0,0,4452,527,1,0,0,
        0,4453,4454,4,264,98,0,4454,4456,5,645,0,0,4455,4457,3,556,278,0,
        4456,4455,1,0,0,0,4457,4458,1,0,0,0,4458,4456,1,0,0,0,4458,4459,
        1,0,0,0,4459,4465,1,0,0,0,4460,4461,4,264,99,0,4461,4462,5,645,0,
        0,4462,4463,5,215,0,0,4463,4465,5,391,0,0,4464,4453,1,0,0,0,4464,
        4460,1,0,0,0,4465,529,1,0,0,0,4466,4467,5,663,0,0,4467,4468,3,560,
        280,0,4468,531,1,0,0,0,4469,4470,5,645,0,0,4470,4478,5,659,0,0,4471,
        4479,3,560,280,0,4472,4474,5,10,0,0,4473,4475,3,530,265,0,4474,4473,
        1,0,0,0,4474,4475,1,0,0,0,4475,4479,1,0,0,0,4476,4479,5,369,0,0,
        4477,4479,5,128,0,0,4478,4471,1,0,0,0,4478,4472,1,0,0,0,4478,4476,
        1,0,0,0,4478,4477,1,0,0,0,4479,533,1,0,0,0,4480,4481,5,17,0,0,4481,
        4483,5,618,0,0,4482,4484,3,532,266,0,4483,4482,1,0,0,0,4483,4484,
        1,0,0,0,4484,535,1,0,0,0,4485,4486,4,268,100,0,4486,4487,3,516,258,
        0,4487,537,1,0,0,0,4488,4489,5,453,0,0,4489,4490,5,618,0,0,4490,
        4491,3,1026,513,0,4491,4492,5,590,0,0,4492,4500,3,1026,513,0,4493,
        4494,5,773,0,0,4494,4495,3,1026,513,0,4495,4496,5,590,0,0,4496,4497,
        3,1026,513,0,4497,4499,1,0,0,0,4498,4493,1,0,0,0,4499,4502,1,0,0,
        0,4500,4498,1,0,0,0,4500,4501,1,0,0,0,4501,539,1,0,0,0,4502,4500,
        1,0,0,0,4503,4537,5,477,0,0,4504,4505,4,270,101,0,4505,4506,3,546,
        273,0,4506,4507,5,203,0,0,4507,4508,3,1008,504,0,4508,4538,1,0,0,
        0,4509,4510,3,546,273,0,4510,4511,3,542,271,0,4511,4512,5,203,0,
        0,4512,4513,3,1008,504,0,4513,4538,1,0,0,0,4514,4516,5,10,0,0,4515,
        4517,5,421,0,0,4516,4515,1,0,0,0,4516,4517,1,0,0,0,4517,4529,1,0,
        0,0,4518,4519,4,270,102,0,4519,4521,5,383,0,0,4520,4522,3,544,272,
        0,4521,4520,1,0,0,0,4521,4522,1,0,0,0,4522,4523,1,0,0,0,4523,4530,
        3,550,275,0,4524,4525,5,773,0,0,4525,4526,5,215,0,0,4526,4527,5,
        391,0,0,4527,4528,5,203,0,0,4528,4530,3,1008,504,0,4529,4518,1,0,
        0,0,4529,4524,1,0,0,0,4530,4538,1,0,0,0,4531,4532,5,427,0,0,4532,
        4533,5,383,0,0,4533,4534,3,1026,513,0,4534,4535,5,203,0,0,4535,4536,
        3,1008,504,0,4536,4538,1,0,0,0,4537,4504,1,0,0,0,4537,4509,1,0,0,
        0,4537,4514,1,0,0,0,4537,4531,1,0,0,0,4538,541,1,0,0,0,4539,4540,
        4,271,103,0,4540,4542,5,383,0,0,4541,4543,3,544,272,0,4542,4541,
        1,0,0,0,4542,4543,1,0,0,0,4543,4544,1,0,0,0,4544,4554,3,550,275,
        0,4545,4551,4,271,104,0,4546,4548,5,383,0,0,4547,4549,3,544,272,
        0,4548,4547,1,0,0,0,4548,4549,1,0,0,0,4549,4550,1,0,0,0,4550,4552,
        3,550,275,0,4551,4546,1,0,0,0,4551,4552,1,0,0,0,4552,4554,1,0,0,
        0,4553,4539,1,0,0,0,4553,4545,1,0,0,0,4554,543,1,0,0,0,4555,4556,
        7,51,0,0,4556,545,1,0,0,0,4557,4562,3,548,274,0,4558,4559,5,773,
        0,0,4559,4561,3,548,274,0,4560,4558,1,0,0,0,4561,4564,1,0,0,0,4562,
        4560,1,0,0,0,4562,4563,1,0,0,0,4563,547,1,0,0,0,4564,4562,1,0,0,
        0,4565,4576,4,274,105,0,4566,4568,3,1184,592,0,4567,4569,3,1044,
        522,0,4568,4567,1,0,0,0,4568,4569,1,0,0,0,4569,4577,1,0,0,0,4570,
        4574,3,1184,592,0,4571,4575,5,784,0,0,4572,4573,5,783,0,0,4573,4575,
        3,1180,590,0,4574,4571,1,0,0,0,4574,4572,1,0,0,0,4575,4577,1,0,0,
        0,4576,4566,1,0,0,0,4576,4570,1,0,0,0,4577,4607,1,0,0,0,4578,4580,
        7,52,0,0,4579,4581,3,1044,522,0,4580,4579,1,0,0,0,4580,4581,1,0,
        0,0,4581,4607,1,0,0,0,4582,4607,7,53,0,0,4583,4584,5,215,0,0,4584,
        4607,5,391,0,0,4585,4586,5,509,0,0,4586,4607,5,110,0,0,4587,4591,
        5,97,0,0,4588,4589,5,577,0,0,4589,4592,5,571,0,0,4590,4592,7,54,
        0,0,4591,4588,1,0,0,0,4591,4590,1,0,0,0,4591,4592,1,0,0,0,4592,4607,
        1,0,0,0,4593,4594,5,287,0,0,4594,4607,5,571,0,0,4595,4596,5,459,
        0,0,4596,4607,7,55,0,0,4597,4598,5,509,0,0,4598,4607,5,636,0,0,4599,
        4601,5,11,0,0,4600,4602,5,483,0,0,4601,4600,1,0,0,0,4601,4602,1,
        0,0,0,4602,4607,1,0,0,0,4603,4604,4,274,106,0,4604,4605,7,56,0,0,
        4605,4607,5,659,0,0,4606,4565,1,0,0,0,4606,4578,1,0,0,0,4606,4582,
        1,0,0,0,4606,4583,1,0,0,0,4606,4585,1,0,0,0,4606,4587,1,0,0,0,4606,
        4593,1,0,0,0,4606,4595,1,0,0,0,4606,4597,1,0,0,0,4606,4599,1,0,0,
        0,4606,4603,1,0,0,0,4607,549,1,0,0,0,4608,4611,5,760,0,0,4609,4610,
        5,772,0,0,4610,4612,5,760,0,0,4611,4609,1,0,0,0,4611,4612,1,0,0,
        0,4612,4625,1,0,0,0,4613,4616,3,1058,529,0,4614,4615,5,772,0,0,4615,
        4617,5,760,0,0,4616,4614,1,0,0,0,4616,4617,1,0,0,0,4617,4625,1,0,
        0,0,4618,4625,3,1102,551,0,4619,4620,4,275,107,0,4620,4621,3,1058,
        529,0,4621,4622,5,772,0,0,4622,4623,3,1102,551,0,4623,4625,1,0,0,
        0,4624,4608,1,0,0,0,4624,4613,1,0,0,0,4624,4618,1,0,0,0,4624,4619,
        1,0,0,0,4625,551,1,0,0,0,4626,4633,3,554,277,0,4627,4629,5,15,0,
        0,4628,4627,1,0,0,0,4628,4629,1,0,0,0,4629,4630,1,0,0,0,4630,4632,
        3,554,277,0,4631,4628,1,0,0,0,4632,4635,1,0,0,0,4633,4631,1,0,0,
        0,4633,4634,1,0,0,0,4634,553,1,0,0,0,4635,4633,1,0,0,0,4636,4637,
        5,63,0,0,4637,4643,3,1156,578,0,4638,4639,5,259,0,0,4639,4643,3,
        1156,578,0,4640,4641,5,559,0,0,4641,4643,3,1156,578,0,4642,4636,
        1,0,0,0,4642,4638,1,0,0,0,4642,4640,1,0,0,0,4643,555,1,0,0,0,4644,
        4645,5,215,0,0,4645,4655,5,391,0,0,4646,4647,5,322,0,0,4647,4655,
        3,1140,570,0,4648,4649,5,327,0,0,4649,4655,3,1140,570,0,4650,4651,
        5,321,0,0,4651,4655,3,1140,570,0,4652,4653,5,328,0,0,4653,4655,3,
        1140,570,0,4654,4644,1,0,0,0,4654,4646,1,0,0,0,4654,4648,1,0,0,0,
        4654,4650,1,0,0,0,4654,4652,1,0,0,0,4655,557,1,0,0,0,4656,4657,5,
        506,0,0,4657,4658,5,659,0,0,4658,4680,3,560,280,0,4659,4660,5,506,
        0,0,4660,4661,5,659,0,0,4661,4680,7,57,0,0,4662,4663,5,506,0,0,4663,
        4664,5,128,0,0,4664,4668,5,659,0,0,4665,4669,3,560,280,0,4666,4669,
        5,369,0,0,4667,4669,5,10,0,0,4668,4665,1,0,0,0,4668,4666,1,0,0,0,
        4668,4667,1,0,0,0,4669,4670,1,0,0,0,4670,4671,5,590,0,0,4671,4680,
        3,560,280,0,4672,4673,5,506,0,0,4673,4674,5,659,0,0,4674,4677,5,
        10,0,0,4675,4676,5,663,0,0,4676,4678,3,560,280,0,4677,4675,1,0,0,
        0,4677,4678,1,0,0,0,4678,4680,1,0,0,0,4679,4656,1,0,0,0,4679,4659,
        1,0,0,0,4679,4662,1,0,0,0,4679,4672,1,0,0,0,4680,559,1,0,0,0,4681,
        4686,3,562,281,0,4682,4683,5,773,0,0,4683,4685,3,562,281,0,4684,
        4682,1,0,0,0,4685,4688,1,0,0,0,4686,4684,1,0,0,0,4686,4687,1,0,0,
        0,4687,561,1,0,0,0,4688,4686,1,0,0,0,4689,4693,3,1184,592,0,4690,
        4691,5,783,0,0,4691,4694,3,1180,590,0,4692,4694,5,784,0,0,4693,4690,
        1,0,0,0,4693,4692,1,0,0,0,4693,4694,1,0,0,0,4694,563,1,0,0,0,4695,
        4697,5,14,0,0,4696,4698,3,1034,517,0,4697,4696,1,0,0,0,4697,4698,
        1,0,0,0,4698,4699,1,0,0,0,4699,4700,5,574,0,0,4700,4703,3,1104,552,
        0,4701,4702,4,282,108,0,4702,4704,3,566,283,0,4703,4701,1,0,0,0,
        4703,4704,1,0,0,0,4704,4739,1,0,0,0,4705,4706,5,62,0,0,4706,4707,
        5,574,0,0,4707,4711,3,1104,552,0,4708,4710,3,568,284,0,4709,4708,
        1,0,0,0,4710,4713,1,0,0,0,4711,4709,1,0,0,0,4711,4712,1,0,0,0,4712,
        4739,1,0,0,0,4713,4711,1,0,0,0,4714,4715,5,61,0,0,4715,4716,5,574,
        0,0,4716,4718,3,1104,552,0,4717,4719,7,58,0,0,4718,4717,1,0,0,0,
        4718,4719,1,0,0,0,4719,4739,1,0,0,0,4720,4722,5,388,0,0,4721,4723,
        3,1034,517,0,4722,4721,1,0,0,0,4722,4723,1,0,0,0,4723,4724,1,0,0,
        0,4724,4725,5,574,0,0,4725,4739,3,1104,552,0,4726,4728,5,455,0,0,
        4727,4729,3,1034,517,0,4728,4727,1,0,0,0,4728,4729,1,0,0,0,4729,
        4730,1,0,0,0,4730,4731,5,574,0,0,4731,4735,3,1104,552,0,4732,4734,
        3,570,285,0,4733,4732,1,0,0,0,4734,4737,1,0,0,0,4735,4733,1,0,0,
        0,4735,4736,1,0,0,0,4736,4739,1,0,0,0,4737,4735,1,0,0,0,4738,4695,
        1,0,0,0,4738,4705,1,0,0,0,4738,4714,1,0,0,0,4738,4720,1,0,0,0,4738,
        4726,1,0,0,0,4739,565,1,0,0,0,4740,4741,5,614,0,0,4741,4742,5,674,
        0,0,4742,4743,5,383,0,0,4743,4747,3,1130,565,0,4744,4745,5,645,0,
        0,4745,4746,5,747,0,0,4746,4748,5,675,0,0,4747,4744,1,0,0,0,4747,
        4748,1,0,0,0,4748,4754,1,0,0,0,4749,4750,5,148,0,0,4750,4751,5,674,
        0,0,4751,4752,5,383,0,0,4752,4754,3,1130,565,0,4753,4740,1,0,0,0,
        4753,4749,1,0,0,0,4754,567,1,0,0,0,4755,4756,5,200,0,0,4756,4759,
        5,615,0,0,4757,4759,7,59,0,0,4758,4755,1,0,0,0,4758,4757,1,0,0,0,
        4759,569,1,0,0,0,4760,4761,7,60,0,0,4761,571,1,0,0,0,4762,4763,5,
        245,0,0,4763,4764,5,410,0,0,4764,4765,3,1128,564,0,4765,4766,5,520,
        0,0,4766,4767,3,1154,577,0,4767,4785,1,0,0,0,4768,4769,5,245,0,0,
        4769,4770,5,664,0,0,4770,4785,3,1164,582,0,4771,4772,5,607,0,0,4772,
        4773,5,410,0,0,4773,4785,3,1118,559,0,4774,4775,5,607,0,0,4775,4776,
        5,664,0,0,4776,4781,3,1120,560,0,4777,4778,5,773,0,0,4778,4780,3,
        1120,560,0,4779,4777,1,0,0,0,4780,4783,1,0,0,0,4781,4779,1,0,0,0,
        4781,4782,1,0,0,0,4782,4785,1,0,0,0,4783,4781,1,0,0,0,4784,4762,
        1,0,0,0,4784,4768,1,0,0,0,4784,4771,1,0,0,0,4784,4774,1,0,0,0,4785,
        573,1,0,0,0,4786,4787,5,506,0,0,4787,4788,3,576,288,0,4788,575,1,
        0,0,0,4789,4790,3,586,293,0,4790,4791,3,584,292,0,4791,4846,1,0,
        0,0,4792,4793,5,592,0,0,4793,4846,3,578,289,0,4794,4795,3,1192,596,
        0,4795,4796,3,592,296,0,4796,4846,1,0,0,0,4797,4800,5,406,0,0,4798,
        4799,5,200,0,0,4799,4801,3,1026,513,0,4800,4798,1,0,0,0,4800,4801,
        1,0,0,0,4801,4802,1,0,0,0,4802,4829,3,1190,595,0,4803,4805,3,1156,
        578,0,4804,4806,3,1022,511,0,4805,4804,1,0,0,0,4805,4806,1,0,0,0,
        4806,4808,1,0,0,0,4807,4809,3,1018,509,0,4808,4807,1,0,0,0,4808,
        4809,1,0,0,0,4809,4830,1,0,0,0,4810,4812,3,1156,578,0,4811,4813,
        3,1022,511,0,4812,4811,1,0,0,0,4812,4813,1,0,0,0,4813,4815,1,0,0,
        0,4814,4816,3,1018,509,0,4815,4814,1,0,0,0,4815,4816,1,0,0,0,4816,
        4830,1,0,0,0,4817,4818,4,288,109,0,4818,4819,5,382,0,0,4819,4820,
        5,776,0,0,4820,4821,3,1156,578,0,4821,4822,5,777,0,0,4822,4830,1,
        0,0,0,4823,4824,4,288,110,0,4824,4825,5,406,0,0,4825,4826,5,776,
        0,0,4826,4827,3,1156,578,0,4827,4828,5,777,0,0,4828,4830,1,0,0,0,
        4829,4803,1,0,0,0,4829,4810,1,0,0,0,4829,4817,1,0,0,0,4829,4823,
        1,0,0,0,4830,4846,1,0,0,0,4831,4832,4,288,111,0,4832,4835,5,406,
        0,0,4833,4834,5,200,0,0,4834,4836,3,1026,513,0,4835,4833,1,0,0,0,
        4835,4836,1,0,0,0,4836,4837,1,0,0,0,4837,4838,5,590,0,0,4838,4840,
        5,734,0,0,4839,4841,3,1022,511,0,4840,4839,1,0,0,0,4840,4841,1,0,
        0,0,4841,4843,1,0,0,0,4842,4844,3,1018,509,0,4843,4842,1,0,0,0,4843,
        4844,1,0,0,0,4844,4846,1,0,0,0,4845,4789,1,0,0,0,4845,4792,1,0,0,
        0,4845,4794,1,0,0,0,4845,4797,1,0,0,0,4845,4831,1,0,0,0,4846,577,
        1,0,0,0,4847,4849,3,580,290,0,4848,4850,3,582,291,0,4849,4848,1,
        0,0,0,4849,4850,1,0,0,0,4850,4857,1,0,0,0,4851,4854,3,582,291,0,
        4852,4853,5,773,0,0,4853,4855,3,580,290,0,4854,4852,1,0,0,0,4854,
        4855,1,0,0,0,4855,4857,1,0,0,0,4856,4847,1,0,0,0,4856,4851,1,0,0,
        0,4857,579,1,0,0,0,4858,4859,5,435,0,0,4859,4860,7,39,0,0,4860,581,
        1,0,0,0,4861,4862,5,258,0,0,4862,4868,5,274,0,0,4863,4864,5,456,
        0,0,4864,4869,5,435,0,0,4865,4866,5,435,0,0,4866,4869,7,61,0,0,4867,
        4869,5,500,0,0,4868,4863,1,0,0,0,4868,4865,1,0,0,0,4868,4867,1,0,
        0,0,4869,583,1,0,0,0,4870,4871,5,773,0,0,4871,4873,3,588,294,0,4872,
        4870,1,0,0,0,4873,4876,1,0,0,0,4874,4872,1,0,0,0,4874,4875,1,0,0,
        0,4875,585,1,0,0,0,4876,4874,1,0,0,0,4877,4878,3,746,373,0,4878,
        4879,3,1190,595,0,4879,4880,3,596,298,0,4880,4903,1,0,0,0,4881,4903,
        3,998,499,0,4882,4883,3,742,371,0,4883,4884,3,1190,595,0,4884,4885,
        3,676,338,0,4885,4903,1,0,0,0,4886,4887,3,590,295,0,4887,4888,3,
        1190,595,0,4888,4889,3,596,298,0,4889,4903,1,0,0,0,4890,4900,5,356,
        0,0,4891,4892,3,1190,595,0,4892,4893,3,676,338,0,4893,4901,1,0,0,
        0,4894,4896,3,936,468,0,4895,4897,3,986,493,0,4896,4895,1,0,0,0,
        4896,4897,1,0,0,0,4897,4901,1,0,0,0,4898,4899,4,293,112,0,4899,4901,
        5,128,0,0,4900,4891,1,0,0,0,4900,4894,1,0,0,0,4900,4898,1,0,0,0,
        4901,4903,1,0,0,0,4902,4877,1,0,0,0,4902,4881,1,0,0,0,4902,4882,
        1,0,0,0,4902,4886,1,0,0,0,4902,4890,1,0,0,0,4903,587,1,0,0,0,4904,
        4905,3,1192,596,0,4905,4906,3,746,373,0,4906,4907,3,1190,595,0,4907,
        4908,3,596,298,0,4908,4911,1,0,0,0,4909,4911,3,586,293,0,4910,4904,
        1,0,0,0,4910,4909,1,0,0,0,4911,589,1,0,0,0,4912,4914,5,785,0,0,4913,
        4915,3,1196,598,0,4914,4913,1,0,0,0,4914,4915,1,0,0,0,4915,4916,
        1,0,0,0,4916,4917,3,746,373,0,4917,591,1,0,0,0,4918,4919,3,594,297,
        0,4919,4920,3,584,292,0,4920,4924,1,0,0,0,4921,4922,5,592,0,0,4922,
        4924,3,578,289,0,4923,4918,1,0,0,0,4923,4921,1,0,0,0,4924,593,1,
        0,0,0,4925,4926,3,746,373,0,4926,4927,3,1190,595,0,4927,4928,3,596,
        298,0,4928,595,1,0,0,0,4929,4934,3,676,338,0,4930,4934,7,62,0,0,
        4931,4932,4,298,113,0,4932,4934,7,63,0,0,4933,4929,1,0,0,0,4933,
        4930,1,0,0,0,4933,4931,1,0,0,0,4934,597,1,0,0,0,4935,5155,5,509,
        0,0,4936,4937,4,299,114,0,4937,5156,5,22,0,0,4938,4940,5,110,0,0,
        4939,4941,3,1030,515,0,4940,4939,1,0,0,0,4940,4941,1,0,0,0,4941,
        5156,1,0,0,0,4942,4944,3,600,300,0,4943,4942,1,0,0,0,4943,4944,1,
        0,0,0,4944,4945,1,0,0,0,4945,4947,5,571,0,0,4946,4948,3,606,303,
        0,4947,4946,1,0,0,0,4947,4948,1,0,0,0,4948,4950,1,0,0,0,4949,4951,
        3,1030,515,0,4950,4949,1,0,0,0,4950,4951,1,0,0,0,4951,5156,1,0,0,
        0,4952,4954,5,204,0,0,4953,4952,1,0,0,0,4953,4954,1,0,0,0,4954,4955,
        1,0,0,0,4955,4957,5,593,0,0,4956,4958,3,606,303,0,4957,4956,1,0,
        0,0,4957,4958,1,0,0,0,4958,4960,1,0,0,0,4959,4961,3,1030,515,0,4960,
        4959,1,0,0,0,4960,4961,1,0,0,0,4961,5156,1,0,0,0,4962,4964,5,169,
        0,0,4963,4965,3,606,303,0,4964,4963,1,0,0,0,4964,4965,1,0,0,0,4965,
        4967,1,0,0,0,4966,4968,3,1030,515,0,4967,4966,1,0,0,0,4967,4968,
        1,0,0,0,4968,5156,1,0,0,0,4969,4970,5,574,0,0,4970,4972,5,547,0,
        0,4971,4973,3,606,303,0,4972,4971,1,0,0,0,4972,4973,1,0,0,0,4973,
        4975,1,0,0,0,4974,4976,3,1030,515,0,4975,4974,1,0,0,0,4975,4976,
        1,0,0,0,4976,5156,1,0,0,0,4977,4978,5,387,0,0,4978,4980,5,571,0,
        0,4979,4981,3,606,303,0,4980,4979,1,0,0,0,4980,4981,1,0,0,0,4981,
        4983,1,0,0,0,4982,4984,3,1030,515,0,4983,4982,1,0,0,0,4983,4984,
        1,0,0,0,4984,5156,1,0,0,0,4985,5156,5,408,0,0,4986,4989,5,163,0,
        0,4987,4990,3,1094,547,0,4988,4990,5,10,0,0,4989,4987,1,0,0,0,4989,
        4988,1,0,0,0,4990,4991,1,0,0,0,4991,5156,7,64,0,0,4992,4994,3,600,
        300,0,4993,4992,1,0,0,0,4993,4994,1,0,0,0,4994,4995,1,0,0,0,4995,
        4996,5,71,0,0,4996,4997,7,65,0,0,4997,4999,3,1102,551,0,4998,5000,
        3,606,303,0,4999,4998,1,0,0,0,4999,5000,1,0,0,0,5000,5002,1,0,0,
        0,5001,5003,3,1030,515,0,5002,5001,1,0,0,0,5002,5003,1,0,0,0,5003,
        5156,1,0,0,0,5004,5005,7,42,0,0,5005,5156,5,289,0,0,5006,5013,5,
        514,0,0,5007,5014,5,225,0,0,5008,5009,5,547,0,0,5009,5011,3,602,
        301,0,5010,5012,3,782,391,0,5011,5010,1,0,0,0,5011,5012,1,0,0,0,
        5012,5014,1,0,0,0,5013,5007,1,0,0,0,5013,5008,1,0,0,0,5014,5156,
        1,0,0,0,5015,5016,7,66,0,0,5016,5019,5,169,0,0,5017,5018,5,251,0,
        0,5018,5020,3,1156,578,0,5019,5017,1,0,0,0,5019,5020,1,0,0,0,5020,
        5023,1,0,0,0,5021,5022,5,203,0,0,5022,5024,3,1144,572,0,5023,5021,
        1,0,0,0,5023,5024,1,0,0,0,5024,5026,1,0,0,0,5025,5027,3,284,142,
        0,5026,5025,1,0,0,0,5026,5027,1,0,0,0,5027,5029,1,0,0,0,5028,5030,
        3,782,391,0,5029,5028,1,0,0,0,5029,5030,1,0,0,0,5030,5156,1,0,0,
        0,5031,5032,4,299,115,0,5032,5034,5,180,0,0,5033,5031,1,0,0,0,5033,
        5034,1,0,0,0,5034,5035,1,0,0,0,5035,5036,7,67,0,0,5036,5037,3,604,
        302,0,5037,5039,3,1102,551,0,5038,5040,3,606,303,0,5039,5038,1,0,
        0,0,5039,5040,1,0,0,0,5040,5042,1,0,0,0,5041,5043,3,358,179,0,5042,
        5041,1,0,0,0,5042,5043,1,0,0,0,5043,5156,1,0,0,0,5044,5046,5,553,
        0,0,5045,5044,1,0,0,0,5045,5046,1,0,0,0,5046,5047,1,0,0,0,5047,5156,
        5,162,0,0,5048,5049,5,95,0,0,5049,5050,5,776,0,0,5050,5051,5,760,
        0,0,5051,5052,5,777,0,0,5052,5156,7,68,0,0,5053,5055,5,639,0,0,5054,
        5056,3,284,142,0,5055,5054,1,0,0,0,5055,5056,1,0,0,0,5056,5156,1,
        0,0,0,5057,5059,5,166,0,0,5058,5060,3,284,142,0,5059,5058,1,0,0,
        0,5059,5060,1,0,0,0,5060,5156,1,0,0,0,5061,5156,5,426,0,0,5062,5071,
        5,425,0,0,5063,5068,3,608,304,0,5064,5065,5,773,0,0,5065,5067,3,
        608,304,0,5066,5064,1,0,0,0,5067,5070,1,0,0,0,5068,5066,1,0,0,0,
        5068,5069,1,0,0,0,5069,5072,1,0,0,0,5070,5068,1,0,0,0,5071,5063,
        1,0,0,0,5071,5072,1,0,0,0,5072,5076,1,0,0,0,5073,5074,5,200,0,0,
        5074,5075,5,430,0,0,5075,5077,5,747,0,0,5076,5073,1,0,0,0,5076,5077,
        1,0,0,0,5077,5079,1,0,0,0,5078,5080,3,284,142,0,5079,5078,1,0,0,
        0,5079,5080,1,0,0,0,5080,5156,1,0,0,0,5081,5083,3,1192,596,0,5082,
        5081,1,0,0,0,5082,5083,1,0,0,0,5083,5084,1,0,0,0,5084,5086,7,69,
        0,0,5085,5087,3,1030,515,0,5086,5085,1,0,0,0,5086,5087,1,0,0,0,5087,
        5156,1,0,0,0,5088,5090,5,204,0,0,5089,5088,1,0,0,0,5089,5090,1,0,
        0,0,5090,5091,1,0,0,0,5091,5156,5,424,0,0,5092,5094,3,758,379,0,
        5093,5095,3,1030,515,0,5094,5093,1,0,0,0,5094,5095,1,0,0,0,5095,
        5156,1,0,0,0,5096,5098,5,70,0,0,5097,5099,3,1030,515,0,5098,5097,
        1,0,0,0,5098,5099,1,0,0,0,5099,5156,1,0,0,0,5100,5101,4,299,116,
        0,5101,5156,5,93,0,0,5102,5156,5,421,0,0,5103,5106,5,216,0,0,5104,
        5105,5,200,0,0,5105,5107,3,1026,513,0,5106,5104,1,0,0,0,5106,5107,
        1,0,0,0,5107,5156,1,0,0,0,5108,5109,5,216,0,0,5109,5110,5,200,0,
        0,5110,5111,3,1026,513,0,5111,5112,5,621,0,0,5112,5113,3,1008,504,
        0,5113,5156,1,0,0,0,5114,5115,5,316,0,0,5115,5156,5,547,0,0,5116,
        5137,5,97,0,0,5117,5119,5,109,0,0,5118,5120,3,980,490,0,5119,5118,
        1,0,0,0,5119,5120,1,0,0,0,5120,5121,1,0,0,0,5121,5138,3,1058,529,
        0,5122,5123,5,170,0,0,5123,5138,3,1086,543,0,5124,5125,5,206,0,0,
        5125,5138,3,1066,533,0,5126,5127,5,422,0,0,5127,5138,3,1062,531,
        0,5128,5129,5,574,0,0,5129,5138,3,1102,551,0,5130,5131,5,594,0,0,
        5131,5138,3,1070,535,0,5132,5133,5,636,0,0,5133,5138,3,1074,537,
        0,5134,5135,4,299,117,0,5135,5136,5,618,0,0,5136,5138,3,1026,513,
        0,5137,5117,1,0,0,0,5137,5122,1,0,0,0,5137,5124,1,0,0,0,5137,5126,
        1,0,0,0,5137,5128,1,0,0,0,5137,5130,1,0,0,0,5137,5132,1,0,0,0,5137,
        5134,1,0,0,0,5138,5156,1,0,0,0,5139,5140,5,422,0,0,5140,5142,5,547,
        0,0,5141,5143,3,1030,515,0,5142,5141,1,0,0,0,5142,5143,1,0,0,0,5143,
        5156,1,0,0,0,5144,5145,5,206,0,0,5145,5147,5,547,0,0,5146,5148,3,
        1030,515,0,5147,5146,1,0,0,0,5147,5148,1,0,0,0,5148,5156,1,0,0,0,
        5149,5150,5,422,0,0,5150,5151,5,68,0,0,5151,5156,3,1062,531,0,5152,
        5153,5,206,0,0,5153,5154,5,68,0,0,5154,5156,3,1066,533,0,5155,4936,
        1,0,0,0,5155,4938,1,0,0,0,5155,4943,1,0,0,0,5155,4953,1,0,0,0,5155,
        4962,1,0,0,0,5155,4969,1,0,0,0,5155,4977,1,0,0,0,5155,4985,1,0,0,
        0,5155,4986,1,0,0,0,5155,4993,1,0,0,0,5155,5004,1,0,0,0,5155,5006,
        1,0,0,0,5155,5015,1,0,0,0,5155,5033,1,0,0,0,5155,5045,1,0,0,0,5155,
        5048,1,0,0,0,5155,5053,1,0,0,0,5155,5057,1,0,0,0,5155,5061,1,0,0,
        0,5155,5062,1,0,0,0,5155,5082,1,0,0,0,5155,5089,1,0,0,0,5155,5092,
        1,0,0,0,5155,5096,1,0,0,0,5155,5100,1,0,0,0,5155,5102,1,0,0,0,5155,
        5103,1,0,0,0,5155,5108,1,0,0,0,5155,5114,1,0,0,0,5155,5116,1,0,0,
        0,5155,5139,1,0,0,0,5155,5144,1,0,0,0,5155,5149,1,0,0,0,5155,5152,
        1,0,0,0,5156,599,1,0,0,0,5157,5164,5,204,0,0,5158,5159,4,300,118,
        0,5159,5161,5,180,0,0,5160,5162,5,204,0,0,5161,5160,1,0,0,0,5161,
        5162,1,0,0,0,5162,5164,1,0,0,0,5163,5157,1,0,0,0,5163,5158,1,0,0,
        0,5164,601,1,0,0,0,5165,5167,4,301,119,0,5166,5168,5,370,0,0,5167,
        5166,1,0,0,0,5167,5168,1,0,0,0,5168,5171,1,0,0,0,5169,5171,1,0,0,
        0,5170,5165,1,0,0,0,5170,5169,1,0,0,0,5171,603,1,0,0,0,5172,5173,
        7,65,0,0,5173,605,1,0,0,0,5174,5175,3,604,302,0,5175,5176,3,1128,
        564,0,5176,607,1,0,0,0,5177,5178,5,40,0,0,5178,5185,5,255,0,0,5179,
        5180,5,91,0,0,5180,5185,5,568,0,0,5181,5182,5,400,0,0,5182,5185,
        5,185,0,0,5183,5185,7,70,0,0,5184,5177,1,0,0,0,5184,5179,1,0,0,0,
        5184,5181,1,0,0,0,5184,5183,1,0,0,0,5185,609,1,0,0,0,5186,5187,5,
        33,0,0,5187,5224,3,1160,580,0,5188,5189,5,47,0,0,5189,5190,5,236,
        0,0,5190,5191,3,612,306,0,5191,5194,5,251,0,0,5192,5195,3,1128,564,
        0,5193,5195,5,128,0,0,5194,5192,1,0,0,0,5194,5193,1,0,0,0,5195,5224,
        1,0,0,0,5196,5198,5,196,0,0,5197,5199,3,1034,517,0,5198,5197,1,0,
        0,0,5198,5199,1,0,0,0,5199,5209,1,0,0,0,5200,5210,3,630,315,0,5201,
        5206,3,626,313,0,5202,5203,5,773,0,0,5203,5205,3,626,313,0,5204,
        5202,1,0,0,0,5205,5208,1,0,0,0,5206,5204,1,0,0,0,5206,5207,1,0,0,
        0,5207,5210,1,0,0,0,5208,5206,1,0,0,0,5209,5200,1,0,0,0,5209,5201,
        1,0,0,0,5210,5224,1,0,0,0,5211,5213,5,266,0,0,5212,5214,7,71,0,0,
        5213,5212,1,0,0,0,5213,5214,1,0,0,0,5214,5215,1,0,0,0,5215,5224,
        3,676,338,0,5216,5217,5,281,0,0,5217,5218,5,236,0,0,5218,5219,5,
        248,0,0,5219,5220,5,47,0,0,5220,5224,3,634,317,0,5221,5222,4,305,
        120,0,5222,5224,5,510,0,0,5223,5186,1,0,0,0,5223,5188,1,0,0,0,5223,
        5196,1,0,0,0,5223,5211,1,0,0,0,5223,5216,1,0,0,0,5223,5221,1,0,0,
        0,5224,611,1,0,0,0,5225,5228,3,614,307,0,5226,5228,3,618,309,0,5227,
        5225,1,0,0,0,5227,5226,1,0,0,0,5228,613,1,0,0,0,5229,5234,3,616,
        308,0,5230,5231,5,773,0,0,5231,5233,3,616,308,0,5232,5230,1,0,0,
        0,5233,5236,1,0,0,0,5234,5232,1,0,0,0,5234,5235,1,0,0,0,5235,615,
        1,0,0,0,5236,5234,1,0,0,0,5237,5239,3,1102,551,0,5238,5240,3,620,
        310,0,5239,5238,1,0,0,0,5239,5240,1,0,0,0,5240,617,1,0,0,0,5241,
        5242,3,1102,551,0,5242,5243,5,405,0,0,5243,5244,5,776,0,0,5244,5245,
        3,52,26,0,5245,5247,5,777,0,0,5246,5248,3,620,310,0,5247,5246,1,
        0,0,0,5247,5248,1,0,0,0,5248,619,1,0,0,0,5249,5250,3,406,203,0,5250,
        5252,5,776,0,0,5251,5253,3,624,312,0,5252,5251,1,0,0,0,5252,5253,
        1,0,0,0,5253,5254,1,0,0,0,5254,5255,5,777,0,0,5255,621,1,0,0,0,5256,
        5259,3,1128,564,0,5257,5259,5,420,0,0,5258,5256,1,0,0,0,5258,5257,
        1,0,0,0,5259,623,1,0,0,0,5260,5265,3,622,311,0,5261,5262,5,773,0,
        0,5262,5264,3,622,311,0,5263,5261,1,0,0,0,5264,5267,1,0,0,0,5265,
        5263,1,0,0,0,5265,5266,1,0,0,0,5266,625,1,0,0,0,5267,5265,1,0,0,
        0,5268,5284,7,72,0,0,5269,5271,3,628,314,0,5270,5269,1,0,0,0,5270,
        5271,1,0,0,0,5271,5272,1,0,0,0,5272,5284,5,289,0,0,5273,5274,5,445,
        0,0,5274,5276,5,289,0,0,5275,5277,3,782,391,0,5276,5275,1,0,0,0,
        5276,5277,1,0,0,0,5277,5284,1,0,0,0,5278,5279,4,313,121,0,5279,5280,
        5,430,0,0,5280,5284,5,47,0,0,5281,5282,4,313,122,0,5282,5284,5,389,
        0,0,5283,5268,1,0,0,0,5283,5270,1,0,0,0,5283,5273,1,0,0,0,5283,5278,
        1,0,0,0,5283,5281,1,0,0,0,5284,627,1,0,0,0,5285,5286,7,73,0,0,5286,
        629,1,0,0,0,5287,5295,7,18,0,0,5288,5289,5,645,0,0,5289,5290,5,435,
        0,0,5290,5296,5,287,0,0,5291,5293,3,1130,565,0,5292,5294,3,632,316,
        0,5293,5292,1,0,0,0,5293,5294,1,0,0,0,5294,5296,1,0,0,0,5295,5288,
        1,0,0,0,5295,5291,1,0,0,0,5295,5296,1,0,0,0,5296,631,1,0,0,0,5297,
        5298,4,316,123,0,5298,5299,5,200,0,0,5299,5304,5,179,0,0,5300,5301,
        5,645,0,0,5301,5302,5,435,0,0,5302,5304,5,287,0,0,5303,5297,1,0,
        0,0,5303,5300,1,0,0,0,5304,633,1,0,0,0,5305,5306,3,1102,551,0,5306,
        5308,3,640,320,0,5307,5309,3,620,310,0,5308,5307,1,0,0,0,5308,5309,
        1,0,0,0,5309,5312,1,0,0,0,5310,5311,5,232,0,0,5311,5313,5,270,0,
        0,5312,5310,1,0,0,0,5312,5313,1,0,0,0,5313,5316,1,0,0,0,5314,5316,
        3,636,318,0,5315,5305,1,0,0,0,5315,5314,1,0,0,0,5316,635,1,0,0,0,
        5317,5322,3,638,319,0,5318,5319,5,773,0,0,5319,5321,3,638,319,0,
        5320,5318,1,0,0,0,5321,5324,1,0,0,0,5322,5320,1,0,0,0,5322,5323,
        1,0,0,0,5323,637,1,0,0,0,5324,5322,1,0,0,0,5325,5327,3,1102,551,
        0,5326,5328,3,620,310,0,5327,5326,1,0,0,0,5327,5328,1,0,0,0,5328,
        5331,1,0,0,0,5329,5330,5,232,0,0,5330,5332,5,270,0,0,5331,5329,1,
        0,0,0,5331,5332,1,0,0,0,5332,639,1,0,0,0,5333,5334,5,405,0,0,5334,
        5335,5,776,0,0,5335,5336,3,52,26,0,5336,5337,5,777,0,0,5337,641,
        1,0,0,0,5338,5343,3,644,322,0,5339,5343,3,654,327,0,5340,5343,3,
        656,328,0,5341,5343,3,660,330,0,5342,5338,1,0,0,0,5342,5339,1,0,
        0,0,5342,5340,1,0,0,0,5342,5341,1,0,0,0,5343,643,1,0,0,0,5344,5345,
        5,97,0,0,5345,5346,5,709,0,0,5346,5347,5,217,0,0,5347,5348,3,1128,
        564,0,5348,5350,5,599,0,0,5349,5351,3,1190,595,0,5350,5349,1,0,0,
        0,5350,5351,1,0,0,0,5351,5352,1,0,0,0,5352,5354,7,74,0,0,5353,5355,
        3,646,323,0,5354,5353,1,0,0,0,5354,5355,1,0,0,0,5355,5357,1,0,0,
        0,5356,5358,3,650,325,0,5357,5356,1,0,0,0,5357,5358,1,0,0,0,5358,
        5360,1,0,0,0,5359,5361,3,652,326,0,5360,5359,1,0,0,0,5360,5361,1,
        0,0,0,5361,645,1,0,0,0,5362,5364,5,711,0,0,5363,5365,3,1190,595,
        0,5364,5363,1,0,0,0,5364,5365,1,0,0,0,5365,5366,1,0,0,0,5366,5373,
        3,648,324,0,5367,5369,5,773,0,0,5368,5367,1,0,0,0,5368,5369,1,0,
        0,0,5369,5370,1,0,0,0,5370,5372,3,648,324,0,5371,5368,1,0,0,0,5372,
        5375,1,0,0,0,5373,5371,1,0,0,0,5373,5374,1,0,0,0,5374,647,1,0,0,
        0,5375,5373,1,0,0,0,5376,5379,5,747,0,0,5377,5378,5,759,0,0,5378,
        5380,5,747,0,0,5379,5377,1,0,0,0,5379,5380,1,0,0,0,5380,649,1,0,
        0,0,5381,5383,5,708,0,0,5382,5384,3,1190,595,0,5383,5382,1,0,0,0,
        5383,5384,1,0,0,0,5384,5385,1,0,0,0,5385,5386,5,747,0,0,5386,651,
        1,0,0,0,5387,5388,7,75,0,0,5388,653,1,0,0,0,5389,5390,5,11,0,0,5390,
        5391,5,709,0,0,5391,5392,5,217,0,0,5392,5394,3,1122,561,0,5393,5395,
        3,646,323,0,5394,5393,1,0,0,0,5394,5395,1,0,0,0,5395,5397,1,0,0,
        0,5396,5398,3,650,325,0,5397,5396,1,0,0,0,5397,5398,1,0,0,0,5398,
        5400,1,0,0,0,5399,5401,3,652,326,0,5400,5399,1,0,0,0,5400,5401,1,
        0,0,0,5401,5403,1,0,0,0,5402,5404,5,198,0,0,5403,5402,1,0,0,0,5403,
        5404,1,0,0,0,5404,655,1,0,0,0,5405,5406,5,506,0,0,5406,5407,5,709,
        0,0,5407,5408,5,217,0,0,5408,5411,3,1128,564,0,5409,5410,5,200,0,
        0,5410,5412,3,658,329,0,5411,5409,1,0,0,0,5411,5412,1,0,0,0,5412,
        657,1,0,0,0,5413,5420,3,1142,571,0,5414,5416,5,773,0,0,5415,5414,
        1,0,0,0,5415,5416,1,0,0,0,5416,5417,1,0,0,0,5417,5419,3,1142,571,
        0,5418,5415,1,0,0,0,5419,5422,1,0,0,0,5420,5418,1,0,0,0,5420,5421,
        1,0,0,0,5421,659,1,0,0,0,5422,5420,1,0,0,0,5423,5424,5,148,0,0,5424,
        5425,5,709,0,0,5425,5426,5,217,0,0,5426,5428,3,1122,561,0,5427,5429,
        5,198,0,0,5428,5427,1,0,0,0,5428,5429,1,0,0,0,5429,661,1,0,0,0,5430,
        5437,3,664,332,0,5431,5437,3,666,333,0,5432,5437,3,670,335,0,5433,
        5437,3,672,336,0,5434,5435,4,331,124,0,5435,5437,3,674,337,0,5436,
        5430,1,0,0,0,5436,5431,1,0,0,0,5436,5432,1,0,0,0,5436,5433,1,0,0,
        0,5436,5434,1,0,0,0,5437,663,1,0,0,0,5438,5439,7,76,0,0,5439,5442,
        3,1102,551,0,5440,5443,3,1156,578,0,5441,5443,3,1046,523,0,5442,
        5440,1,0,0,0,5442,5441,1,0,0,0,5442,5443,1,0,0,0,5443,665,1,0,0,
        0,5444,5460,7,76,0,0,5445,5446,4,333,125,0,5446,5461,5,180,0,0,5447,
        5448,4,333,126,0,5448,5461,5,404,0,0,5449,5450,4,333,127,0,5450,
        5451,5,201,0,0,5451,5452,5,750,0,0,5452,5461,3,1180,590,0,5453,5454,
        4,333,128,0,5454,5461,5,14,0,0,5455,5456,4,333,129,0,5456,5457,5,
        14,0,0,5457,5458,5,201,0,0,5458,5459,5,750,0,0,5459,5461,3,1180,
        590,0,5460,5445,1,0,0,0,5460,5447,1,0,0,0,5460,5449,1,0,0,0,5460,
        5453,1,0,0,0,5460,5455,1,0,0,0,5460,5461,1,0,0,0,5461,5462,1,0,0,
        0,5462,5463,3,668,334,0,5463,667,1,0,0,0,5464,5477,3,266,133,0,5465,
        5470,4,334,130,0,5466,5471,3,220,110,0,5467,5471,3,232,116,0,5468,
        5471,3,264,132,0,5469,5471,3,416,208,0,5470,5466,1,0,0,0,5470,5467,
        1,0,0,0,5470,5468,1,0,0,0,5470,5469,1,0,0,0,5471,5477,1,0,0,0,5472,
        5473,4,334,131,0,5473,5474,5,200,0,0,5474,5475,5,84,0,0,5475,5477,
        3,1142,571,0,5476,5464,1,0,0,0,5476,5465,1,0,0,0,5476,5472,1,0,0,
        0,5477,669,1,0,0,0,5478,5479,5,222,0,0,5479,5480,3,1180,590,0,5480,
        671,1,0,0,0,5481,5482,5,620,0,0,5482,5483,3,1128,564,0,5483,673,
        1,0,0,0,5484,5485,5,714,0,0,5485,675,1,0,0,0,5486,5487,6,338,-1,
        0,5487,5493,3,678,339,0,5488,5490,5,257,0,0,5489,5491,3,760,380,
        0,5490,5489,1,0,0,0,5490,5491,1,0,0,0,5491,5492,1,0,0,0,5492,5494,
        7,77,0,0,5493,5488,1,0,0,0,5493,5494,1,0,0,0,5494,5498,1,0,0,0,5495,
        5496,5,371,0,0,5496,5498,3,676,338,4,5497,5486,1,0,0,0,5497,5495,
        1,0,0,0,5498,5510,1,0,0,0,5499,5500,10,3,0,0,5500,5501,7,78,0,0,
        5501,5509,3,676,338,4,5502,5503,10,2,0,0,5503,5504,5,654,0,0,5504,
        5509,3,676,338,3,5505,5506,10,1,0,0,5506,5507,7,79,0,0,5507,5509,
        3,676,338,2,5508,5499,1,0,0,0,5508,5502,1,0,0,0,5508,5505,1,0,0,
        0,5509,5512,1,0,0,0,5510,5508,1,0,0,0,5510,5511,1,0,0,0,5511,677,
        1,0,0,0,5512,5510,1,0,0,0,5513,5514,6,339,-1,0,5514,5515,3,682,341,
        0,5515,5533,1,0,0,0,5516,5517,10,3,0,0,5517,5519,5,257,0,0,5518,
        5520,3,760,380,0,5519,5518,1,0,0,0,5519,5520,1,0,0,0,5520,5521,1,
        0,0,0,5521,5532,5,376,0,0,5522,5523,10,2,0,0,5523,5524,3,680,340,
        0,5524,5525,3,682,341,0,5525,5532,1,0,0,0,5526,5527,10,1,0,0,5527,
        5528,3,680,340,0,5528,5529,7,80,0,0,5529,5530,3,280,140,0,5530,5532,
        1,0,0,0,5531,5516,1,0,0,0,5531,5522,1,0,0,0,5531,5526,1,0,0,0,5532,
        5535,1,0,0,0,5533,5531,1,0,0,0,5533,5534,1,0,0,0,5534,679,1,0,0,
        0,5535,5533,1,0,0,0,5536,5537,7,81,0,0,5537,681,1,0,0,0,5538,5552,
        3,686,343,0,5539,5541,3,760,380,0,5540,5539,1,0,0,0,5540,5541,1,
        0,0,0,5541,5542,1,0,0,0,5542,5553,3,684,342,0,5543,5544,4,341,138,
        0,5544,5546,5,733,0,0,5545,5547,5,668,0,0,5546,5545,1,0,0,0,5546,
        5547,1,0,0,0,5547,5548,1,0,0,0,5548,5553,3,772,386,0,5549,5550,5,
        521,0,0,5550,5551,5,275,0,0,5551,5553,3,686,343,0,5552,5540,1,0,
        0,0,5552,5543,1,0,0,0,5552,5549,1,0,0,0,5552,5553,1,0,0,0,5553,683,
        1,0,0,0,5554,5560,5,251,0,0,5555,5561,3,280,140,0,5556,5557,5,776,
        0,0,5557,5558,3,756,378,0,5558,5559,5,777,0,0,5559,5561,1,0,0,0,
        5560,5555,1,0,0,0,5560,5556,1,0,0,0,5561,5576,1,0,0,0,5562,5563,
        5,30,0,0,5563,5564,3,686,343,0,5564,5565,5,15,0,0,5565,5566,3,682,
        341,0,5566,5576,1,0,0,0,5567,5568,5,275,0,0,5568,5571,3,688,344,
        0,5569,5570,5,168,0,0,5570,5572,3,688,344,0,5571,5569,1,0,0,0,5571,
        5572,1,0,0,0,5572,5576,1,0,0,0,5573,5574,5,444,0,0,5574,5576,3,686,
        343,0,5575,5554,1,0,0,0,5575,5562,1,0,0,0,5575,5567,1,0,0,0,5575,
        5573,1,0,0,0,5576,685,1,0,0,0,5577,5578,6,343,-1,0,5578,5579,3,688,
        344,0,5579,5606,1,0,0,0,5580,5581,10,7,0,0,5581,5582,5,769,0,0,5582,
        5605,3,686,343,8,5583,5584,10,6,0,0,5584,5585,7,82,0,0,5585,5605,
        3,686,343,7,5586,5587,10,5,0,0,5587,5588,7,83,0,0,5588,5605,3,686,
        343,6,5589,5590,10,3,0,0,5590,5591,7,84,0,0,5591,5605,3,686,343,
        4,5592,5593,10,2,0,0,5593,5594,5,768,0,0,5594,5605,3,686,343,3,5595,
        5596,10,1,0,0,5596,5597,5,771,0,0,5597,5605,3,686,343,2,5598,5599,
        10,4,0,0,5599,5600,7,83,0,0,5600,5601,5,247,0,0,5601,5602,3,676,
        338,0,5602,5603,3,764,382,0,5603,5605,1,0,0,0,5604,5580,1,0,0,0,
        5604,5583,1,0,0,0,5604,5586,1,0,0,0,5604,5589,1,0,0,0,5604,5592,
        1,0,0,0,5604,5595,1,0,0,0,5604,5598,1,0,0,0,5605,5608,1,0,0,0,5606,
        5604,1,0,0,0,5606,5607,1,0,0,0,5607,687,1,0,0,0,5608,5606,1,0,0,
        0,5609,5610,6,344,-1,0,5610,5614,3,740,370,0,5611,5612,3,1190,595,
        0,5612,5613,3,676,338,0,5613,5615,1,0,0,0,5614,5611,1,0,0,0,5614,
        5615,1,0,0,0,5615,5719,1,0,0,0,5616,5618,3,1046,523,0,5617,5619,
        3,692,346,0,5618,5617,1,0,0,0,5618,5619,1,0,0,0,5619,5719,1,0,0,
        0,5620,5719,3,716,358,0,5621,5719,3,734,367,0,5622,5719,3,1148,574,
        0,5623,5719,5,787,0,0,5624,5719,3,694,347,0,5625,5626,4,344,146,
        0,5626,5719,3,696,348,0,5627,5628,4,344,147,0,5628,5719,3,698,349,
        0,5629,5630,7,85,0,0,5630,5719,3,688,344,14,5631,5632,3,762,381,
        0,5632,5633,3,688,344,13,5633,5719,1,0,0,0,5634,5636,5,487,0,0,5635,
        5634,1,0,0,0,5635,5636,1,0,0,0,5636,5637,1,0,0,0,5637,5638,5,776,
        0,0,5638,5639,3,756,378,0,5639,5640,5,777,0,0,5640,5719,1,0,0,0,
        5641,5643,5,174,0,0,5642,5641,1,0,0,0,5642,5643,1,0,0,0,5643,5644,
        1,0,0,0,5644,5719,3,280,140,0,5645,5646,5,778,0,0,5646,5647,3,1128,
        564,0,5647,5648,3,676,338,0,5648,5649,5,779,0,0,5649,5719,1,0,0,
        0,5650,5651,5,320,0,0,5651,5652,3,710,355,0,5652,5653,5,7,0,0,5653,
        5654,5,776,0,0,5654,5656,3,686,343,0,5655,5657,3,714,357,0,5656,
        5655,1,0,0,0,5656,5657,1,0,0,0,5657,5658,1,0,0,0,5658,5659,5,777,
        0,0,5659,5719,1,0,0,0,5660,5661,5,32,0,0,5661,5719,3,688,344,8,5662,
        5663,5,52,0,0,5663,5664,5,776,0,0,5664,5665,3,676,338,0,5665,5666,
        5,17,0,0,5666,5668,3,754,377,0,5667,5669,3,690,345,0,5668,5667,1,
        0,0,0,5668,5669,1,0,0,0,5669,5670,1,0,0,0,5670,5671,5,777,0,0,5671,
        5719,1,0,0,0,5672,5674,5,51,0,0,5673,5675,3,676,338,0,5674,5673,
        1,0,0,0,5674,5675,1,0,0,0,5675,5679,1,0,0,0,5676,5677,3,748,374,
        0,5677,5678,3,750,375,0,5678,5680,1,0,0,0,5679,5676,1,0,0,0,5680,
        5681,1,0,0,0,5681,5679,1,0,0,0,5681,5682,1,0,0,0,5682,5684,1,0,0,
        0,5683,5685,3,752,376,0,5684,5683,1,0,0,0,5684,5685,1,0,0,0,5685,
        5686,1,0,0,0,5686,5687,5,159,0,0,5687,5719,1,0,0,0,5688,5689,5,94,
        0,0,5689,5690,5,776,0,0,5690,5691,3,676,338,0,5691,5692,5,773,0,
        0,5692,5693,3,754,377,0,5693,5694,5,777,0,0,5694,5719,1,0,0,0,5695,
        5696,5,94,0,0,5696,5697,5,776,0,0,5697,5698,3,676,338,0,5698,5699,
        5,621,0,0,5699,5700,3,936,468,0,5700,5701,5,777,0,0,5701,5719,1,
        0,0,0,5702,5703,5,128,0,0,5703,5704,5,776,0,0,5704,5705,3,1136,568,
        0,5705,5706,5,777,0,0,5706,5719,1,0,0,0,5707,5708,5,626,0,0,5708,
        5709,5,776,0,0,5709,5710,3,1136,568,0,5710,5711,5,777,0,0,5711,5719,
        1,0,0,0,5712,5713,5,247,0,0,5713,5714,3,676,338,0,5714,5715,3,764,
        382,0,5715,5716,5,758,0,0,5716,5717,3,676,338,0,5717,5719,1,0,0,
        0,5718,5609,1,0,0,0,5718,5616,1,0,0,0,5718,5620,1,0,0,0,5718,5621,
        1,0,0,0,5718,5622,1,0,0,0,5718,5623,1,0,0,0,5718,5624,1,0,0,0,5718,
        5625,1,0,0,0,5718,5627,1,0,0,0,5718,5629,1,0,0,0,5718,5631,1,0,0,
        0,5718,5635,1,0,0,0,5718,5642,1,0,0,0,5718,5645,1,0,0,0,5718,5650,
        1,0,0,0,5718,5660,1,0,0,0,5718,5662,1,0,0,0,5718,5672,1,0,0,0,5718,
        5688,1,0,0,0,5718,5695,1,0,0,0,5718,5702,1,0,0,0,5718,5707,1,0,0,
        0,5718,5712,1,0,0,0,5719,5728,1,0,0,0,5720,5721,10,15,0,0,5721,5722,
        5,746,0,0,5722,5727,3,688,344,16,5723,5724,10,21,0,0,5724,5725,5,
        69,0,0,5725,5727,3,1180,590,0,5726,5720,1,0,0,0,5726,5723,1,0,0,
        0,5727,5730,1,0,0,0,5728,5726,1,0,0,0,5728,5729,1,0,0,0,5729,689,
        1,0,0,0,5730,5728,1,0,0,0,5731,5732,4,345,150,0,5732,5733,5,731,
        0,0,5733,691,1,0,0,0,5734,5735,4,346,151,0,5735,5736,5,781,0,0,5736,
        5741,3,1154,577,0,5737,5738,4,346,152,0,5738,5739,5,782,0,0,5739,
        5741,3,1154,577,0,5740,5734,1,0,0,0,5740,5737,1,0,0,0,5741,693,1,
        0,0,0,5742,5743,5,26,0,0,5743,5745,5,776,0,0,5744,5746,5,143,0,0,
        5745,5744,1,0,0,0,5745,5746,1,0,0,0,5746,5747,1,0,0,0,5747,5748,
        3,708,354,0,5748,5751,5,777,0,0,5749,5750,4,347,153,0,5750,5752,
        3,700,350,0,5751,5749,1,0,0,0,5751,5752,1,0,0,0,5752,5874,1,0,0,
        0,5753,5754,7,86,0,0,5754,5755,5,776,0,0,5755,5756,3,708,354,0,5756,
        5759,5,777,0,0,5757,5758,4,347,154,0,5758,5760,3,700,350,0,5759,
        5757,1,0,0,0,5759,5760,1,0,0,0,5760,5874,1,0,0,0,5761,5762,4,347,
        155,0,5762,5874,3,706,353,0,5763,5764,5,95,0,0,5764,5766,5,776,0,
        0,5765,5767,5,10,0,0,5766,5765,1,0,0,0,5766,5767,1,0,0,0,5767,5768,
        1,0,0,0,5768,5769,5,760,0,0,5769,5772,5,777,0,0,5770,5771,4,347,
        156,0,5771,5773,3,700,350,0,5772,5770,1,0,0,0,5772,5773,1,0,0,0,
        5773,5874,1,0,0,0,5774,5775,5,95,0,0,5775,5783,5,776,0,0,5776,5778,
        5,10,0,0,5777,5776,1,0,0,0,5777,5778,1,0,0,0,5778,5779,1,0,0,0,5779,
        5784,5,760,0,0,5780,5784,3,708,354,0,5781,5782,5,143,0,0,5782,5784,
        3,756,378,0,5783,5777,1,0,0,0,5783,5780,1,0,0,0,5783,5781,1,0,0,
        0,5784,5785,1,0,0,0,5785,5788,5,777,0,0,5786,5787,4,347,157,0,5787,
        5789,3,700,350,0,5788,5786,1,0,0,0,5788,5789,1,0,0,0,5789,5874,1,
        0,0,0,5790,5791,5,345,0,0,5791,5793,5,776,0,0,5792,5794,5,143,0,
        0,5793,5792,1,0,0,0,5793,5794,1,0,0,0,5794,5795,1,0,0,0,5795,5796,
        3,708,354,0,5796,5799,5,777,0,0,5797,5798,4,347,158,0,5798,5800,
        3,700,350,0,5799,5797,1,0,0,0,5799,5800,1,0,0,0,5800,5874,1,0,0,
        0,5801,5802,5,326,0,0,5802,5804,5,776,0,0,5803,5805,5,143,0,0,5804,
        5803,1,0,0,0,5804,5805,1,0,0,0,5805,5806,1,0,0,0,5806,5807,3,708,
        354,0,5807,5810,5,777,0,0,5808,5809,4,347,159,0,5809,5811,3,700,
        350,0,5810,5808,1,0,0,0,5810,5811,1,0,0,0,5811,5874,1,0,0,0,5812,
        5813,5,551,0,0,5813,5814,5,776,0,0,5814,5815,3,708,354,0,5815,5818,
        5,777,0,0,5816,5817,4,347,160,0,5817,5819,3,700,350,0,5818,5816,
        1,0,0,0,5818,5819,1,0,0,0,5819,5874,1,0,0,0,5820,5821,5,632,0,0,
        5821,5822,5,776,0,0,5822,5823,3,708,354,0,5823,5826,5,777,0,0,5824,
        5825,4,347,161,0,5825,5827,3,700,350,0,5826,5824,1,0,0,0,5826,5827,
        1,0,0,0,5827,5874,1,0,0,0,5828,5829,5,548,0,0,5829,5830,5,776,0,
        0,5830,5831,3,708,354,0,5831,5834,5,777,0,0,5832,5833,4,347,162,
        0,5833,5835,3,700,350,0,5834,5832,1,0,0,0,5834,5835,1,0,0,0,5835,
        5874,1,0,0,0,5836,5837,5,635,0,0,5837,5838,5,776,0,0,5838,5839,3,
        708,354,0,5839,5842,5,777,0,0,5840,5841,4,347,163,0,5841,5843,3,
        700,350,0,5842,5840,1,0,0,0,5842,5843,1,0,0,0,5843,5874,1,0,0,0,
        5844,5845,5,564,0,0,5845,5847,5,776,0,0,5846,5848,5,143,0,0,5847,
        5846,1,0,0,0,5847,5848,1,0,0,0,5848,5849,1,0,0,0,5849,5850,3,708,
        354,0,5850,5853,5,777,0,0,5851,5852,4,347,164,0,5852,5854,3,700,
        350,0,5853,5851,1,0,0,0,5853,5854,1,0,0,0,5854,5874,1,0,0,0,5855,
        5856,5,218,0,0,5856,5858,5,776,0,0,5857,5859,5,143,0,0,5858,5857,
        1,0,0,0,5858,5859,1,0,0,0,5859,5860,1,0,0,0,5860,5862,3,756,378,
        0,5861,5863,3,328,164,0,5862,5861,1,0,0,0,5862,5863,1,0,0,0,5863,
        5866,1,0,0,0,5864,5865,5,499,0,0,5865,5867,3,1156,578,0,5866,5864,
        1,0,0,0,5866,5867,1,0,0,0,5867,5868,1,0,0,0,5868,5871,5,777,0,0,
        5869,5870,4,347,165,0,5870,5872,3,700,350,0,5871,5869,1,0,0,0,5871,
        5872,1,0,0,0,5872,5874,1,0,0,0,5873,5742,1,0,0,0,5873,5753,1,0,0,
        0,5873,5761,1,0,0,0,5873,5763,1,0,0,0,5873,5774,1,0,0,0,5873,5790,
        1,0,0,0,5873,5801,1,0,0,0,5873,5812,1,0,0,0,5873,5820,1,0,0,0,5873,
        5828,1,0,0,0,5873,5836,1,0,0,0,5873,5844,1,0,0,0,5873,5855,1,0,0,
        0,5874,695,1,0,0,0,5875,5876,5,672,0,0,5876,5877,5,776,0,0,5877,
        5878,3,756,378,0,5878,5879,5,777,0,0,5879,697,1,0,0,0,5880,5881,
        7,87,0,0,5881,5882,3,1188,594,0,5882,5883,3,700,350,0,5883,5923,
        1,0,0,0,5884,5885,5,688,0,0,5885,5886,3,772,386,0,5886,5887,3,700,
        350,0,5887,5923,1,0,0,0,5888,5889,7,88,0,0,5889,5890,5,776,0,0,5890,
        5892,3,676,338,0,5891,5893,3,702,351,0,5892,5891,1,0,0,0,5892,5893,
        1,0,0,0,5893,5894,1,0,0,0,5894,5896,5,777,0,0,5895,5897,3,704,352,
        0,5896,5895,1,0,0,0,5896,5897,1,0,0,0,5897,5898,1,0,0,0,5898,5899,
        3,700,350,0,5899,5923,1,0,0,0,5900,5901,7,89,0,0,5901,5903,3,770,
        385,0,5902,5904,3,704,352,0,5903,5902,1,0,0,0,5903,5904,1,0,0,0,
        5904,5905,1,0,0,0,5905,5906,3,700,350,0,5906,5923,1,0,0,0,5907,5908,
        5,687,0,0,5908,5909,5,776,0,0,5909,5910,3,676,338,0,5910,5911,5,
        773,0,0,5911,5912,3,688,344,0,5912,5915,5,777,0,0,5913,5914,5,203,
        0,0,5914,5916,7,90,0,0,5915,5913,1,0,0,0,5915,5916,1,0,0,0,5916,
        5918,1,0,0,0,5917,5919,3,704,352,0,5918,5917,1,0,0,0,5918,5919,1,
        0,0,0,5919,5920,1,0,0,0,5920,5921,3,700,350,0,5921,5923,1,0,0,0,
        5922,5880,1,0,0,0,5922,5884,1,0,0,0,5922,5888,1,0,0,0,5922,5900,
        1,0,0,0,5922,5907,1,0,0,0,5923,699,1,0,0,0,5924,5927,5,691,0,0,5925,
        5928,3,1124,562,0,5926,5928,3,302,151,0,5927,5925,1,0,0,0,5927,5926,
        1,0,0,0,5928,701,1,0,0,0,5929,5932,5,773,0,0,5930,5933,3,1144,572,
        0,5931,5933,5,787,0,0,5932,5930,1,0,0,0,5932,5931,1,0,0,0,5933,5936,
        1,0,0,0,5934,5935,5,773,0,0,5935,5937,3,676,338,0,5936,5934,1,0,
        0,0,5936,5937,1,0,0,0,5937,703,1,0,0,0,5938,5939,7,91,0,0,5939,5940,
        5,689,0,0,5940,705,1,0,0,0,5941,5942,5,667,0,0,5942,5943,5,776,0,
        0,5943,5944,3,708,354,0,5944,5946,5,777,0,0,5945,5947,3,700,350,
        0,5946,5945,1,0,0,0,5946,5947,1,0,0,0,5947,5958,1,0,0,0,5948,5949,
        5,666,0,0,5949,5950,5,776,0,0,5950,5951,3,708,354,0,5951,5952,5,
        773,0,0,5952,5953,3,708,354,0,5953,5955,5,777,0,0,5954,5956,3,700,
        350,0,5955,5954,1,0,0,0,5955,5956,1,0,0,0,5956,5958,1,0,0,0,5957,
        5941,1,0,0,0,5957,5948,1,0,0,0,5958,707,1,0,0,0,5959,5961,5,10,0,
        0,5960,5959,1,0,0,0,5960,5961,1,0,0,0,5961,5962,1,0,0,0,5962,5963,
        3,676,338,0,5963,709,1,0,0,0,5964,5970,3,712,356,0,5965,5966,5,776,
        0,0,5966,5967,3,712,356,0,5967,5968,5,777,0,0,5968,5970,1,0,0,0,
        5969,5964,1,0,0,0,5969,5965,1,0,0,0,5970,711,1,0,0,0,5971,5976,3,
        1136,568,0,5972,5973,5,773,0,0,5973,5975,3,1136,568,0,5974,5972,
        1,0,0,0,5975,5978,1,0,0,0,5976,5974,1,0,0,0,5976,5977,1,0,0,0,5977,
        713,1,0,0,0,5978,5976,1,0,0,0,5979,5980,5,251,0,0,5980,5981,5,41,
        0,0,5981,5995,5,346,0,0,5982,5983,5,251,0,0,5983,5984,5,359,0,0,
        5984,5985,5,267,0,0,5985,5989,5,346,0,0,5986,5987,5,645,0,0,5987,
        5988,5,430,0,0,5988,5990,5,176,0,0,5989,5986,1,0,0,0,5989,5990,1,
        0,0,0,5990,5995,1,0,0,0,5991,5992,5,645,0,0,5992,5993,5,430,0,0,
        5993,5995,5,176,0,0,5994,5979,1,0,0,0,5994,5982,1,0,0,0,5994,5991,
        1,0,0,0,5995,715,1,0,0,0,5996,5997,5,60,0,0,5997,5998,5,776,0,0,
        5998,6001,3,756,378,0,5999,6000,5,621,0,0,6000,6002,3,936,468,0,
        6001,5999,1,0,0,0,6001,6002,1,0,0,0,6002,6003,1,0,0,0,6003,6004,
        5,777,0,0,6004,6270,1,0,0,0,6005,6007,5,105,0,0,6006,6008,3,1188,
        594,0,6007,6006,1,0,0,0,6007,6008,1,0,0,0,6008,6270,1,0,0,0,6009,
        6010,5,116,0,0,6010,6270,3,770,385,0,6011,6012,5,122,0,0,6012,6270,
        3,770,385,0,6013,6014,5,229,0,0,6014,6270,3,770,385,0,6015,6016,
        5,242,0,0,6016,6017,5,776,0,0,6017,6018,3,676,338,0,6018,6019,5,
        773,0,0,6019,6020,3,676,338,0,6020,6021,5,773,0,0,6021,6022,3,676,
        338,0,6022,6023,5,773,0,0,6023,6024,3,676,338,0,6024,6025,5,777,
        0,0,6025,6270,1,0,0,0,6026,6027,5,247,0,0,6027,6028,5,776,0,0,6028,
        6031,3,676,338,0,6029,6030,5,773,0,0,6030,6032,3,676,338,0,6031,
        6029,1,0,0,0,6032,6033,1,0,0,0,6033,6031,1,0,0,0,6033,6034,1,0,0,
        0,6034,6035,1,0,0,0,6035,6036,5,777,0,0,6036,6270,1,0,0,0,6037,6038,
        5,272,0,0,6038,6039,5,776,0,0,6039,6040,3,676,338,0,6040,6041,5,
        773,0,0,6041,6042,3,676,338,0,6042,6043,5,777,0,0,6043,6270,1,0,
        0,0,6044,6045,5,343,0,0,6045,6270,3,770,385,0,6046,6047,5,350,0,
        0,6047,6270,3,770,385,0,6048,6049,5,478,0,0,6049,6050,5,776,0,0,
        6050,6051,3,676,338,0,6051,6052,5,773,0,0,6052,6053,3,676,338,0,
        6053,6054,5,777,0,0,6054,6270,1,0,0,0,6055,6056,5,495,0,0,6056,6270,
        3,770,385,0,6057,6058,5,586,0,0,6058,6270,3,770,385,0,6059,6060,
        5,583,0,0,6060,6061,5,776,0,0,6061,6064,3,676,338,0,6062,6063,5,
        773,0,0,6063,6065,3,676,338,0,6064,6062,1,0,0,0,6064,6065,1,0,0,
        0,6065,6066,1,0,0,0,6066,6067,5,777,0,0,6067,6270,1,0,0,0,6068,6270,
        3,730,365,0,6069,6070,5,618,0,0,6070,6270,3,1188,594,0,6071,6072,
        5,626,0,0,6072,6270,3,770,385,0,6073,6074,5,656,0,0,6074,6270,3,
        770,385,0,6075,6076,7,92,0,0,6076,6077,5,776,0,0,6077,6078,3,676,
        338,0,6078,6084,5,773,0,0,6079,6085,3,676,338,0,6080,6081,5,247,
        0,0,6081,6082,3,676,338,0,6082,6083,3,764,382,0,6083,6085,1,0,0,
        0,6084,6079,1,0,0,0,6084,6080,1,0,0,0,6085,6086,1,0,0,0,6086,6087,
        5,777,0,0,6087,6270,1,0,0,0,6088,6090,5,100,0,0,6089,6091,3,1188,
        594,0,6090,6089,1,0,0,0,6090,6091,1,0,0,0,6091,6270,1,0,0,0,6092,
        6094,5,108,0,0,6093,6095,3,720,360,0,6094,6093,1,0,0,0,6094,6095,
        1,0,0,0,6095,6270,1,0,0,0,6096,6097,7,93,0,0,6097,6098,5,776,0,0,
        6098,6099,3,676,338,0,6099,6100,5,773,0,0,6100,6101,5,247,0,0,6101,
        6102,3,676,338,0,6102,6103,3,764,382,0,6103,6104,5,777,0,0,6104,
        6270,1,0,0,0,6105,6106,5,182,0,0,6106,6107,5,776,0,0,6107,6108,3,
        764,382,0,6108,6109,5,203,0,0,6109,6110,3,676,338,0,6110,6111,5,
        777,0,0,6111,6270,1,0,0,0,6112,6113,5,213,0,0,6113,6114,5,776,0,
        0,6114,6115,3,728,364,0,6115,6116,5,773,0,0,6116,6117,3,676,338,
        0,6117,6118,5,777,0,0,6118,6270,1,0,0,0,6119,6121,5,372,0,0,6120,
        6122,3,720,360,0,6121,6120,1,0,0,0,6121,6122,1,0,0,0,6122,6270,1,
        0,0,0,6123,6124,5,414,0,0,6124,6125,5,776,0,0,6125,6126,3,686,343,
        0,6126,6127,5,251,0,0,6127,6128,3,676,338,0,6128,6129,5,777,0,0,
        6129,6270,1,0,0,0,6130,6270,3,732,366,0,6131,6133,5,569,0,0,6132,
        6134,3,720,360,0,6133,6132,1,0,0,0,6133,6134,1,0,0,0,6134,6270,1,
        0,0,0,6135,6136,7,94,0,0,6136,6137,5,776,0,0,6137,6138,3,766,383,
        0,6138,6139,5,773,0,0,6139,6140,3,676,338,0,6140,6141,5,773,0,0,
        6141,6142,3,676,338,0,6142,6143,5,777,0,0,6143,6270,1,0,0,0,6144,
        6146,5,622,0,0,6145,6147,3,1188,594,0,6146,6145,1,0,0,0,6146,6147,
        1,0,0,0,6147,6270,1,0,0,0,6148,6150,5,624,0,0,6149,6151,3,720,360,
        0,6150,6149,1,0,0,0,6150,6151,1,0,0,0,6151,6270,1,0,0,0,6152,6154,
        5,623,0,0,6153,6155,3,720,360,0,6154,6153,1,0,0,0,6154,6155,1,0,
        0,0,6155,6270,1,0,0,0,6156,6157,5,19,0,0,6157,6270,3,770,385,0,6158,
        6159,5,58,0,0,6159,6270,3,770,385,0,6160,6161,5,67,0,0,6161,6270,
        3,768,384,0,6162,6163,5,70,0,0,6163,6270,3,770,385,0,6164,6165,5,
        109,0,0,6165,6270,3,1188,594,0,6166,6167,5,231,0,0,6167,6168,5,776,
        0,0,6168,6169,3,676,338,0,6169,6170,5,773,0,0,6170,6171,3,676,338,
        0,6171,6172,5,773,0,0,6172,6173,3,676,338,0,6173,6174,5,777,0,0,
        6174,6270,1,0,0,0,6175,6176,5,201,0,0,6176,6177,5,776,0,0,6177,6178,
        3,676,338,0,6178,6179,5,773,0,0,6179,6182,3,676,338,0,6180,6181,
        5,773,0,0,6181,6183,3,676,338,0,6182,6180,1,0,0,0,6182,6183,1,0,
        0,0,6183,6184,1,0,0,0,6184,6185,5,777,0,0,6185,6270,1,0,0,0,6186,
        6187,5,337,0,0,6187,6270,3,770,385,0,6188,6189,5,349,0,0,6189,6190,
        5,776,0,0,6190,6191,3,676,338,0,6191,6192,5,773,0,0,6192,6193,3,
        676,338,0,6193,6194,5,777,0,0,6194,6270,1,0,0,0,6195,6196,4,358,
        166,0,6196,6197,5,382,0,0,6197,6198,5,776,0,0,6198,6199,3,1160,580,
        0,6199,6200,5,777,0,0,6200,6270,1,0,0,0,6201,6202,4,358,167,0,6202,
        6203,5,406,0,0,6203,6270,3,770,385,0,6204,6205,5,429,0,0,6205,6270,
        3,770,385,0,6206,6207,5,457,0,0,6207,6208,5,776,0,0,6208,6209,3,
        676,338,0,6209,6210,5,773,0,0,6210,6211,3,676,338,0,6211,6212,5,
        777,0,0,6212,6270,1,0,0,0,6213,6214,5,458,0,0,6214,6215,5,776,0,
        0,6215,6216,3,676,338,0,6216,6217,5,773,0,0,6217,6218,3,676,338,
        0,6218,6219,5,773,0,0,6219,6220,3,676,338,0,6220,6221,5,777,0,0,
        6221,6270,1,0,0,0,6222,6223,5,476,0,0,6223,6270,3,770,385,0,6224,
        6225,5,485,0,0,6225,6270,3,1188,594,0,6226,6227,5,597,0,0,6227,6228,
        5,776,0,0,6228,6229,3,676,338,0,6229,6230,5,773,0,0,6230,6231,3,
        676,338,0,6231,6232,5,777,0,0,6232,6270,1,0,0,0,6233,6234,5,640,
        0,0,6234,6235,5,776,0,0,6235,6238,3,676,338,0,6236,6237,5,773,0,
        0,6237,6239,3,676,338,0,6238,6236,1,0,0,0,6238,6239,1,0,0,0,6239,
        6240,1,0,0,0,6240,6241,5,777,0,0,6241,6270,1,0,0,0,6242,6243,5,641,
        0,0,6243,6244,5,776,0,0,6244,6264,3,676,338,0,6245,6246,5,17,0,0,
        6246,6247,5,60,0,0,6247,6249,3,932,466,0,6248,6245,1,0,0,0,6248,
        6249,1,0,0,0,6249,6252,1,0,0,0,6250,6251,4,358,168,0,6251,6253,3,
        724,362,0,6252,6250,1,0,0,0,6252,6253,1,0,0,0,6253,6265,1,0,0,0,
        6254,6255,5,17,0,0,6255,6256,5,32,0,0,6256,6265,3,932,466,0,6257,
        6258,5,773,0,0,6258,6259,3,1140,570,0,6259,6260,5,773,0,0,6260,6261,
        3,1140,570,0,6261,6262,5,773,0,0,6262,6263,3,1140,570,0,6263,6265,
        1,0,0,0,6264,6248,1,0,0,0,6264,6254,1,0,0,0,6264,6257,1,0,0,0,6265,
        6266,1,0,0,0,6266,6267,5,777,0,0,6267,6270,1,0,0,0,6268,6270,3,718,
        359,0,6269,5996,1,0,0,0,6269,6005,1,0,0,0,6269,6009,1,0,0,0,6269,
        6011,1,0,0,0,6269,6013,1,0,0,0,6269,6015,1,0,0,0,6269,6026,1,0,0,
        0,6269,6037,1,0,0,0,6269,6044,1,0,0,0,6269,6046,1,0,0,0,6269,6048,
        1,0,0,0,6269,6055,1,0,0,0,6269,6057,1,0,0,0,6269,6059,1,0,0,0,6269,
        6068,1,0,0,0,6269,6069,1,0,0,0,6269,6071,1,0,0,0,6269,6073,1,0,0,
        0,6269,6075,1,0,0,0,6269,6088,1,0,0,0,6269,6092,1,0,0,0,6269,6096,
        1,0,0,0,6269,6105,1,0,0,0,6269,6112,1,0,0,0,6269,6119,1,0,0,0,6269,
        6123,1,0,0,0,6269,6130,1,0,0,0,6269,6131,1,0,0,0,6269,6135,1,0,0,
        0,6269,6144,1,0,0,0,6269,6148,1,0,0,0,6269,6152,1,0,0,0,6269,6156,
        1,0,0,0,6269,6158,1,0,0,0,6269,6160,1,0,0,0,6269,6162,1,0,0,0,6269,
        6164,1,0,0,0,6269,6166,1,0,0,0,6269,6175,1,0,0,0,6269,6186,1,0,0,
        0,6269,6188,1,0,0,0,6269,6195,1,0,0,0,6269,6201,1,0,0,0,6269,6204,
        1,0,0,0,6269,6206,1,0,0,0,6269,6213,1,0,0,0,6269,6222,1,0,0,0,6269,
        6224,1,0,0,0,6269,6226,1,0,0,0,6269,6233,1,0,0,0,6269,6242,1,0,0,
        0,6269,6268,1,0,0,0,6270,717,1,0,0,0,6271,6272,4,359,169,0,6272,
        6273,5,90,0,0,6273,6274,5,776,0,0,6274,6275,3,676,338,0,6275,6276,
        5,773,0,0,6276,6277,3,676,338,0,6277,6278,5,777,0,0,6278,6303,1,
        0,0,0,6279,6280,5,211,0,0,6280,6282,5,776,0,0,6281,6283,3,756,378,
        0,6282,6281,1,0,0,0,6282,6283,1,0,0,0,6283,6284,1,0,0,0,6284,6303,
        5,777,0,0,6285,6286,5,279,0,0,6286,6303,3,768,384,0,6287,6288,5,
        351,0,0,6288,6303,3,768,384,0,6289,6290,5,352,0,0,6290,6303,3,768,
        384,0,6291,6292,5,353,0,0,6292,6303,3,768,384,0,6293,6294,5,411,
        0,0,6294,6295,5,776,0,0,6295,6296,3,676,338,0,6296,6297,5,773,0,
        0,6297,6298,3,676,338,0,6298,6299,5,777,0,0,6299,6303,1,0,0,0,6300,
        6301,5,412,0,0,6301,6303,3,768,384,0,6302,6271,1,0,0,0,6302,6279,
        1,0,0,0,6302,6285,1,0,0,0,6302,6287,1,0,0,0,6302,6289,1,0,0,0,6302,
        6291,1,0,0,0,6302,6293,1,0,0,0,6302,6300,1,0,0,0,6303,719,1,0,0,
        0,6304,6306,5,776,0,0,6305,6307,3,722,361,0,6306,6305,1,0,0,0,6306,
        6307,1,0,0,0,6307,6308,1,0,0,0,6308,6309,5,777,0,0,6309,721,1,0,
        0,0,6310,6311,4,361,170,0,6311,6312,5,747,0,0,6312,723,1,0,0,0,6313,
        6326,5,274,0,0,6314,6315,3,1142,571,0,6315,6316,5,759,0,0,6316,6317,
        3,1142,571,0,6317,6327,1,0,0,0,6318,6323,3,726,363,0,6319,6320,5,
        773,0,0,6320,6322,3,726,363,0,6321,6319,1,0,0,0,6322,6325,1,0,0,
        0,6323,6321,1,0,0,0,6323,6324,1,0,0,0,6324,6327,1,0,0,0,6325,6323,
        1,0,0,0,6326,6314,1,0,0,0,6326,6318,1,0,0,0,6327,725,1,0,0,0,6328,
        6334,3,1142,571,0,6329,6331,7,33,0,0,6330,6332,5,476,0,0,6331,6330,
        1,0,0,0,6331,6332,1,0,0,0,6332,6335,1,0,0,0,6333,6335,5,476,0,0,
        6334,6329,1,0,0,0,6334,6333,1,0,0,0,6334,6335,1,0,0,0,6335,727,1,
        0,0,0,6336,6337,7,95,0,0,6337,729,1,0,0,0,6338,6339,5,595,0,0,6339,
        6363,5,776,0,0,6340,6343,3,676,338,0,6341,6342,5,203,0,0,6342,6344,
        3,676,338,0,6343,6341,1,0,0,0,6343,6344,1,0,0,0,6344,6364,1,0,0,
        0,6345,6347,5,269,0,0,6346,6348,3,676,338,0,6347,6346,1,0,0,0,6347,
        6348,1,0,0,0,6348,6349,1,0,0,0,6349,6350,5,203,0,0,6350,6364,3,676,
        338,0,6351,6353,5,591,0,0,6352,6354,3,676,338,0,6353,6352,1,0,0,
        0,6353,6354,1,0,0,0,6354,6355,1,0,0,0,6355,6356,5,203,0,0,6356,6364,
        3,676,338,0,6357,6359,5,43,0,0,6358,6360,3,676,338,0,6359,6358,1,
        0,0,0,6359,6360,1,0,0,0,6360,6361,1,0,0,0,6361,6362,5,203,0,0,6362,
        6364,3,676,338,0,6363,6340,1,0,0,0,6363,6345,1,0,0,0,6363,6351,1,
        0,0,0,6363,6357,1,0,0,0,6364,6365,1,0,0,0,6365,6366,5,777,0,0,6366,
        731,1,0,0,0,6367,6368,5,563,0,0,6368,6369,5,776,0,0,6369,6382,3,
        676,338,0,6370,6371,5,773,0,0,6371,6374,3,676,338,0,6372,6373,5,
        773,0,0,6373,6375,3,676,338,0,6374,6372,1,0,0,0,6374,6375,1,0,0,
        0,6375,6383,1,0,0,0,6376,6377,5,203,0,0,6377,6380,3,676,338,0,6378,
        6379,5,200,0,0,6379,6381,3,676,338,0,6380,6378,1,0,0,0,6380,6381,
        1,0,0,0,6381,6383,1,0,0,0,6382,6370,1,0,0,0,6382,6376,1,0,0,0,6383,
        6384,1,0,0,0,6384,6385,5,777,0,0,6385,733,1,0,0,0,6386,6387,3,1126,
        563,0,6387,6389,5,776,0,0,6388,6390,3,736,368,0,6389,6388,1,0,0,
        0,6389,6390,1,0,0,0,6390,6391,1,0,0,0,6391,6392,5,777,0,0,6392,6401,
        1,0,0,0,6393,6394,3,1134,567,0,6394,6396,5,776,0,0,6395,6397,3,756,
        378,0,6396,6395,1,0,0,0,6396,6397,1,0,0,0,6397,6398,1,0,0,0,6398,
        6399,5,777,0,0,6399,6401,1,0,0,0,6400,6386,1,0,0,0,6400,6393,1,0,
        0,0,6401,735,1,0,0,0,6402,6407,3,738,369,0,6403,6404,5,773,0,0,6404,
        6406,3,738,369,0,6405,6403,1,0,0,0,6406,6409,1,0,0,0,6407,6405,1,
        0,0,0,6407,6408,1,0,0,0,6408,737,1,0,0,0,6409,6407,1,0,0,0,6410,
        6412,3,676,338,0,6411,6413,3,356,178,0,6412,6411,1,0,0,0,6412,6413,
        1,0,0,0,6413,739,1,0,0,0,6414,6417,3,742,371,0,6415,6417,3,744,372,
        0,6416,6414,1,0,0,0,6416,6415,1,0,0,0,6417,741,1,0,0,0,6418,6419,
        5,783,0,0,6419,6422,3,1180,590,0,6420,6422,5,784,0,0,6421,6418,1,
        0,0,0,6421,6420,1,0,0,0,6422,743,1,0,0,0,6423,6425,5,785,0,0,6424,
        6426,3,1194,597,0,6425,6424,1,0,0,0,6425,6426,1,0,0,0,6426,6427,
        1,0,0,0,6427,6429,3,1180,590,0,6428,6430,3,1138,569,0,6429,6428,
        1,0,0,0,6429,6430,1,0,0,0,6430,745,1,0,0,0,6431,6432,4,373,171,0,
        6432,6434,3,1128,564,0,6433,6435,3,1138,569,0,6434,6433,1,0,0,0,
        6434,6435,1,0,0,0,6435,6442,1,0,0,0,6436,6437,4,373,172,0,6437,6439,
        3,1182,591,0,6438,6440,3,1138,569,0,6439,6438,1,0,0,0,6439,6440,
        1,0,0,0,6440,6442,1,0,0,0,6441,6431,1,0,0,0,6441,6436,1,0,0,0,6442,
        6446,1,0,0,0,6443,6444,5,128,0,0,6444,6446,3,1138,569,0,6445,6441,
        1,0,0,0,6445,6443,1,0,0,0,6446,747,1,0,0,0,6447,6448,5,642,0,0,6448,
        6449,3,676,338,0,6449,749,1,0,0,0,6450,6451,5,582,0,0,6451,6452,
        3,676,338,0,6452,751,1,0,0,0,6453,6454,5,154,0,0,6454,6455,3,676,
        338,0,6455,753,1,0,0,0,6456,6458,5,32,0,0,6457,6459,3,922,461,0,
        6458,6457,1,0,0,0,6458,6459,1,0,0,0,6459,6502,1,0,0,0,6460,6462,
        5,60,0,0,6461,6463,3,922,461,0,6462,6461,1,0,0,0,6462,6463,1,0,0,
        0,6463,6465,1,0,0,0,6464,6466,3,926,463,0,6465,6464,1,0,0,0,6465,
        6466,1,0,0,0,6466,6502,1,0,0,0,6467,6469,3,918,459,0,6468,6470,3,
        922,461,0,6469,6468,1,0,0,0,6469,6470,1,0,0,0,6470,6502,1,0,0,0,
        6471,6473,5,512,0,0,6472,6474,5,249,0,0,6473,6472,1,0,0,0,6473,6474,
        1,0,0,0,6474,6502,1,0,0,0,6475,6477,5,612,0,0,6476,6478,5,249,0,
        0,6477,6476,1,0,0,0,6477,6478,1,0,0,0,6478,6502,1,0,0,0,6479,6502,
        5,116,0,0,6480,6482,5,586,0,0,6481,6483,3,934,467,0,6482,6481,1,
        0,0,0,6482,6483,1,0,0,0,6483,6502,1,0,0,0,6484,6486,5,113,0,0,6485,
        6487,3,934,467,0,6486,6485,1,0,0,0,6486,6487,1,0,0,0,6487,6502,1,
        0,0,0,6488,6490,5,126,0,0,6489,6491,3,1174,587,0,6490,6489,1,0,0,
        0,6490,6491,1,0,0,0,6491,6502,1,0,0,0,6492,6493,4,377,173,0,6493,
        6502,5,262,0,0,6494,6495,4,377,174,0,6495,6502,3,920,460,0,6496,
        6497,4,377,175,0,6497,6499,5,195,0,0,6498,6500,3,1176,588,0,6499,
        6498,1,0,0,0,6499,6500,1,0,0,0,6500,6502,1,0,0,0,6501,6456,1,0,0,
        0,6501,6460,1,0,0,0,6501,6467,1,0,0,0,6501,6471,1,0,0,0,6501,6475,
        1,0,0,0,6501,6479,1,0,0,0,6501,6480,1,0,0,0,6501,6484,1,0,0,0,6501,
        6488,1,0,0,0,6501,6492,1,0,0,0,6501,6494,1,0,0,0,6501,6496,1,0,0,
        0,6502,755,1,0,0,0,6503,6508,3,676,338,0,6504,6505,5,773,0,0,6505,
        6507,3,676,338,0,6506,6504,1,0,0,0,6507,6510,1,0,0,0,6508,6506,1,
        0,0,0,6508,6509,1,0,0,0,6509,757,1,0,0,0,6510,6508,1,0,0,0,6511,
        6512,5,60,0,0,6512,6515,5,506,0,0,6513,6515,5,58,0,0,6514,6511,1,
        0,0,0,6514,6513,1,0,0,0,6515,759,1,0,0,0,6516,6517,7,96,0,0,6517,
        761,1,0,0,0,6518,6519,7,97,0,0,6519,763,1,0,0,0,6520,6523,3,766,
        383,0,6521,6523,7,98,0,0,6522,6520,1,0,0,0,6522,6521,1,0,0,0,6523,
        765,1,0,0,0,6524,6525,7,99,0,0,6525,767,1,0,0,0,6526,6527,5,776,
        0,0,6527,6528,3,756,378,0,6528,6529,5,777,0,0,6529,769,1,0,0,0,6530,
        6531,5,776,0,0,6531,6532,3,676,338,0,6532,6533,5,777,0,0,6533,771,
        1,0,0,0,6534,6535,5,776,0,0,6535,6536,3,688,344,0,6536,6537,5,777,
        0,0,6537,773,1,0,0,0,6538,6543,3,776,388,0,6539,6540,5,773,0,0,6540,
        6542,3,776,388,0,6541,6539,1,0,0,0,6542,6545,1,0,0,0,6543,6541,1,
        0,0,0,6543,6544,1,0,0,0,6544,775,1,0,0,0,6545,6543,1,0,0,0,6546,
        6548,3,676,338,0,6547,6549,3,330,165,0,6548,6547,1,0,0,0,6548,6549,
        1,0,0,0,6549,777,1,0,0,0,6550,6555,3,780,390,0,6551,6552,5,773,0,
        0,6552,6554,3,780,390,0,6553,6551,1,0,0,0,6554,6557,1,0,0,0,6555,
        6553,1,0,0,0,6555,6556,1,0,0,0,6556,779,1,0,0,0,6557,6555,1,0,0,
        0,6558,6559,3,676,338,0,6559,781,1,0,0,0,6560,6561,4,391,176,0,6561,
        6562,5,200,0,0,6562,6563,5,57,0,0,6563,6564,3,1162,581,0,6564,783,
        1,0,0,0,6565,6579,3,2,1,0,6566,6579,3,786,393,0,6567,6579,3,788,
        394,0,6568,6579,3,796,398,0,6569,6579,3,800,400,0,6570,6579,3,802,
        401,0,6571,6579,3,808,404,0,6572,6579,3,810,405,0,6573,6579,3,838,
        419,0,6574,6579,3,836,418,0,6575,6579,3,856,428,0,6576,6579,3,860,
        430,0,6577,6579,3,858,429,0,6578,6565,1,0,0,0,6578,6566,1,0,0,0,
        6578,6567,1,0,0,0,6578,6568,1,0,0,0,6578,6569,1,0,0,0,6578,6570,
        1,0,0,0,6578,6571,1,0,0,0,6578,6572,1,0,0,0,6578,6573,1,0,0,0,6578,
        6574,1,0,0,0,6578,6575,1,0,0,0,6578,6576,1,0,0,0,6578,6577,1,0,0,
        0,6579,785,1,0,0,0,6580,6581,5,475,0,0,6581,6582,3,676,338,0,6582,
        787,1,0,0,0,6583,6584,5,231,0,0,6584,6585,3,790,395,0,6585,6586,
        5,159,0,0,6586,6587,5,231,0,0,6587,789,1,0,0,0,6588,6589,3,676,338,
        0,6589,6594,3,792,396,0,6590,6591,5,155,0,0,6591,6595,3,790,395,
        0,6592,6593,5,154,0,0,6593,6595,3,794,397,0,6594,6590,1,0,0,0,6594,
        6592,1,0,0,0,6594,6595,1,0,0,0,6595,791,1,0,0,0,6596,6597,5,582,
        0,0,6597,6598,3,794,397,0,6598,793,1,0,0,0,6599,6600,3,784,392,0,
        6600,6601,5,774,0,0,6601,6603,1,0,0,0,6602,6599,1,0,0,0,6603,6604,
        1,0,0,0,6604,6602,1,0,0,0,6604,6605,1,0,0,0,6605,795,1,0,0,0,6606,
        6608,5,51,0,0,6607,6609,3,676,338,0,6608,6607,1,0,0,0,6608,6609,
        1,0,0,0,6609,6613,1,0,0,0,6610,6611,3,748,374,0,6611,6612,3,792,
        396,0,6612,6614,1,0,0,0,6613,6610,1,0,0,0,6614,6615,1,0,0,0,6615,
        6613,1,0,0,0,6615,6616,1,0,0,0,6616,6618,1,0,0,0,6617,6619,3,798,
        399,0,6618,6617,1,0,0,0,6618,6619,1,0,0,0,6619,6620,1,0,0,0,6620,
        6621,5,159,0,0,6621,6622,5,51,0,0,6622,797,1,0,0,0,6623,6624,5,154,
        0,0,6624,6625,3,794,397,0,6625,799,1,0,0,0,6626,6627,3,804,402,0,
        6627,6629,3,806,403,0,6628,6630,3,1112,556,0,6629,6628,1,0,0,0,6629,
        6630,1,0,0,0,6630,801,1,0,0,0,6631,6632,3,806,403,0,6632,803,1,0,
        0,0,6633,6634,3,1110,555,0,6634,6635,5,775,0,0,6635,805,1,0,0,0,
        6636,6638,5,29,0,0,6637,6639,3,818,409,0,6638,6637,1,0,0,0,6638,
        6639,1,0,0,0,6639,6641,1,0,0,0,6640,6642,3,794,397,0,6641,6640,1,
        0,0,0,6641,6642,1,0,0,0,6642,6643,1,0,0,0,6643,6644,5,159,0,0,6644,
        807,1,0,0,0,6645,6646,3,804,402,0,6646,6648,3,810,405,0,6647,6649,
        3,1112,556,0,6648,6647,1,0,0,0,6648,6649,1,0,0,0,6649,809,1,0,0,
        0,6650,6654,3,812,406,0,6651,6654,3,814,407,0,6652,6654,3,816,408,
        0,6653,6650,1,0,0,0,6653,6651,1,0,0,0,6653,6652,1,0,0,0,6654,811,
        1,0,0,0,6655,6656,5,294,0,0,6656,6657,3,794,397,0,6657,6658,5,159,
        0,0,6658,6659,5,294,0,0,6659,813,1,0,0,0,6660,6661,5,644,0,0,6661,
        6662,3,676,338,0,6662,6663,5,147,0,0,6663,6664,3,794,397,0,6664,
        6665,5,159,0,0,6665,6666,5,644,0,0,6666,815,1,0,0,0,6667,6668,5,
        457,0,0,6668,6669,3,794,397,0,6669,6670,5,613,0,0,6670,6671,3,676,
        338,0,6671,6672,5,159,0,0,6672,6673,5,457,0,0,6673,817,1,0,0,0,6674,
        6675,3,820,410,0,6675,6676,5,774,0,0,6676,6678,1,0,0,0,6677,6674,
        1,0,0,0,6678,6679,1,0,0,0,6679,6677,1,0,0,0,6679,6680,1,0,0,0,6680,
        819,1,0,0,0,6681,6686,3,822,411,0,6682,6686,3,824,412,0,6683,6686,
        3,830,415,0,6684,6686,3,834,417,0,6685,6681,1,0,0,0,6685,6682,1,
        0,0,0,6685,6683,1,0,0,0,6685,6684,1,0,0,0,6686,821,1,0,0,0,6687,
        6688,5,127,0,0,6688,6689,3,1130,565,0,6689,6691,3,916,458,0,6690,
        6692,3,986,493,0,6691,6690,1,0,0,0,6691,6692,1,0,0,0,6692,6695,1,
        0,0,0,6693,6694,5,128,0,0,6694,6696,3,676,338,0,6695,6693,1,0,0,
        0,6695,6696,1,0,0,0,6696,823,1,0,0,0,6697,6698,5,127,0,0,6698,6699,
        3,1128,564,0,6699,6700,5,83,0,0,6700,6701,5,200,0,0,6701,6702,3,
        826,413,0,6702,825,1,0,0,0,6703,6706,3,1140,570,0,6704,6706,3,828,
        414,0,6705,6703,1,0,0,0,6705,6704,1,0,0,0,6706,827,1,0,0,0,6707,
        6709,5,526,0,0,6708,6710,5,627,0,0,6709,6708,1,0,0,0,6709,6710,1,
        0,0,0,6710,6711,1,0,0,0,6711,6712,3,1160,580,0,6712,829,1,0,0,0,
        6713,6714,5,127,0,0,6714,6715,7,100,0,0,6715,6716,5,219,0,0,6716,
        6717,5,200,0,0,6717,6722,3,832,416,0,6718,6719,5,773,0,0,6719,6721,
        3,832,416,0,6720,6718,1,0,0,0,6721,6724,1,0,0,0,6722,6720,1,0,0,
        0,6722,6723,1,0,0,0,6723,6725,1,0,0,0,6724,6722,1,0,0,0,6725,6726,
        3,784,392,0,6726,831,1,0,0,0,6727,6735,3,826,413,0,6728,6735,3,1128,
        564,0,6729,6735,5,527,0,0,6730,6731,3,760,380,0,6731,6732,5,202,
        0,0,6732,6735,1,0,0,0,6733,6735,5,525,0,0,6734,6727,1,0,0,0,6734,
        6728,1,0,0,0,6734,6729,1,0,0,0,6734,6730,1,0,0,0,6734,6733,1,0,0,
        0,6735,833,1,0,0,0,6736,6737,5,127,0,0,6737,6738,3,1128,564,0,6738,
        6739,5,106,0,0,6739,6740,5,200,0,0,6740,6741,3,266,133,0,6741,835,
        1,0,0,0,6742,6743,5,260,0,0,6743,6744,3,1112,556,0,6744,837,1,0,
        0,0,6745,6746,5,271,0,0,6746,6747,3,1112,556,0,6747,839,1,0,0,0,
        6748,6752,5,207,0,0,6749,6753,5,101,0,0,6750,6751,4,420,177,0,6751,
        6753,5,540,0,0,6752,6749,1,0,0,0,6752,6750,1,0,0,0,6752,6753,1,0,
        0,0,6753,6754,1,0,0,0,6754,6773,5,138,0,0,6755,6760,3,844,422,0,
        6756,6757,5,773,0,0,6757,6759,3,844,422,0,6758,6756,1,0,0,0,6759,
        6762,1,0,0,0,6760,6758,1,0,0,0,6760,6761,1,0,0,0,6761,6774,1,0,0,
        0,6762,6760,1,0,0,0,6763,6764,5,83,0,0,6764,6765,3,842,421,0,6765,
        6770,3,846,423,0,6766,6767,5,773,0,0,6767,6769,3,846,423,0,6768,
        6766,1,0,0,0,6769,6772,1,0,0,0,6770,6768,1,0,0,0,6770,6771,1,0,0,
        0,6771,6774,1,0,0,0,6772,6770,1,0,0,0,6773,6755,1,0,0,0,6773,6763,
        1,0,0,0,6774,841,1,0,0,0,6775,6779,3,1148,574,0,6776,6779,3,740,
        370,0,6777,6779,3,1134,567,0,6778,6775,1,0,0,0,6778,6776,1,0,0,0,
        6778,6777,1,0,0,0,6779,843,1,0,0,0,6780,6783,3,740,370,0,6781,6783,
        3,1128,564,0,6782,6780,1,0,0,0,6782,6781,1,0,0,0,6783,6784,1,0,0,
        0,6784,6785,5,750,0,0,6785,6786,7,101,0,0,6786,845,1,0,0,0,6787,
        6790,3,740,370,0,6788,6790,3,1128,564,0,6789,6787,1,0,0,0,6789,6788,
        1,0,0,0,6790,6791,1,0,0,0,6791,6794,5,750,0,0,6792,6795,3,848,424,
        0,6793,6795,5,473,0,0,6794,6792,1,0,0,0,6794,6793,1,0,0,0,6795,847,
        1,0,0,0,6796,6797,7,102,0,0,6797,849,1,0,0,0,6798,6801,5,511,0,0,
        6799,6802,3,1128,564,0,6800,6802,3,828,414,0,6801,6799,1,0,0,0,6801,
        6800,1,0,0,0,6802,6812,1,0,0,0,6803,6804,5,506,0,0,6804,6809,3,854,
        427,0,6805,6806,5,773,0,0,6806,6808,3,854,427,0,6807,6805,1,0,0,
        0,6808,6811,1,0,0,0,6809,6807,1,0,0,0,6809,6810,1,0,0,0,6810,6813,
        1,0,0,0,6811,6809,1,0,0,0,6812,6803,1,0,0,0,6812,6813,1,0,0,0,6813,
        851,1,0,0,0,6814,6817,5,469,0,0,6815,6818,3,1128,564,0,6816,6818,
        3,828,414,0,6817,6815,1,0,0,0,6817,6816,1,0,0,0,6817,6818,1,0,0,
        0,6818,6828,1,0,0,0,6819,6820,5,506,0,0,6820,6825,3,854,427,0,6821,
        6822,5,773,0,0,6822,6824,3,854,427,0,6823,6821,1,0,0,0,6824,6827,
        1,0,0,0,6825,6823,1,0,0,0,6825,6826,1,0,0,0,6826,6829,1,0,0,0,6827,
        6825,1,0,0,0,6828,6819,1,0,0,0,6828,6829,1,0,0,0,6829,853,1,0,0,
        0,6830,6831,3,848,424,0,6831,6832,5,750,0,0,6832,6833,3,842,421,
        0,6833,855,1,0,0,0,6834,6835,5,387,0,0,6835,6836,3,1128,564,0,6836,
        857,1,0,0,0,6837,6838,5,66,0,0,6838,6839,3,1128,564,0,6839,859,1,
        0,0,0,6840,6845,5,186,0,0,6841,6843,5,367,0,0,6842,6841,1,0,0,0,
        6842,6843,1,0,0,0,6843,6844,1,0,0,0,6844,6846,5,203,0,0,6845,6842,
        1,0,0,0,6845,6846,1,0,0,0,6846,6847,1,0,0,0,6847,6848,3,1128,564,
        0,6848,6849,5,248,0,0,6849,6850,3,1130,565,0,6850,861,1,0,0,0,6851,
        6852,5,21,0,0,6852,6865,3,676,338,0,6853,6854,5,171,0,0,6854,6855,
        3,676,338,0,6855,6858,3,764,382,0,6856,6857,5,542,0,0,6857,6859,
        3,676,338,0,6858,6856,1,0,0,0,6858,6859,1,0,0,0,6859,6862,1,0,0,
        0,6860,6861,5,160,0,0,6861,6863,3,676,338,0,6862,6860,1,0,0,0,6862,
        6863,1,0,0,0,6863,6865,1,0,0,0,6864,6851,1,0,0,0,6864,6853,1,0,0,
        0,6865,863,1,0,0,0,6866,6867,3,1040,520,0,6867,6869,3,876,438,0,
        6868,6870,3,866,433,0,6869,6868,1,0,0,0,6869,6870,1,0,0,0,6870,865,
        1,0,0,0,6871,6872,4,433,178,0,6872,6875,3,868,434,0,6873,6875,3,
        886,443,0,6874,6871,1,0,0,0,6874,6873,1,0,0,0,6875,867,1,0,0,0,6876,
        6877,5,62,0,0,6877,6878,3,770,385,0,6878,869,1,0,0,0,6879,6881,5,
        371,0,0,6880,6879,1,0,0,0,6880,6881,1,0,0,0,6881,6882,1,0,0,0,6882,
        6883,5,730,0,0,6883,871,1,0,0,0,6884,6886,7,38,0,0,6885,6887,3,108,
        54,0,6886,6885,1,0,0,0,6886,6887,1,0,0,0,6887,6888,1,0,0,0,6888,
        6892,3,898,449,0,6889,6891,3,902,451,0,6890,6889,1,0,0,0,6891,6894,
        1,0,0,0,6892,6890,1,0,0,0,6892,6893,1,0,0,0,6893,6960,1,0,0,0,6894,
        6892,1,0,0,0,6895,6897,5,205,0,0,6896,6898,3,406,203,0,6897,6896,
        1,0,0,0,6897,6898,1,0,0,0,6898,6900,1,0,0,0,6899,6901,3,1050,525,
        0,6900,6899,1,0,0,0,6900,6901,1,0,0,0,6901,6902,1,0,0,0,6902,6906,
        3,898,449,0,6903,6905,3,910,455,0,6904,6903,1,0,0,0,6905,6908,1,
        0,0,0,6906,6904,1,0,0,0,6906,6907,1,0,0,0,6907,6960,1,0,0,0,6908,
        6906,1,0,0,0,6909,6911,5,523,0,0,6910,6912,3,406,203,0,6911,6910,
        1,0,0,0,6911,6912,1,0,0,0,6912,6914,1,0,0,0,6913,6915,3,1050,525,
        0,6914,6913,1,0,0,0,6914,6915,1,0,0,0,6915,6916,1,0,0,0,6916,6920,
        3,898,449,0,6917,6919,3,912,456,0,6918,6917,1,0,0,0,6919,6922,1,
        0,0,0,6920,6918,1,0,0,0,6920,6921,1,0,0,0,6921,6960,1,0,0,0,6922,
        6920,1,0,0,0,6923,6925,3,874,437,0,6924,6923,1,0,0,0,6924,6925,1,
        0,0,0,6925,6957,1,0,0,0,6926,6927,5,420,0,0,6927,6933,5,265,0,0,
        6928,6930,5,609,0,0,6929,6931,3,406,203,0,6930,6929,1,0,0,0,6930,
        6931,1,0,0,0,6931,6933,1,0,0,0,6932,6926,1,0,0,0,6932,6928,1,0,0,
        0,6933,6935,1,0,0,0,6934,6936,3,108,54,0,6935,6934,1,0,0,0,6935,
        6936,1,0,0,0,6936,6937,1,0,0,0,6937,6941,3,898,449,0,6938,6940,3,
        902,451,0,6939,6938,1,0,0,0,6940,6943,1,0,0,0,6941,6939,1,0,0,0,
        6941,6942,1,0,0,0,6942,6958,1,0,0,0,6943,6941,1,0,0,0,6944,6945,
        5,199,0,0,6945,6947,5,265,0,0,6946,6948,3,1050,525,0,6947,6946,1,
        0,0,0,6947,6948,1,0,0,0,6948,6949,1,0,0,0,6949,6950,3,890,445,0,
        6950,6951,3,886,443,0,6951,6958,1,0,0,0,6952,6955,3,868,434,0,6953,
        6954,4,436,179,0,6954,6956,3,870,435,0,6955,6953,1,0,0,0,6955,6956,
        1,0,0,0,6956,6958,1,0,0,0,6957,6932,1,0,0,0,6957,6944,1,0,0,0,6957,
        6952,1,0,0,0,6958,6960,1,0,0,0,6959,6884,1,0,0,0,6959,6895,1,0,0,
        0,6959,6909,1,0,0,0,6959,6924,1,0,0,0,6960,873,1,0,0,0,6961,6963,
        5,86,0,0,6962,6964,3,1128,564,0,6963,6962,1,0,0,0,6963,6964,1,0,
        0,0,6964,875,1,0,0,0,6965,7001,3,916,458,0,6966,6968,3,878,439,0,
        6967,6966,1,0,0,0,6968,6971,1,0,0,0,6969,6967,1,0,0,0,6969,6970,
        1,0,0,0,6970,7002,1,0,0,0,6971,6969,1,0,0,0,6972,6974,4,438,180,
        0,6973,6975,3,986,493,0,6974,6973,1,0,0,0,6974,6975,1,0,0,0,6975,
        6978,1,0,0,0,6976,6977,5,209,0,0,6977,6979,5,12,0,0,6978,6976,1,
        0,0,0,6978,6979,1,0,0,0,6979,6980,1,0,0,0,6980,6981,5,17,0,0,6981,
        6983,3,770,385,0,6982,6984,7,103,0,0,6983,6982,1,0,0,0,6983,6984,
        1,0,0,0,6984,6999,1,0,0,0,6985,6989,4,438,181,0,6986,6988,3,884,
        442,0,6987,6986,1,0,0,0,6988,6991,1,0,0,0,6989,6987,1,0,0,0,6989,
        6990,1,0,0,0,6990,7000,1,0,0,0,6991,6989,1,0,0,0,6992,6996,4,438,
        182,0,6993,6995,3,878,439,0,6994,6993,1,0,0,0,6995,6998,1,0,0,0,
        6996,6994,1,0,0,0,6996,6997,1,0,0,0,6997,7000,1,0,0,0,6998,6996,
        1,0,0,0,6999,6985,1,0,0,0,6999,6992,1,0,0,0,7000,7002,1,0,0,0,7001,
        6969,1,0,0,0,7001,6972,1,0,0,0,7002,877,1,0,0,0,7003,7005,5,371,
        0,0,7004,7003,1,0,0,0,7004,7005,1,0,0,0,7005,7006,1,0,0,0,7006,7056,
        3,1170,585,0,7007,7008,4,439,183,0,7008,7009,5,371,0,0,7009,7056,
        5,720,0,0,7010,7018,5,128,0,0,7011,7019,3,1150,575,0,7012,7014,5,
        372,0,0,7013,7015,3,720,360,0,7014,7013,1,0,0,0,7014,7015,1,0,0,
        0,7015,7019,1,0,0,0,7016,7017,4,439,184,0,7017,7019,3,770,385,0,
        7018,7011,1,0,0,0,7018,7012,1,0,0,0,7018,7016,1,0,0,0,7019,7056,
        1,0,0,0,7020,7021,5,383,0,0,7021,7022,5,614,0,0,7022,7024,5,372,
        0,0,7023,7025,3,720,360,0,7024,7023,1,0,0,0,7024,7025,1,0,0,0,7025,
        7056,1,0,0,0,7026,7056,5,24,0,0,7027,7028,5,501,0,0,7028,7029,5,
        128,0,0,7029,7056,5,627,0,0,7030,7032,5,420,0,0,7031,7030,1,0,0,
        0,7031,7032,1,0,0,0,7032,7033,1,0,0,0,7033,7056,5,265,0,0,7034,7036,
        5,609,0,0,7035,7037,5,265,0,0,7036,7035,1,0,0,0,7036,7037,1,0,0,
        0,7037,7056,1,0,0,0,7038,7039,5,75,0,0,7039,7056,3,1160,580,0,7040,
        7056,3,986,493,0,7041,7042,5,74,0,0,7042,7056,3,880,440,0,7043,7044,
        5,553,0,0,7044,7056,3,882,441,0,7045,7046,4,439,185,0,7046,7047,
        5,707,0,0,7047,7056,3,1146,573,0,7048,7050,4,439,186,0,7049,7051,
        3,874,437,0,7050,7049,1,0,0,0,7050,7051,1,0,0,0,7051,7052,1,0,0,
        0,7052,7056,3,868,434,0,7053,7054,4,439,187,0,7054,7056,3,870,435,
        0,7055,7004,1,0,0,0,7055,7007,1,0,0,0,7055,7010,1,0,0,0,7055,7020,
        1,0,0,0,7055,7026,1,0,0,0,7055,7027,1,0,0,0,7055,7031,1,0,0,0,7055,
        7034,1,0,0,0,7055,7038,1,0,0,0,7055,7040,1,0,0,0,7055,7041,1,0,0,
        0,7055,7043,1,0,0,0,7055,7045,1,0,0,0,7055,7048,1,0,0,0,7055,7053,
        1,0,0,0,7056,879,1,0,0,0,7057,7058,7,104,0,0,7058,881,1,0,0,0,7059,
        7060,7,105,0,0,7060,883,1,0,0,0,7061,7063,5,609,0,0,7062,7064,5,
        265,0,0,7063,7062,1,0,0,0,7063,7064,1,0,0,0,7064,7076,1,0,0,0,7065,
        7066,5,75,0,0,7066,7076,3,1156,578,0,7067,7069,3,760,380,0,7068,
        7067,1,0,0,0,7068,7069,1,0,0,0,7069,7070,1,0,0,0,7070,7076,5,376,
        0,0,7071,7073,5,420,0,0,7072,7071,1,0,0,0,7072,7073,1,0,0,0,7073,
        7074,1,0,0,0,7074,7076,5,265,0,0,7075,7061,1,0,0,0,7075,7065,1,0,
        0,0,7075,7068,1,0,0,0,7075,7072,1,0,0,0,7076,885,1,0,0,0,7077,7078,
        5,443,0,0,7078,7080,3,1102,551,0,7079,7081,3,1132,566,0,7080,7079,
        1,0,0,0,7080,7081,1,0,0,0,7081,7084,1,0,0,0,7082,7083,5,320,0,0,
        7083,7085,7,106,0,0,7084,7082,1,0,0,0,7084,7085,1,0,0,0,7085,7102,
        1,0,0,0,7086,7087,5,383,0,0,7087,7088,5,614,0,0,7088,7092,3,888,
        444,0,7089,7090,5,383,0,0,7090,7091,5,133,0,0,7091,7093,3,888,444,
        0,7092,7089,1,0,0,0,7092,7093,1,0,0,0,7093,7103,1,0,0,0,7094,7095,
        5,383,0,0,7095,7096,5,133,0,0,7096,7100,3,888,444,0,7097,7098,5,
        383,0,0,7098,7099,5,614,0,0,7099,7101,3,888,444,0,7100,7097,1,0,
        0,0,7100,7101,1,0,0,0,7101,7103,1,0,0,0,7102,7086,1,0,0,0,7102,7094,
        1,0,0,0,7102,7103,1,0,0,0,7103,887,1,0,0,0,7104,7110,7,2,0,0,7105,
        7106,5,506,0,0,7106,7110,3,1170,585,0,7107,7108,5,373,0,0,7108,7110,
        5,3,0,0,7109,7104,1,0,0,0,7109,7105,1,0,0,0,7109,7107,1,0,0,0,7110,
        889,1,0,0,0,7111,7112,5,776,0,0,7112,7117,3,892,446,0,7113,7114,
        5,773,0,0,7114,7116,3,892,446,0,7115,7113,1,0,0,0,7116,7119,1,0,
        0,0,7117,7115,1,0,0,0,7117,7118,1,0,0,0,7118,7120,1,0,0,0,7119,7117,
        1,0,0,0,7120,7121,5,777,0,0,7121,891,1,0,0,0,7122,7124,3,1128,564,
        0,7123,7125,3,922,461,0,7124,7123,1,0,0,0,7124,7125,1,0,0,0,7125,
        7127,1,0,0,0,7126,7128,3,330,165,0,7127,7126,1,0,0,0,7127,7128,1,
        0,0,0,7128,893,1,0,0,0,7129,7130,5,776,0,0,7130,7135,3,896,448,0,
        7131,7132,5,773,0,0,7132,7134,3,896,448,0,7133,7131,1,0,0,0,7134,
        7137,1,0,0,0,7135,7133,1,0,0,0,7135,7136,1,0,0,0,7136,7138,1,0,0,
        0,7137,7135,1,0,0,0,7138,7139,5,777,0,0,7139,895,1,0,0,0,7140,7146,
        3,892,446,0,7141,7143,3,770,385,0,7142,7144,3,330,165,0,7143,7142,
        1,0,0,0,7143,7144,1,0,0,0,7144,7146,1,0,0,0,7145,7140,1,0,0,0,7145,
        7141,1,0,0,0,7146,897,1,0,0,0,7147,7148,4,449,188,0,7148,7152,3,
        894,447,0,7149,7150,4,449,189,0,7150,7152,3,890,445,0,7151,7147,
        1,0,0,0,7151,7149,1,0,0,0,7152,899,1,0,0,0,7153,7154,7,107,0,0,7154,
        901,1,0,0,0,7155,7158,3,904,452,0,7156,7158,3,908,454,0,7157,7155,
        1,0,0,0,7157,7156,1,0,0,0,7158,903,1,0,0,0,7159,7161,5,264,0,0,7160,
        7162,5,750,0,0,7161,7160,1,0,0,0,7161,7162,1,0,0,0,7162,7163,1,0,
        0,0,7163,7169,3,1140,570,0,7164,7165,5,75,0,0,7165,7169,3,1160,580,
        0,7166,7167,4,452,190,0,7167,7169,3,906,453,0,7168,7159,1,0,0,0,
        7168,7164,1,0,0,0,7168,7166,1,0,0,0,7169,905,1,0,0,0,7170,7171,7,
        108,0,0,7171,907,1,0,0,0,7172,7173,7,109,0,0,7173,7174,3,900,450,
        0,7174,909,1,0,0,0,7175,7180,3,904,452,0,7176,7177,5,645,0,0,7177,
        7178,5,401,0,0,7178,7180,3,1128,564,0,7179,7175,1,0,0,0,7179,7176,
        1,0,0,0,7180,911,1,0,0,0,7181,7182,3,904,452,0,7182,913,1,0,0,0,
        7183,7184,3,916,458,0,7184,7185,5,0,0,1,7185,915,1,0,0,0,7186,7188,
        7,110,0,0,7187,7189,3,922,461,0,7188,7187,1,0,0,0,7188,7189,1,0,
        0,0,7189,7191,1,0,0,0,7190,7192,3,924,462,0,7191,7190,1,0,0,0,7191,
        7192,1,0,0,0,7192,7334,1,0,0,0,7193,7199,5,437,0,0,7194,7196,5,146,
        0,0,7195,7197,5,416,0,0,7196,7195,1,0,0,0,7196,7197,1,0,0,0,7197,
        7199,1,0,0,0,7198,7193,1,0,0,0,7198,7194,1,0,0,0,7199,7201,1,0,0,
        0,7200,7202,3,1178,589,0,7201,7200,1,0,0,0,7201,7202,1,0,0,0,7202,
        7204,1,0,0,0,7203,7205,3,924,462,0,7204,7203,1,0,0,0,7204,7205,1,
        0,0,0,7205,7334,1,0,0,0,7206,7208,7,111,0,0,7207,7209,3,1174,587,
        0,7208,7207,1,0,0,0,7208,7209,1,0,0,0,7209,7211,1,0,0,0,7210,7212,
        3,924,462,0,7211,7210,1,0,0,0,7211,7212,1,0,0,0,7212,7334,1,0,0,
        0,7213,7215,5,37,0,0,7214,7216,3,922,461,0,7215,7214,1,0,0,0,7215,
        7216,1,0,0,0,7216,7334,1,0,0,0,7217,7334,7,112,0,0,7218,7220,5,60,
        0,0,7219,7221,3,922,461,0,7220,7219,1,0,0,0,7220,7221,1,0,0,0,7221,
        7223,1,0,0,0,7222,7224,3,926,463,0,7223,7222,1,0,0,0,7223,7224,1,
        0,0,0,7224,7334,1,0,0,0,7225,7227,3,918,459,0,7226,7228,3,922,461,
        0,7227,7226,1,0,0,0,7227,7228,1,0,0,0,7228,7230,1,0,0,0,7229,7231,
        5,32,0,0,7230,7229,1,0,0,0,7230,7231,1,0,0,0,7231,7334,1,0,0,0,7232,
        7234,5,32,0,0,7233,7235,3,922,461,0,7234,7233,1,0,0,0,7234,7235,
        1,0,0,0,7235,7334,1,0,0,0,7236,7237,5,60,0,0,7237,7240,5,633,0,0,
        7238,7240,5,629,0,0,7239,7236,1,0,0,0,7239,7238,1,0,0,0,7240,7241,
        1,0,0,0,7241,7243,3,922,461,0,7242,7244,3,926,463,0,7243,7242,1,
        0,0,0,7243,7244,1,0,0,0,7244,7334,1,0,0,0,7245,7246,5,358,0,0,7246,
        7256,5,629,0,0,7247,7256,5,379,0,0,7248,7249,5,361,0,0,7249,7256,
        5,629,0,0,7250,7251,5,358,0,0,7251,7252,5,60,0,0,7252,7256,5,633,
        0,0,7253,7254,5,361,0,0,7254,7256,5,633,0,0,7255,7245,1,0,0,0,7255,
        7247,1,0,0,0,7255,7248,1,0,0,0,7255,7250,1,0,0,0,7255,7253,1,0,0,
        0,7256,7257,1,0,0,0,7257,7259,3,922,461,0,7258,7260,5,32,0,0,7259,
        7258,1,0,0,0,7259,7260,1,0,0,0,7260,7334,1,0,0,0,7261,7262,5,628,
        0,0,7262,7334,3,922,461,0,7263,7265,5,656,0,0,7264,7266,3,922,461,
        0,7265,7264,1,0,0,0,7265,7266,1,0,0,0,7266,7268,1,0,0,0,7267,7269,
        3,924,462,0,7268,7267,1,0,0,0,7268,7269,1,0,0,0,7269,7334,1,0,0,
        0,7270,7334,5,116,0,0,7271,7273,5,586,0,0,7272,7274,3,934,467,0,
        7273,7272,1,0,0,0,7273,7274,1,0,0,0,7274,7334,1,0,0,0,7275,7277,
        5,583,0,0,7276,7278,3,934,467,0,7277,7276,1,0,0,0,7277,7278,1,0,
        0,0,7278,7334,1,0,0,0,7279,7281,5,113,0,0,7280,7282,3,934,467,0,
        7281,7280,1,0,0,0,7281,7282,1,0,0,0,7282,7334,1,0,0,0,7283,7334,
        5,587,0,0,7284,7286,5,39,0,0,7285,7287,3,922,461,0,7286,7285,1,0,
        0,0,7286,7287,1,0,0,0,7287,7334,1,0,0,0,7288,7334,7,113,0,0,7289,
        7290,5,293,0,0,7290,7334,5,628,0,0,7291,7295,5,293,0,0,7292,7293,
        5,60,0,0,7293,7296,5,633,0,0,7294,7296,5,629,0,0,7295,7292,1,0,0,
        0,7295,7294,1,0,0,0,7295,7296,1,0,0,0,7296,7298,1,0,0,0,7297,7299,
        3,926,463,0,7298,7297,1,0,0,0,7298,7299,1,0,0,0,7299,7334,1,0,0,
        0,7300,7302,5,589,0,0,7301,7303,3,926,463,0,7302,7301,1,0,0,0,7302,
        7303,1,0,0,0,7303,7334,1,0,0,0,7304,7306,5,580,0,0,7305,7307,3,922,
        461,0,7306,7305,1,0,0,0,7306,7307,1,0,0,0,7307,7309,1,0,0,0,7308,
        7310,3,926,463,0,7309,7308,1,0,0,0,7309,7310,1,0,0,0,7310,7334,1,
        0,0,0,7311,7313,5,332,0,0,7312,7314,3,926,463,0,7313,7312,1,0,0,
        0,7313,7314,1,0,0,0,7314,7334,1,0,0,0,7315,7317,5,291,0,0,7316,7318,
        3,926,463,0,7317,7316,1,0,0,0,7317,7318,1,0,0,0,7318,7334,1,0,0,
        0,7319,7320,5,164,0,0,7320,7322,3,1152,576,0,7321,7323,3,926,463,
        0,7322,7321,1,0,0,0,7322,7323,1,0,0,0,7323,7334,1,0,0,0,7324,7325,
        5,506,0,0,7325,7327,3,1152,576,0,7326,7328,3,926,463,0,7327,7326,
        1,0,0,0,7327,7328,1,0,0,0,7328,7334,1,0,0,0,7329,7334,5,501,0,0,
        7330,7331,4,458,191,0,7331,7334,5,262,0,0,7332,7334,7,114,0,0,7333,
        7186,1,0,0,0,7333,7198,1,0,0,0,7333,7206,1,0,0,0,7333,7213,1,0,0,
        0,7333,7217,1,0,0,0,7333,7218,1,0,0,0,7333,7225,1,0,0,0,7333,7232,
        1,0,0,0,7333,7239,1,0,0,0,7333,7255,1,0,0,0,7333,7261,1,0,0,0,7333,
        7263,1,0,0,0,7333,7270,1,0,0,0,7333,7271,1,0,0,0,7333,7275,1,0,0,
        0,7333,7279,1,0,0,0,7333,7283,1,0,0,0,7333,7284,1,0,0,0,7333,7288,
        1,0,0,0,7333,7289,1,0,0,0,7333,7291,1,0,0,0,7333,7300,1,0,0,0,7333,
        7304,1,0,0,0,7333,7311,1,0,0,0,7333,7315,1,0,0,0,7333,7319,1,0,0,
        0,7333,7324,1,0,0,0,7333,7329,1,0,0,0,7333,7330,1,0,0,0,7333,7332,
        1,0,0,0,7334,917,1,0,0,0,7335,7339,5,361,0,0,7336,7337,5,358,0,0,
        7337,7339,5,60,0,0,7338,7335,1,0,0,0,7338,7336,1,0,0,0,7339,919,
        1,0,0,0,7340,7346,5,437,0,0,7341,7343,5,146,0,0,7342,7344,5,416,
        0,0,7343,7342,1,0,0,0,7343,7344,1,0,0,0,7344,7346,1,0,0,0,7345,7340,
        1,0,0,0,7345,7341,1,0,0,0,7346,921,1,0,0,0,7347,7350,5,776,0,0,7348,
        7351,3,1146,573,0,7349,7351,5,790,0,0,7350,7348,1,0,0,0,7350,7349,
        1,0,0,0,7351,7352,1,0,0,0,7352,7353,5,777,0,0,7353,923,1,0,0,0,7354,
        7356,7,115,0,0,7355,7354,1,0,0,0,7356,7357,1,0,0,0,7357,7355,1,0,
        0,0,7357,7358,1,0,0,0,7358,925,1,0,0,0,7359,7374,3,928,464,0,7360,
        7374,3,930,465,0,7361,7374,5,46,0,0,7362,7363,3,758,379,0,7363,7365,
        3,936,468,0,7364,7366,5,32,0,0,7365,7364,1,0,0,0,7365,7366,1,0,0,
        0,7366,7374,1,0,0,0,7367,7371,5,32,0,0,7368,7369,3,758,379,0,7369,
        7370,3,936,468,0,7370,7372,1,0,0,0,7371,7368,1,0,0,0,7371,7372,1,
        0,0,0,7372,7374,1,0,0,0,7373,7359,1,0,0,0,7373,7360,1,0,0,0,7373,
        7361,1,0,0,0,7373,7362,1,0,0,0,7373,7367,1,0,0,0,7374,927,1,0,0,
        0,7375,7377,5,19,0,0,7376,7378,5,32,0,0,7377,7376,1,0,0,0,7377,7378,
        1,0,0,0,7378,7382,1,0,0,0,7379,7380,5,32,0,0,7380,7382,5,19,0,0,
        7381,7375,1,0,0,0,7381,7379,1,0,0,0,7382,929,1,0,0,0,7383,7385,5,
        606,0,0,7384,7386,5,32,0,0,7385,7384,1,0,0,0,7385,7386,1,0,0,0,7386,
        7390,1,0,0,0,7387,7388,5,32,0,0,7388,7390,5,606,0,0,7389,7383,1,
        0,0,0,7389,7387,1,0,0,0,7390,931,1,0,0,0,7391,7392,5,776,0,0,7392,
        7393,3,1142,571,0,7393,7394,5,777,0,0,7394,933,1,0,0,0,7395,7396,
        5,776,0,0,7396,7397,5,747,0,0,7397,7398,5,777,0,0,7398,935,1,0,0,
        0,7399,7404,3,1180,590,0,7400,7404,5,32,0,0,7401,7402,4,468,192,
        0,7402,7404,5,128,0,0,7403,7399,1,0,0,0,7403,7400,1,0,0,0,7403,7401,
        1,0,0,0,7404,937,1,0,0,0,7405,7411,3,1180,590,0,7406,7407,4,469,
        193,0,7407,7411,5,128,0,0,7408,7409,4,469,194,0,7409,7411,5,32,0,
        0,7410,7405,1,0,0,0,7410,7406,1,0,0,0,7410,7408,1,0,0,0,7411,939,
        1,0,0,0,7412,7419,3,944,472,0,7413,7415,5,773,0,0,7414,7413,1,0,
        0,0,7414,7415,1,0,0,0,7415,7416,1,0,0,0,7416,7418,3,944,472,0,7417,
        7414,1,0,0,0,7418,7421,1,0,0,0,7419,7417,1,0,0,0,7419,7420,1,0,0,
        0,7420,941,1,0,0,0,7421,7419,1,0,0,0,7422,7424,3,944,472,0,7423,
        7422,1,0,0,0,7424,7425,1,0,0,0,7425,7423,1,0,0,0,7425,7426,1,0,0,
        0,7426,943,1,0,0,0,7427,7429,5,163,0,0,7428,7430,5,750,0,0,7429,
        7428,1,0,0,0,7429,7430,1,0,0,0,7430,7431,1,0,0,0,7431,7557,3,1094,
        547,0,7432,7433,4,472,195,0,7433,7435,5,721,0,0,7434,7436,3,1190,
        595,0,7435,7434,1,0,0,0,7435,7436,1,0,0,0,7436,7439,1,0,0,0,7437,
        7440,5,376,0,0,7438,7440,3,1180,590,0,7439,7437,1,0,0,0,7439,7438,
        1,0,0,0,7440,7557,1,0,0,0,7441,7443,5,323,0,0,7442,7444,5,750,0,
        0,7443,7442,1,0,0,0,7443,7444,1,0,0,0,7444,7445,1,0,0,0,7445,7557,
        3,1144,572,0,7446,7448,5,344,0,0,7447,7449,5,750,0,0,7448,7447,1,
        0,0,0,7448,7449,1,0,0,0,7449,7450,1,0,0,0,7450,7557,3,1144,572,0,
        7451,7453,5,25,0,0,7452,7454,5,750,0,0,7453,7452,1,0,0,0,7453,7454,
        1,0,0,0,7454,7455,1,0,0,0,7455,7557,3,1140,570,0,7456,7458,5,406,
        0,0,7457,7459,5,750,0,0,7458,7457,1,0,0,0,7458,7459,1,0,0,0,7459,
        7460,1,0,0,0,7460,7557,3,1154,577,0,7461,7463,5,75,0,0,7462,7464,
        5,750,0,0,7463,7462,1,0,0,0,7463,7464,1,0,0,0,7464,7465,1,0,0,0,
        7465,7557,3,1154,577,0,7466,7467,4,472,196,0,7467,7469,5,81,0,0,
        7468,7470,5,750,0,0,7469,7468,1,0,0,0,7469,7470,1,0,0,0,7470,7471,
        1,0,0,0,7471,7557,3,1156,578,0,7472,7473,4,472,197,0,7473,7475,5,
        158,0,0,7474,7476,5,750,0,0,7475,7474,1,0,0,0,7475,7476,1,0,0,0,
        7476,7477,1,0,0,0,7477,7557,3,1156,578,0,7478,7480,5,24,0,0,7479,
        7481,5,750,0,0,7480,7479,1,0,0,0,7480,7481,1,0,0,0,7481,7482,1,0,
        0,0,7482,7557,3,1144,572,0,7483,7485,5,399,0,0,7484,7486,5,750,0,
        0,7485,7484,1,0,0,0,7485,7486,1,0,0,0,7486,7487,1,0,0,0,7487,7557,
        3,946,473,0,7488,7490,7,116,0,0,7489,7491,5,750,0,0,7490,7489,1,
        0,0,0,7490,7491,1,0,0,0,7491,7492,1,0,0,0,7492,7557,3,946,473,0,
        7493,7495,7,117,0,0,7494,7496,5,750,0,0,7495,7494,1,0,0,0,7495,7496,
        1,0,0,0,7496,7497,1,0,0,0,7497,7557,3,1140,570,0,7498,7500,5,132,
        0,0,7499,7501,5,750,0,0,7500,7499,1,0,0,0,7500,7501,1,0,0,0,7501,
        7502,1,0,0,0,7502,7557,3,1140,570,0,7503,7505,5,486,0,0,7504,7506,
        5,750,0,0,7505,7504,1,0,0,0,7505,7506,1,0,0,0,7506,7507,1,0,0,0,
        7507,7557,7,118,0,0,7508,7510,5,608,0,0,7509,7511,5,750,0,0,7510,
        7509,1,0,0,0,7510,7511,1,0,0,0,7511,7512,1,0,0,0,7512,7513,5,776,
        0,0,7513,7514,3,1104,552,0,7514,7515,5,777,0,0,7515,7557,1,0,0,0,
        7516,7557,3,952,476,0,7517,7557,3,948,474,0,7518,7520,5,243,0,0,
        7519,7521,5,750,0,0,7520,7519,1,0,0,0,7520,7521,1,0,0,0,7521,7522,
        1,0,0,0,7522,7557,7,119,0,0,7523,7524,5,112,0,0,7524,7526,5,139,
        0,0,7525,7527,5,750,0,0,7526,7525,1,0,0,0,7526,7527,1,0,0,0,7527,
        7528,1,0,0,0,7528,7557,3,1156,578,0,7529,7530,5,236,0,0,7530,7532,
        5,139,0,0,7531,7533,5,750,0,0,7532,7531,1,0,0,0,7532,7533,1,0,0,
        0,7533,7534,1,0,0,0,7534,7557,3,1156,578,0,7535,7541,5,572,0,0,7536,
        7538,4,472,198,0,7537,7539,5,750,0,0,7538,7537,1,0,0,0,7538,7539,
        1,0,0,0,7539,7542,1,0,0,0,7540,7542,1,0,0,0,7541,7536,1,0,0,0,7541,
        7540,1,0,0,0,7542,7543,1,0,0,0,7543,7557,3,1128,564,0,7544,7545,
        5,553,0,0,7545,7557,7,120,0,0,7546,7548,5,84,0,0,7547,7549,5,750,
        0,0,7548,7547,1,0,0,0,7548,7549,1,0,0,0,7549,7550,1,0,0,0,7550,7557,
        3,1156,578,0,7551,7553,5,264,0,0,7552,7554,5,750,0,0,7553,7552,1,
        0,0,0,7553,7554,1,0,0,0,7554,7555,1,0,0,0,7555,7557,3,1140,570,0,
        7556,7427,1,0,0,0,7556,7432,1,0,0,0,7556,7441,1,0,0,0,7556,7446,
        1,0,0,0,7556,7451,1,0,0,0,7556,7456,1,0,0,0,7556,7461,1,0,0,0,7556,
        7466,1,0,0,0,7556,7472,1,0,0,0,7556,7478,1,0,0,0,7556,7483,1,0,0,
        0,7556,7488,1,0,0,0,7556,7493,1,0,0,0,7556,7498,1,0,0,0,7556,7503,
        1,0,0,0,7556,7508,1,0,0,0,7556,7516,1,0,0,0,7556,7517,1,0,0,0,7556,
        7518,1,0,0,0,7556,7523,1,0,0,0,7556,7529,1,0,0,0,7556,7535,1,0,0,
        0,7556,7544,1,0,0,0,7556,7546,1,0,0,0,7556,7551,1,0,0,0,7557,945,
        1,0,0,0,7558,7561,3,1140,570,0,7559,7561,5,128,0,0,7560,7558,1,0,
        0,0,7560,7559,1,0,0,0,7561,947,1,0,0,0,7562,7564,5,128,0,0,7563,
        7562,1,0,0,0,7563,7564,1,0,0,0,7564,7565,1,0,0,0,7565,7567,5,69,
        0,0,7566,7568,5,750,0,0,7567,7566,1,0,0,0,7567,7568,1,0,0,0,7568,
        7569,1,0,0,0,7569,7570,3,938,469,0,7570,949,1,0,0,0,7571,7573,5,
        128,0,0,7572,7571,1,0,0,0,7572,7573,1,0,0,0,7573,7574,1,0,0,0,7574,
        7576,5,158,0,0,7575,7577,5,750,0,0,7576,7575,1,0,0,0,7576,7577,1,
        0,0,0,7577,7578,1,0,0,0,7578,7579,3,1154,577,0,7579,951,1,0,0,0,
        7580,7582,5,128,0,0,7581,7580,1,0,0,0,7581,7582,1,0,0,0,7582,7583,
        1,0,0,0,7583,7585,3,758,379,0,7584,7586,5,750,0,0,7585,7584,1,0,
        0,0,7585,7586,1,0,0,0,7586,7587,1,0,0,0,7587,7588,3,936,468,0,7588,
        953,1,0,0,0,7589,7590,5,405,0,0,7590,7591,5,45,0,0,7591,7594,3,956,
        478,0,7592,7593,5,404,0,0,7593,7595,3,1142,571,0,7594,7592,1,0,0,
        0,7594,7595,1,0,0,0,7595,7597,1,0,0,0,7596,7598,3,958,479,0,7597,
        7596,1,0,0,0,7597,7598,1,0,0,0,7598,7600,1,0,0,0,7599,7601,3,962,
        481,0,7600,7599,1,0,0,0,7600,7601,1,0,0,0,7601,955,1,0,0,0,7602,
        7604,5,277,0,0,7603,7602,1,0,0,0,7603,7604,1,0,0,0,7604,7605,1,0,
        0,0,7605,7607,5,265,0,0,7606,7608,3,960,480,0,7607,7606,1,0,0,0,
        7607,7608,1,0,0,0,7608,7609,1,0,0,0,7609,7611,5,776,0,0,7610,7612,
        3,1130,565,0,7611,7610,1,0,0,0,7611,7612,1,0,0,0,7612,7613,1,0,0,
        0,7613,7636,5,777,0,0,7614,7616,5,277,0,0,7615,7614,1,0,0,0,7615,
        7616,1,0,0,0,7616,7617,1,0,0,0,7617,7618,5,220,0,0,7618,7619,5,776,
        0,0,7619,7620,3,686,343,0,7620,7621,5,777,0,0,7621,7636,1,0,0,0,
        7622,7633,7,121,0,0,7623,7624,5,776,0,0,7624,7625,3,686,343,0,7625,
        7626,5,777,0,0,7626,7634,1,0,0,0,7627,7628,5,71,0,0,7628,7630,5,
        776,0,0,7629,7631,3,1130,565,0,7630,7629,1,0,0,0,7630,7631,1,0,0,
        0,7631,7632,1,0,0,0,7632,7634,5,777,0,0,7633,7623,1,0,0,0,7633,7627,
        1,0,0,0,7634,7636,1,0,0,0,7635,7603,1,0,0,0,7635,7615,1,0,0,0,7635,
        7622,1,0,0,0,7636,957,1,0,0,0,7637,7638,5,561,0,0,7638,7640,5,45,
        0,0,7639,7641,5,277,0,0,7640,7639,1,0,0,0,7640,7641,1,0,0,0,7641,
        7652,1,0,0,0,7642,7643,5,220,0,0,7643,7644,5,776,0,0,7644,7645,3,
        686,343,0,7645,7646,5,777,0,0,7646,7653,1,0,0,0,7647,7649,5,265,
        0,0,7648,7650,3,960,480,0,7649,7648,1,0,0,0,7649,7650,1,0,0,0,7650,
        7651,1,0,0,0,7651,7653,3,1132,566,0,7652,7642,1,0,0,0,7652,7647,
        1,0,0,0,7653,7656,1,0,0,0,7654,7655,5,560,0,0,7655,7657,3,1142,571,
        0,7656,7654,1,0,0,0,7656,7657,1,0,0,0,7657,959,1,0,0,0,7658,7659,
        4,480,199,0,7659,7660,5,9,0,0,7660,7661,5,750,0,0,7661,7662,3,1142,
        571,0,7662,961,1,0,0,0,7663,7664,5,776,0,0,7664,7669,3,964,482,0,
        7665,7666,5,773,0,0,7666,7668,3,964,482,0,7667,7665,1,0,0,0,7668,
        7671,1,0,0,0,7669,7667,1,0,0,0,7669,7670,1,0,0,0,7670,7672,1,0,0,
        0,7671,7669,1,0,0,0,7672,7673,5,777,0,0,7673,963,1,0,0,0,7674,7675,
        5,405,0,0,7675,7686,3,1128,564,0,7676,7677,5,626,0,0,7677,7678,5,
        273,0,0,7678,7681,5,581,0,0,7679,7682,3,972,486,0,7680,7682,5,329,
        0,0,7681,7679,1,0,0,0,7681,7680,1,0,0,0,7682,7687,1,0,0,0,7683,7684,
        5,626,0,0,7684,7685,5,251,0,0,7685,7687,3,966,483,0,7686,7676,1,
        0,0,0,7686,7683,1,0,0,0,7686,7687,1,0,0,0,7687,7691,1,0,0,0,7688,
        7690,3,968,484,0,7689,7688,1,0,0,0,7690,7693,1,0,0,0,7691,7689,1,
        0,0,0,7691,7692,1,0,0,0,7692,7705,1,0,0,0,7693,7691,1,0,0,0,7694,
        7695,5,776,0,0,7695,7700,3,970,485,0,7696,7697,5,773,0,0,7697,7699,
        3,970,485,0,7698,7696,1,0,0,0,7699,7702,1,0,0,0,7700,7698,1,0,0,
        0,7700,7701,1,0,0,0,7701,7703,1,0,0,0,7702,7700,1,0,0,0,7703,7704,
        5,777,0,0,7704,7706,1,0,0,0,7705,7694,1,0,0,0,7705,7706,1,0,0,0,
        7706,965,1,0,0,0,7707,7720,3,972,486,0,7708,7709,5,776,0,0,7709,
        7714,3,972,486,0,7710,7711,5,773,0,0,7711,7713,3,972,486,0,7712,
        7710,1,0,0,0,7713,7716,1,0,0,0,7714,7712,1,0,0,0,7714,7715,1,0,0,
        0,7715,7717,1,0,0,0,7716,7714,1,0,0,0,7717,7718,5,777,0,0,7718,7720,
        1,0,0,0,7719,7707,1,0,0,0,7719,7708,1,0,0,0,7720,967,1,0,0,0,7721,
        7723,5,572,0,0,7722,7724,5,750,0,0,7723,7722,1,0,0,0,7723,7724,1,
        0,0,0,7724,7725,1,0,0,0,7725,7756,3,1128,564,0,7726,7728,5,553,0,
        0,7727,7726,1,0,0,0,7727,7728,1,0,0,0,7728,7729,1,0,0,0,7729,7731,
        5,163,0,0,7730,7732,5,750,0,0,7731,7730,1,0,0,0,7731,7732,1,0,0,
        0,7732,7733,1,0,0,0,7733,7756,3,1094,547,0,7734,7736,5,368,0,0,7735,
        7737,5,750,0,0,7736,7735,1,0,0,0,7736,7737,1,0,0,0,7737,7738,1,0,
        0,0,7738,7756,3,1142,571,0,7739,7741,7,122,0,0,7740,7742,5,750,0,
        0,7741,7740,1,0,0,0,7741,7742,1,0,0,0,7742,7743,1,0,0,0,7743,7756,
        3,1142,571,0,7744,7745,7,123,0,0,7745,7747,5,139,0,0,7746,7748,5,
        750,0,0,7747,7746,1,0,0,0,7747,7748,1,0,0,0,7748,7749,1,0,0,0,7749,
        7756,3,1160,580,0,7750,7752,5,75,0,0,7751,7753,5,750,0,0,7752,7751,
        1,0,0,0,7752,7753,1,0,0,0,7753,7754,1,0,0,0,7754,7756,3,1160,580,
        0,7755,7721,1,0,0,0,7755,7727,1,0,0,0,7755,7734,1,0,0,0,7755,7739,
        1,0,0,0,7755,7744,1,0,0,0,7755,7750,1,0,0,0,7756,969,1,0,0,0,7757,
        7758,5,561,0,0,7758,7762,3,1180,590,0,7759,7761,3,968,484,0,7760,
        7759,1,0,0,0,7761,7764,1,0,0,0,7762,7760,1,0,0,0,7762,7763,1,0,0,
        0,7763,971,1,0,0,0,7764,7762,1,0,0,0,7765,7766,5,776,0,0,7766,7771,
        3,974,487,0,7767,7768,5,773,0,0,7768,7770,3,974,487,0,7769,7767,
        1,0,0,0,7770,7773,1,0,0,0,7771,7769,1,0,0,0,7771,7772,1,0,0,0,7772,
        7774,1,0,0,0,7773,7771,1,0,0,0,7774,7775,5,777,0,0,7775,973,1,0,
        0,0,7776,7779,3,686,343,0,7777,7779,5,329,0,0,7778,7776,1,0,0,0,
        7778,7777,1,0,0,0,7779,975,1,0,0,0,7780,7781,5,130,0,0,7781,7782,
        5,750,0,0,7782,7783,3,1026,513,0,7783,977,1,0,0,0,7784,7785,5,231,
        0,0,7785,7786,5,174,0,0,7786,979,1,0,0,0,7787,7788,5,231,0,0,7788,
        7789,3,760,380,0,7789,7790,5,174,0,0,7790,981,1,0,0,0,7791,7793,
        7,124,0,0,7792,7791,1,0,0,0,7792,7793,1,0,0,0,7793,7794,1,0,0,0,
        7794,7795,3,984,492,0,7795,983,1,0,0,0,7796,7797,3,1108,554,0,7797,
        7798,3,988,494,0,7798,985,1,0,0,0,7799,7800,5,69,0,0,7800,7801,3,
        938,469,0,7801,987,1,0,0,0,7802,7804,3,916,458,0,7803,7805,3,986,
        493,0,7804,7803,1,0,0,0,7804,7805,1,0,0,0,7805,989,1,0,0,0,7806,
        7807,5,776,0,0,7807,7808,3,1058,529,0,7808,7809,5,773,0,0,7809,7810,
        3,1058,529,0,7810,7811,5,777,0,0,7811,991,1,0,0,0,7812,7817,3,1074,
        537,0,7813,7814,5,773,0,0,7814,7816,3,1074,537,0,7815,7813,1,0,0,
        0,7816,7819,1,0,0,0,7817,7815,1,0,0,0,7817,7818,1,0,0,0,7818,993,
        1,0,0,0,7819,7817,1,0,0,0,7820,7825,3,996,498,0,7821,7822,5,773,
        0,0,7822,7824,3,996,498,0,7823,7821,1,0,0,0,7824,7827,1,0,0,0,7825,
        7823,1,0,0,0,7825,7826,1,0,0,0,7826,995,1,0,0,0,7827,7825,1,0,0,
        0,7828,7829,3,1046,523,0,7829,7832,5,750,0,0,7830,7833,3,676,338,
        0,7831,7833,5,128,0,0,7832,7830,1,0,0,0,7832,7831,1,0,0,0,7833,997,
        1,0,0,0,7834,7835,3,758,379,0,7835,7836,3,936,468,0,7836,999,1,0,
        0,0,7837,7839,5,71,0,0,7838,7840,3,1002,501,0,7839,7838,1,0,0,0,
        7840,7841,1,0,0,0,7841,7839,1,0,0,0,7841,7842,1,0,0,0,7842,1001,
        1,0,0,0,7843,7844,5,579,0,0,7844,7845,5,45,0,0,7845,7856,3,1156,
        578,0,7846,7848,5,392,0,0,7847,7846,1,0,0,0,7847,7848,1,0,0,0,7848,
        7849,1,0,0,0,7849,7850,5,157,0,0,7850,7851,5,45,0,0,7851,7856,3,
        1156,578,0,7852,7853,5,167,0,0,7853,7854,5,45,0,0,7854,7856,3,1156,
        578,0,7855,7843,1,0,0,0,7855,7847,1,0,0,0,7855,7852,1,0,0,0,7856,
        1003,1,0,0,0,7857,7859,5,278,0,0,7858,7860,3,1006,503,0,7859,7858,
        1,0,0,0,7860,7861,1,0,0,0,7861,7859,1,0,0,0,7861,7862,1,0,0,0,7862,
        1005,1,0,0,0,7863,7864,7,125,0,0,7864,7865,5,45,0,0,7865,7866,3,
        1156,578,0,7866,1007,1,0,0,0,7867,7872,3,1026,513,0,7868,7869,5,
        773,0,0,7869,7871,3,1026,513,0,7870,7868,1,0,0,0,7871,7874,1,0,0,
        0,7872,7870,1,0,0,0,7872,7873,1,0,0,0,7873,1009,1,0,0,0,7874,7872,
        1,0,0,0,7875,7880,3,1014,507,0,7876,7877,5,773,0,0,7877,7879,3,1014,
        507,0,7878,7876,1,0,0,0,7879,7882,1,0,0,0,7880,7878,1,0,0,0,7880,
        7881,1,0,0,0,7881,1011,1,0,0,0,7882,7880,1,0,0,0,7883,7888,3,1016,
        508,0,7884,7885,5,773,0,0,7885,7887,3,1016,508,0,7886,7884,1,0,0,
        0,7887,7890,1,0,0,0,7888,7886,1,0,0,0,7888,7889,1,0,0,0,7889,1013,
        1,0,0,0,7890,7888,1,0,0,0,7891,7918,3,1026,513,0,7892,7916,5,230,
        0,0,7893,7896,5,45,0,0,7894,7895,4,507,200,0,7895,7897,5,406,0,0,
        7896,7894,1,0,0,0,7896,7897,1,0,0,0,7897,7898,1,0,0,0,7898,7917,
        3,1156,578,0,7899,7900,5,645,0,0,7900,7906,3,1180,590,0,7901,7902,
        5,17,0,0,7902,7907,3,1158,579,0,7903,7904,4,507,201,0,7904,7905,
        5,45,0,0,7905,7907,3,1156,578,0,7906,7901,1,0,0,0,7906,7903,1,0,
        0,0,7906,7907,1,0,0,0,7907,7917,1,0,0,0,7908,7911,4,507,202,0,7909,
        7910,5,645,0,0,7910,7912,3,1180,590,0,7911,7909,1,0,0,0,7911,7912,
        1,0,0,0,7912,7913,1,0,0,0,7913,7914,5,45,0,0,7914,7915,5,734,0,0,
        7915,7917,5,406,0,0,7916,7893,1,0,0,0,7916,7899,1,0,0,0,7916,7908,
        1,0,0,0,7917,7919,1,0,0,0,7918,7892,1,0,0,0,7918,7919,1,0,0,0,7919,
        1015,1,0,0,0,7920,7949,3,1026,513,0,7921,7944,5,230,0,0,7922,7923,
        5,645,0,0,7923,7925,3,1180,590,0,7924,7922,1,0,0,0,7924,7925,1,0,
        0,0,7925,7926,1,0,0,0,7926,7927,5,45,0,0,7927,7930,3,1156,578,0,
        7928,7929,5,458,0,0,7929,7931,3,1156,578,0,7930,7928,1,0,0,0,7930,
        7931,1,0,0,0,7931,7933,1,0,0,0,7932,7934,3,1018,509,0,7933,7932,
        1,0,0,0,7933,7934,1,0,0,0,7934,7945,1,0,0,0,7935,7936,5,645,0,0,
        7936,7942,3,1180,590,0,7937,7938,5,17,0,0,7938,7940,3,1158,579,0,
        7939,7941,3,1018,509,0,7940,7939,1,0,0,0,7940,7941,1,0,0,0,7941,
        7943,1,0,0,0,7942,7937,1,0,0,0,7942,7943,1,0,0,0,7943,7945,1,0,0,
        0,7944,7924,1,0,0,0,7944,7935,1,0,0,0,7944,7945,1,0,0,0,7945,7950,
        1,0,0,0,7946,7948,3,1020,510,0,7947,7946,1,0,0,0,7947,7948,1,0,0,
        0,7948,7950,1,0,0,0,7949,7921,1,0,0,0,7949,7947,1,0,0,0,7950,1017,
        1,0,0,0,7951,7952,5,727,0,0,7952,7953,5,101,0,0,7953,7954,5,406,
        0,0,7954,1019,1,0,0,0,7955,7956,5,141,0,0,7956,7957,5,728,0,0,7957,
        7958,5,406,0,0,7958,1021,1,0,0,0,7959,7960,5,458,0,0,7960,7961,3,
        1156,578,0,7961,1023,1,0,0,0,7962,7966,3,1180,590,0,7963,7964,5,
        783,0,0,7964,7967,3,1180,590,0,7965,7967,5,784,0,0,7966,7963,1,0,
        0,0,7966,7965,1,0,0,0,7966,7967,1,0,0,0,7967,1025,1,0,0,0,7968,7974,
        3,1024,512,0,7969,7971,5,105,0,0,7970,7972,3,1188,594,0,7971,7970,
        1,0,0,0,7971,7972,1,0,0,0,7972,7974,1,0,0,0,7973,7968,1,0,0,0,7973,
        7969,1,0,0,0,7974,1027,1,0,0,0,7975,7976,5,275,0,0,7976,7977,3,1154,
        577,0,7977,1029,1,0,0,0,7978,7981,3,1028,514,0,7979,7981,3,358,179,
        0,7980,7978,1,0,0,0,7980,7979,1,0,0,0,7981,1031,1,0,0,0,7982,7983,
        7,126,0,0,7983,1033,1,0,0,0,7984,7985,7,127,0,0,7985,1035,1,0,0,
        0,7986,7987,4,518,203,0,7987,7988,5,405,0,0,7988,7989,3,1132,566,
        0,7989,1037,1,0,0,0,7990,7996,3,1138,569,0,7991,7993,3,1134,567,
        0,7992,7994,3,1138,569,0,7993,7992,1,0,0,0,7993,7994,1,0,0,0,7994,
        7996,1,0,0,0,7995,7990,1,0,0,0,7995,7991,1,0,0,0,7996,1039,1,0,0,
        0,7997,7998,4,520,204,0,7998,8002,3,1128,564,0,7999,8000,4,520,205,
        0,8000,8002,3,1038,519,0,8001,7997,1,0,0,0,8001,7999,1,0,0,0,8002,
        1041,1,0,0,0,8003,8004,3,1128,564,0,8004,1043,1,0,0,0,8005,8006,
        5,776,0,0,8006,8011,3,1042,521,0,8007,8008,5,773,0,0,8008,8010,3,
        1042,521,0,8009,8007,1,0,0,0,8010,8013,1,0,0,0,8011,8009,1,0,0,0,
        8011,8012,1,0,0,0,8012,8014,1,0,0,0,8013,8011,1,0,0,0,8014,8015,
        5,777,0,0,8015,1045,1,0,0,0,8016,8017,3,1038,519,0,8017,1047,1,0,
        0,0,8018,8021,3,1046,523,0,8019,8021,3,1054,527,0,8020,8018,1,0,
        0,0,8020,8019,1,0,0,0,8021,1049,1,0,0,0,8022,8023,3,1128,564,0,8023,
        1051,1,0,0,0,8024,8025,3,1038,519,0,8025,1053,1,0,0,0,8026,8027,
        3,1128,564,0,8027,8031,5,772,0,0,8028,8029,3,1128,564,0,8029,8030,
        5,772,0,0,8030,8032,1,0,0,0,8031,8028,1,0,0,0,8031,8032,1,0,0,0,
        8032,8033,1,0,0,0,8033,8034,5,760,0,0,8034,1055,1,0,0,0,8035,8036,
        3,1128,564,0,8036,1057,1,0,0,0,8037,8038,3,1128,564,0,8038,1059,
        1,0,0,0,8039,8040,3,1134,567,0,8040,1061,1,0,0,0,8041,8042,3,1134,
        567,0,8042,1063,1,0,0,0,8043,8044,3,1134,567,0,8044,1065,1,0,0,0,
        8045,8046,3,1134,567,0,8046,1067,1,0,0,0,8047,8048,3,1134,567,0,
        8048,1069,1,0,0,0,8049,8050,3,1134,567,0,8050,1071,1,0,0,0,8051,
        8054,3,1134,567,0,8052,8054,3,1138,569,0,8053,8051,1,0,0,0,8053,
        8052,1,0,0,0,8054,1073,1,0,0,0,8055,8058,3,1134,567,0,8056,8058,
        3,1138,569,0,8057,8055,1,0,0,0,8057,8056,1,0,0,0,8058,1075,1,0,0,
        0,8059,8060,3,1128,564,0,8060,1077,1,0,0,0,8061,8062,3,1128,564,
        0,8062,1079,1,0,0,0,8063,8064,3,1128,564,0,8064,1081,1,0,0,0,8065,
        8066,3,1128,564,0,8066,1083,1,0,0,0,8067,8068,3,1134,567,0,8068,
        1085,1,0,0,0,8069,8070,3,1134,567,0,8070,1087,1,0,0,0,8071,8072,
        3,1128,564,0,8072,1089,1,0,0,0,8073,8074,3,1180,590,0,8074,1091,
        1,0,0,0,8075,8076,3,1180,590,0,8076,1093,1,0,0,0,8077,8078,3,1180,
        590,0,8078,1095,1,0,0,0,8079,8082,3,1134,567,0,8080,8082,3,1138,
        569,0,8081,8079,1,0,0,0,8081,8080,1,0,0,0,8082,1097,1,0,0,0,8083,
        8084,3,1058,529,0,8084,8085,3,1138,569,0,8085,1099,1,0,0,0,8086,
        8094,3,1128,564,0,8087,8088,5,772,0,0,8088,8095,5,760,0,0,8089,8092,
        3,1138,569,0,8090,8091,5,772,0,0,8091,8093,5,760,0,0,8092,8090,1,
        0,0,0,8092,8093,1,0,0,0,8093,8095,1,0,0,0,8094,8087,1,0,0,0,8094,
        8089,1,0,0,0,8094,8095,1,0,0,0,8095,1101,1,0,0,0,8096,8099,3,1134,
        567,0,8097,8099,3,1138,569,0,8098,8096,1,0,0,0,8098,8097,1,0,0,0,
        8099,1103,1,0,0,0,8100,8105,3,1102,551,0,8101,8102,5,773,0,0,8102,
        8104,3,1102,551,0,8103,8101,1,0,0,0,8104,8107,1,0,0,0,8105,8103,
        1,0,0,0,8105,8106,1,0,0,0,8106,1105,1,0,0,0,8107,8105,1,0,0,0,8108,
        8113,3,1100,550,0,8109,8110,5,773,0,0,8110,8112,3,1100,550,0,8111,
        8109,1,0,0,0,8112,8115,1,0,0,0,8113,8111,1,0,0,0,8113,8114,1,0,0,
        0,8114,1107,1,0,0,0,8115,8113,1,0,0,0,8116,8117,3,1128,564,0,8117,
        1109,1,0,0,0,8118,8121,3,1126,563,0,8119,8121,3,1204,602,0,8120,
        8118,1,0,0,0,8120,8119,1,0,0,0,8121,1111,1,0,0,0,8122,8123,3,1110,
        555,0,8123,1113,1,0,0,0,8124,8127,3,1126,563,0,8125,8127,3,1210,
        605,0,8126,8124,1,0,0,0,8126,8125,1,0,0,0,8127,1115,1,0,0,0,8128,
        8129,3,1114,557,0,8129,1117,1,0,0,0,8130,8131,3,1128,564,0,8131,
        1119,1,0,0,0,8132,8133,3,1154,577,0,8133,1121,1,0,0,0,8134,8135,
        3,1128,564,0,8135,1123,1,0,0,0,8136,8137,3,1128,564,0,8137,1125,
        1,0,0,0,8138,8142,7,128,0,0,8139,8140,4,563,206,0,8140,8142,5,798,
        0,0,8141,8138,1,0,0,0,8141,8139,1,0,0,0,8142,1127,1,0,0,0,8143,8146,
        3,1126,563,0,8144,8146,3,1198,599,0,8145,8143,1,0,0,0,8145,8144,
        1,0,0,0,8146,1129,1,0,0,0,8147,8152,3,1128,564,0,8148,8149,5,773,
        0,0,8149,8151,3,1128,564,0,8150,8148,1,0,0,0,8151,8154,1,0,0,0,8152,
        8150,1,0,0,0,8152,8153,1,0,0,0,8153,1131,1,0,0,0,8154,8152,1,0,0,
        0,8155,8156,5,776,0,0,8156,8157,3,1130,565,0,8157,8158,5,777,0,0,
        8158,1133,1,0,0,0,8159,8161,3,1128,564,0,8160,8162,3,1138,569,0,
        8161,8160,1,0,0,0,8161,8162,1,0,0,0,8162,1135,1,0,0,0,8163,8168,
        3,1128,564,0,8164,8166,3,1138,569,0,8165,8167,3,1138,569,0,8166,
        8165,1,0,0,0,8166,8167,1,0,0,0,8167,8169,1,0,0,0,8168,8164,1,0,0,
        0,8168,8169,1,0,0,0,8169,8175,1,0,0,0,8170,8171,4,568,207,0,8171,
        8172,3,1138,569,0,8172,8173,3,1138,569,0,8173,8175,1,0,0,0,8174,
        8163,1,0,0,0,8174,8170,1,0,0,0,8175,1137,1,0,0,0,8176,8177,5,772,
        0,0,8177,8178,3,1128,564,0,8178,1139,1,0,0,0,8179,8180,7,129,0,0,
        8180,1141,1,0,0,0,8181,8182,7,130,0,0,8182,1143,1,0,0,0,8183,8184,
        7,131,0,0,8184,1145,1,0,0,0,8185,8191,5,747,0,0,8186,8187,4,573,
        208,0,8187,8191,5,788,0,0,8188,8191,5,749,0,0,8189,8191,5,748,0,
        0,8190,8185,1,0,0,0,8190,8186,1,0,0,0,8190,8188,1,0,0,0,8190,8189,
        1,0,0,0,8191,1147,1,0,0,0,8192,8202,3,1160,580,0,8193,8202,3,1166,
        583,0,8194,8202,3,1172,586,0,8195,8202,3,1170,585,0,8196,8202,3,
        1168,584,0,8197,8199,5,794,0,0,8198,8197,1,0,0,0,8198,8199,1,0,0,
        0,8199,8200,1,0,0,0,8200,8202,7,132,0,0,8201,8192,1,0,0,0,8201,8193,
        1,0,0,0,8201,8194,1,0,0,0,8201,8195,1,0,0,0,8201,8196,1,0,0,0,8201,
        8198,1,0,0,0,8202,1149,1,0,0,0,8203,8209,3,1148,574,0,8204,8205,
        5,758,0,0,8205,8209,3,1140,570,0,8206,8207,5,759,0,0,8207,8209,3,
        1140,570,0,8208,8203,1,0,0,0,8208,8204,1,0,0,0,8208,8206,1,0,0,0,
        8209,1151,1,0,0,0,8210,8211,5,776,0,0,8211,8216,3,1156,578,0,8212,
        8213,5,773,0,0,8213,8215,3,1156,578,0,8214,8212,1,0,0,0,8215,8218,
        1,0,0,0,8216,8214,1,0,0,0,8216,8217,1,0,0,0,8217,8219,1,0,0,0,8218,
        8216,1,0,0,0,8219,8220,5,777,0,0,8220,1153,1,0,0,0,8221,8225,5,799,
        0,0,8222,8223,4,577,209,0,8223,8225,5,798,0,0,8224,8221,1,0,0,0,
        8224,8222,1,0,0,0,8225,1155,1,0,0,0,8226,8230,3,1154,577,0,8227,
        8230,5,788,0,0,8228,8230,5,789,0,0,8229,8226,1,0,0,0,8229,8227,1,
        0,0,0,8229,8228,1,0,0,0,8230,1157,1,0,0,0,8231,8235,3,1154,577,0,
        8232,8233,4,579,210,0,8233,8235,5,788,0,0,8234,8231,1,0,0,0,8234,
        8232,1,0,0,0,8235,1159,1,0,0,0,8236,8238,5,794,0,0,8237,8236,1,0,
        0,0,8237,8238,1,0,0,0,8238,8239,1,0,0,0,8239,8242,3,1154,577,0,8240,
        8242,5,796,0,0,8241,8237,1,0,0,0,8241,8240,1,0,0,0,8242,8246,1,0,
        0,0,8243,8245,3,1154,577,0,8244,8243,1,0,0,0,8245,8248,1,0,0,0,8246,
        8244,1,0,0,0,8246,8247,1,0,0,0,8247,1161,1,0,0,0,8248,8246,1,0,0,
        0,8249,8250,3,1154,577,0,8250,1163,1,0,0,0,8251,8256,3,1154,577,
        0,8252,8253,5,773,0,0,8253,8255,3,1154,577,0,8254,8252,1,0,0,0,8255,
        8258,1,0,0,0,8256,8254,1,0,0,0,8256,8257,1,0,0,0,8257,1165,1,0,0,
        0,8258,8256,1,0,0,0,8259,8260,7,131,0,0,8260,1167,1,0,0,0,8261,8262,
        7,133,0,0,8262,1169,1,0,0,0,8263,8264,7,134,0,0,8264,1171,1,0,0,
        0,8265,8266,5,116,0,0,8266,8272,5,799,0,0,8267,8268,5,586,0,0,8268,
        8272,5,799,0,0,8269,8270,5,583,0,0,8270,8272,5,799,0,0,8271,8265,
        1,0,0,0,8271,8267,1,0,0,0,8271,8269,1,0,0,0,8272,1173,1,0,0,0,8273,
        8276,3,922,461,0,8274,8276,3,1178,589,0,8275,8273,1,0,0,0,8275,8274,
        1,0,0,0,8276,1175,1,0,0,0,8277,8278,3,1178,589,0,8278,1177,1,0,0,
        0,8279,8280,5,776,0,0,8280,8281,5,747,0,0,8281,8282,5,773,0,0,8282,
        8283,5,747,0,0,8283,8284,5,777,0,0,8284,1179,1,0,0,0,8285,8288,3,
        1128,564,0,8286,8288,3,1154,577,0,8287,8285,1,0,0,0,8287,8286,1,
        0,0,0,8288,1181,1,0,0,0,8289,8292,3,1126,563,0,8290,8292,3,1212,
        606,0,8291,8289,1,0,0,0,8291,8290,1,0,0,0,8292,1183,1,0,0,0,8293,
        8296,3,1114,557,0,8294,8296,3,1154,577,0,8295,8293,1,0,0,0,8295,
        8294,1,0,0,0,8296,1185,1,0,0,0,8297,8300,3,1146,573,0,8298,8300,
        3,1126,563,0,8299,8297,1,0,0,0,8299,8298,1,0,0,0,8300,1187,1,0,0,
        0,8301,8302,5,776,0,0,8302,8303,5,777,0,0,8303,1189,1,0,0,0,8304,
        8305,7,135,0,0,8305,1191,1,0,0,0,8306,8307,7,136,0,0,8307,1193,1,
        0,0,0,8308,8309,5,214,0,0,8309,8315,5,772,0,0,8310,8311,5,284,0,
        0,8311,8315,5,772,0,0,8312,8313,5,502,0,0,8313,8315,5,772,0,0,8314,
        8308,1,0,0,0,8314,8310,1,0,0,0,8314,8312,1,0,0,0,8315,1195,1,0,0,
        0,8316,8317,5,658,0,0,8317,8327,5,772,0,0,8318,8319,5,673,0,0,8319,
        8327,5,772,0,0,8320,8321,5,214,0,0,8321,8327,5,772,0,0,8322,8323,
        5,284,0,0,8323,8327,5,772,0,0,8324,8325,5,502,0,0,8325,8327,5,772,
        0,0,8326,8316,1,0,0,0,8326,8318,1,0,0,0,8326,8320,1,0,0,0,8326,8322,
        1,0,0,0,8326,8324,1,0,0,0,8327,1197,1,0,0,0,8328,8336,4,599,211,
        0,8329,8337,3,1204,602,0,8330,8337,3,1216,608,0,8331,8337,5,173,
        0,0,8332,8333,4,599,212,0,8333,8337,5,510,0,0,8334,8335,4,599,213,
        0,8335,8337,5,714,0,0,8336,8329,1,0,0,0,8336,8330,1,0,0,0,8336,8331,
        1,0,0,0,8336,8332,1,0,0,0,8336,8334,1,0,0,0,8337,8346,1,0,0,0,8338,
        8344,3,1208,604,0,8339,8344,3,1200,600,0,8340,8344,3,1202,601,0,
        8341,8344,3,1206,603,0,8342,8344,3,1214,607,0,8343,8338,1,0,0,0,
        8343,8339,1,0,0,0,8343,8340,1,0,0,0,8343,8341,1,0,0,0,8343,8342,
        1,0,0,0,8344,8346,1,0,0,0,8345,8328,1,0,0,0,8345,8343,1,0,0,0,8346,
        1199,1,0,0,0,8347,8348,7,137,0,0,8348,1201,1,0,0,0,8349,8350,7,138,
        0,0,8350,1203,1,0,0,0,8351,8362,4,602,214,0,8352,8363,3,1218,609,
        0,8353,8363,5,170,0,0,8354,8363,5,188,0,0,8355,8363,5,369,0,0,8356,
        8363,5,423,0,0,8357,8363,5,427,0,0,8358,8363,5,451,0,0,8359,8363,
        5,459,0,0,8360,8363,5,709,0,0,8361,8363,5,565,0,0,8362,8352,1,0,
        0,0,8362,8353,1,0,0,0,8362,8354,1,0,0,0,8362,8355,1,0,0,0,8362,8356,
        1,0,0,0,8362,8357,1,0,0,0,8362,8358,1,0,0,0,8362,8359,1,0,0,0,8362,
        8360,1,0,0,0,8362,8361,1,0,0,0,8363,8370,1,0,0,0,8364,8368,3,1208,
        604,0,8365,8368,3,1206,603,0,8366,8368,3,1214,607,0,8367,8364,1,
        0,0,0,8367,8365,1,0,0,0,8367,8366,1,0,0,0,8368,8370,1,0,0,0,8369,
        8351,1,0,0,0,8369,8367,1,0,0,0,8370,1205,1,0,0,0,8371,8372,7,139,
        0,0,8372,1207,1,0,0,0,8373,8377,7,140,0,0,8374,8375,4,604,215,0,
        8375,8377,7,141,0,0,8376,8373,1,0,0,0,8376,8374,1,0,0,0,8377,1209,
        1,0,0,0,8378,8381,4,605,216,0,8379,8382,3,1218,609,0,8380,8382,3,
        1216,608,0,8381,8379,1,0,0,0,8381,8380,1,0,0,0,8382,8389,1,0,0,0,
        8383,8387,3,1208,604,0,8384,8387,3,1202,601,0,8385,8387,3,1214,607,
        0,8386,8383,1,0,0,0,8386,8384,1,0,0,0,8386,8385,1,0,0,0,8387,8389,
        1,0,0,0,8388,8378,1,0,0,0,8388,8386,1,0,0,0,8389,1211,1,0,0,0,8390,
        8395,3,1208,604,0,8391,8395,3,1200,600,0,8392,8395,3,1202,601,0,
        8393,8395,3,1206,603,0,8394,8390,1,0,0,0,8394,8391,1,0,0,0,8394,
        8392,1,0,0,0,8394,8393,1,0,0,0,8395,1213,1,0,0,0,8396,8397,7,136,
        0,0,8397,1215,1,0,0,0,8398,8404,7,142,0,0,8399,8400,4,608,217,0,
        8400,8404,5,510,0,0,8401,8402,4,608,218,0,8402,8404,5,234,0,0,8403,
        8398,1,0,0,0,8403,8399,1,0,0,0,8403,8401,1,0,0,0,8404,1217,1,0,0,
        0,8405,8415,7,143,0,0,8406,8407,4,609,219,0,8407,8415,5,510,0,0,
        8408,8409,4,609,220,0,8409,8415,7,144,0,0,8410,8411,4,609,221,0,
        8411,8415,7,145,0,0,8412,8413,4,609,222,0,8413,8415,5,660,0,0,8414,
        8405,1,0,0,0,8414,8406,1,0,0,0,8414,8408,1,0,0,0,8414,8410,1,0,0,
        0,8414,8412,1,0,0,0,8415,1219,1,0,0,0,1123,1223,1227,1230,1232,1268,
        1276,1281,1297,1304,1311,1314,1321,1326,1329,1334,1340,1342,1346,
        1350,1359,1363,1368,1374,1381,1385,1390,1395,1402,1405,1411,1414,
        1421,1431,1436,1441,1449,1455,1459,1464,1473,1479,1485,1491,1500,
        1506,1515,1529,1533,1539,1543,1549,1553,1558,1561,1567,1573,1579,
        1583,1588,1592,1596,1604,1606,1619,1627,1635,1639,1668,1684,1687,
        1696,1701,1707,1712,1716,1721,1725,1729,1733,1737,1741,1743,1754,
        1762,1771,1776,1779,1784,1791,1799,1803,1808,1815,1820,1825,1833,
        1837,1842,1845,1848,1851,1858,1865,1869,1893,1897,1903,1910,1913,
        1917,1924,1927,1930,1933,1942,1949,1954,1957,1960,1966,1972,1975,
        1980,1990,1993,1999,2005,2015,2018,2026,2032,2043,2046,2051,2070,
        2073,2076,2082,2085,2087,2093,2103,2113,2116,2119,2124,2130,2143,
        2147,2152,2161,2178,2197,2206,2209,2217,2222,2226,2233,2238,2253,
        2257,2263,2269,2275,2281,2287,2292,2296,2304,2310,2316,2321,2324,
        2327,2336,2339,2350,2362,2371,2375,2384,2387,2393,2395,2399,2406,
        2419,2426,2432,2435,2452,2472,2476,2482,2488,2494,2499,2506,2513,
        2518,2521,2525,2529,2534,2538,2542,2548,2553,2556,2560,2566,2570,
        2574,2582,2590,2599,2608,2621,2624,2628,2634,2642,2647,2650,2653,
        2656,2659,2661,2667,2669,2684,2690,2697,2700,2702,2704,2714,2716,
        2720,2723,2726,2730,2735,2741,2744,2747,2753,2756,2765,2774,2778,
        2782,2788,2793,2798,2803,2807,2813,2824,2827,2832,2838,2841,2844,
        2847,2850,2864,2867,2871,2875,2881,2886,2890,2895,2898,2902,2908,
        2912,2916,2925,2930,2934,2938,2941,2945,2948,2950,2954,2960,2964,
        2966,2970,2974,2978,2985,2987,2996,3002,3007,3010,3013,3016,3019,
        3023,3038,3042,3048,3051,3054,3060,3065,3069,3072,3080,3082,3095,
        3107,3112,3115,3118,3123,3129,3145,3165,3174,3178,3185,3190,3199,
        3206,3217,3224,3233,3242,3254,3259,3266,3270,3276,3281,3286,3290,
        3296,3302,3304,3307,3311,3321,3326,3331,3338,3347,3355,3360,3364,
        3370,3373,3376,3380,3384,3394,3398,3401,3404,3409,3415,3419,3425,
        3428,3430,3435,3447,3456,3469,3472,3477,3484,3488,3492,3494,3508,
        3515,3524,3530,3539,3543,3547,3557,3559,3567,3574,3579,3583,3587,
        3590,3596,3599,3602,3608,3615,3620,3624,3627,3630,3633,3635,3639,
        3647,3653,3657,3662,3665,3668,3671,3673,3678,3687,3700,3702,3706,
        3712,3715,3718,3724,3731,3733,3741,3747,3752,3755,3762,3764,3773,
        3782,3791,3799,3803,3810,3813,3815,3823,3829,3839,3846,3940,3944,
        3950,3964,3972,3975,3987,3992,3998,4005,4012,4019,4026,4033,4040,
        4043,4050,4058,4066,4076,4082,4086,4090,4095,4098,4100,4109,4115,
        4122,4127,4132,4137,4140,4147,4160,4166,4172,4179,4187,4193,4205,
        4207,4213,4217,4219,4223,4236,4242,4250,4261,4265,4278,4285,4291,
        4298,4300,4310,4318,4321,4326,4330,4336,4339,4344,4355,4357,4369,
        4374,4382,4388,4390,4392,4398,4410,4415,4417,4421,4427,4430,4433,
        4443,4445,4451,4458,4464,4474,4478,4483,4500,4516,4521,4529,4537,
        4542,4548,4551,4553,4562,4568,4574,4576,4580,4591,4601,4606,4611,
        4616,4624,4628,4633,4642,4654,4668,4677,4679,4686,4693,4697,4703,
        4711,4718,4722,4728,4735,4738,4747,4753,4758,4781,4784,4800,4805,
        4808,4812,4815,4829,4835,4840,4843,4845,4849,4854,4856,4868,4874,
        4896,4900,4902,4910,4914,4923,4933,4940,4943,4947,4950,4953,4957,
        4960,4964,4967,4972,4975,4980,4983,4989,4993,4999,5002,5011,5013,
        5019,5023,5026,5029,5033,5039,5042,5045,5055,5059,5068,5071,5076,
        5079,5082,5086,5089,5094,5098,5106,5119,5137,5142,5147,5155,5161,
        5163,5167,5170,5184,5194,5198,5206,5209,5213,5223,5227,5234,5239,
        5247,5252,5258,5265,5270,5276,5283,5293,5295,5303,5308,5312,5315,
        5322,5327,5331,5342,5350,5354,5357,5360,5364,5368,5373,5379,5383,
        5394,5397,5400,5403,5411,5415,5420,5428,5436,5442,5460,5470,5476,
        5490,5493,5497,5508,5510,5519,5531,5533,5540,5546,5552,5560,5571,
        5575,5604,5606,5614,5618,5635,5642,5656,5668,5674,5681,5684,5718,
        5726,5728,5740,5745,5751,5759,5766,5772,5777,5783,5788,5793,5799,
        5804,5810,5818,5826,5834,5842,5847,5853,5858,5862,5866,5871,5873,
        5892,5896,5903,5915,5918,5922,5927,5932,5936,5946,5955,5957,5960,
        5969,5976,5989,5994,6001,6007,6033,6064,6084,6090,6094,6121,6133,
        6146,6150,6154,6182,6238,6248,6252,6264,6269,6282,6302,6306,6323,
        6326,6331,6334,6343,6347,6353,6359,6363,6374,6380,6382,6389,6396,
        6400,6407,6412,6416,6421,6425,6429,6434,6439,6441,6445,6458,6462,
        6465,6469,6473,6477,6482,6486,6490,6499,6501,6508,6514,6522,6543,
        6548,6555,6578,6594,6604,6608,6615,6618,6629,6638,6641,6648,6653,
        6679,6685,6691,6695,6705,6709,6722,6734,6752,6760,6770,6773,6778,
        6782,6789,6794,6801,6809,6812,6817,6825,6828,6842,6845,6858,6862,
        6864,6869,6874,6880,6886,6892,6897,6900,6906,6911,6914,6920,6924,
        6930,6932,6935,6941,6947,6955,6957,6959,6963,6969,6974,6978,6983,
        6989,6996,6999,7001,7004,7014,7018,7024,7031,7036,7050,7055,7063,
        7068,7072,7075,7080,7084,7092,7100,7102,7109,7117,7124,7127,7135,
        7143,7145,7151,7157,7161,7168,7179,7188,7191,7196,7198,7201,7204,
        7208,7211,7215,7220,7223,7227,7230,7234,7239,7243,7255,7259,7265,
        7268,7273,7277,7281,7286,7295,7298,7302,7306,7309,7313,7317,7322,
        7327,7333,7338,7343,7345,7350,7357,7365,7371,7373,7377,7381,7385,
        7389,7403,7410,7414,7419,7425,7429,7435,7439,7443,7448,7453,7458,
        7463,7469,7475,7480,7485,7490,7495,7500,7505,7510,7520,7526,7532,
        7538,7541,7548,7553,7556,7560,7563,7567,7572,7576,7581,7585,7594,
        7597,7600,7603,7607,7611,7615,7630,7633,7635,7640,7649,7652,7656,
        7669,7681,7686,7691,7700,7705,7714,7719,7723,7727,7731,7736,7741,
        7747,7752,7755,7762,7771,7778,7792,7804,7817,7825,7832,7841,7847,
        7855,7861,7872,7880,7888,7896,7906,7911,7916,7918,7924,7930,7933,
        7940,7942,7944,7947,7949,7966,7971,7973,7980,7993,7995,8001,8011,
        8020,8031,8053,8057,8081,8092,8094,8098,8105,8113,8120,8126,8141,
        8145,8152,8161,8166,8168,8174,8190,8198,8201,8208,8216,8224,8229,
        8234,8237,8241,8246,8256,8271,8275,8287,8291,8295,8299,8314,8326,
        8336,8343,8345,8362,8367,8369,8376,8381,8386,8388,8394,8403,8414
    ]

class MySQLParser ( MySQLBaseRecognizer ):

    grammarFileName = "MySQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'='", "':='", "'<=>'", "'>='", 
                     "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", 
                     "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", 
                     "'('", "')'", "'{'", "'}'", "'_'", "'->'", "'->>'", 
                     "'@'", "<INVALID>", "'@@'", "'\\N'", "'?'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL", 
                      "ACTION_SYMBOL", "ADD_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", 
                      "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", "ALGORITHM_SYMBOL", 
                      "ALL_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYSE_SYMBOL", 
                      "ANALYZE_SYMBOL", "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL", 
                      "ASC_SYMBOL", "ASCII_SYMBOL", "ASENSITIVE_SYMBOL", 
                      "AT_SYMBOL", "AUTHORS_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", 
                      "AUTO_INCREMENT_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", 
                      "AVG_SYMBOL", "BACKUP_SYMBOL", "BEFORE_SYMBOL", "BEGIN_SYMBOL", 
                      "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL", 
                      "BINLOG_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", 
                      "BIT_OR_SYMBOL", "BIT_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", 
                      "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", "BOOL_SYMBOL", "BOTH_SYMBOL", 
                      "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", "CACHE_SYMBOL", 
                      "CALL_SYMBOL", "CASCADE_SYMBOL", "CASCADED_SYMBOL", 
                      "CASE_SYMBOL", "CAST_SYMBOL", "CATALOG_NAME_SYMBOL", 
                      "CHAIN_SYMBOL", "CHANGE_SYMBOL", "CHANGED_SYMBOL", 
                      "CHANNEL_SYMBOL", "CHARSET_SYMBOL", "CHARACTER_SYMBOL", 
                      "CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", 
                      "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", "CLIENT_SYMBOL", 
                      "CLOSE_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", 
                      "COLLATE_SYMBOL", "COLLATION_SYMBOL", "COLUMNS_SYMBOL", 
                      "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", 
                      "COMMENT_SYMBOL", "COMMITTED_SYMBOL", "COMMIT_SYMBOL", 
                      "COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", 
                      "COMPRESSION_SYMBOL", "CONCURRENT_SYMBOL", "CONDITION_SYMBOL", 
                      "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", "CONSTRAINT_SYMBOL", 
                      "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
                      "CONSTRAINT_SCHEMA_SYMBOL", "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", 
                      "CONTINUE_SYMBOL", "CONTRIBUTORS_SYMBOL", "CONVERT_SYMBOL", 
                      "COUNT_SYMBOL", "CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", 
                      "CUBE_SYMBOL", "CURDATE_SYMBOL", "CURRENT_SYMBOL", 
                      "CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", "CURRENT_TIMESTAMP_SYMBOL", 
                      "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", 
                      "CURTIME_SYMBOL", "DATABASE_SYMBOL", "DATABASES_SYMBOL", 
                      "DATAFILE_SYMBOL", "DATA_SYMBOL", "DATETIME_SYMBOL", 
                      "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL", 
                      "DAYOFMONTH_SYMBOL", "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", 
                      "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", "DAY_SYMBOL", 
                      "DEALLOCATE_SYMBOL", "DEC_SYMBOL", "DECIMAL_NUM_SYMBOL", 
                      "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
                      "DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", "DELAYED_SYMBOL", 
                      "DELAY_KEY_WRITE_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", 
                      "DESCRIBE_SYMBOL", "DES_KEY_FILE_SYMBOL", "DETERMINISTIC_SYMBOL", 
                      "DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", 
                      "DISCARD_SYMBOL", "DISK_SYMBOL", "DISTINCT_SYMBOL", 
                      "DISTINCTROW_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", 
                      "DO_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", "DUMPFILE_SYMBOL", 
                      "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "EACH_SYMBOL", 
                      "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL", "ENCLOSED_SYMBOL", 
                      "ENCRYPTION_SYMBOL", "END_SYMBOL", "ENDS_SYMBOL", 
                      "END_OF_INPUT_SYMBOL", "ENGINES_SYMBOL", "ENGINE_SYMBOL", 
                      "ENUM_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", "ESCAPED_SYMBOL", 
                      "ESCAPE_SYMBOL", "EVENTS_SYMBOL", "EVENT_SYMBOL", 
                      "EVERY_SYMBOL", "EXCHANGE_SYMBOL", "EXECUTE_SYMBOL", 
                      "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPANSION_SYMBOL", 
                      "EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", "EXPORT_SYMBOL", 
                      "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", 
                      "FALSE_SYMBOL", "FAST_SYMBOL", "FAULTS_SYMBOL", "FETCH_SYMBOL", 
                      "FIELDS_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", 
                      "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT4_SYMBOL", 
                      "FLOAT8_SYMBOL", "FLOAT_SYMBOL", "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", 
                      "FORCE_SYMBOL", "FOREIGN_SYMBOL", "FOR_SYMBOL", "FORMAT_SYMBOL", 
                      "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", "FULLTEXT_SYMBOL", 
                      "FUNCTION_SYMBOL", "GET_SYMBOL", "GENERAL_SYMBOL", 
                      "GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", 
                      "GEOMETRY_SYMBOL", "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", 
                      "GRANT_SYMBOL", "GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", 
                      "HANDLER_SYMBOL", "HASH_SYMBOL", "HAVING_SYMBOL", 
                      "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOST_SYMBOL", 
                      "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
                      "HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", 
                      "IF_SYMBOL", "IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", 
                      "IMPORT_SYMBOL", "INDEXES_SYMBOL", "INDEX_SYMBOL", 
                      "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
                      "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", 
                      "INSERT_METHOD_SYMBOL", "INSTANCE_SYMBOL", "INSTALL_SYMBOL", 
                      "INTEGER_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL", 
                      "INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
                      "IO_BEFORE_GTIDS_SYMBOL", "IO_THREAD_SYMBOL", "IO_SYMBOL", 
                      "IPC_SYMBOL", "IS_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", 
                      "ITERATE_SYMBOL", "JOIN_SYMBOL", "JSON_SYMBOL", "KEYS_SYMBOL", 
                      "KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", 
                      "LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEADING_SYMBOL", 
                      "LEAVES_SYMBOL", "LEAVE_SYMBOL", "LEFT_SYMBOL", "LESS_SYMBOL", 
                      "LEVEL_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", 
                      "LINES_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", 
                      "LOAD_SYMBOL", "LOCALTIME_SYMBOL", "LOCALTIMESTAMP_SYMBOL", 
                      "LOCAL_SYMBOL", "LOCATOR_SYMBOL", "LOCKS_SYMBOL", 
                      "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "LONGBLOB_SYMBOL", 
                      "LONGTEXT_SYMBOL", "LONG_NUM_SYMBOL", "LONG_SYMBOL", 
                      "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", 
                      "MASTER_BIND_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
                      "MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_LOG_FILE_SYMBOL", 
                      "MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", 
                      "MASTER_PORT_SYMBOL", "MASTER_RETRY_COUNT_SYMBOL", 
                      "MASTER_SERVER_ID_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", 
                      "MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CERT_SYMBOL", 
                      "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
                      "MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", 
                      "MASTER_SSL_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", 
                      "MASTER_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", "MASTER_USER_SYMBOL", 
                      "MASTER_HEARTBEAT_PERIOD_SYMBOL", "MATCH_SYMBOL", 
                      "MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", 
                      "MAX_ROWS_SYMBOL", "MAX_SIZE_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
                      "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL", 
                      "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", 
                      "MEDIUMTEXT_SYMBOL", "MEDIUM_SYMBOL", "MEMORY_SYMBOL", 
                      "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", 
                      "MID_SYMBOL", "MIDDLEINT_SYMBOL", "MIGRATE_SYMBOL", 
                      "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
                      "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", 
                      "MODE_SYMBOL", "MODIFIES_SYMBOL", "MODIFY_SYMBOL", 
                      "MOD_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
                      "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", 
                      "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL", 
                      "NATIONAL_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", 
                      "NCHAR_SYMBOL", "NDB_SYMBOL", "NDBCLUSTER_SYMBOL", 
                      "NEG_SYMBOL", "NEVER_SYMBOL", "NEW_SYMBOL", "NEXT_SYMBOL", 
                      "NODEGROUP_SYMBOL", "NONE_SYMBOL", "NONBLOCKING_SYMBOL", 
                      "NOT_SYMBOL", "NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", 
                      "NO_WRITE_TO_BINLOG_SYMBOL", "NULL_SYMBOL", "NUMBER_SYMBOL", 
                      "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL", "OFFLINE_SYMBOL", 
                      "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", "ON_SYMBOL", 
                      "ONE_SYMBOL", "ONLINE_SYMBOL", "ONLY_SYMBOL", "OPEN_SYMBOL", 
                      "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL", 
                      "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", 
                      "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", "OUT_SYMBOL", 
                      "OWNER_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", 
                      "PARSER_SYMBOL", "PARTIAL_SYMBOL", "PARTITIONING_SYMBOL", 
                      "PARTITIONS_SYMBOL", "PARTITION_SYMBOL", "PASSWORD_SYMBOL", 
                      "PHASE_SYMBOL", "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", 
                      "PLUGIN_SYMBOL", "POINT_SYMBOL", "POLYGON_SYMBOL", 
                      "PORT_SYMBOL", "POSITION_SYMBOL", "PRECEDES_SYMBOL", 
                      "PRECISION_SYMBOL", "PREPARE_SYMBOL", "PRESERVE_SYMBOL", 
                      "PREV_SYMBOL", "PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", 
                      "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", 
                      "PROFILE_SYMBOL", "PROFILES_SYMBOL", "PROXY_SYMBOL", 
                      "PURGE_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", 
                      "QUICK_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_ONLY_SYMBOL", 
                      "READ_SYMBOL", "READ_WRITE_SYMBOL", "REAL_SYMBOL", 
                      "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDOFILE_SYMBOL", 
                      "REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", "REFERENCES_SYMBOL", 
                      "REGEXP_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", 
                      "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", 
                      "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", 
                      "RENAME_SYMBOL", "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", 
                      "REPEATABLE_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL", 
                      "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", "REPLICATE_IGNORE_DB_SYMBOL", 
                      "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
                      "REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
                      "REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", 
                      "RESIGNAL_SYMBOL", "RESTORE_SYMBOL", "RESTRICT_SYMBOL", 
                      "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", 
                      "RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL", 
                      "RIGHT_SYMBOL", "RLIKE_SYMBOL", "ROLLBACK_SYMBOL", 
                      "ROLLUP_SYMBOL", "ROTATE_SYMBOL", "ROUTINE_SYMBOL", 
                      "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", 
                      "ROW_SYMBOL", "RTREE_SYMBOL", "SAVEPOINT_SYMBOL", 
                      "SCHEDULE_SYMBOL", "SCHEMA_SYMBOL", "SCHEMA_NAME_SYMBOL", 
                      "SCHEMAS_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SECOND_SYMBOL", 
                      "SECURITY_SYMBOL", "SELECT_SYMBOL", "SENSITIVE_SYMBOL", 
                      "SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", 
                      "SESSION_SYMBOL", "SERVER_SYMBOL", "SERVER_OPTIONS_SYMBOL", 
                      "SESSION_USER_SYMBOL", "SET_SYMBOL", "SET_VAR_SYMBOL", 
                      "SHARE_SYMBOL", "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", 
                      "SIGNAL_SYMBOL", "SIGNED_SYMBOL", "SIMPLE_SYMBOL", 
                      "SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", 
                      "SNAPSHOT_SYMBOL", "SOME_SYMBOL", "SOCKET_SYMBOL", 
                      "SONAME_SYMBOL", "SOUNDS_SYMBOL", "SOURCE_SYMBOL", 
                      "SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", 
                      "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", 
                      "SQL_AFTER_MTS_GAPS_SYMBOL", "SQL_BEFORE_GTIDS_SYMBOL", 
                      "SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
                      "SQL_CACHE_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", 
                      "SQL_NO_CACHE_SYMBOL", "SQL_SMALL_RESULT_SYMBOL", 
                      "SQL_SYMBOL", "SQL_THREAD_SYMBOL", "SSL_SYMBOL", "STACKED_SYMBOL", 
                      "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL", 
                      "STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", 
                      "STATS_SAMPLE_PAGES_SYMBOL", "STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", 
                      "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL", 
                      "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", 
                      "STRAIGHT_JOIN_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
                      "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITIONS_SYMBOL", 
                      "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
                      "SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", 
                      "SWITCHES_SYMBOL", "SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", 
                      "TABLES_SYMBOL", "TABLESPACE_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL", 
                      "TABLE_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", 
                      "TEMPORARY_SYMBOL", "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", 
                      "TEXT_SYMBOL", "THAN_SYMBOL", "THEN_SYMBOL", "TIMESTAMP_SYMBOL", 
                      "TIMESTAMP_ADD_SYMBOL", "TIMESTAMP_DIFF_SYMBOL", "TIME_SYMBOL", 
                      "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", 
                      "TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", 
                      "TRIGGERS_SYMBOL", "TRIGGER_SYMBOL", "TRIM_SYMBOL", 
                      "TRUE_SYMBOL", "TRUNCATE_SYMBOL", "TYPES_SYMBOL", 
                      "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
                      "UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", 
                      "UNDO_SYMBOL", "UNICODE_SYMBOL", "UNINSTALL_SYMBOL", 
                      "UNION_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", 
                      "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", 
                      "UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", 
                      "USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL", 
                      "USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", 
                      "UTC_TIME_SYMBOL", "VALIDATION_SYMBOL", "VALUES_SYMBOL", 
                      "VALUE_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", 
                      "VARCHARACTER_SYMBOL", "VARIABLES_SYMBOL", "VARIANCE_SYMBOL", 
                      "VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", 
                      "VIEW_SYMBOL", "VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", 
                      "WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL", "WHEN_SYMBOL", 
                      "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL", 
                      "WORK_SYMBOL", "WRAPPER_SYMBOL", "WRITE_SYMBOL", "X509_SYMBOL", 
                      "XA_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", "XOR_SYMBOL", 
                      "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL", "ZEROFILL_SYMBOL", 
                      "PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", 
                      "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", 
                      "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", 
                      "OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", "NOWAIT_SYMBOL", 
                      "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", 
                      "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL", 
                      "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", 
                      "FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", 
                      "LAG_SYMBOL", "LAST_VALUE_SYMBOL", "LEAD_SYMBOL", 
                      "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", 
                      "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", 
                      "PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", 
                      "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL", 
                      "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
                      "NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", 
                      "HISTORY_SYMBOL", "REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", 
                      "RESOURCE_SYMBOL", "SYSTEM_SYMBOL", "VCPU_SYMBOL", 
                      "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
                      "RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", 
                      "ORGANIZATION_SYMBOL", "REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", 
                      "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", "SECONDARY_LOAD_SYMBOL", 
                      "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", 
                      "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
                      "ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", 
                      "RANDOM_SYMBOL", "MASTER_COMPRESSION_ALGORITHM_SYMBOL", 
                      "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", "PRIVILEGE_CHECKS_USER_SYMBOL", 
                      "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", 
                      "PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", 
                      "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", "STREAM_SYMBOL", 
                      "OFF_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
                      "INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", 
                      "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", "INVALID_INPUT", 
                      "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", 
                      "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", 
                      "VERSION_COMMENT_START", "MYSQL_COMMENT_START", "VERSION_COMMENT_END", 
                      "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
                      "NOT_EQUAL2_OPERATOR" ]

    RULE_query = 0
    RULE_simpleStatement = 1
    RULE_alterStatement = 2
    RULE_alterDatabase = 3
    RULE_alterEvent = 4
    RULE_alterLogfileGroup = 5
    RULE_alterLogfileGroupOptions = 6
    RULE_alterLogfileGroupOption = 7
    RULE_alterServer = 8
    RULE_alterTable = 9
    RULE_alterTableActions = 10
    RULE_alterCommandList = 11
    RULE_alterCommandsModifierList = 12
    RULE_standaloneAlterCommands = 13
    RULE_alterPartition = 14
    RULE_alterList = 15
    RULE_alterCommandsModifier = 16
    RULE_alterListItem = 17
    RULE_place = 18
    RULE_restrict = 19
    RULE_alterOrderList = 20
    RULE_alterAlgorithmOption = 21
    RULE_alterLockOption = 22
    RULE_indexLockAndAlgorithm = 23
    RULE_withValidation = 24
    RULE_removePartitioning = 25
    RULE_allOrPartitionNameList = 26
    RULE_alterTablespace = 27
    RULE_alterUndoTablespace = 28
    RULE_undoTableSpaceOptions = 29
    RULE_undoTableSpaceOption = 30
    RULE_alterTablespaceOptions = 31
    RULE_alterTablespaceOption = 32
    RULE_changeTablespaceOption = 33
    RULE_alterView = 34
    RULE_viewTail = 35
    RULE_viewSelect = 36
    RULE_viewCheckOption = 37
    RULE_createStatement = 38
    RULE_createDatabase = 39
    RULE_createDatabaseOption = 40
    RULE_createTable = 41
    RULE_tableElementList = 42
    RULE_tableElement = 43
    RULE_duplicateAsQueryExpression = 44
    RULE_queryExpressionOrParens = 45
    RULE_createRoutine = 46
    RULE_createProcedure = 47
    RULE_createFunction = 48
    RULE_createUdf = 49
    RULE_routineCreateOption = 50
    RULE_routineAlterOptions = 51
    RULE_routineOption = 52
    RULE_createIndex = 53
    RULE_indexNameAndType = 54
    RULE_createIndexTarget = 55
    RULE_createLogfileGroup = 56
    RULE_logfileGroupOptions = 57
    RULE_logfileGroupOption = 58
    RULE_createServer = 59
    RULE_serverOptions = 60
    RULE_serverOption = 61
    RULE_createTablespace = 62
    RULE_createUndoTablespace = 63
    RULE_tsDataFileName = 64
    RULE_tsDataFile = 65
    RULE_tablespaceOptions = 66
    RULE_tablespaceOption = 67
    RULE_tsOptionInitialSize = 68
    RULE_tsOptionUndoRedoBufferSize = 69
    RULE_tsOptionAutoextendSize = 70
    RULE_tsOptionMaxSize = 71
    RULE_tsOptionExtentSize = 72
    RULE_tsOptionNodegroup = 73
    RULE_tsOptionEngine = 74
    RULE_tsOptionWait = 75
    RULE_tsOptionComment = 76
    RULE_tsOptionFileblockSize = 77
    RULE_tsOptionEncryption = 78
    RULE_createView = 79
    RULE_viewReplaceOrAlgorithm = 80
    RULE_viewAlgorithm = 81
    RULE_viewSuid = 82
    RULE_createTrigger = 83
    RULE_triggerFollowsPrecedesClause = 84
    RULE_createEvent = 85
    RULE_createRole = 86
    RULE_createSpatialReference = 87
    RULE_srsAttribute = 88
    RULE_dropStatement = 89
    RULE_dropDatabase = 90
    RULE_dropEvent = 91
    RULE_dropFunction = 92
    RULE_dropProcedure = 93
    RULE_dropIndex = 94
    RULE_dropLogfileGroup = 95
    RULE_dropLogfileGroupOption = 96
    RULE_dropServer = 97
    RULE_dropTable = 98
    RULE_dropTableSpace = 99
    RULE_dropTrigger = 100
    RULE_dropView = 101
    RULE_dropRole = 102
    RULE_dropSpatialReference = 103
    RULE_dropUndoTablespace = 104
    RULE_renameTableStatement = 105
    RULE_renamePair = 106
    RULE_truncateTableStatement = 107
    RULE_importStatement = 108
    RULE_callStatement = 109
    RULE_deleteStatement = 110
    RULE_partitionDelete = 111
    RULE_deleteStatementOption = 112
    RULE_doStatement = 113
    RULE_handlerStatement = 114
    RULE_handlerReadOrScan = 115
    RULE_insertStatement = 116
    RULE_insertLockOption = 117
    RULE_insertFromConstructor = 118
    RULE_fields = 119
    RULE_insertValues = 120
    RULE_insertQueryExpression = 121
    RULE_valueList = 122
    RULE_values = 123
    RULE_valuesReference = 124
    RULE_insertUpdateList = 125
    RULE_loadStatement = 126
    RULE_dataOrXml = 127
    RULE_xmlRowsIdentifiedBy = 128
    RULE_loadDataFileTail = 129
    RULE_loadDataFileTargetList = 130
    RULE_fieldOrVariableList = 131
    RULE_replaceStatement = 132
    RULE_selectStatement = 133
    RULE_selectStatementWithInto = 134
    RULE_queryExpression = 135
    RULE_queryExpressionBody = 136
    RULE_queryExpressionParens = 137
    RULE_queryPrimary = 138
    RULE_querySpecification = 139
    RULE_subquery = 140
    RULE_querySpecOption = 141
    RULE_limitClause = 142
    RULE_simpleLimitClause = 143
    RULE_limitOptions = 144
    RULE_limitOption = 145
    RULE_intoClause = 146
    RULE_procedureAnalyseClause = 147
    RULE_havingClause = 148
    RULE_windowClause = 149
    RULE_windowDefinition = 150
    RULE_windowSpec = 151
    RULE_windowSpecDetails = 152
    RULE_windowFrameClause = 153
    RULE_windowFrameUnits = 154
    RULE_windowFrameExtent = 155
    RULE_windowFrameStart = 156
    RULE_windowFrameBetween = 157
    RULE_windowFrameBound = 158
    RULE_windowFrameExclusion = 159
    RULE_withClause = 160
    RULE_commonTableExpression = 161
    RULE_groupByClause = 162
    RULE_olapOption = 163
    RULE_orderClause = 164
    RULE_direction = 165
    RULE_fromClause = 166
    RULE_tableReferenceList = 167
    RULE_tableValueConstructor = 168
    RULE_explicitTable = 169
    RULE_rowValueExplicit = 170
    RULE_selectOption = 171
    RULE_lockingClauseList = 172
    RULE_lockingClause = 173
    RULE_lockStrengh = 174
    RULE_lockedRowAction = 175
    RULE_selectItemList = 176
    RULE_selectItem = 177
    RULE_selectAlias = 178
    RULE_whereClause = 179
    RULE_tableReference = 180
    RULE_escapedTableReference = 181
    RULE_joinedTable = 182
    RULE_naturalJoinType = 183
    RULE_innerJoinType = 184
    RULE_outerJoinType = 185
    RULE_tableFactor = 186
    RULE_singleTable = 187
    RULE_singleTableParens = 188
    RULE_derivedTable = 189
    RULE_tableReferenceListParens = 190
    RULE_tableFunction = 191
    RULE_columnsClause = 192
    RULE_jtColumn = 193
    RULE_onEmptyOrError = 194
    RULE_onEmpty = 195
    RULE_onError = 196
    RULE_jtOnResponse = 197
    RULE_unionOption = 198
    RULE_tableAlias = 199
    RULE_indexHintList = 200
    RULE_indexHint = 201
    RULE_indexHintType = 202
    RULE_keyOrIndex = 203
    RULE_constraintKeyType = 204
    RULE_indexHintClause = 205
    RULE_indexList = 206
    RULE_indexListElement = 207
    RULE_updateStatement = 208
    RULE_transactionOrLockingStatement = 209
    RULE_transactionStatement = 210
    RULE_beginWork = 211
    RULE_transactionCharacteristic = 212
    RULE_savepointStatement = 213
    RULE_lockStatement = 214
    RULE_lockItem = 215
    RULE_lockOption = 216
    RULE_xaStatement = 217
    RULE_xaConvert = 218
    RULE_xid = 219
    RULE_replicationStatement = 220
    RULE_resetOption = 221
    RULE_masterResetOptions = 222
    RULE_replicationLoad = 223
    RULE_changeMaster = 224
    RULE_changeMasterOptions = 225
    RULE_masterOption = 226
    RULE_privilegeCheckDef = 227
    RULE_tablePrimaryKeyCheckDef = 228
    RULE_masterTlsCiphersuitesDef = 229
    RULE_masterFileDef = 230
    RULE_serverIdList = 231
    RULE_changeReplication = 232
    RULE_filterDefinition = 233
    RULE_filterDbList = 234
    RULE_filterTableList = 235
    RULE_filterStringList = 236
    RULE_filterWildDbTableString = 237
    RULE_filterDbPairList = 238
    RULE_slave = 239
    RULE_slaveUntilOptions = 240
    RULE_slaveConnectionOptions = 241
    RULE_slaveThreadOptions = 242
    RULE_slaveThreadOption = 243
    RULE_groupReplication = 244
    RULE_preparedStatement = 245
    RULE_executeStatement = 246
    RULE_executeVarList = 247
    RULE_cloneStatement = 248
    RULE_dataDirSSL = 249
    RULE_ssl = 250
    RULE_accountManagementStatement = 251
    RULE_alterUser = 252
    RULE_alterUserTail = 253
    RULE_userFunction = 254
    RULE_createUser = 255
    RULE_createUserTail = 256
    RULE_defaultRoleClause = 257
    RULE_requireClause = 258
    RULE_connectOptions = 259
    RULE_accountLockPasswordExpireOptions = 260
    RULE_dropUser = 261
    RULE_grant = 262
    RULE_grantTargetList = 263
    RULE_grantOptions = 264
    RULE_exceptRoleList = 265
    RULE_withRoles = 266
    RULE_grantAs = 267
    RULE_versionedRequireClause = 268
    RULE_renameUser = 269
    RULE_revoke = 270
    RULE_onTypeTo = 271
    RULE_aclType = 272
    RULE_roleOrPrivilegesList = 273
    RULE_roleOrPrivilege = 274
    RULE_grantIdentifier = 275
    RULE_requireList = 276
    RULE_requireListElement = 277
    RULE_grantOption = 278
    RULE_setRole = 279
    RULE_roleList = 280
    RULE_role = 281
    RULE_tableAdministrationStatement = 282
    RULE_histogram = 283
    RULE_checkOption = 284
    RULE_repairType = 285
    RULE_installUninstallStatment = 286
    RULE_setStatement = 287
    RULE_startOptionValueList = 288
    RULE_transactionCharacteristics = 289
    RULE_transactionAccessMode = 290
    RULE_isolationLevel = 291
    RULE_optionValueListContinued = 292
    RULE_optionValueNoOptionType = 293
    RULE_optionValue = 294
    RULE_setSystemVariable = 295
    RULE_startOptionValueListFollowingOptionType = 296
    RULE_optionValueFollowingOptionType = 297
    RULE_setExprOrDefault = 298
    RULE_showStatement = 299
    RULE_showCommandType = 300
    RULE_nonBlocking = 301
    RULE_fromOrIn = 302
    RULE_inDb = 303
    RULE_profileType = 304
    RULE_otherAdministrativeStatement = 305
    RULE_keyCacheListOrParts = 306
    RULE_keyCacheList = 307
    RULE_assignToKeycache = 308
    RULE_assignToKeycachePartition = 309
    RULE_cacheKeyList = 310
    RULE_keyUsageElement = 311
    RULE_keyUsageList = 312
    RULE_flushOption = 313
    RULE_logType = 314
    RULE_flushTables = 315
    RULE_flushTablesOptions = 316
    RULE_preloadTail = 317
    RULE_preloadList = 318
    RULE_preloadKeys = 319
    RULE_adminPartition = 320
    RULE_resourceGroupManagement = 321
    RULE_createResourceGroup = 322
    RULE_resourceGroupVcpuList = 323
    RULE_vcpuNumOrRange = 324
    RULE_resourceGroupPriority = 325
    RULE_resourceGroupEnableDisable = 326
    RULE_alterResourceGroup = 327
    RULE_setResourceGroup = 328
    RULE_threadIdList = 329
    RULE_dropResourceGroup = 330
    RULE_utilityStatement = 331
    RULE_describeStatement = 332
    RULE_explainStatement = 333
    RULE_explainableStatement = 334
    RULE_helpCommand = 335
    RULE_useCommand = 336
    RULE_restartServer = 337
    RULE_expr = 338
    RULE_boolPri = 339
    RULE_compOp = 340
    RULE_predicate = 341
    RULE_predicateOperations = 342
    RULE_bitExpr = 343
    RULE_simpleExpr = 344
    RULE_arrayCast = 345
    RULE_jsonOperator = 346
    RULE_sumExpr = 347
    RULE_groupingOperation = 348
    RULE_windowFunctionCall = 349
    RULE_windowingClause = 350
    RULE_leadLagInfo = 351
    RULE_nullTreatment = 352
    RULE_jsonFunction = 353
    RULE_inSumExpr = 354
    RULE_identListArg = 355
    RULE_identList = 356
    RULE_fulltextOptions = 357
    RULE_runtimeFunctionCall = 358
    RULE_geometryFunction = 359
    RULE_timeFunctionParameters = 360
    RULE_fractionalPrecision = 361
    RULE_weightStringLevels = 362
    RULE_weightStringLevelListItem = 363
    RULE_dateTimeTtype = 364
    RULE_trimFunction = 365
    RULE_substringFunction = 366
    RULE_functionCall = 367
    RULE_udfExprList = 368
    RULE_udfExpr = 369
    RULE_variable = 370
    RULE_userVariable = 371
    RULE_systemVariable = 372
    RULE_internalVariableName = 373
    RULE_whenExpression = 374
    RULE_thenExpression = 375
    RULE_elseExpression = 376
    RULE_castType = 377
    RULE_exprList = 378
    RULE_charset = 379
    RULE_notRule = 380
    RULE_not2Rule = 381
    RULE_interval = 382
    RULE_intervalTimeStamp = 383
    RULE_exprListWithParentheses = 384
    RULE_exprWithParentheses = 385
    RULE_simpleExprWithParentheses = 386
    RULE_orderList = 387
    RULE_orderExpression = 388
    RULE_groupList = 389
    RULE_groupingExpression = 390
    RULE_channel = 391
    RULE_compoundStatement = 392
    RULE_returnStatement = 393
    RULE_ifStatement = 394
    RULE_ifBody = 395
    RULE_thenStatement = 396
    RULE_compoundStatementList = 397
    RULE_caseStatement = 398
    RULE_elseStatement = 399
    RULE_labeledBlock = 400
    RULE_unlabeledBlock = 401
    RULE_label = 402
    RULE_beginEndBlock = 403
    RULE_labeledControl = 404
    RULE_unlabeledControl = 405
    RULE_loopBlock = 406
    RULE_whileDoBlock = 407
    RULE_repeatUntilBlock = 408
    RULE_spDeclarations = 409
    RULE_spDeclaration = 410
    RULE_variableDeclaration = 411
    RULE_conditionDeclaration = 412
    RULE_spCondition = 413
    RULE_sqlstate = 414
    RULE_handlerDeclaration = 415
    RULE_handlerCondition = 416
    RULE_cursorDeclaration = 417
    RULE_iterateStatement = 418
    RULE_leaveStatement = 419
    RULE_getDiagnostics = 420
    RULE_signalAllowedExpr = 421
    RULE_statementInformationItem = 422
    RULE_conditionInformationItem = 423
    RULE_signalInformationItemName = 424
    RULE_signalStatement = 425
    RULE_resignalStatement = 426
    RULE_signalInformationItem = 427
    RULE_cursorOpen = 428
    RULE_cursorClose = 429
    RULE_cursorFetch = 430
    RULE_schedule = 431
    RULE_columnDefinition = 432
    RULE_checkOrReferences = 433
    RULE_checkConstraint = 434
    RULE_constraintEnforcement = 435
    RULE_tableConstraintDef = 436
    RULE_constraintName = 437
    RULE_fieldDefinition = 438
    RULE_columnAttribute = 439
    RULE_columnFormat = 440
    RULE_storageMedia = 441
    RULE_gcolAttribute = 442
    RULE_references = 443
    RULE_deleteOption = 444
    RULE_keyList = 445
    RULE_keyPart = 446
    RULE_keyListWithExpression = 447
    RULE_keyPartOrExpression = 448
    RULE_keyListVariants = 449
    RULE_indexType = 450
    RULE_indexOption = 451
    RULE_commonIndexOption = 452
    RULE_visibility = 453
    RULE_indexTypeClause = 454
    RULE_fulltextIndexOption = 455
    RULE_spatialIndexOption = 456
    RULE_dataTypeDefinition = 457
    RULE_dataType = 458
    RULE_nchar = 459
    RULE_realType = 460
    RULE_fieldLength = 461
    RULE_fieldOptions = 462
    RULE_charsetWithOptBinary = 463
    RULE_ascii = 464
    RULE_unicode = 465
    RULE_wsNumCodepoints = 466
    RULE_typeDatetimePrecision = 467
    RULE_charsetName = 468
    RULE_collationName = 469
    RULE_createTableOptions = 470
    RULE_createTableOptionsSpaceSeparated = 471
    RULE_createTableOption = 472
    RULE_ternaryOption = 473
    RULE_defaultCollation = 474
    RULE_defaultEncryption = 475
    RULE_defaultCharset = 476
    RULE_partitionClause = 477
    RULE_partitionTypeDef = 478
    RULE_subPartitions = 479
    RULE_partitionKeyAlgorithm = 480
    RULE_partitionDefinitions = 481
    RULE_partitionDefinition = 482
    RULE_partitionValuesIn = 483
    RULE_partitionOption = 484
    RULE_subpartitionDefinition = 485
    RULE_partitionValueItemListParen = 486
    RULE_partitionValueItem = 487
    RULE_definerClause = 488
    RULE_ifExists = 489
    RULE_ifNotExists = 490
    RULE_procedureParameter = 491
    RULE_functionParameter = 492
    RULE_collate = 493
    RULE_typeWithOptCollate = 494
    RULE_schemaIdentifierPair = 495
    RULE_viewRefList = 496
    RULE_updateList = 497
    RULE_updateElement = 498
    RULE_charsetClause = 499
    RULE_fieldsClause = 500
    RULE_fieldTerm = 501
    RULE_linesClause = 502
    RULE_lineTerm = 503
    RULE_userList = 504
    RULE_createUserList = 505
    RULE_alterUserList = 506
    RULE_createUserEntry = 507
    RULE_alterUserEntry = 508
    RULE_retainCurrentPassword = 509
    RULE_discardOldPassword = 510
    RULE_replacePassword = 511
    RULE_userIdentifierOrText = 512
    RULE_user = 513
    RULE_likeClause = 514
    RULE_likeOrWhere = 515
    RULE_onlineOption = 516
    RULE_noWriteToBinLog = 517
    RULE_usePartition = 518
    RULE_fieldIdentifier = 519
    RULE_columnName = 520
    RULE_columnInternalRef = 521
    RULE_columnInternalRefList = 522
    RULE_columnRef = 523
    RULE_insertIdentifier = 524
    RULE_indexName = 525
    RULE_indexRef = 526
    RULE_tableWild = 527
    RULE_schemaName = 528
    RULE_schemaRef = 529
    RULE_procedureName = 530
    RULE_procedureRef = 531
    RULE_functionName = 532
    RULE_functionRef = 533
    RULE_triggerName = 534
    RULE_triggerRef = 535
    RULE_viewName = 536
    RULE_viewRef = 537
    RULE_tablespaceName = 538
    RULE_tablespaceRef = 539
    RULE_logfileGroupName = 540
    RULE_logfileGroupRef = 541
    RULE_eventName = 542
    RULE_eventRef = 543
    RULE_udfName = 544
    RULE_serverName = 545
    RULE_serverRef = 546
    RULE_engineRef = 547
    RULE_tableName = 548
    RULE_filterTableRef = 549
    RULE_tableRefWithWildcard = 550
    RULE_tableRef = 551
    RULE_tableRefList = 552
    RULE_tableAliasRefList = 553
    RULE_parameterName = 554
    RULE_labelIdentifier = 555
    RULE_labelRef = 556
    RULE_roleIdentifier = 557
    RULE_roleRef = 558
    RULE_pluginRef = 559
    RULE_componentRef = 560
    RULE_resourceGroupRef = 561
    RULE_windowName = 562
    RULE_pureIdentifier = 563
    RULE_identifier = 564
    RULE_identifierList = 565
    RULE_identifierListWithParentheses = 566
    RULE_qualifiedIdentifier = 567
    RULE_simpleIdentifier = 568
    RULE_dotIdentifier = 569
    RULE_ulong_number = 570
    RULE_real_ulong_number = 571
    RULE_ulonglong_number = 572
    RULE_real_ulonglong_number = 573
    RULE_literal = 574
    RULE_signedLiteral = 575
    RULE_stringList = 576
    RULE_textStringLiteral = 577
    RULE_textString = 578
    RULE_textStringHash = 579
    RULE_textLiteral = 580
    RULE_textStringNoLinebreak = 581
    RULE_textStringLiteralList = 582
    RULE_numLiteral = 583
    RULE_boolLiteral = 584
    RULE_nullLiteral = 585
    RULE_temporalLiteral = 586
    RULE_floatOptions = 587
    RULE_standardFloatOptions = 588
    RULE_precision = 589
    RULE_textOrIdentifier = 590
    RULE_lValueIdentifier = 591
    RULE_roleIdentifierOrText = 592
    RULE_sizeNumber = 593
    RULE_parentheses = 594
    RULE_equal = 595
    RULE_optionType = 596
    RULE_varIdentType = 597
    RULE_setVarIdentType = 598
    RULE_identifierKeyword = 599
    RULE_identifierKeywordsAmbiguous1RolesAndLabels = 600
    RULE_identifierKeywordsAmbiguous2Labels = 601
    RULE_labelKeyword = 602
    RULE_identifierKeywordsAmbiguous3Roles = 603
    RULE_identifierKeywordsUnambiguous = 604
    RULE_roleKeyword = 605
    RULE_lValueKeyword = 606
    RULE_identifierKeywordsAmbiguous4SystemVariables = 607
    RULE_roleOrIdentifierKeyword = 608
    RULE_roleOrLabelKeyword = 609

    ruleNames =  [ "query", "simpleStatement", "alterStatement", "alterDatabase", 
                   "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", 
                   "alterLogfileGroupOption", "alterServer", "alterTable", 
                   "alterTableActions", "alterCommandList", "alterCommandsModifierList", 
                   "standaloneAlterCommands", "alterPartition", "alterList", 
                   "alterCommandsModifier", "alterListItem", "place", "restrict", 
                   "alterOrderList", "alterAlgorithmOption", "alterLockOption", 
                   "indexLockAndAlgorithm", "withValidation", "removePartitioning", 
                   "allOrPartitionNameList", "alterTablespace", "alterUndoTablespace", 
                   "undoTableSpaceOptions", "undoTableSpaceOption", "alterTablespaceOptions", 
                   "alterTablespaceOption", "changeTablespaceOption", "alterView", 
                   "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
                   "createDatabase", "createDatabaseOption", "createTable", 
                   "tableElementList", "tableElement", "duplicateAsQueryExpression", 
                   "queryExpressionOrParens", "createRoutine", "createProcedure", 
                   "createFunction", "createUdf", "routineCreateOption", 
                   "routineAlterOptions", "routineOption", "createIndex", 
                   "indexNameAndType", "createIndexTarget", "createLogfileGroup", 
                   "logfileGroupOptions", "logfileGroupOption", "createServer", 
                   "serverOptions", "serverOption", "createTablespace", 
                   "createUndoTablespace", "tsDataFileName", "tsDataFile", 
                   "tablespaceOptions", "tablespaceOption", "tsOptionInitialSize", 
                   "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", 
                   "tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", 
                   "tsOptionEngine", "tsOptionWait", "tsOptionComment", 
                   "tsOptionFileblockSize", "tsOptionEncryption", "createView", 
                   "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", 
                   "createTrigger", "triggerFollowsPrecedesClause", "createEvent", 
                   "createRole", "createSpatialReference", "srsAttribute", 
                   "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
                   "dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
                   "dropServer", "dropTable", "dropTableSpace", "dropTrigger", 
                   "dropView", "dropRole", "dropSpatialReference", "dropUndoTablespace", 
                   "renameTableStatement", "renamePair", "truncateTableStatement", 
                   "importStatement", "callStatement", "deleteStatement", 
                   "partitionDelete", "deleteStatementOption", "doStatement", 
                   "handlerStatement", "handlerReadOrScan", "insertStatement", 
                   "insertLockOption", "insertFromConstructor", "fields", 
                   "insertValues", "insertQueryExpression", "valueList", 
                   "values", "valuesReference", "insertUpdateList", "loadStatement", 
                   "dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", 
                   "loadDataFileTargetList", "fieldOrVariableList", "replaceStatement", 
                   "selectStatement", "selectStatementWithInto", "queryExpression", 
                   "queryExpressionBody", "queryExpressionParens", "queryPrimary", 
                   "querySpecification", "subquery", "querySpecOption", 
                   "limitClause", "simpleLimitClause", "limitOptions", "limitOption", 
                   "intoClause", "procedureAnalyseClause", "havingClause", 
                   "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
                   "windowFrameClause", "windowFrameUnits", "windowFrameExtent", 
                   "windowFrameStart", "windowFrameBetween", "windowFrameBound", 
                   "windowFrameExclusion", "withClause", "commonTableExpression", 
                   "groupByClause", "olapOption", "orderClause", "direction", 
                   "fromClause", "tableReferenceList", "tableValueConstructor", 
                   "explicitTable", "rowValueExplicit", "selectOption", 
                   "lockingClauseList", "lockingClause", "lockStrengh", 
                   "lockedRowAction", "selectItemList", "selectItem", "selectAlias", 
                   "whereClause", "tableReference", "escapedTableReference", 
                   "joinedTable", "naturalJoinType", "innerJoinType", "outerJoinType", 
                   "tableFactor", "singleTable", "singleTableParens", "derivedTable", 
                   "tableReferenceListParens", "tableFunction", "columnsClause", 
                   "jtColumn", "onEmptyOrError", "onEmpty", "onError", "jtOnResponse", 
                   "unionOption", "tableAlias", "indexHintList", "indexHint", 
                   "indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause", 
                   "indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement", 
                   "transactionStatement", "beginWork", "transactionCharacteristic", 
                   "savepointStatement", "lockStatement", "lockItem", "lockOption", 
                   "xaStatement", "xaConvert", "xid", "replicationStatement", 
                   "resetOption", "masterResetOptions", "replicationLoad", 
                   "changeMaster", "changeMasterOptions", "masterOption", 
                   "privilegeCheckDef", "tablePrimaryKeyCheckDef", "masterTlsCiphersuitesDef", 
                   "masterFileDef", "serverIdList", "changeReplication", 
                   "filterDefinition", "filterDbList", "filterTableList", 
                   "filterStringList", "filterWildDbTableString", "filterDbPairList", 
                   "slave", "slaveUntilOptions", "slaveConnectionOptions", 
                   "slaveThreadOptions", "slaveThreadOption", "groupReplication", 
                   "preparedStatement", "executeStatement", "executeVarList", 
                   "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
                   "alterUser", "alterUserTail", "userFunction", "createUser", 
                   "createUserTail", "defaultRoleClause", "requireClause", 
                   "connectOptions", "accountLockPasswordExpireOptions", 
                   "dropUser", "grant", "grantTargetList", "grantOptions", 
                   "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause", 
                   "renameUser", "revoke", "onTypeTo", "aclType", "roleOrPrivilegesList", 
                   "roleOrPrivilege", "grantIdentifier", "requireList", 
                   "requireListElement", "grantOption", "setRole", "roleList", 
                   "role", "tableAdministrationStatement", "histogram", 
                   "checkOption", "repairType", "installUninstallStatment", 
                   "setStatement", "startOptionValueList", "transactionCharacteristics", 
                   "transactionAccessMode", "isolationLevel", "optionValueListContinued", 
                   "optionValueNoOptionType", "optionValue", "setSystemVariable", 
                   "startOptionValueListFollowingOptionType", "optionValueFollowingOptionType", 
                   "setExprOrDefault", "showStatement", "showCommandType", 
                   "nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
                   "keyCacheListOrParts", "keyCacheList", "assignToKeycache", 
                   "assignToKeycachePartition", "cacheKeyList", "keyUsageElement", 
                   "keyUsageList", "flushOption", "logType", "flushTables", 
                   "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
                   "adminPartition", "resourceGroupManagement", "createResourceGroup", 
                   "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
                   "resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup", 
                   "threadIdList", "dropResourceGroup", "utilityStatement", 
                   "describeStatement", "explainStatement", "explainableStatement", 
                   "helpCommand", "useCommand", "restartServer", "expr", 
                   "boolPri", "compOp", "predicate", "predicateOperations", 
                   "bitExpr", "simpleExpr", "arrayCast", "jsonOperator", 
                   "sumExpr", "groupingOperation", "windowFunctionCall", 
                   "windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", 
                   "inSumExpr", "identListArg", "identList", "fulltextOptions", 
                   "runtimeFunctionCall", "geometryFunction", "timeFunctionParameters", 
                   "fractionalPrecision", "weightStringLevels", "weightStringLevelListItem", 
                   "dateTimeTtype", "trimFunction", "substringFunction", 
                   "functionCall", "udfExprList", "udfExpr", "variable", 
                   "userVariable", "systemVariable", "internalVariableName", 
                   "whenExpression", "thenExpression", "elseExpression", 
                   "castType", "exprList", "charset", "notRule", "not2Rule", 
                   "interval", "intervalTimeStamp", "exprListWithParentheses", 
                   "exprWithParentheses", "simpleExprWithParentheses", "orderList", 
                   "orderExpression", "groupList", "groupingExpression", 
                   "channel", "compoundStatement", "returnStatement", "ifStatement", 
                   "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
                   "elseStatement", "labeledBlock", "unlabeledBlock", "label", 
                   "beginEndBlock", "labeledControl", "unlabeledControl", 
                   "loopBlock", "whileDoBlock", "repeatUntilBlock", "spDeclarations", 
                   "spDeclaration", "variableDeclaration", "conditionDeclaration", 
                   "spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", 
                   "cursorDeclaration", "iterateStatement", "leaveStatement", 
                   "getDiagnostics", "signalAllowedExpr", "statementInformationItem", 
                   "conditionInformationItem", "signalInformationItemName", 
                   "signalStatement", "resignalStatement", "signalInformationItem", 
                   "cursorOpen", "cursorClose", "cursorFetch", "schedule", 
                   "columnDefinition", "checkOrReferences", "checkConstraint", 
                   "constraintEnforcement", "tableConstraintDef", "constraintName", 
                   "fieldDefinition", "columnAttribute", "columnFormat", 
                   "storageMedia", "gcolAttribute", "references", "deleteOption", 
                   "keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression", 
                   "keyListVariants", "indexType", "indexOption", "commonIndexOption", 
                   "visibility", "indexTypeClause", "fulltextIndexOption", 
                   "spatialIndexOption", "dataTypeDefinition", "dataType", 
                   "nchar", "realType", "fieldLength", "fieldOptions", "charsetWithOptBinary", 
                   "ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", 
                   "charsetName", "collationName", "createTableOptions", 
                   "createTableOptionsSpaceSeparated", "createTableOption", 
                   "ternaryOption", "defaultCollation", "defaultEncryption", 
                   "defaultCharset", "partitionClause", "partitionTypeDef", 
                   "subPartitions", "partitionKeyAlgorithm", "partitionDefinitions", 
                   "partitionDefinition", "partitionValuesIn", "partitionOption", 
                   "subpartitionDefinition", "partitionValueItemListParen", 
                   "partitionValueItem", "definerClause", "ifExists", "ifNotExists", 
                   "procedureParameter", "functionParameter", "collate", 
                   "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
                   "updateList", "updateElement", "charsetClause", "fieldsClause", 
                   "fieldTerm", "linesClause", "lineTerm", "userList", "createUserList", 
                   "alterUserList", "createUserEntry", "alterUserEntry", 
                   "retainCurrentPassword", "discardOldPassword", "replacePassword", 
                   "userIdentifierOrText", "user", "likeClause", "likeOrWhere", 
                   "onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier", 
                   "columnName", "columnInternalRef", "columnInternalRefList", 
                   "columnRef", "insertIdentifier", "indexName", "indexRef", 
                   "tableWild", "schemaName", "schemaRef", "procedureName", 
                   "procedureRef", "functionName", "functionRef", "triggerName", 
                   "triggerRef", "viewName", "viewRef", "tablespaceName", 
                   "tablespaceRef", "logfileGroupName", "logfileGroupRef", 
                   "eventName", "eventRef", "udfName", "serverName", "serverRef", 
                   "engineRef", "tableName", "filterTableRef", "tableRefWithWildcard", 
                   "tableRef", "tableRefList", "tableAliasRefList", "parameterName", 
                   "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
                   "pluginRef", "componentRef", "resourceGroupRef", "windowName", 
                   "pureIdentifier", "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", 
                   "ulong_number", "real_ulong_number", "ulonglong_number", 
                   "real_ulonglong_number", "literal", "signedLiteral", 
                   "stringList", "textStringLiteral", "textString", "textStringHash", 
                   "textLiteral", "textStringNoLinebreak", "textStringLiteralList", 
                   "numLiteral", "boolLiteral", "nullLiteral", "temporalLiteral", 
                   "floatOptions", "standardFloatOptions", "precision", 
                   "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
                   "sizeNumber", "parentheses", "equal", "optionType", "varIdentType", 
                   "setVarIdentType", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", 
                   "identifierKeywordsAmbiguous2Labels", "labelKeyword", 
                   "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
                   "roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
                   "roleOrIdentifierKeyword", "roleOrLabelKeyword" ]

    EOF = Token.EOF
    ACCESSIBLE_SYMBOL=1
    ACCOUNT_SYMBOL=2
    ACTION_SYMBOL=3
    ADD_SYMBOL=4
    ADDDATE_SYMBOL=5
    AFTER_SYMBOL=6
    AGAINST_SYMBOL=7
    AGGREGATE_SYMBOL=8
    ALGORITHM_SYMBOL=9
    ALL_SYMBOL=10
    ALTER_SYMBOL=11
    ALWAYS_SYMBOL=12
    ANALYSE_SYMBOL=13
    ANALYZE_SYMBOL=14
    AND_SYMBOL=15
    ANY_SYMBOL=16
    AS_SYMBOL=17
    ASC_SYMBOL=18
    ASCII_SYMBOL=19
    ASENSITIVE_SYMBOL=20
    AT_SYMBOL=21
    AUTHORS_SYMBOL=22
    AUTOEXTEND_SIZE_SYMBOL=23
    AUTO_INCREMENT_SYMBOL=24
    AVG_ROW_LENGTH_SYMBOL=25
    AVG_SYMBOL=26
    BACKUP_SYMBOL=27
    BEFORE_SYMBOL=28
    BEGIN_SYMBOL=29
    BETWEEN_SYMBOL=30
    BIGINT_SYMBOL=31
    BINARY_SYMBOL=32
    BINLOG_SYMBOL=33
    BIN_NUM_SYMBOL=34
    BIT_AND_SYMBOL=35
    BIT_OR_SYMBOL=36
    BIT_SYMBOL=37
    BIT_XOR_SYMBOL=38
    BLOB_SYMBOL=39
    BLOCK_SYMBOL=40
    BOOLEAN_SYMBOL=41
    BOOL_SYMBOL=42
    BOTH_SYMBOL=43
    BTREE_SYMBOL=44
    BY_SYMBOL=45
    BYTE_SYMBOL=46
    CACHE_SYMBOL=47
    CALL_SYMBOL=48
    CASCADE_SYMBOL=49
    CASCADED_SYMBOL=50
    CASE_SYMBOL=51
    CAST_SYMBOL=52
    CATALOG_NAME_SYMBOL=53
    CHAIN_SYMBOL=54
    CHANGE_SYMBOL=55
    CHANGED_SYMBOL=56
    CHANNEL_SYMBOL=57
    CHARSET_SYMBOL=58
    CHARACTER_SYMBOL=59
    CHAR_SYMBOL=60
    CHECKSUM_SYMBOL=61
    CHECK_SYMBOL=62
    CIPHER_SYMBOL=63
    CLASS_ORIGIN_SYMBOL=64
    CLIENT_SYMBOL=65
    CLOSE_SYMBOL=66
    COALESCE_SYMBOL=67
    CODE_SYMBOL=68
    COLLATE_SYMBOL=69
    COLLATION_SYMBOL=70
    COLUMNS_SYMBOL=71
    COLUMN_SYMBOL=72
    COLUMN_NAME_SYMBOL=73
    COLUMN_FORMAT_SYMBOL=74
    COMMENT_SYMBOL=75
    COMMITTED_SYMBOL=76
    COMMIT_SYMBOL=77
    COMPACT_SYMBOL=78
    COMPLETION_SYMBOL=79
    COMPRESSED_SYMBOL=80
    COMPRESSION_SYMBOL=81
    CONCURRENT_SYMBOL=82
    CONDITION_SYMBOL=83
    CONNECTION_SYMBOL=84
    CONSISTENT_SYMBOL=85
    CONSTRAINT_SYMBOL=86
    CONSTRAINT_CATALOG_SYMBOL=87
    CONSTRAINT_NAME_SYMBOL=88
    CONSTRAINT_SCHEMA_SYMBOL=89
    CONTAINS_SYMBOL=90
    CONTEXT_SYMBOL=91
    CONTINUE_SYMBOL=92
    CONTRIBUTORS_SYMBOL=93
    CONVERT_SYMBOL=94
    COUNT_SYMBOL=95
    CPU_SYMBOL=96
    CREATE_SYMBOL=97
    CROSS_SYMBOL=98
    CUBE_SYMBOL=99
    CURDATE_SYMBOL=100
    CURRENT_SYMBOL=101
    CURRENT_DATE_SYMBOL=102
    CURRENT_TIME_SYMBOL=103
    CURRENT_TIMESTAMP_SYMBOL=104
    CURRENT_USER_SYMBOL=105
    CURSOR_SYMBOL=106
    CURSOR_NAME_SYMBOL=107
    CURTIME_SYMBOL=108
    DATABASE_SYMBOL=109
    DATABASES_SYMBOL=110
    DATAFILE_SYMBOL=111
    DATA_SYMBOL=112
    DATETIME_SYMBOL=113
    DATE_ADD_SYMBOL=114
    DATE_SUB_SYMBOL=115
    DATE_SYMBOL=116
    DAYOFMONTH_SYMBOL=117
    DAY_HOUR_SYMBOL=118
    DAY_MICROSECOND_SYMBOL=119
    DAY_MINUTE_SYMBOL=120
    DAY_SECOND_SYMBOL=121
    DAY_SYMBOL=122
    DEALLOCATE_SYMBOL=123
    DEC_SYMBOL=124
    DECIMAL_NUM_SYMBOL=125
    DECIMAL_SYMBOL=126
    DECLARE_SYMBOL=127
    DEFAULT_SYMBOL=128
    DEFAULT_AUTH_SYMBOL=129
    DEFINER_SYMBOL=130
    DELAYED_SYMBOL=131
    DELAY_KEY_WRITE_SYMBOL=132
    DELETE_SYMBOL=133
    DESC_SYMBOL=134
    DESCRIBE_SYMBOL=135
    DES_KEY_FILE_SYMBOL=136
    DETERMINISTIC_SYMBOL=137
    DIAGNOSTICS_SYMBOL=138
    DIRECTORY_SYMBOL=139
    DISABLE_SYMBOL=140
    DISCARD_SYMBOL=141
    DISK_SYMBOL=142
    DISTINCT_SYMBOL=143
    DISTINCTROW_SYMBOL=144
    DIV_SYMBOL=145
    DOUBLE_SYMBOL=146
    DO_SYMBOL=147
    DROP_SYMBOL=148
    DUAL_SYMBOL=149
    DUMPFILE_SYMBOL=150
    DUPLICATE_SYMBOL=151
    DYNAMIC_SYMBOL=152
    EACH_SYMBOL=153
    ELSE_SYMBOL=154
    ELSEIF_SYMBOL=155
    ENABLE_SYMBOL=156
    ENCLOSED_SYMBOL=157
    ENCRYPTION_SYMBOL=158
    END_SYMBOL=159
    ENDS_SYMBOL=160
    END_OF_INPUT_SYMBOL=161
    ENGINES_SYMBOL=162
    ENGINE_SYMBOL=163
    ENUM_SYMBOL=164
    ERROR_SYMBOL=165
    ERRORS_SYMBOL=166
    ESCAPED_SYMBOL=167
    ESCAPE_SYMBOL=168
    EVENTS_SYMBOL=169
    EVENT_SYMBOL=170
    EVERY_SYMBOL=171
    EXCHANGE_SYMBOL=172
    EXECUTE_SYMBOL=173
    EXISTS_SYMBOL=174
    EXIT_SYMBOL=175
    EXPANSION_SYMBOL=176
    EXPIRE_SYMBOL=177
    EXPLAIN_SYMBOL=178
    EXPORT_SYMBOL=179
    EXTENDED_SYMBOL=180
    EXTENT_SIZE_SYMBOL=181
    EXTRACT_SYMBOL=182
    FALSE_SYMBOL=183
    FAST_SYMBOL=184
    FAULTS_SYMBOL=185
    FETCH_SYMBOL=186
    FIELDS_SYMBOL=187
    FILE_SYMBOL=188
    FILE_BLOCK_SIZE_SYMBOL=189
    FILTER_SYMBOL=190
    FIRST_SYMBOL=191
    FIXED_SYMBOL=192
    FLOAT4_SYMBOL=193
    FLOAT8_SYMBOL=194
    FLOAT_SYMBOL=195
    FLUSH_SYMBOL=196
    FOLLOWS_SYMBOL=197
    FORCE_SYMBOL=198
    FOREIGN_SYMBOL=199
    FOR_SYMBOL=200
    FORMAT_SYMBOL=201
    FOUND_SYMBOL=202
    FROM_SYMBOL=203
    FULL_SYMBOL=204
    FULLTEXT_SYMBOL=205
    FUNCTION_SYMBOL=206
    GET_SYMBOL=207
    GENERAL_SYMBOL=208
    GENERATED_SYMBOL=209
    GROUP_REPLICATION_SYMBOL=210
    GEOMETRYCOLLECTION_SYMBOL=211
    GEOMETRY_SYMBOL=212
    GET_FORMAT_SYMBOL=213
    GLOBAL_SYMBOL=214
    GRANT_SYMBOL=215
    GRANTS_SYMBOL=216
    GROUP_SYMBOL=217
    GROUP_CONCAT_SYMBOL=218
    HANDLER_SYMBOL=219
    HASH_SYMBOL=220
    HAVING_SYMBOL=221
    HELP_SYMBOL=222
    HIGH_PRIORITY_SYMBOL=223
    HOST_SYMBOL=224
    HOSTS_SYMBOL=225
    HOUR_MICROSECOND_SYMBOL=226
    HOUR_MINUTE_SYMBOL=227
    HOUR_SECOND_SYMBOL=228
    HOUR_SYMBOL=229
    IDENTIFIED_SYMBOL=230
    IF_SYMBOL=231
    IGNORE_SYMBOL=232
    IGNORE_SERVER_IDS_SYMBOL=233
    IMPORT_SYMBOL=234
    INDEXES_SYMBOL=235
    INDEX_SYMBOL=236
    INFILE_SYMBOL=237
    INITIAL_SIZE_SYMBOL=238
    INNER_SYMBOL=239
    INOUT_SYMBOL=240
    INSENSITIVE_SYMBOL=241
    INSERT_SYMBOL=242
    INSERT_METHOD_SYMBOL=243
    INSTANCE_SYMBOL=244
    INSTALL_SYMBOL=245
    INTEGER_SYMBOL=246
    INTERVAL_SYMBOL=247
    INTO_SYMBOL=248
    INT_SYMBOL=249
    INVOKER_SYMBOL=250
    IN_SYMBOL=251
    IO_AFTER_GTIDS_SYMBOL=252
    IO_BEFORE_GTIDS_SYMBOL=253
    IO_THREAD_SYMBOL=254
    IO_SYMBOL=255
    IPC_SYMBOL=256
    IS_SYMBOL=257
    ISOLATION_SYMBOL=258
    ISSUER_SYMBOL=259
    ITERATE_SYMBOL=260
    JOIN_SYMBOL=261
    JSON_SYMBOL=262
    KEYS_SYMBOL=263
    KEY_BLOCK_SIZE_SYMBOL=264
    KEY_SYMBOL=265
    KILL_SYMBOL=266
    LANGUAGE_SYMBOL=267
    LAST_SYMBOL=268
    LEADING_SYMBOL=269
    LEAVES_SYMBOL=270
    LEAVE_SYMBOL=271
    LEFT_SYMBOL=272
    LESS_SYMBOL=273
    LEVEL_SYMBOL=274
    LIKE_SYMBOL=275
    LIMIT_SYMBOL=276
    LINEAR_SYMBOL=277
    LINES_SYMBOL=278
    LINESTRING_SYMBOL=279
    LIST_SYMBOL=280
    LOAD_SYMBOL=281
    LOCALTIME_SYMBOL=282
    LOCALTIMESTAMP_SYMBOL=283
    LOCAL_SYMBOL=284
    LOCATOR_SYMBOL=285
    LOCKS_SYMBOL=286
    LOCK_SYMBOL=287
    LOGFILE_SYMBOL=288
    LOGS_SYMBOL=289
    LONGBLOB_SYMBOL=290
    LONGTEXT_SYMBOL=291
    LONG_NUM_SYMBOL=292
    LONG_SYMBOL=293
    LOOP_SYMBOL=294
    LOW_PRIORITY_SYMBOL=295
    MASTER_AUTO_POSITION_SYMBOL=296
    MASTER_BIND_SYMBOL=297
    MASTER_CONNECT_RETRY_SYMBOL=298
    MASTER_DELAY_SYMBOL=299
    MASTER_HOST_SYMBOL=300
    MASTER_LOG_FILE_SYMBOL=301
    MASTER_LOG_POS_SYMBOL=302
    MASTER_PASSWORD_SYMBOL=303
    MASTER_PORT_SYMBOL=304
    MASTER_RETRY_COUNT_SYMBOL=305
    MASTER_SERVER_ID_SYMBOL=306
    MASTER_SSL_CAPATH_SYMBOL=307
    MASTER_SSL_CA_SYMBOL=308
    MASTER_SSL_CERT_SYMBOL=309
    MASTER_SSL_CIPHER_SYMBOL=310
    MASTER_SSL_CRL_SYMBOL=311
    MASTER_SSL_CRLPATH_SYMBOL=312
    MASTER_SSL_KEY_SYMBOL=313
    MASTER_SSL_SYMBOL=314
    MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=315
    MASTER_SYMBOL=316
    MASTER_TLS_VERSION_SYMBOL=317
    MASTER_USER_SYMBOL=318
    MASTER_HEARTBEAT_PERIOD_SYMBOL=319
    MATCH_SYMBOL=320
    MAX_CONNECTIONS_PER_HOUR_SYMBOL=321
    MAX_QUERIES_PER_HOUR_SYMBOL=322
    MAX_ROWS_SYMBOL=323
    MAX_SIZE_SYMBOL=324
    MAX_STATEMENT_TIME_SYMBOL=325
    MAX_SYMBOL=326
    MAX_UPDATES_PER_HOUR_SYMBOL=327
    MAX_USER_CONNECTIONS_SYMBOL=328
    MAXVALUE_SYMBOL=329
    MEDIUMBLOB_SYMBOL=330
    MEDIUMINT_SYMBOL=331
    MEDIUMTEXT_SYMBOL=332
    MEDIUM_SYMBOL=333
    MEMORY_SYMBOL=334
    MERGE_SYMBOL=335
    MESSAGE_TEXT_SYMBOL=336
    MICROSECOND_SYMBOL=337
    MID_SYMBOL=338
    MIDDLEINT_SYMBOL=339
    MIGRATE_SYMBOL=340
    MINUTE_MICROSECOND_SYMBOL=341
    MINUTE_SECOND_SYMBOL=342
    MINUTE_SYMBOL=343
    MIN_ROWS_SYMBOL=344
    MIN_SYMBOL=345
    MODE_SYMBOL=346
    MODIFIES_SYMBOL=347
    MODIFY_SYMBOL=348
    MOD_SYMBOL=349
    MONTH_SYMBOL=350
    MULTILINESTRING_SYMBOL=351
    MULTIPOINT_SYMBOL=352
    MULTIPOLYGON_SYMBOL=353
    MUTEX_SYMBOL=354
    MYSQL_ERRNO_SYMBOL=355
    NAMES_SYMBOL=356
    NAME_SYMBOL=357
    NATIONAL_SYMBOL=358
    NATURAL_SYMBOL=359
    NCHAR_STRING_SYMBOL=360
    NCHAR_SYMBOL=361
    NDB_SYMBOL=362
    NDBCLUSTER_SYMBOL=363
    NEG_SYMBOL=364
    NEVER_SYMBOL=365
    NEW_SYMBOL=366
    NEXT_SYMBOL=367
    NODEGROUP_SYMBOL=368
    NONE_SYMBOL=369
    NONBLOCKING_SYMBOL=370
    NOT_SYMBOL=371
    NOW_SYMBOL=372
    NO_SYMBOL=373
    NO_WAIT_SYMBOL=374
    NO_WRITE_TO_BINLOG_SYMBOL=375
    NULL_SYMBOL=376
    NUMBER_SYMBOL=377
    NUMERIC_SYMBOL=378
    NVARCHAR_SYMBOL=379
    OFFLINE_SYMBOL=380
    OFFSET_SYMBOL=381
    OLD_PASSWORD_SYMBOL=382
    ON_SYMBOL=383
    ONE_SYMBOL=384
    ONLINE_SYMBOL=385
    ONLY_SYMBOL=386
    OPEN_SYMBOL=387
    OPTIMIZE_SYMBOL=388
    OPTIMIZER_COSTS_SYMBOL=389
    OPTIONS_SYMBOL=390
    OPTION_SYMBOL=391
    OPTIONALLY_SYMBOL=392
    ORDER_SYMBOL=393
    OR_SYMBOL=394
    OUTER_SYMBOL=395
    OUTFILE_SYMBOL=396
    OUT_SYMBOL=397
    OWNER_SYMBOL=398
    PACK_KEYS_SYMBOL=399
    PAGE_SYMBOL=400
    PARSER_SYMBOL=401
    PARTIAL_SYMBOL=402
    PARTITIONING_SYMBOL=403
    PARTITIONS_SYMBOL=404
    PARTITION_SYMBOL=405
    PASSWORD_SYMBOL=406
    PHASE_SYMBOL=407
    PLUGINS_SYMBOL=408
    PLUGIN_DIR_SYMBOL=409
    PLUGIN_SYMBOL=410
    POINT_SYMBOL=411
    POLYGON_SYMBOL=412
    PORT_SYMBOL=413
    POSITION_SYMBOL=414
    PRECEDES_SYMBOL=415
    PRECISION_SYMBOL=416
    PREPARE_SYMBOL=417
    PRESERVE_SYMBOL=418
    PREV_SYMBOL=419
    PRIMARY_SYMBOL=420
    PRIVILEGES_SYMBOL=421
    PROCEDURE_SYMBOL=422
    PROCESS_SYMBOL=423
    PROCESSLIST_SYMBOL=424
    PROFILE_SYMBOL=425
    PROFILES_SYMBOL=426
    PROXY_SYMBOL=427
    PURGE_SYMBOL=428
    QUARTER_SYMBOL=429
    QUERY_SYMBOL=430
    QUICK_SYMBOL=431
    RANGE_SYMBOL=432
    READS_SYMBOL=433
    READ_ONLY_SYMBOL=434
    READ_SYMBOL=435
    READ_WRITE_SYMBOL=436
    REAL_SYMBOL=437
    REBUILD_SYMBOL=438
    RECOVER_SYMBOL=439
    REDOFILE_SYMBOL=440
    REDO_BUFFER_SIZE_SYMBOL=441
    REDUNDANT_SYMBOL=442
    REFERENCES_SYMBOL=443
    REGEXP_SYMBOL=444
    RELAY_SYMBOL=445
    RELAYLOG_SYMBOL=446
    RELAY_LOG_FILE_SYMBOL=447
    RELAY_LOG_POS_SYMBOL=448
    RELAY_THREAD_SYMBOL=449
    RELEASE_SYMBOL=450
    RELOAD_SYMBOL=451
    REMOVE_SYMBOL=452
    RENAME_SYMBOL=453
    REORGANIZE_SYMBOL=454
    REPAIR_SYMBOL=455
    REPEATABLE_SYMBOL=456
    REPEAT_SYMBOL=457
    REPLACE_SYMBOL=458
    REPLICATION_SYMBOL=459
    REPLICATE_DO_DB_SYMBOL=460
    REPLICATE_IGNORE_DB_SYMBOL=461
    REPLICATE_DO_TABLE_SYMBOL=462
    REPLICATE_IGNORE_TABLE_SYMBOL=463
    REPLICATE_WILD_DO_TABLE_SYMBOL=464
    REPLICATE_WILD_IGNORE_TABLE_SYMBOL=465
    REPLICATE_REWRITE_DB_SYMBOL=466
    REQUIRE_SYMBOL=467
    RESET_SYMBOL=468
    RESIGNAL_SYMBOL=469
    RESTORE_SYMBOL=470
    RESTRICT_SYMBOL=471
    RESUME_SYMBOL=472
    RETURNED_SQLSTATE_SYMBOL=473
    RETURNS_SYMBOL=474
    RETURN_SYMBOL=475
    REVERSE_SYMBOL=476
    REVOKE_SYMBOL=477
    RIGHT_SYMBOL=478
    RLIKE_SYMBOL=479
    ROLLBACK_SYMBOL=480
    ROLLUP_SYMBOL=481
    ROTATE_SYMBOL=482
    ROUTINE_SYMBOL=483
    ROWS_SYMBOL=484
    ROW_COUNT_SYMBOL=485
    ROW_FORMAT_SYMBOL=486
    ROW_SYMBOL=487
    RTREE_SYMBOL=488
    SAVEPOINT_SYMBOL=489
    SCHEDULE_SYMBOL=490
    SCHEMA_SYMBOL=491
    SCHEMA_NAME_SYMBOL=492
    SCHEMAS_SYMBOL=493
    SECOND_MICROSECOND_SYMBOL=494
    SECOND_SYMBOL=495
    SECURITY_SYMBOL=496
    SELECT_SYMBOL=497
    SENSITIVE_SYMBOL=498
    SEPARATOR_SYMBOL=499
    SERIALIZABLE_SYMBOL=500
    SERIAL_SYMBOL=501
    SESSION_SYMBOL=502
    SERVER_SYMBOL=503
    SERVER_OPTIONS_SYMBOL=504
    SESSION_USER_SYMBOL=505
    SET_SYMBOL=506
    SET_VAR_SYMBOL=507
    SHARE_SYMBOL=508
    SHOW_SYMBOL=509
    SHUTDOWN_SYMBOL=510
    SIGNAL_SYMBOL=511
    SIGNED_SYMBOL=512
    SIMPLE_SYMBOL=513
    SLAVE_SYMBOL=514
    SLOW_SYMBOL=515
    SMALLINT_SYMBOL=516
    SNAPSHOT_SYMBOL=517
    SOME_SYMBOL=518
    SOCKET_SYMBOL=519
    SONAME_SYMBOL=520
    SOUNDS_SYMBOL=521
    SOURCE_SYMBOL=522
    SPATIAL_SYMBOL=523
    SPECIFIC_SYMBOL=524
    SQLEXCEPTION_SYMBOL=525
    SQLSTATE_SYMBOL=526
    SQLWARNING_SYMBOL=527
    SQL_AFTER_GTIDS_SYMBOL=528
    SQL_AFTER_MTS_GAPS_SYMBOL=529
    SQL_BEFORE_GTIDS_SYMBOL=530
    SQL_BIG_RESULT_SYMBOL=531
    SQL_BUFFER_RESULT_SYMBOL=532
    SQL_CACHE_SYMBOL=533
    SQL_CALC_FOUND_ROWS_SYMBOL=534
    SQL_NO_CACHE_SYMBOL=535
    SQL_SMALL_RESULT_SYMBOL=536
    SQL_SYMBOL=537
    SQL_THREAD_SYMBOL=538
    SSL_SYMBOL=539
    STACKED_SYMBOL=540
    STARTING_SYMBOL=541
    STARTS_SYMBOL=542
    START_SYMBOL=543
    STATS_AUTO_RECALC_SYMBOL=544
    STATS_PERSISTENT_SYMBOL=545
    STATS_SAMPLE_PAGES_SYMBOL=546
    STATUS_SYMBOL=547
    STDDEV_SAMP_SYMBOL=548
    STDDEV_SYMBOL=549
    STDDEV_POP_SYMBOL=550
    STD_SYMBOL=551
    STOP_SYMBOL=552
    STORAGE_SYMBOL=553
    STORED_SYMBOL=554
    STRAIGHT_JOIN_SYMBOL=555
    STRING_SYMBOL=556
    SUBCLASS_ORIGIN_SYMBOL=557
    SUBDATE_SYMBOL=558
    SUBJECT_SYMBOL=559
    SUBPARTITIONS_SYMBOL=560
    SUBPARTITION_SYMBOL=561
    SUBSTR_SYMBOL=562
    SUBSTRING_SYMBOL=563
    SUM_SYMBOL=564
    SUPER_SYMBOL=565
    SUSPEND_SYMBOL=566
    SWAPS_SYMBOL=567
    SWITCHES_SYMBOL=568
    SYSDATE_SYMBOL=569
    SYSTEM_USER_SYMBOL=570
    TABLES_SYMBOL=571
    TABLESPACE_SYMBOL=572
    TABLE_REF_PRIORITY_SYMBOL=573
    TABLE_SYMBOL=574
    TABLE_CHECKSUM_SYMBOL=575
    TABLE_NAME_SYMBOL=576
    TEMPORARY_SYMBOL=577
    TEMPTABLE_SYMBOL=578
    TERMINATED_SYMBOL=579
    TEXT_SYMBOL=580
    THAN_SYMBOL=581
    THEN_SYMBOL=582
    TIMESTAMP_SYMBOL=583
    TIMESTAMP_ADD_SYMBOL=584
    TIMESTAMP_DIFF_SYMBOL=585
    TIME_SYMBOL=586
    TINYBLOB_SYMBOL=587
    TINYINT_SYMBOL=588
    TINYTEXT_SYMBOL=589
    TO_SYMBOL=590
    TRAILING_SYMBOL=591
    TRANSACTION_SYMBOL=592
    TRIGGERS_SYMBOL=593
    TRIGGER_SYMBOL=594
    TRIM_SYMBOL=595
    TRUE_SYMBOL=596
    TRUNCATE_SYMBOL=597
    TYPES_SYMBOL=598
    TYPE_SYMBOL=599
    UDF_RETURNS_SYMBOL=600
    UNCOMMITTED_SYMBOL=601
    UNDEFINED_SYMBOL=602
    UNDOFILE_SYMBOL=603
    UNDO_BUFFER_SIZE_SYMBOL=604
    UNDO_SYMBOL=605
    UNICODE_SYMBOL=606
    UNINSTALL_SYMBOL=607
    UNION_SYMBOL=608
    UNIQUE_SYMBOL=609
    UNKNOWN_SYMBOL=610
    UNLOCK_SYMBOL=611
    UNSIGNED_SYMBOL=612
    UNTIL_SYMBOL=613
    UPDATE_SYMBOL=614
    UPGRADE_SYMBOL=615
    USAGE_SYMBOL=616
    USER_RESOURCES_SYMBOL=617
    USER_SYMBOL=618
    USE_FRM_SYMBOL=619
    USE_SYMBOL=620
    USING_SYMBOL=621
    UTC_DATE_SYMBOL=622
    UTC_TIMESTAMP_SYMBOL=623
    UTC_TIME_SYMBOL=624
    VALIDATION_SYMBOL=625
    VALUES_SYMBOL=626
    VALUE_SYMBOL=627
    VARBINARY_SYMBOL=628
    VARCHAR_SYMBOL=629
    VARCHARACTER_SYMBOL=630
    VARIABLES_SYMBOL=631
    VARIANCE_SYMBOL=632
    VARYING_SYMBOL=633
    VAR_POP_SYMBOL=634
    VAR_SAMP_SYMBOL=635
    VIEW_SYMBOL=636
    VIRTUAL_SYMBOL=637
    WAIT_SYMBOL=638
    WARNINGS_SYMBOL=639
    WEEK_SYMBOL=640
    WEIGHT_STRING_SYMBOL=641
    WHEN_SYMBOL=642
    WHERE_SYMBOL=643
    WHILE_SYMBOL=644
    WITH_SYMBOL=645
    WITHOUT_SYMBOL=646
    WORK_SYMBOL=647
    WRAPPER_SYMBOL=648
    WRITE_SYMBOL=649
    X509_SYMBOL=650
    XA_SYMBOL=651
    XID_SYMBOL=652
    XML_SYMBOL=653
    XOR_SYMBOL=654
    YEAR_MONTH_SYMBOL=655
    YEAR_SYMBOL=656
    ZEROFILL_SYMBOL=657
    PERSIST_SYMBOL=658
    ROLE_SYMBOL=659
    ADMIN_SYMBOL=660
    INVISIBLE_SYMBOL=661
    VISIBLE_SYMBOL=662
    EXCEPT_SYMBOL=663
    COMPONENT_SYMBOL=664
    RECURSIVE_SYMBOL=665
    JSON_OBJECTAGG_SYMBOL=666
    JSON_ARRAYAGG_SYMBOL=667
    OF_SYMBOL=668
    SKIP_SYMBOL=669
    LOCKED_SYMBOL=670
    NOWAIT_SYMBOL=671
    GROUPING_SYMBOL=672
    PERSIST_ONLY_SYMBOL=673
    HISTOGRAM_SYMBOL=674
    BUCKETS_SYMBOL=675
    REMOTE_SYMBOL=676
    CLONE_SYMBOL=677
    CUME_DIST_SYMBOL=678
    DENSE_RANK_SYMBOL=679
    EXCLUDE_SYMBOL=680
    FIRST_VALUE_SYMBOL=681
    FOLLOWING_SYMBOL=682
    GROUPS_SYMBOL=683
    LAG_SYMBOL=684
    LAST_VALUE_SYMBOL=685
    LEAD_SYMBOL=686
    NTH_VALUE_SYMBOL=687
    NTILE_SYMBOL=688
    NULLS_SYMBOL=689
    OTHERS_SYMBOL=690
    OVER_SYMBOL=691
    PERCENT_RANK_SYMBOL=692
    PRECEDING_SYMBOL=693
    RANK_SYMBOL=694
    RESPECT_SYMBOL=695
    ROW_NUMBER_SYMBOL=696
    TIES_SYMBOL=697
    UNBOUNDED_SYMBOL=698
    WINDOW_SYMBOL=699
    EMPTY_SYMBOL=700
    JSON_TABLE_SYMBOL=701
    NESTED_SYMBOL=702
    ORDINALITY_SYMBOL=703
    PATH_SYMBOL=704
    HISTORY_SYMBOL=705
    REUSE_SYMBOL=706
    SRID_SYMBOL=707
    THREAD_PRIORITY_SYMBOL=708
    RESOURCE_SYMBOL=709
    SYSTEM_SYMBOL=710
    VCPU_SYMBOL=711
    MASTER_PUBLIC_KEY_PATH_SYMBOL=712
    GET_MASTER_PUBLIC_KEY_SYMBOL=713
    RESTART_SYMBOL=714
    DEFINITION_SYMBOL=715
    DESCRIPTION_SYMBOL=716
    ORGANIZATION_SYMBOL=717
    REFERENCE_SYMBOL=718
    OPTIONAL_SYMBOL=719
    SECONDARY_SYMBOL=720
    SECONDARY_ENGINE_SYMBOL=721
    SECONDARY_LOAD_SYMBOL=722
    SECONDARY_UNLOAD_SYMBOL=723
    ACTIVE_SYMBOL=724
    INACTIVE_SYMBOL=725
    LATERAL_SYMBOL=726
    RETAIN_SYMBOL=727
    OLD_SYMBOL=728
    NETWORK_NAMESPACE_SYMBOL=729
    ENFORCED_SYMBOL=730
    ARRAY_SYMBOL=731
    OJ_SYMBOL=732
    MEMBER_SYMBOL=733
    RANDOM_SYMBOL=734
    MASTER_COMPRESSION_ALGORITHM_SYMBOL=735
    MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=736
    PRIVILEGE_CHECKS_USER_SYMBOL=737
    MASTER_TLS_CIPHERSUITES_SYMBOL=738
    REQUIRE_ROW_FORMAT_SYMBOL=739
    PASSWORD_LOCK_TIME_SYMBOL=740
    FAILED_LOGIN_ATTEMPTS_SYMBOL=741
    REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL=742
    STREAM_SYMBOL=743
    OFF_SYMBOL=744
    NOT2_SYMBOL=745
    CONCAT_PIPES_SYMBOL=746
    INT_NUMBER=747
    LONG_NUMBER=748
    ULONGLONG_NUMBER=749
    EQUAL_OPERATOR=750
    ASSIGN_OPERATOR=751
    NULL_SAFE_EQUAL_OPERATOR=752
    GREATER_OR_EQUAL_OPERATOR=753
    GREATER_THAN_OPERATOR=754
    LESS_OR_EQUAL_OPERATOR=755
    LESS_THAN_OPERATOR=756
    NOT_EQUAL_OPERATOR=757
    PLUS_OPERATOR=758
    MINUS_OPERATOR=759
    MULT_OPERATOR=760
    DIV_OPERATOR=761
    MOD_OPERATOR=762
    LOGICAL_NOT_OPERATOR=763
    BITWISE_NOT_OPERATOR=764
    SHIFT_LEFT_OPERATOR=765
    SHIFT_RIGHT_OPERATOR=766
    LOGICAL_AND_OPERATOR=767
    BITWISE_AND_OPERATOR=768
    BITWISE_XOR_OPERATOR=769
    LOGICAL_OR_OPERATOR=770
    BITWISE_OR_OPERATOR=771
    DOT_SYMBOL=772
    COMMA_SYMBOL=773
    SEMICOLON_SYMBOL=774
    COLON_SYMBOL=775
    OPEN_PAR_SYMBOL=776
    CLOSE_PAR_SYMBOL=777
    OPEN_CURLY_SYMBOL=778
    CLOSE_CURLY_SYMBOL=779
    UNDERLINE_SYMBOL=780
    JSON_SEPARATOR_SYMBOL=781
    JSON_UNQUOTED_SEPARATOR_SYMBOL=782
    AT_SIGN_SYMBOL=783
    AT_TEXT_SUFFIX=784
    AT_AT_SIGN_SYMBOL=785
    NULL2_SYMBOL=786
    PARAM_MARKER=787
    HEX_NUMBER=788
    BIN_NUMBER=789
    DECIMAL_NUMBER=790
    FLOAT_NUMBER=791
    WHITESPACE=792
    INVALID_INPUT=793
    UNDERSCORE_CHARSET=794
    IDENTIFIER=795
    NCHAR_TEXT=796
    BACK_TICK_QUOTED_ID=797
    DOUBLE_QUOTED_TEXT=798
    SINGLE_QUOTED_TEXT=799
    VERSION_COMMENT_START=800
    MYSQL_COMMENT_START=801
    VERSION_COMMENT_END=802
    BLOCK_COMMENT=803
    POUND_COMMENT=804
    DASHDASH_COMMENT=805
    NOT_EQUAL2_OPERATOR=806

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MySQLParser.EOF, 0)

        def simpleStatement(self):
            return self.getTypedRuleContext(MySQLParser.SimpleStatementContext,0)


        def beginWork(self):
            return self.getTypedRuleContext(MySQLParser.BeginWorkContext,0)


        def SEMICOLON_SYMBOL(self):
            return self.getToken(MySQLParser.SEMICOLON_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = MySQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_query)
        try:
            self.state = 1232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1220
                self.match(MySQLParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 1221
                    self.simpleStatement()
                    pass

                elif la_ == 2:
                    self.state = 1222
                    self.beginWork()
                    pass


                self.state = 1230
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [774]:
                    self.state = 1225
                    self.match(MySQLParser.SEMICOLON_SYMBOL)
                    self.state = 1227
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                    if la_ == 1:
                        self.state = 1226
                        self.match(MySQLParser.EOF)


                    pass
                elif token in [-1]:
                    self.state = 1229
                    self.match(MySQLParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStatement(self):
            return self.getTypedRuleContext(MySQLParser.AlterStatementContext,0)


        def createStatement(self):
            return self.getTypedRuleContext(MySQLParser.CreateStatementContext,0)


        def dropStatement(self):
            return self.getTypedRuleContext(MySQLParser.DropStatementContext,0)


        def renameTableStatement(self):
            return self.getTypedRuleContext(MySQLParser.RenameTableStatementContext,0)


        def truncateTableStatement(self):
            return self.getTypedRuleContext(MySQLParser.TruncateTableStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(MySQLParser.ImportStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(MySQLParser.CallStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(MySQLParser.DeleteStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(MySQLParser.DoStatementContext,0)


        def handlerStatement(self):
            return self.getTypedRuleContext(MySQLParser.HandlerStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(MySQLParser.InsertStatementContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(MySQLParser.LoadStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(MySQLParser.ReplaceStatementContext,0)


        def selectStatement(self):
            return self.getTypedRuleContext(MySQLParser.SelectStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(MySQLParser.UpdateStatementContext,0)


        def transactionOrLockingStatement(self):
            return self.getTypedRuleContext(MySQLParser.TransactionOrLockingStatementContext,0)


        def replicationStatement(self):
            return self.getTypedRuleContext(MySQLParser.ReplicationStatementContext,0)


        def preparedStatement(self):
            return self.getTypedRuleContext(MySQLParser.PreparedStatementContext,0)


        def cloneStatement(self):
            return self.getTypedRuleContext(MySQLParser.CloneStatementContext,0)


        def accountManagementStatement(self):
            return self.getTypedRuleContext(MySQLParser.AccountManagementStatementContext,0)


        def tableAdministrationStatement(self):
            return self.getTypedRuleContext(MySQLParser.TableAdministrationStatementContext,0)


        def installUninstallStatment(self):
            return self.getTypedRuleContext(MySQLParser.InstallUninstallStatmentContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(MySQLParser.SetStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(MySQLParser.ShowStatementContext,0)


        def resourceGroupManagement(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupManagementContext,0)


        def otherAdministrativeStatement(self):
            return self.getTypedRuleContext(MySQLParser.OtherAdministrativeStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(MySQLParser.UtilityStatementContext,0)


        def getDiagnostics(self):
            return self.getTypedRuleContext(MySQLParser.GetDiagnosticsContext,0)


        def signalStatement(self):
            return self.getTypedRuleContext(MySQLParser.SignalStatementContext,0)


        def resignalStatement(self):
            return self.getTypedRuleContext(MySQLParser.ResignalStatementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = MySQLParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_simpleStatement)
        try:
            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1234
                self.alterStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1235
                self.createStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1236
                self.dropStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1237
                self.renameTableStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1238
                self.truncateTableStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1239
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1240
                self.importStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1241
                self.callStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1242
                self.deleteStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1243
                self.doStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1244
                self.handlerStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1245
                self.insertStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1246
                self.loadStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1247
                self.replaceStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1248
                self.selectStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1249
                self.updateStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1250
                self.transactionOrLockingStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1251
                self.replicationStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1252
                self.preparedStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1253
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1254
                self.cloneStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1255
                self.accountManagementStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1256
                self.tableAdministrationStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1257
                self.installUninstallStatment()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1258
                self.setStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1259
                self.showStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1260
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1261
                self.resourceGroupManagement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1262
                self.otherAdministrativeStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1263
                self.utilityStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1264
                if not serverVersion >= 50604:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50604")
                self.state = 1265
                self.getDiagnostics()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1266
                self.signalStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1267
                self.resignalStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MySQLParser.ALTER_SYMBOL, 0)

        def alterTable(self):
            return self.getTypedRuleContext(MySQLParser.AlterTableContext,0)


        def alterDatabase(self):
            return self.getTypedRuleContext(MySQLParser.AlterDatabaseContext,0)


        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureRefContext,0)


        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def functionRef(self):
            return self.getTypedRuleContext(MySQLParser.FunctionRefContext,0)


        def alterView(self):
            return self.getTypedRuleContext(MySQLParser.AlterViewContext,0)


        def alterEvent(self):
            return self.getTypedRuleContext(MySQLParser.AlterEventContext,0)


        def alterTablespace(self):
            return self.getTypedRuleContext(MySQLParser.AlterTablespaceContext,0)


        def alterUndoTablespace(self):
            return self.getTypedRuleContext(MySQLParser.AlterUndoTablespaceContext,0)


        def alterLogfileGroup(self):
            return self.getTypedRuleContext(MySQLParser.AlterLogfileGroupContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(MySQLParser.AlterServerContext,0)


        def INSTANCE_SYMBOL(self):
            return self.getToken(MySQLParser.INSTANCE_SYMBOL, 0)

        def ROTATE_SYMBOL(self):
            return self.getToken(MySQLParser.ROTATE_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def routineAlterOptions(self):
            return self.getTypedRuleContext(MySQLParser.RoutineAlterOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatement" ):
                listener.enterAlterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatement" ):
                listener.exitAlterStatement(self)




    def alterStatement(self):

        localctx = MySQLParser.AlterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_alterStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(MySQLParser.ALTER_SYMBOL)
            self.state = 1297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 1271
                self.alterTable()
                pass

            elif la_ == 2:
                self.state = 1272
                self.alterDatabase()
                pass

            elif la_ == 3:
                self.state = 1273
                self.match(MySQLParser.PROCEDURE_SYMBOL)
                self.state = 1274
                self.procedureRef()
                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 4611686018427420673) != 0 or _la==267 or (((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & 83886081) != 0 or _la==433 or _la==537:
                    self.state = 1275
                    self.routineAlterOptions()


                pass

            elif la_ == 4:
                self.state = 1278
                self.match(MySQLParser.FUNCTION_SYMBOL)
                self.state = 1279
                self.functionRef()
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 4611686018427420673) != 0 or _la==267 or (((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & 83886081) != 0 or _la==433 or _la==537:
                    self.state = 1280
                    self.routineAlterOptions()


                pass

            elif la_ == 5:
                self.state = 1283
                self.alterView()
                pass

            elif la_ == 6:
                self.state = 1284
                self.alterEvent()
                pass

            elif la_ == 7:
                self.state = 1285
                self.alterTablespace()
                pass

            elif la_ == 8:
                self.state = 1286
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 1287
                self.alterUndoTablespace()
                pass

            elif la_ == 9:
                self.state = 1288
                self.alterLogfileGroup()
                pass

            elif la_ == 10:
                self.state = 1289
                self.alterServer()
                pass

            elif la_ == 11:
                self.state = 1290
                if not serverVersion >= 50713:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50713")
                self.state = 1291
                self.match(MySQLParser.INSTANCE_SYMBOL)
                self.state = 1292
                self.match(MySQLParser.ROTATE_SYMBOL)
                self.state = 1293
                self.textOrIdentifier()
                self.state = 1294
                self.match(MySQLParser.MASTER_SYMBOL)
                self.state = 1295
                self.match(MySQLParser.KEY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(MySQLParser.SchemaRefContext,0)


        def UPGRADE_SYMBOL(self):
            return self.getToken(MySQLParser.UPGRADE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MySQLParser.NAME_SYMBOL, 0)

        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterDatabase" ):
                listener.enterAlterDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterDatabase" ):
                listener.exitAlterDatabase(self)




    def alterDatabase(self):

        localctx = MySQLParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alterDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.match(MySQLParser.DATABASE_SYMBOL)
            self.state = 1300
            self.schemaRef()
            self.state = 1311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 1302 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1301
                        self.createDatabaseOption()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1304 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1306
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 1307
                self.match(MySQLParser.UPGRADE_SYMBOL)
                self.state = 1308
                self.match(MySQLParser.DATA_SYMBOL)
                self.state = 1309
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 1310
                self.match(MySQLParser.NAME_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def eventRef(self):
            return self.getTypedRuleContext(MySQLParser.EventRefContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def ON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ON_SYMBOL)
            else:
                return self.getToken(MySQLParser.ON_SYMBOL, i)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEDULE_SYMBOL, 0)

        def schedule(self):
            return self.getTypedRuleContext(MySQLParser.ScheduleContext,0)


        def COMPLETION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPLETION_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(MySQLParser.PRESERVE_SYMBOL, 0)

        def RENAME_SYMBOL(self):
            return self.getToken(MySQLParser.RENAME_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterEvent" ):
                listener.enterAlterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterEvent" ):
                listener.exitAlterEvent(self)




    def alterEvent(self):

        localctx = MySQLParser.AlterEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alterEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 1313
                self.definerClause()


            self.state = 1316
            self.match(MySQLParser.EVENT_SYMBOL)
            self.state = 1317
            self.eventRef()
            self.state = 1321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 1318
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 1319
                self.match(MySQLParser.SCHEDULE_SYMBOL)
                self.state = 1320
                self.schedule()


            self.state = 1329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==383:
                self.state = 1323
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 1324
                self.match(MySQLParser.COMPLETION_SYMBOL)
                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==371:
                    self.state = 1325
                    self.match(MySQLParser.NOT_SYMBOL)


                self.state = 1328
                self.match(MySQLParser.PRESERVE_SYMBOL)


            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==453:
                self.state = 1331
                self.match(MySQLParser.RENAME_SYMBOL)
                self.state = 1332
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 1333
                self.identifier()


            self.state = 1342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [156]:
                self.state = 1336
                self.match(MySQLParser.ENABLE_SYMBOL)
                pass
            elif token in [140]:
                self.state = 1337
                self.match(MySQLParser.DISABLE_SYMBOL)
                self.state = 1340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==383:
                    self.state = 1338
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 1339
                    self.match(MySQLParser.SLAVE_SYMBOL)


                pass
            elif token in [-1, 75, 147, 774]:
                pass
            else:
                pass
            self.state = 1346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 1344
                self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 1345
                self.textLiteral()


            self.state = 1350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 1348
                self.match(MySQLParser.DO_SYMBOL)
                self.state = 1349
                self.compoundStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def logfileGroupRef(self):
            return self.getTypedRuleContext(MySQLParser.LogfileGroupRefContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def UNDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDOFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def alterLogfileGroupOptions(self):
            return self.getTypedRuleContext(MySQLParser.AlterLogfileGroupOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroup" ):
                listener.enterAlterLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroup" ):
                listener.exitAlterLogfileGroup(self)




    def alterLogfileGroup(self):

        localctx = MySQLParser.AlterLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alterLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(MySQLParser.LOGFILE_SYMBOL)
            self.state = 1353
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 1354
            self.logfileGroupRef()
            self.state = 1355
            self.match(MySQLParser.ADD_SYMBOL)
            self.state = 1356
            self.match(MySQLParser.UNDOFILE_SYMBOL)
            self.state = 1357
            self.textLiteral()
            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163 or _la==238 or _la==374 or _la==553 or _la==638:
                self.state = 1358
                self.alterLogfileGroupOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterLogfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterLogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterLogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterLogfileGroupOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroupOptions" ):
                listener.enterAlterLogfileGroupOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroupOptions" ):
                listener.exitAlterLogfileGroupOptions(self)




    def alterLogfileGroupOptions(self):

        localctx = MySQLParser.AlterLogfileGroupOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_alterLogfileGroupOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.alterLogfileGroupOption()
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==163 or _la==238 or _la==374 or _la==553 or _la==638 or _la==773:
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 1362
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 1365
                self.alterLogfileGroupOption()
                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionInitialSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionInitialSizeContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionWaitContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterLogfileGroupOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroupOption" ):
                listener.enterAlterLogfileGroupOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroupOption" ):
                listener.exitAlterLogfileGroupOption(self)




    def alterLogfileGroupOption(self):

        localctx = MySQLParser.AlterLogfileGroupOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_alterLogfileGroupOption)
        try:
            self.state = 1374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [238]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1371
                self.tsOptionInitialSize()
                pass
            elif token in [163, 553]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1372
                self.tsOptionEngine()
                pass
            elif token in [374, 638]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1373
                self.tsOptionWait()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER_SYMBOL(self):
            return self.getToken(MySQLParser.SERVER_SYMBOL, 0)

        def serverRef(self):
            return self.getTypedRuleContext(MySQLParser.ServerRefContext,0)


        def serverOptions(self):
            return self.getTypedRuleContext(MySQLParser.ServerOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterServer" ):
                listener.enterAlterServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterServer" ):
                listener.exitAlterServer(self)




    def alterServer(self):

        localctx = MySQLParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_alterServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(MySQLParser.SERVER_SYMBOL)
            self.state = 1377
            self.serverRef()
            self.state = 1378
            self.serverOptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def onlineOption(self):
            return self.getTypedRuleContext(MySQLParser.OnlineOptionContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def alterTableActions(self):
            return self.getTypedRuleContext(MySQLParser.AlterTableActionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTable" ):
                listener.enterAlterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTable" ):
                listener.exitAlterTable(self)




    def alterTable(self):

        localctx = MySQLParser.AlterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_alterTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 1380
                self.onlineOption()


            self.state = 1385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 1383
                if not serverVersion < 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50700")
                self.state = 1384
                self.match(MySQLParser.IGNORE_SYMBOL)


            self.state = 1387
            self.match(MySQLParser.TABLE_SYMBOL)
            self.state = 1388
            self.tableRef()
            self.state = 1390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 1389
                self.alterTableActions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableActionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterCommandList(self):
            return self.getTypedRuleContext(MySQLParser.AlterCommandListContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(MySQLParser.PartitionClauseContext,0)


        def removePartitioning(self):
            return self.getTypedRuleContext(MySQLParser.RemovePartitioningContext,0)


        def standaloneAlterCommands(self):
            return self.getTypedRuleContext(MySQLParser.StandaloneAlterCommandsContext,0)


        def alterCommandsModifierList(self):
            return self.getTypedRuleContext(MySQLParser.AlterCommandsModifierListContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterTableActions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableActions" ):
                listener.enterAlterTableActions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableActions" ):
                listener.exitAlterTableActions(self)




    def alterTableActions(self):

        localctx = MySQLParser.AlterTableActionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_alterTableActions)
        try:
            self.state = 1405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1392
                self.alterCommandList()
                self.state = 1395
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [405]:
                    self.state = 1393
                    self.partitionClause()
                    pass
                elif token in [452]:
                    self.state = 1394
                    self.removePartitioning()
                    pass
                elif token in [-1, 774]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.partitionClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1398
                self.removePartitioning()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    self.alterCommandsModifierList()
                    self.state = 1400
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 1404
                self.standaloneAlterCommands()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCommandListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterCommandsModifierList(self):
            return self.getTypedRuleContext(MySQLParser.AlterCommandsModifierListContext,0)


        def alterList(self):
            return self.getTypedRuleContext(MySQLParser.AlterListContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterCommandList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCommandList" ):
                listener.enterAlterCommandList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCommandList" ):
                listener.exitAlterCommandList(self)




    def alterCommandList(self):

        localctx = MySQLParser.AlterCommandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_alterCommandList)
        try:
            self.state = 1414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1407
                self.alterCommandsModifierList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 1408
                    self.alterCommandsModifierList()
                    self.state = 1409
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 1413
                self.alterList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCommandsModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterCommandsModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterCommandsModifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterCommandsModifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterCommandsModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCommandsModifierList" ):
                listener.enterAlterCommandsModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCommandsModifierList" ):
                listener.exitAlterCommandsModifierList(self)




    def alterCommandsModifierList(self):

        localctx = MySQLParser.AlterCommandsModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alterCommandsModifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.alterCommandsModifier()
            self.state = 1421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1417
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 1418
                    self.alterCommandsModifier() 
                self.state = 1423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneAlterCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD_SYMBOL(self):
            return self.getToken(MySQLParser.DISCARD_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def alterPartition(self):
            return self.getTypedRuleContext(MySQLParser.AlterPartitionContext,0)


        def SECONDARY_LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0)

        def SECONDARY_UNLOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_standaloneAlterCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneAlterCommands" ):
                listener.enterStandaloneAlterCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneAlterCommands" ):
                listener.exitStandaloneAlterCommands(self)




    def standaloneAlterCommands(self):

        localctx = MySQLParser.StandaloneAlterCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_standaloneAlterCommands)
        self._la = 0 # Token type
        try:
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1424
                self.match(MySQLParser.DISCARD_SYMBOL)
                self.state = 1425
                self.match(MySQLParser.TABLESPACE_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1426
                self.match(MySQLParser.IMPORT_SYMBOL)
                self.state = 1427
                self.match(MySQLParser.TABLESPACE_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1428
                self.alterPartition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1429
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 1430
                _la = self._input.LA(1)
                if not(_la==722 or _la==723):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySQLParser.PartitionDefinitionsContext,0)


        def PARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def noWriteToBinLog(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.NoWriteToBinLogContext)
            else:
                return self.getTypedRuleContext(MySQLParser.NoWriteToBinLogContext,i)


        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def REBUILD_SYMBOL(self):
            return self.getToken(MySQLParser.REBUILD_SYMBOL, 0)

        def allOrPartitionNameList(self):
            return self.getTypedRuleContext(MySQLParser.AllOrPartitionNameListContext,0)


        def OPTIMIZE_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0)

        def ANALYZE_SYMBOL(self):
            return self.getToken(MySQLParser.ANALYZE_SYMBOL, 0)

        def CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.CHECK_SYMBOL, 0)

        def checkOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CheckOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CheckOptionContext,i)


        def REPAIR_SYMBOL(self):
            return self.getToken(MySQLParser.REPAIR_SYMBOL, 0)

        def repairType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RepairTypeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RepairTypeContext,i)


        def COALESCE_SYMBOL(self):
            return self.getToken(MySQLParser.COALESCE_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)

        def REORGANIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REORGANIZE_SYMBOL, 0)

        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def EXCHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCHANGE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def withValidation(self):
            return self.getTypedRuleContext(MySQLParser.WithValidationContext,0)


        def DISCARD_SYMBOL(self):
            return self.getToken(MySQLParser.DISCARD_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterPartition" ):
                listener.enterAlterPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterPartition" ):
                listener.exitAlterPartition(self)




    def alterPartition(self):

        localctx = MySQLParser.AlterPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_alterPartition)
        self._la = 0 # Token type
        try:
            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1433
                self.match(MySQLParser.ADD_SYMBOL)
                self.state = 1434
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284 or _la==375:
                    self.state = 1435
                    self.noWriteToBinLog()


                self.state = 1441
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [776]:
                    self.state = 1438
                    self.partitionDefinitions()
                    pass
                elif token in [404]:
                    self.state = 1439
                    self.match(MySQLParser.PARTITIONS_SYMBOL)
                    self.state = 1440
                    self.real_ulong_number()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1443
                self.match(MySQLParser.DROP_SYMBOL)
                self.state = 1444
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1445
                self.identifierList()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1446
                self.match(MySQLParser.REBUILD_SYMBOL)
                self.state = 1447
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 1448
                    self.noWriteToBinLog()


                self.state = 1451
                self.allOrPartitionNameList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1452
                self.match(MySQLParser.OPTIMIZE_SYMBOL)
                self.state = 1453
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 1454
                    self.noWriteToBinLog()


                self.state = 1457
                self.allOrPartitionNameList()
                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284 or _la==375:
                    self.state = 1458
                    self.noWriteToBinLog()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1461
                self.match(MySQLParser.ANALYZE_SYMBOL)
                self.state = 1462
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1464
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 1463
                    self.noWriteToBinLog()


                self.state = 1466
                self.allOrPartitionNameList()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1467
                self.match(MySQLParser.CHECK_SYMBOL)
                self.state = 1468
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1469
                self.allOrPartitionNameList()
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==56 or (((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & 1048593) != 0 or _la==333 or _la==431:
                    self.state = 1470
                    self.checkOption()
                    self.state = 1475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1476
                self.match(MySQLParser.REPAIR_SYMBOL)
                self.state = 1477
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 1478
                    self.noWriteToBinLog()


                self.state = 1481
                self.allOrPartitionNameList()
                self.state = 1485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==180 or _la==431 or _la==619:
                    self.state = 1482
                    self.repairType()
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1488
                self.match(MySQLParser.COALESCE_SYMBOL)
                self.state = 1489
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284 or _la==375:
                    self.state = 1490
                    self.noWriteToBinLog()


                self.state = 1493
                self.real_ulong_number()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1494
                self.match(MySQLParser.TRUNCATE_SYMBOL)
                self.state = 1495
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1496
                self.allOrPartitionNameList()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1497
                self.match(MySQLParser.REORGANIZE_SYMBOL)
                self.state = 1498
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 1499
                    self.noWriteToBinLog()


                self.state = 1506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 1502
                    self.identifierList()
                    self.state = 1503
                    self.match(MySQLParser.INTO_SYMBOL)
                    self.state = 1504
                    self.partitionDefinitions()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1508
                self.match(MySQLParser.EXCHANGE_SYMBOL)
                self.state = 1509
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1510
                self.identifier()
                self.state = 1511
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 1512
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 1513
                self.tableRef()
                self.state = 1515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 1514
                    self.withValidation()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1517
                if not serverVersion >= 50704:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50704")
                self.state = 1518
                self.match(MySQLParser.DISCARD_SYMBOL)
                self.state = 1519
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1520
                self.allOrPartitionNameList()
                self.state = 1521
                self.match(MySQLParser.TABLESPACE_SYMBOL)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1523
                if not serverVersion >= 50704:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50704")
                self.state = 1524
                self.match(MySQLParser.IMPORT_SYMBOL)
                self.state = 1525
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 1526
                self.allOrPartitionNameList()
                self.state = 1527
                self.match(MySQLParser.TABLESPACE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterListItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterListItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterListItemContext,i)


        def createTableOptionsSpaceSeparated(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateTableOptionsSpaceSeparatedContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateTableOptionsSpaceSeparatedContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def alterCommandsModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterCommandsModifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterCommandsModifierContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterList" ):
                listener.enterAlterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterList" ):
                listener.exitAlterList(self)




    def alterList(self):

        localctx = MySQLParser.AlterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_alterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 1531
                self.alterListItem()
                pass

            elif la_ == 2:
                self.state = 1532
                self.createTableOptionsSpaceSeparated()
                pass


            self.state = 1543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 1535
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 1539
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 1536
                    self.alterListItem()
                    pass

                elif la_ == 2:
                    self.state = 1537
                    self.alterCommandsModifier()
                    pass

                elif la_ == 3:
                    self.state = 1538
                    self.createTableOptionsSpaceSeparated()
                    pass


                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterCommandsModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterAlgorithmOption(self):
            return self.getTypedRuleContext(MySQLParser.AlterAlgorithmOptionContext,0)


        def alterLockOption(self):
            return self.getTypedRuleContext(MySQLParser.AlterLockOptionContext,0)


        def withValidation(self):
            return self.getTypedRuleContext(MySQLParser.WithValidationContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterCommandsModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterCommandsModifier" ):
                listener.enterAlterCommandsModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterCommandsModifier" ):
                listener.exitAlterCommandsModifier(self)




    def alterCommandsModifier(self):

        localctx = MySQLParser.AlterCommandsModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_alterCommandsModifier)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1546
                self.alterAlgorithmOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1547
                self.alterLockOption()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1548
                self.withValidation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterListItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def fieldDefinition(self):
            return self.getTypedRuleContext(MySQLParser.FieldDefinitionContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def tableElementList(self):
            return self.getTypedRuleContext(MySQLParser.TableElementListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COLUMN_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_SYMBOL, 0)

        def checkOrReferences(self):
            return self.getTypedRuleContext(MySQLParser.CheckOrReferencesContext,0)


        def place(self):
            return self.getTypedRuleContext(MySQLParser.PlaceContext,0)


        def tableConstraintDef(self):
            return self.getTypedRuleContext(MySQLParser.TableConstraintDefContext,0)


        def CHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGE_SYMBOL, 0)

        def columnInternalRef(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefContext,0)


        def MODIFY_SYMBOL(self):
            return self.getToken(MySQLParser.MODIFY_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def FOREIGN_SYMBOL(self):
            return self.getToken(MySQLParser.FOREIGN_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def keyOrIndex(self):
            return self.getTypedRuleContext(MySQLParser.KeyOrIndexContext,0)


        def indexRef(self):
            return self.getTypedRuleContext(MySQLParser.IndexRefContext,0)


        def CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.CHECK_SYMBOL, 0)

        def CONSTRAINT_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0)

        def restrict(self):
            return self.getTypedRuleContext(MySQLParser.RestrictContext,0)


        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def KEYS_SYMBOL(self):
            return self.getToken(MySQLParser.KEYS_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def ALTER_SYMBOL(self):
            return self.getToken(MySQLParser.ALTER_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def signedLiteral(self):
            return self.getTypedRuleContext(MySQLParser.SignedLiteralContext,0)


        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def visibility(self):
            return self.getTypedRuleContext(MySQLParser.VisibilityContext,0)


        def constraintEnforcement(self):
            return self.getTypedRuleContext(MySQLParser.ConstraintEnforcementContext,0)


        def RENAME_SYMBOL(self):
            return self.getToken(MySQLParser.RENAME_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySQLParser.TableNameContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def indexName(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameContext,0)


        def CONVERT_SYMBOL(self):
            return self.getToken(MySQLParser.CONVERT_SYMBOL, 0)

        def charset(self):
            return self.getTypedRuleContext(MySQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(MySQLParser.FORCE_SYMBOL, 0)

        def ORDER_SYMBOL(self):
            return self.getToken(MySQLParser.ORDER_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def alterOrderList(self):
            return self.getTypedRuleContext(MySQLParser.AlterOrderListContext,0)


        def UPGRADE_SYMBOL(self):
            return self.getToken(MySQLParser.UPGRADE_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONING_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterListItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterListItem" ):
                listener.enterAlterListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterListItem" ):
                listener.exitAlterListItem(self)




    def alterListItem(self):

        localctx = MySQLParser.AlterListItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_alterListItem)
        self._la = 0 # Token type
        try:
            self.state = 1696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1551
                self.match(MySQLParser.ADD_SYMBOL)
                self.state = 1553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 1552
                    self.match(MySQLParser.COLUMN_SYMBOL)


                self.state = 1567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 1555
                    self.identifier()
                    self.state = 1556
                    self.fieldDefinition()
                    self.state = 1558
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                    if la_ == 1:
                        self.state = 1557
                        self.checkOrReferences()


                    self.state = 1561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==6 or _la==191:
                        self.state = 1560
                        self.place()


                    pass

                elif la_ == 2:
                    self.state = 1563
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 1564
                    self.tableElementList()
                    self.state = 1565
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.match(MySQLParser.ADD_SYMBOL)
                self.state = 1570
                self.tableConstraintDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1571
                self.match(MySQLParser.CHANGE_SYMBOL)
                self.state = 1573
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 1572
                    self.match(MySQLParser.COLUMN_SYMBOL)


                self.state = 1575
                self.columnInternalRef()
                self.state = 1576
                self.identifier()
                self.state = 1577
                self.fieldDefinition()
                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6 or _la==191:
                    self.state = 1578
                    self.place()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1581
                self.match(MySQLParser.MODIFY_SYMBOL)
                self.state = 1583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 1582
                    self.match(MySQLParser.COLUMN_SYMBOL)


                self.state = 1585
                self.columnInternalRef()
                self.state = 1586
                self.fieldDefinition()
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6 or _la==191:
                    self.state = 1587
                    self.place()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1590
                self.match(MySQLParser.DROP_SYMBOL)
                self.state = 1619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 1592
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        self.state = 1591
                        self.match(MySQLParser.COLUMN_SYMBOL)


                    self.state = 1594
                    self.columnInternalRef()
                    self.state = 1596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==49 or _la==471:
                        self.state = 1595
                        self.restrict()


                    pass

                elif la_ == 2:
                    self.state = 1598
                    self.match(MySQLParser.FOREIGN_SYMBOL)
                    self.state = 1599
                    self.match(MySQLParser.KEY_SYMBOL)
                    self.state = 1606
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                    if la_ == 1:
                        self.state = 1600
                        if not serverVersion >= 50700:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion >= 50700")
                        self.state = 1601
                        self.columnInternalRef()
                        pass

                    elif la_ == 2:
                        self.state = 1602
                        if not serverVersion < 50700:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion < 50700")
                        self.state = 1604
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                        if la_ == 1:
                            self.state = 1603
                            self.columnInternalRef()


                        pass


                    pass

                elif la_ == 3:
                    self.state = 1608
                    self.match(MySQLParser.PRIMARY_SYMBOL)
                    self.state = 1609
                    self.match(MySQLParser.KEY_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 1610
                    self.keyOrIndex()
                    self.state = 1611
                    self.indexRef()
                    pass

                elif la_ == 5:
                    self.state = 1613
                    if not serverVersion >= 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80017")
                    self.state = 1614
                    self.match(MySQLParser.CHECK_SYMBOL)
                    self.state = 1615
                    self.identifier()
                    pass

                elif la_ == 6:
                    self.state = 1616
                    if not serverVersion >= 80019:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80019")
                    self.state = 1617
                    self.match(MySQLParser.CONSTRAINT_SYMBOL)
                    self.state = 1618
                    self.identifier()
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1621
                self.match(MySQLParser.DISABLE_SYMBOL)
                self.state = 1622
                self.match(MySQLParser.KEYS_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1623
                self.match(MySQLParser.ENABLE_SYMBOL)
                self.state = 1624
                self.match(MySQLParser.KEYS_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1625
                self.match(MySQLParser.ALTER_SYMBOL)
                self.state = 1627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 1626
                    self.match(MySQLParser.COLUMN_SYMBOL)


                self.state = 1629
                self.columnInternalRef()
                self.state = 1639
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [506]:
                    self.state = 1630
                    self.match(MySQLParser.SET_SYMBOL)
                    self.state = 1631
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    self.state = 1635
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        self.state = 1632
                        if not serverVersion >= 80014:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion >= 80014")
                        self.state = 1633
                        self.exprWithParentheses()
                        pass

                    elif la_ == 2:
                        self.state = 1634
                        self.signedLiteral()
                        pass


                    pass
                elif token in [148]:
                    self.state = 1637
                    self.match(MySQLParser.DROP_SYMBOL)
                    self.state = 1638
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1641
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1642
                self.match(MySQLParser.ALTER_SYMBOL)
                self.state = 1643
                self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 1644
                self.indexRef()
                self.state = 1645
                self.visibility()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1647
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 1648
                self.match(MySQLParser.ALTER_SYMBOL)
                self.state = 1649
                self.match(MySQLParser.CHECK_SYMBOL)
                self.state = 1650
                self.identifier()
                self.state = 1651
                self.constraintEnforcement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1653
                if not serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80019")
                self.state = 1654
                self.match(MySQLParser.ALTER_SYMBOL)
                self.state = 1655
                self.match(MySQLParser.CONSTRAINT_SYMBOL)
                self.state = 1656
                self.identifier()
                self.state = 1657
                self.constraintEnforcement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1659
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1660
                self.match(MySQLParser.RENAME_SYMBOL)
                self.state = 1661
                self.match(MySQLParser.COLUMN_SYMBOL)
                self.state = 1662
                self.columnInternalRef()
                self.state = 1663
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 1664
                self.identifier()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1666
                self.match(MySQLParser.RENAME_SYMBOL)
                self.state = 1668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 1667
                    _la = self._input.LA(1)
                    if not(_la==17 or _la==590):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1670
                self.tableName()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1671
                if not serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50700")
                self.state = 1672
                self.match(MySQLParser.RENAME_SYMBOL)
                self.state = 1673
                self.keyOrIndex()
                self.state = 1674
                self.indexRef()
                self.state = 1675
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 1676
                self.indexName()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1678
                self.match(MySQLParser.CONVERT_SYMBOL)
                self.state = 1679
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 1680
                self.charset()
                self.state = 1684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 1681
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 1682
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 1683
                    self.charsetName()
                    pass


                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1686
                    self.collate()


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1689
                self.match(MySQLParser.FORCE_SYMBOL)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1690
                self.match(MySQLParser.ORDER_SYMBOL)
                self.state = 1691
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 1692
                self.alterOrderList()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1693
                if not serverVersion >= 50708 and serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50708 && serverVersion < 80000")
                self.state = 1694
                self.match(MySQLParser.UPGRADE_SYMBOL)
                self.state = 1695
                self.match(MySQLParser.PARTITIONING_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER_SYMBOL(self):
            return self.getToken(MySQLParser.AFTER_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)




    def place(self):

        localctx = MySQLParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_place)
        try:
            self.state = 1701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1698
                self.match(MySQLParser.AFTER_SYMBOL)
                self.state = 1699
                self.identifier()
                pass
            elif token in [191]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1700
                self.match(MySQLParser.FIRST_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT_SYMBOL(self):
            return self.getToken(MySQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_restrict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrict" ):
                listener.enterRestrict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrict" ):
                listener.exitRestrict(self)




    def restrict(self):

        localctx = MySQLParser.RestrictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_restrict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            _la = self._input.LA(1)
            if not(_la==49 or _la==471):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterOrderListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IdentifierContext,i)


        def direction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DirectionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DirectionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterOrderList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterOrderList" ):
                listener.enterAlterOrderList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterOrderList" ):
                listener.exitAlterOrderList(self)




    def alterOrderList(self):

        localctx = MySQLParser.AlterOrderListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_alterOrderList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self.identifier()
            self.state = 1707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18 or _la==134:
                self.state = 1706
                self.direction()


            self.state = 1716
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1709
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 1710
                    self.identifier()
                    self.state = 1712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==18 or _la==134:
                        self.state = 1711
                        self.direction()

             
                self.state = 1718
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterAlgorithmOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterAlgorithmOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterAlgorithmOption" ):
                listener.enterAlterAlgorithmOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterAlgorithmOption" ):
                listener.exitAlterAlgorithmOption(self)




    def alterAlgorithmOption(self):

        localctx = MySQLParser.AlterAlgorithmOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_alterAlgorithmOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.match(MySQLParser.ALGORITHM_SYMBOL)
            self.state = 1721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 1720
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 1725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 1723
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 1724
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLockOption" ):
                listener.enterAlterLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLockOption" ):
                listener.exitAlterLockOption(self)




    def alterLockOption(self):

        localctx = MySQLParser.AlterLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_alterLockOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(MySQLParser.LOCK_SYMBOL)
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 1728
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 1733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 1731
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 1732
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexLockAndAlgorithmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterAlgorithmOption(self):
            return self.getTypedRuleContext(MySQLParser.AlterAlgorithmOptionContext,0)


        def alterLockOption(self):
            return self.getTypedRuleContext(MySQLParser.AlterLockOptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_indexLockAndAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexLockAndAlgorithm" ):
                listener.enterIndexLockAndAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexLockAndAlgorithm" ):
                listener.exitIndexLockAndAlgorithm(self)




    def indexLockAndAlgorithm(self):

        localctx = MySQLParser.IndexLockAndAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_indexLockAndAlgorithm)
        self._la = 0 # Token type
        try:
            self.state = 1743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1735
                self.alterAlgorithmOption()
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 1736
                    self.alterLockOption()


                pass
            elif token in [287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1739
                self.alterLockOption()
                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 1740
                    self.alterAlgorithmOption()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MySQLParser.VALIDATION_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def WITHOUT_SYMBOL(self):
            return self.getToken(MySQLParser.WITHOUT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_withValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithValidation" ):
                listener.enterWithValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithValidation" ):
                listener.exitWithValidation(self)




    def withValidation(self):

        localctx = MySQLParser.WithValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_withValidation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            if not serverVersion >= 50706:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50706")
            self.state = 1746
            _la = self._input.LA(1)
            if not(_la==645 or _la==646):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1747
            self.match(MySQLParser.VALIDATION_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemovePartitioningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE_SYMBOL(self):
            return self.getToken(MySQLParser.REMOVE_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONING_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_removePartitioning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemovePartitioning" ):
                listener.enterRemovePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemovePartitioning" ):
                listener.exitRemovePartitioning(self)




    def removePartitioning(self):

        localctx = MySQLParser.RemovePartitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_removePartitioning)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1749
            self.match(MySQLParser.REMOVE_SYMBOL)
            self.state = 1750
            self.match(MySQLParser.PARTITIONING_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllOrPartitionNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_allOrPartitionNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllOrPartitionNameList" ):
                listener.enterAllOrPartitionNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllOrPartitionNameList" ):
                listener.exitAllOrPartitionNameList(self)




    def allOrPartitionNameList(self):

        localctx = MySQLParser.AllOrPartitionNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_allOrPartitionNameList)
        try:
            self.state = 1754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1752
                self.match(MySQLParser.ALL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1753
                self.identifierList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceRefContext,0)


        def DATAFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DATAFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def RENAME_SYMBOL(self):
            return self.getToken(MySQLParser.RENAME_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def alterTablespaceOptions(self):
            return self.getTypedRuleContext(MySQLParser.AlterTablespaceOptionsContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def CHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGE_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def ACCESSIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.ACCESSIBLE_SYMBOL, 0)

        def READ_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.READ_ONLY_SYMBOL, 0)

        def READ_WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.READ_WRITE_SYMBOL, 0)

        def changeTablespaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ChangeTablespaceOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ChangeTablespaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespace" ):
                listener.enterAlterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespace" ):
                listener.exitAlterTablespace(self)




    def alterTablespace(self):

        localctx = MySQLParser.AlterTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_alterTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 1757
            self.tablespaceRef()
            self.state = 1791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1758
                _la = self._input.LA(1)
                if not(_la==4 or _la==148):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1759
                self.match(MySQLParser.DATAFILE_SYMBOL)
                self.state = 1760
                self.textLiteral()
                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23 or _la==158 or _la==163 or _la==238 or _la==324 or _la==374 or _la==553 or _la==638:
                    self.state = 1761
                    self.alterTablespaceOptions()


                pass

            elif la_ == 2:
                self.state = 1764
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 1784
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [-1, 774]:
                    pass
                elif token in [55]:
                    self.state = 1766
                    self.match(MySQLParser.CHANGE_SYMBOL)
                    self.state = 1767
                    self.match(MySQLParser.DATAFILE_SYMBOL)
                    self.state = 1768
                    self.textLiteral()
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==23 or _la==238 or _la==324:
                        self.state = 1769
                        self.changeTablespaceOption()
                        self.state = 1776
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==23 or _la==238 or _la==324 or _la==773:
                            self.state = 1771
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==773:
                                self.state = 1770
                                self.match(MySQLParser.COMMA_SYMBOL)


                            self.state = 1773
                            self.changeTablespaceOption()
                            self.state = 1778
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                elif token in [434, 436]:
                    self.state = 1781
                    _la = self._input.LA(1)
                    if not(_la==434 or _la==436):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [371]:
                    self.state = 1782
                    self.match(MySQLParser.NOT_SYMBOL)
                    self.state = 1783
                    self.match(MySQLParser.ACCESSIBLE_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.state = 1786
                self.match(MySQLParser.RENAME_SYMBOL)
                self.state = 1787
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 1788
                self.identifier()
                pass

            elif la_ == 4:
                self.state = 1789
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 1790
                self.alterTablespaceOptions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUndoTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDO_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceRefContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def ACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.ACTIVE_SYMBOL, 0)

        def INACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.INACTIVE_SYMBOL, 0)

        def undoTableSpaceOptions(self):
            return self.getTypedRuleContext(MySQLParser.UndoTableSpaceOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterUndoTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUndoTablespace" ):
                listener.enterAlterUndoTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUndoTablespace" ):
                listener.exitAlterUndoTablespace(self)




    def alterUndoTablespace(self):

        localctx = MySQLParser.AlterUndoTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_alterUndoTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793
            self.match(MySQLParser.UNDO_SYMBOL)
            self.state = 1794
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 1795
            self.tablespaceRef()
            self.state = 1796
            self.match(MySQLParser.SET_SYMBOL)
            self.state = 1797
            _la = self._input.LA(1)
            if not(_la==724 or _la==725):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163 or _la==553:
                self.state = 1798
                self.undoTableSpaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UndoTableSpaceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def undoTableSpaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UndoTableSpaceOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UndoTableSpaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_undoTableSpaceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndoTableSpaceOptions" ):
                listener.enterUndoTableSpaceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndoTableSpaceOptions" ):
                listener.exitUndoTableSpaceOptions(self)




    def undoTableSpaceOptions(self):

        localctx = MySQLParser.UndoTableSpaceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_undoTableSpaceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.undoTableSpaceOption()
            self.state = 1808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==163 or _la==553 or _la==773:
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 1802
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 1805
                self.undoTableSpaceOption()
                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UndoTableSpaceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_undoTableSpaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndoTableSpaceOption" ):
                listener.enterUndoTableSpaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndoTableSpaceOption" ):
                listener.exitUndoTableSpaceOption(self)




    def undoTableSpaceOption(self):

        localctx = MySQLParser.UndoTableSpaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_undoTableSpaceOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.tsOptionEngine()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterTablespaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterTablespaceOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterTablespaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterTablespaceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespaceOptions" ):
                listener.enterAlterTablespaceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespaceOptions" ):
                listener.exitAlterTablespaceOptions(self)




    def alterTablespaceOptions(self):

        localctx = MySQLParser.AlterTablespaceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_alterTablespaceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.alterTablespaceOption()
            self.state = 1820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23 or _la==158 or _la==163 or _la==238 or _la==324 or _la==374 or _la==553 or _la==638 or _la==773:
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 1814
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 1817
                self.alterTablespaceOption()
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def tsOptionAutoextendSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionAutoextendSizeContext,0)


        def tsOptionMaxSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionMaxSizeContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionWaitContext,0)


        def tsOptionEncryption(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEncryptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterTablespaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespaceOption" ):
                listener.enterAlterTablespaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespaceOption" ):
                listener.exitAlterTablespaceOption(self)




    def alterTablespaceOption(self):

        localctx = MySQLParser.AlterTablespaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_alterTablespaceOption)
        try:
            self.state = 1833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [238]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1823
                self.match(MySQLParser.INITIAL_SIZE_SYMBOL)
                self.state = 1825
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 1824
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 1827
                self.sizeNumber()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1828
                self.tsOptionAutoextendSize()
                pass
            elif token in [324]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1829
                self.tsOptionMaxSize()
                pass
            elif token in [163, 553]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1830
                self.tsOptionEngine()
                pass
            elif token in [374, 638]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1831
                self.tsOptionWait()
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1832
                self.tsOptionEncryption()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeTablespaceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def tsOptionAutoextendSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionAutoextendSizeContext,0)


        def tsOptionMaxSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionMaxSizeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_changeTablespaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeTablespaceOption" ):
                listener.enterChangeTablespaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeTablespaceOption" ):
                listener.exitChangeTablespaceOption(self)




    def changeTablespaceOption(self):

        localctx = MySQLParser.ChangeTablespaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_changeTablespaceOption)
        try:
            self.state = 1842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [238]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1835
                self.match(MySQLParser.INITIAL_SIZE_SYMBOL)
                self.state = 1837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 1836
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 1839
                self.sizeNumber()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1840
                self.tsOptionAutoextendSize()
                pass
            elif token in [324]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1841
                self.tsOptionMaxSize()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def viewRef(self):
            return self.getTypedRuleContext(MySQLParser.ViewRefContext,0)


        def viewTail(self):
            return self.getTypedRuleContext(MySQLParser.ViewTailContext,0)


        def viewAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.ViewAlgorithmContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def viewSuid(self):
            return self.getTypedRuleContext(MySQLParser.ViewSuidContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterView" ):
                listener.enterAlterView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterView" ):
                listener.exitAlterView(self)




    def alterView(self):

        localctx = MySQLParser.AlterViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_alterView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1844
                self.viewAlgorithm()


            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 1847
                self.definerClause()


            self.state = 1851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==537:
                self.state = 1850
                self.viewSuid()


            self.state = 1853
            self.match(MySQLParser.VIEW_SYMBOL)
            self.state = 1854
            self.viewRef()
            self.state = 1855
            self.viewTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def viewSelect(self):
            return self.getTypedRuleContext(MySQLParser.ViewSelectContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_viewTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewTail" ):
                listener.enterViewTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewTail" ):
                listener.exitViewTail(self)




    def viewTail(self):

        localctx = MySQLParser.ViewTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_viewTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==776:
                self.state = 1857
                self.columnInternalRefList()


            self.state = 1860
            self.match(MySQLParser.AS_SYMBOL)
            self.state = 1861
            self.viewSelect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionOrParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionOrParensContext,0)


        def viewCheckOption(self):
            return self.getTypedRuleContext(MySQLParser.ViewCheckOptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_viewSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewSelect" ):
                listener.enterViewSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewSelect" ):
                listener.exitViewSelect(self)




    def viewSelect(self):

        localctx = MySQLParser.ViewSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_viewSelect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self.queryExpressionOrParens()
            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==645:
                self.state = 1864
                self.viewCheckOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewCheckOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.CHECK_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def CASCADED_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADED_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_viewCheckOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewCheckOption" ):
                listener.enterViewCheckOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewCheckOption" ):
                listener.exitViewCheckOption(self)




    def viewCheckOption(self):

        localctx = MySQLParser.ViewCheckOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_viewCheckOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867
            self.match(MySQLParser.WITH_SYMBOL)
            self.state = 1869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50 or _la==284:
                self.state = 1868
                _la = self._input.LA(1)
                if not(_la==50 or _la==284):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1871
            self.match(MySQLParser.CHECK_SYMBOL)
            self.state = 1872
            self.match(MySQLParser.OPTION_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def createDatabase(self):
            return self.getTypedRuleContext(MySQLParser.CreateDatabaseContext,0)


        def createTable(self):
            return self.getTypedRuleContext(MySQLParser.CreateTableContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(MySQLParser.CreateFunctionContext,0)


        def createProcedure(self):
            return self.getTypedRuleContext(MySQLParser.CreateProcedureContext,0)


        def createUdf(self):
            return self.getTypedRuleContext(MySQLParser.CreateUdfContext,0)


        def createLogfileGroup(self):
            return self.getTypedRuleContext(MySQLParser.CreateLogfileGroupContext,0)


        def createView(self):
            return self.getTypedRuleContext(MySQLParser.CreateViewContext,0)


        def createTrigger(self):
            return self.getTypedRuleContext(MySQLParser.CreateTriggerContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(MySQLParser.CreateIndexContext,0)


        def createServer(self):
            return self.getTypedRuleContext(MySQLParser.CreateServerContext,0)


        def createTablespace(self):
            return self.getTypedRuleContext(MySQLParser.CreateTablespaceContext,0)


        def createEvent(self):
            return self.getTypedRuleContext(MySQLParser.CreateEventContext,0)


        def createRole(self):
            return self.getTypedRuleContext(MySQLParser.CreateRoleContext,0)


        def createSpatialReference(self):
            return self.getTypedRuleContext(MySQLParser.CreateSpatialReferenceContext,0)


        def createUndoTablespace(self):
            return self.getTypedRuleContext(MySQLParser.CreateUndoTablespaceContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateStatement" ):
                listener.enterCreateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateStatement" ):
                listener.exitCreateStatement(self)




    def createStatement(self):

        localctx = MySQLParser.CreateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_createStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            self.match(MySQLParser.CREATE_SYMBOL)
            self.state = 1893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1875
                self.createDatabase()
                pass

            elif la_ == 2:
                self.state = 1876
                self.createTable()
                pass

            elif la_ == 3:
                self.state = 1877
                self.createFunction()
                pass

            elif la_ == 4:
                self.state = 1878
                self.createProcedure()
                pass

            elif la_ == 5:
                self.state = 1879
                self.createUdf()
                pass

            elif la_ == 6:
                self.state = 1880
                self.createLogfileGroup()
                pass

            elif la_ == 7:
                self.state = 1881
                self.createView()
                pass

            elif la_ == 8:
                self.state = 1882
                self.createTrigger()
                pass

            elif la_ == 9:
                self.state = 1883
                self.createIndex()
                pass

            elif la_ == 10:
                self.state = 1884
                self.createServer()
                pass

            elif la_ == 11:
                self.state = 1885
                self.createTablespace()
                pass

            elif la_ == 12:
                self.state = 1886
                self.createEvent()
                pass

            elif la_ == 13:
                self.state = 1887
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 1888
                self.createRole()
                pass

            elif la_ == 14:
                self.state = 1889
                if not serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80011")
                self.state = 1890
                self.createSpatialReference()
                pass

            elif la_ == 15:
                self.state = 1891
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 1892
                self.createUndoTablespace()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MySQLParser.SchemaNameContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)




    def createDatabase(self):

        localctx = MySQLParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_createDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1895
            self.match(MySQLParser.DATABASE_SYMBOL)
            self.state = 1897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1896
                self.ifNotExists()


            self.state = 1899
            self.schemaName()
            self.state = 1903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1900
                    self.createDatabaseOption() 
                self.state = 1905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defaultCharset(self):
            return self.getTypedRuleContext(MySQLParser.DefaultCharsetContext,0)


        def defaultCollation(self):
            return self.getTypedRuleContext(MySQLParser.DefaultCollationContext,0)


        def defaultEncryption(self):
            return self.getTypedRuleContext(MySQLParser.DefaultEncryptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createDatabaseOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseOption" ):
                listener.enterCreateDatabaseOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseOption" ):
                listener.exitCreateDatabaseOption(self)




    def createDatabaseOption(self):

        localctx = MySQLParser.CreateDatabaseOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_createDatabaseOption)
        try:
            self.state = 1910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1906
                self.defaultCharset()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1907
                self.defaultCollation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1908
                if not serverVersion >= 80016:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80016")
                self.state = 1909
                self.defaultEncryption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySQLParser.TableNameContext,0)


        def LIKE_SYMBOL(self):
            return self.getToken(MySQLParser.LIKE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPORARY_SYMBOL, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def tableElementList(self):
            return self.getTypedRuleContext(MySQLParser.TableElementListContext,0)


        def createTableOptions(self):
            return self.getTypedRuleContext(MySQLParser.CreateTableOptionsContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(MySQLParser.PartitionClauseContext,0)


        def duplicateAsQueryExpression(self):
            return self.getTypedRuleContext(MySQLParser.DuplicateAsQueryExpressionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)




    def createTable(self):

        localctx = MySQLParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==577:
                self.state = 1912
                self.match(MySQLParser.TEMPORARY_SYMBOL)


            self.state = 1915
            self.match(MySQLParser.TABLE_SYMBOL)
            self.state = 1917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1916
                self.ifNotExists()


            self.state = 1919
            self.tableName()
            self.state = 1942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1920
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 1921
                    self.tableElementList()
                    self.state = 1922
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)


                self.state = 1927
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1926
                    self.createTableOptions()


                self.state = 1930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1929
                    self.partitionClause()


                self.state = 1933
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1932
                    self.duplicateAsQueryExpression()


                pass

            elif la_ == 2:
                self.state = 1935
                self.match(MySQLParser.LIKE_SYMBOL)
                self.state = 1936
                self.tableRef()
                pass

            elif la_ == 3:
                self.state = 1937
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 1938
                self.match(MySQLParser.LIKE_SYMBOL)
                self.state = 1939
                self.tableRef()
                self.state = 1940
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TableElementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TableElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableElementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElementList" ):
                listener.enterTableElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElementList" ):
                listener.exitTableElementList(self)




    def tableElementList(self):

        localctx = MySQLParser.TableElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tableElementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1944
            self.tableElement()
            self.state = 1949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 1945
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 1946
                self.tableElement()
                self.state = 1951
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnDefinition(self):
            return self.getTypedRuleContext(MySQLParser.ColumnDefinitionContext,0)


        def tableConstraintDef(self):
            return self.getTypedRuleContext(MySQLParser.TableConstraintDefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElement" ):
                listener.enterTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElement" ):
                listener.exitTableElement(self)




    def tableElement(self):

        localctx = MySQLParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_tableElement)
        try:
            self.state = 1954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1952
                self.columnDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1953
                self.tableConstraintDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DuplicateAsQueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionOrParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionOrParensContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_duplicateAsQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuplicateAsQueryExpression" ):
                listener.enterDuplicateAsQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuplicateAsQueryExpression" ):
                listener.exitDuplicateAsQueryExpression(self)




    def duplicateAsQueryExpression(self):

        localctx = MySQLParser.DuplicateAsQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_duplicateAsQueryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1956
                _la = self._input.LA(1)
                if not(_la==232 or _la==458):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1959
                self.match(MySQLParser.AS_SYMBOL)


            self.state = 1962
            self.queryExpressionOrParens()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionOrParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpression(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionContext,0)


        def queryExpressionParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_queryExpressionOrParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionOrParens" ):
                listener.enterQueryExpressionOrParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionOrParens" ):
                listener.exitQueryExpressionOrParens(self)




    def queryExpressionOrParens(self):

        localctx = MySQLParser.QueryExpressionOrParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_queryExpressionOrParens)
        try:
            self.state = 1966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1964
                self.queryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1965
                self.queryExpressionParens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoutineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def EOF(self):
            return self.getToken(MySQLParser.EOF, 0)

        def createProcedure(self):
            return self.getTypedRuleContext(MySQLParser.CreateProcedureContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(MySQLParser.CreateFunctionContext,0)


        def createUdf(self):
            return self.getTypedRuleContext(MySQLParser.CreateUdfContext,0)


        def SEMICOLON_SYMBOL(self):
            return self.getToken(MySQLParser.SEMICOLON_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_createRoutine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRoutine" ):
                listener.enterCreateRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRoutine" ):
                listener.exitCreateRoutine(self)




    def createRoutine(self):

        localctx = MySQLParser.CreateRoutineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_createRoutine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            self.match(MySQLParser.CREATE_SYMBOL)
            self.state = 1972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1969
                self.createProcedure()
                pass

            elif la_ == 2:
                self.state = 1970
                self.createFunction()
                pass

            elif la_ == 3:
                self.state = 1971
                self.createUdf()
                pass


            self.state = 1975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==774:
                self.state = 1974
                self.match(MySQLParser.SEMICOLON_SYMBOL)


            self.state = 1977
            self.match(MySQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def procedureName(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureNameContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ProcedureParameterContext,i)


        def routineCreateOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoutineCreateOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoutineCreateOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_createProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateProcedure" ):
                listener.enterCreateProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateProcedure" ):
                listener.exitCreateProcedure(self)




    def createProcedure(self):

        localctx = MySQLParser.CreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_createProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 1979
                self.definerClause()


            self.state = 1982
            self.match(MySQLParser.PROCEDURE_SYMBOL)
            self.state = 1983
            self.procedureName()
            self.state = 1984
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 1993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1985
                self.procedureParameter()
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 1986
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 1987
                    self.procedureParameter()
                    self.state = 1992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1995
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
            self.state = 1999
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1996
                    self.routineCreateOption() 
                self.state = 2001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 2002
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def functionName(self):
            return self.getTypedRuleContext(MySQLParser.FunctionNameContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def RETURNS_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNS_SYMBOL, 0)

        def typeWithOptCollate(self):
            return self.getTypedRuleContext(MySQLParser.TypeWithOptCollateContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FunctionParameterContext,i)


        def routineCreateOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoutineCreateOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoutineCreateOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_createFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)




    def createFunction(self):

        localctx = MySQLParser.CreateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_createFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 2004
                self.definerClause()


            self.state = 2007
            self.match(MySQLParser.FUNCTION_SYMBOL)
            self.state = 2008
            self.functionName()
            self.state = 2009
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 2010
                self.functionParameter()
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 2011
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 2012
                    self.functionParameter()
                    self.state = 2017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2020
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
            self.state = 2021
            self.match(MySQLParser.RETURNS_SYMBOL)
            self.state = 2022
            self.typeWithOptCollate()
            self.state = 2026
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2023
                    self.routineCreateOption() 
                self.state = 2028
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 2029
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def udfName(self):
            return self.getTypedRuleContext(MySQLParser.UdfNameContext,0)


        def RETURNS_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNS_SYMBOL, 0)

        def SONAME_SYMBOL(self):
            return self.getToken(MySQLParser.SONAME_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def STRING_SYMBOL(self):
            return self.getToken(MySQLParser.STRING_SYMBOL, 0)

        def INT_SYMBOL(self):
            return self.getToken(MySQLParser.INT_SYMBOL, 0)

        def REAL_SYMBOL(self):
            return self.getToken(MySQLParser.REAL_SYMBOL, 0)

        def DECIMAL_SYMBOL(self):
            return self.getToken(MySQLParser.DECIMAL_SYMBOL, 0)

        def AGGREGATE_SYMBOL(self):
            return self.getToken(MySQLParser.AGGREGATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_createUdf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdf" ):
                listener.enterCreateUdf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdf" ):
                listener.exitCreateUdf(self)




    def createUdf(self):

        localctx = MySQLParser.CreateUdfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_createUdf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 2031
                self.match(MySQLParser.AGGREGATE_SYMBOL)


            self.state = 2034
            self.match(MySQLParser.FUNCTION_SYMBOL)
            self.state = 2035
            self.udfName()
            self.state = 2036
            self.match(MySQLParser.RETURNS_SYMBOL)
            self.state = 2037
            localctx.type_ = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==126 or _la==249 or _la==437 or _la==556):
                localctx.type_ = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2038
            self.match(MySQLParser.SONAME_SYMBOL)
            self.state = 2039
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineCreateOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routineOption(self):
            return self.getTypedRuleContext(MySQLParser.RoutineOptionContext,0)


        def DETERMINISTIC_SYMBOL(self):
            return self.getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_routineCreateOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineCreateOption" ):
                listener.enterRoutineCreateOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineCreateOption" ):
                listener.exitRoutineCreateOption(self)




    def routineCreateOption(self):

        localctx = MySQLParser.RoutineCreateOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_routineCreateOption)
        self._la = 0 # Token type
        try:
            self.state = 2046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75, 90, 267, 347, 373, 433, 537]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2041
                self.routineOption()
                pass
            elif token in [137, 371]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==371:
                    self.state = 2042
                    self.match(MySQLParser.NOT_SYMBOL)


                self.state = 2045
                self.match(MySQLParser.DETERMINISTIC_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineAlterOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routineCreateOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoutineCreateOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoutineCreateOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_routineAlterOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineAlterOptions" ):
                listener.enterRoutineAlterOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineAlterOptions" ):
                listener.exitRoutineAlterOptions(self)




    def routineAlterOptions(self):

        localctx = MySQLParser.RoutineAlterOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_routineAlterOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2048
                self.routineCreateOption()
                self.state = 2051 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 4611686018427420673) != 0 or _la==267 or (((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & 83886081) != 0 or _la==433 or _la==537):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token
            self.security = None # Token

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def SQL_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(MySQLParser.LANGUAGE_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTAINS_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def READS_SYMBOL(self):
            return self.getToken(MySQLParser.READS_SYMBOL, 0)

        def MODIFIES_SYMBOL(self):
            return self.getToken(MySQLParser.MODIFIES_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(MySQLParser.SECURITY_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINER_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(MySQLParser.INVOKER_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_routineOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineOption" ):
                listener.enterRoutineOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineOption" ):
                listener.exitRoutineOption(self)




    def routineOption(self):

        localctx = MySQLParser.RoutineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_routineOption)
        self._la = 0 # Token type
        try:
            self.state = 2070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2053
                localctx.option = self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 2054
                self.textLiteral()
                pass
            elif token in [267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2055
                localctx.option = self.match(MySQLParser.LANGUAGE_SYMBOL)
                self.state = 2056
                self.match(MySQLParser.SQL_SYMBOL)
                pass
            elif token in [373]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2057
                localctx.option = self.match(MySQLParser.NO_SYMBOL)
                self.state = 2058
                self.match(MySQLParser.SQL_SYMBOL)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2059
                localctx.option = self.match(MySQLParser.CONTAINS_SYMBOL)
                self.state = 2060
                self.match(MySQLParser.SQL_SYMBOL)
                pass
            elif token in [433]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2061
                localctx.option = self.match(MySQLParser.READS_SYMBOL)
                self.state = 2062
                self.match(MySQLParser.SQL_SYMBOL)
                self.state = 2063
                self.match(MySQLParser.DATA_SYMBOL)
                pass
            elif token in [347]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2064
                localctx.option = self.match(MySQLParser.MODIFIES_SYMBOL)
                self.state = 2065
                self.match(MySQLParser.SQL_SYMBOL)
                self.state = 2066
                self.match(MySQLParser.DATA_SYMBOL)
                pass
            elif token in [537]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2067
                localctx.option = self.match(MySQLParser.SQL_SYMBOL)
                self.state = 2068
                self.match(MySQLParser.SECURITY_SYMBOL)
                self.state = 2069
                localctx.security = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==130 or _la==250):
                    localctx.security = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def createIndexTarget(self):
            return self.getTypedRuleContext(MySQLParser.CreateIndexTargetContext,0)


        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def indexName(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameContext,0)


        def onlineOption(self):
            return self.getTypedRuleContext(MySQLParser.OnlineOptionContext,0)


        def FULLTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.FULLTEXT_SYMBOL, 0)

        def SPATIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SPATIAL_SYMBOL, 0)

        def indexLockAndAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.IndexLockAndAlgorithmContext,0)


        def UNIQUE_SYMBOL(self):
            return self.getToken(MySQLParser.UNIQUE_SYMBOL, 0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IndexOptionContext,i)


        def fulltextIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FulltextIndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FulltextIndexOptionContext,i)


        def spatialIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SpatialIndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SpatialIndexOptionContext,i)


        def indexTypeClause(self):
            return self.getTypedRuleContext(MySQLParser.IndexTypeClauseContext,0)


        def indexNameAndType(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameAndTypeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)




    def createIndex(self):

        localctx = MySQLParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==380 or _la==385:
                self.state = 2072
                self.onlineOption()


            self.state = 2116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [236, 609]:
                self.state = 2076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==609:
                    self.state = 2075
                    self.match(MySQLParser.UNIQUE_SYMBOL)


                self.state = 2078
                localctx.type_ = self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 2087
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 2079
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 2080
                    self.indexName()
                    self.state = 2082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==599 or _la==621:
                        self.state = 2081
                        self.indexTypeClause()


                    pass

                elif la_ == 2:
                    self.state = 2085
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                    if la_ == 1:
                        self.state = 2084
                        self.indexNameAndType()


                    pass


                self.state = 2089
                self.createIndexTarget()
                self.state = 2093
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2090
                        self.indexOption() 
                    self.state = 2095
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                pass
            elif token in [205]:
                self.state = 2096
                localctx.type_ = self.match(MySQLParser.FULLTEXT_SYMBOL)
                self.state = 2097
                self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 2098
                self.indexName()
                self.state = 2099
                self.createIndexTarget()
                self.state = 2103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2100
                        self.fulltextIndexOption() 
                    self.state = 2105
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                pass
            elif token in [523]:
                self.state = 2106
                localctx.type_ = self.match(MySQLParser.SPATIAL_SYMBOL)
                self.state = 2107
                self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 2108
                self.indexName()
                self.state = 2109
                self.createIndexTarget()
                self.state = 2113
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2110
                        self.spatialIndexOption() 
                    self.state = 2115
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==287:
                self.state = 2118
                self.indexLockAndAlgorithm()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexNameAndTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexName(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameContext,0)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def indexType(self):
            return self.getTypedRuleContext(MySQLParser.IndexTypeContext,0)


        def TYPE_SYMBOL(self):
            return self.getToken(MySQLParser.TYPE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexNameAndType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexNameAndType" ):
                listener.enterIndexNameAndType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexNameAndType" ):
                listener.exitIndexNameAndType(self)




    def indexNameAndType(self):

        localctx = MySQLParser.IndexNameAndTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_indexNameAndType)
        try:
            self.state = 2130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2121
                self.indexName()
                self.state = 2124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 2122
                    self.match(MySQLParser.USING_SYMBOL)
                    self.state = 2123
                    self.indexType()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2126
                self.indexName()
                self.state = 2127
                self.match(MySQLParser.TYPE_SYMBOL)
                self.state = 2128
                self.indexType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def keyListVariants(self):
            return self.getTypedRuleContext(MySQLParser.KeyListVariantsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createIndexTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndexTarget" ):
                listener.enterCreateIndexTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndexTarget" ):
                listener.exitCreateIndexTarget(self)




    def createIndexTarget(self):

        localctx = MySQLParser.CreateIndexTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_createIndexTarget)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 2133
            self.tableRef()
            self.state = 2134
            self.keyListVariants()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def logfileGroupName(self):
            return self.getTypedRuleContext(MySQLParser.LogfileGroupNameContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def UNDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDOFILE_SYMBOL, 0)

        def REDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.REDOFILE_SYMBOL, 0)

        def logfileGroupOptions(self):
            return self.getTypedRuleContext(MySQLParser.LogfileGroupOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLogfileGroup" ):
                listener.enterCreateLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLogfileGroup" ):
                listener.exitCreateLogfileGroup(self)




    def createLogfileGroup(self):

        localctx = MySQLParser.CreateLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_createLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self.match(MySQLParser.LOGFILE_SYMBOL)
            self.state = 2137
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 2138
            self.logfileGroupName()
            self.state = 2139
            self.match(MySQLParser.ADD_SYMBOL)
            self.state = 2140
            _la = self._input.LA(1)
            if not(_la==440 or _la==603):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2141
            self.textLiteral()
            self.state = 2143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==163 or _la==238 or _la==368 or _la==374 or _la==441 or _la==553 or _la==604 or _la==638:
                self.state = 2142
                self.logfileGroupOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.LogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.LogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_logfileGroupOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupOptions" ):
                listener.enterLogfileGroupOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupOptions" ):
                listener.exitLogfileGroupOptions(self)




    def logfileGroupOptions(self):

        localctx = MySQLParser.LogfileGroupOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_logfileGroupOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2145
            self.logfileGroupOption()
            self.state = 2152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==75 or _la==163 or _la==238 or _la==368 or _la==374 or _la==441 or _la==553 or _la==604 or _la==638 or _la==773:
                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 2146
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 2149
                self.logfileGroupOption()
                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionInitialSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionInitialSizeContext,0)


        def tsOptionUndoRedoBufferSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionUndoRedoBufferSizeContext,0)


        def tsOptionNodegroup(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionNodegroupContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionWaitContext,0)


        def tsOptionComment(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionCommentContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_logfileGroupOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupOption" ):
                listener.enterLogfileGroupOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupOption" ):
                listener.exitLogfileGroupOption(self)




    def logfileGroupOption(self):

        localctx = MySQLParser.LogfileGroupOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_logfileGroupOption)
        try:
            self.state = 2161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [238]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2155
                self.tsOptionInitialSize()
                pass
            elif token in [441, 604]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2156
                self.tsOptionUndoRedoBufferSize()
                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2157
                self.tsOptionNodegroup()
                pass
            elif token in [163, 553]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2158
                self.tsOptionEngine()
                pass
            elif token in [374, 638]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2159
                self.tsOptionWait()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2160
                self.tsOptionComment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER_SYMBOL(self):
            return self.getToken(MySQLParser.SERVER_SYMBOL, 0)

        def serverName(self):
            return self.getTypedRuleContext(MySQLParser.ServerNameContext,0)


        def FOREIGN_SYMBOL(self):
            return self.getToken(MySQLParser.FOREIGN_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def WRAPPER_SYMBOL(self):
            return self.getToken(MySQLParser.WRAPPER_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def serverOptions(self):
            return self.getTypedRuleContext(MySQLParser.ServerOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateServer" ):
                listener.enterCreateServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateServer" ):
                listener.exitCreateServer(self)




    def createServer(self):

        localctx = MySQLParser.CreateServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_createServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2163
            self.match(MySQLParser.SERVER_SYMBOL)
            self.state = 2164
            self.serverName()
            self.state = 2165
            self.match(MySQLParser.FOREIGN_SYMBOL)
            self.state = 2166
            self.match(MySQLParser.DATA_SYMBOL)
            self.state = 2167
            self.match(MySQLParser.WRAPPER_SYMBOL)
            self.state = 2168
            self.textOrIdentifier()
            self.state = 2169
            self.serverOptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONS_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ServerOptionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_serverOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOptions" ):
                listener.enterServerOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOptions" ):
                listener.exitServerOptions(self)




    def serverOptions(self):

        localctx = MySQLParser.ServerOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_serverOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(MySQLParser.OPTIONS_SYMBOL)
            self.state = 2172
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2173
            self.serverOption()
            self.state = 2178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 2174
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 2175
                self.serverOption()
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2181
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def HOST_SYMBOL(self):
            return self.getToken(MySQLParser.HOST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def SOCKET_SYMBOL(self):
            return self.getToken(MySQLParser.SOCKET_SYMBOL, 0)

        def OWNER_SYMBOL(self):
            return self.getToken(MySQLParser.OWNER_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def PORT_SYMBOL(self):
            return self.getToken(MySQLParser.PORT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_serverOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOption" ):
                listener.enterServerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOption" ):
                listener.exitServerOption(self)




    def serverOption(self):

        localctx = MySQLParser.ServerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_serverOption)
        try:
            self.state = 2197
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2183
                localctx.option = self.match(MySQLParser.HOST_SYMBOL)
                self.state = 2184
                self.textLiteral()
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2185
                localctx.option = self.match(MySQLParser.DATABASE_SYMBOL)
                self.state = 2186
                self.textLiteral()
                pass
            elif token in [618]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2187
                localctx.option = self.match(MySQLParser.USER_SYMBOL)
                self.state = 2188
                self.textLiteral()
                pass
            elif token in [406]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2189
                localctx.option = self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 2190
                self.textLiteral()
                pass
            elif token in [519]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2191
                localctx.option = self.match(MySQLParser.SOCKET_SYMBOL)
                self.state = 2192
                self.textLiteral()
                pass
            elif token in [398]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2193
                localctx.option = self.match(MySQLParser.OWNER_SYMBOL)
                self.state = 2194
                self.textLiteral()
                pass
            elif token in [413]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2195
                localctx.option = self.match(MySQLParser.PORT_SYMBOL)
                self.state = 2196
                self.ulong_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceName(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceNameContext,0)


        def tsDataFileName(self):
            return self.getTypedRuleContext(MySQLParser.TsDataFileNameContext,0)


        def USE_SYMBOL(self):
            return self.getToken(MySQLParser.USE_SYMBOL, 0)

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def logfileGroupRef(self):
            return self.getTypedRuleContext(MySQLParser.LogfileGroupRefContext,0)


        def tablespaceOptions(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespace" ):
                listener.enterCreateTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespace" ):
                listener.exitCreateTablespace(self)




    def createTablespace(self):

        localctx = MySQLParser.CreateTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_createTablespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2199
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 2200
            self.tablespaceName()
            self.state = 2201
            self.tsDataFileName()
            self.state = 2206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 2202
                self.match(MySQLParser.USE_SYMBOL)
                self.state = 2203
                self.match(MySQLParser.LOGFILE_SYMBOL)
                self.state = 2204
                self.match(MySQLParser.GROUP_SYMBOL)
                self.state = 2205
                self.logfileGroupRef()


            self.state = 2209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 2208
                self.tablespaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUndoTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDO_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceName(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceNameContext,0)


        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def tsDataFile(self):
            return self.getTypedRuleContext(MySQLParser.TsDataFileContext,0)


        def undoTableSpaceOptions(self):
            return self.getTypedRuleContext(MySQLParser.UndoTableSpaceOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createUndoTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUndoTablespace" ):
                listener.enterCreateUndoTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUndoTablespace" ):
                listener.exitCreateUndoTablespace(self)




    def createUndoTablespace(self):

        localctx = MySQLParser.CreateUndoTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_createUndoTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            self.match(MySQLParser.UNDO_SYMBOL)
            self.state = 2212
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 2213
            self.tablespaceName()
            self.state = 2214
            self.match(MySQLParser.ADD_SYMBOL)
            self.state = 2215
            self.tsDataFile()
            self.state = 2217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163 or _la==553:
                self.state = 2216
                self.undoTableSpaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsDataFileNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(MySQLParser.ADD_SYMBOL, 0)

        def tsDataFile(self):
            return self.getTypedRuleContext(MySQLParser.TsDataFileContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tsDataFileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsDataFileName" ):
                listener.enterTsDataFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsDataFileName" ):
                listener.exitTsDataFileName(self)




    def tsDataFileName(self):

        localctx = MySQLParser.TsDataFileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_tsDataFileName)
        try:
            self.state = 2226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2219
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 2222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 2220
                    self.match(MySQLParser.ADD_SYMBOL)
                    self.state = 2221
                    self.tsDataFile()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2224
                self.match(MySQLParser.ADD_SYMBOL)
                self.state = 2225
                self.tsDataFile()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsDataFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATAFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DATAFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tsDataFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsDataFile" ):
                listener.enterTsDataFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsDataFile" ):
                listener.exitTsDataFile(self)




    def tsDataFile(self):

        localctx = MySQLParser.TsDataFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tsDataFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            self.match(MySQLParser.DATAFILE_SYMBOL)
            self.state = 2229
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tablespaceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TablespaceOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TablespaceOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tablespaceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceOptions" ):
                listener.enterTablespaceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceOptions" ):
                listener.exitTablespaceOptions(self)




    def tablespaceOptions(self):

        localctx = MySQLParser.TablespaceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tablespaceOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2231
            self.tablespaceOption()
            self.state = 2238
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2233
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 2232
                        self.match(MySQLParser.COMMA_SYMBOL)


                    self.state = 2235
                    self.tablespaceOption() 
                self.state = 2240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionInitialSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionInitialSizeContext,0)


        def tsOptionAutoextendSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionAutoextendSizeContext,0)


        def tsOptionMaxSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionMaxSizeContext,0)


        def tsOptionExtentSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionExtentSizeContext,0)


        def tsOptionNodegroup(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionNodegroupContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def tsOptionWait(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionWaitContext,0)


        def tsOptionComment(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionCommentContext,0)


        def tsOptionFileblockSize(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionFileblockSizeContext,0)


        def tsOptionEncryption(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEncryptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tablespaceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceOption" ):
                listener.enterTablespaceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceOption" ):
                listener.exitTablespaceOption(self)




    def tablespaceOption(self):

        localctx = MySQLParser.TablespaceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tablespaceOption)
        try:
            self.state = 2253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2241
                self.tsOptionInitialSize()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2242
                self.tsOptionAutoextendSize()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2243
                self.tsOptionMaxSize()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2244
                self.tsOptionExtentSize()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2245
                self.tsOptionNodegroup()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2246
                self.tsOptionEngine()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2247
                self.tsOptionWait()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2248
                self.tsOptionComment()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2249
                if not serverVersion >= 50707:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50707")
                self.state = 2250
                self.tsOptionFileblockSize()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2251
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 2252
                self.tsOptionEncryption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionInitialSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionInitialSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionInitialSize" ):
                listener.enterTsOptionInitialSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionInitialSize" ):
                listener.exitTsOptionInitialSize(self)




    def tsOptionInitialSize(self):

        localctx = MySQLParser.TsOptionInitialSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_tsOptionInitialSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            self.match(MySQLParser.INITIAL_SIZE_SYMBOL)
            self.state = 2257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 2256
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2259
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionUndoRedoBufferSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def UNDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0)

        def REDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionUndoRedoBufferSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionUndoRedoBufferSize" ):
                listener.enterTsOptionUndoRedoBufferSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionUndoRedoBufferSize" ):
                listener.exitTsOptionUndoRedoBufferSize(self)




    def tsOptionUndoRedoBufferSize(self):

        localctx = MySQLParser.TsOptionUndoRedoBufferSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_tsOptionUndoRedoBufferSize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261
            _la = self._input.LA(1)
            if not(_la==441 or _la==604):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 2262
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2265
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionAutoextendSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTOEXTEND_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionAutoextendSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionAutoextendSize" ):
                listener.enterTsOptionAutoextendSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionAutoextendSize" ):
                listener.exitTsOptionAutoextendSize(self)




    def tsOptionAutoextendSize(self):

        localctx = MySQLParser.TsOptionAutoextendSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_tsOptionAutoextendSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            self.match(MySQLParser.AUTOEXTEND_SIZE_SYMBOL)
            self.state = 2269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 2268
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2271
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionMaxSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionMaxSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionMaxSize" ):
                listener.enterTsOptionMaxSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionMaxSize" ):
                listener.exitTsOptionMaxSize(self)




    def tsOptionMaxSize(self):

        localctx = MySQLParser.TsOptionMaxSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_tsOptionMaxSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2273
            self.match(MySQLParser.MAX_SIZE_SYMBOL)
            self.state = 2275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 2274
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2277
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionExtentSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENT_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionExtentSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionExtentSize" ):
                listener.enterTsOptionExtentSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionExtentSize" ):
                listener.exitTsOptionExtentSize(self)




    def tsOptionExtentSize(self):

        localctx = MySQLParser.TsOptionExtentSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tsOptionExtentSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2279
            self.match(MySQLParser.EXTENT_SIZE_SYMBOL)
            self.state = 2281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 2280
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2283
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionNodegroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODEGROUP_SYMBOL(self):
            return self.getToken(MySQLParser.NODEGROUP_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionNodegroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionNodegroup" ):
                listener.enterTsOptionNodegroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionNodegroup" ):
                listener.exitTsOptionNodegroup(self)




    def tsOptionNodegroup(self):

        localctx = MySQLParser.TsOptionNodegroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_tsOptionNodegroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2285
            self.match(MySQLParser.NODEGROUP_SYMBOL)
            self.state = 2287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==750:
                self.state = 2286
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2289
            self.real_ulong_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionEngineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def engineRef(self):
            return self.getTypedRuleContext(MySQLParser.EngineRefContext,0)


        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionEngine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionEngine" ):
                listener.enterTsOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionEngine" ):
                listener.exitTsOptionEngine(self)




    def tsOptionEngine(self):

        localctx = MySQLParser.TsOptionEngineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_tsOptionEngine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==553:
                self.state = 2291
                self.match(MySQLParser.STORAGE_SYMBOL)


            self.state = 2294
            self.match(MySQLParser.ENGINE_SYMBOL)
            self.state = 2296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 2295
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2298
            self.engineRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionWaitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.WAIT_SYMBOL, 0)

        def NO_WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NO_WAIT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionWait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionWait" ):
                listener.enterTsOptionWait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionWait" ):
                listener.exitTsOptionWait(self)




    def tsOptionWait(self):

        localctx = MySQLParser.TsOptionWaitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_tsOptionWait)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2300
            _la = self._input.LA(1)
            if not(_la==374 or _la==638):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionComment" ):
                listener.enterTsOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionComment" ):
                listener.exitTsOptionComment(self)




    def tsOptionComment(self):

        localctx = MySQLParser.TsOptionCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_tsOptionComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2302
            self.match(MySQLParser.COMMENT_SYMBOL)
            self.state = 2304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 2303
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2306
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionFileblockSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0)

        def sizeNumber(self):
            return self.getTypedRuleContext(MySQLParser.SizeNumberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionFileblockSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionFileblockSize" ):
                listener.enterTsOptionFileblockSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionFileblockSize" ):
                listener.exitTsOptionFileblockSize(self)




    def tsOptionFileblockSize(self):

        localctx = MySQLParser.TsOptionFileblockSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_tsOptionFileblockSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2308
            self.match(MySQLParser.FILE_BLOCK_SIZE_SYMBOL)
            self.state = 2310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 2309
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2312
            self.sizeNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TsOptionEncryptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tsOptionEncryption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsOptionEncryption" ):
                listener.enterTsOptionEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsOptionEncryption" ):
                listener.exitTsOptionEncryption(self)




    def tsOptionEncryption(self):

        localctx = MySQLParser.TsOptionEncryptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_tsOptionEncryption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.match(MySQLParser.ENCRYPTION_SYMBOL)
            self.state = 2316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 2315
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 2318
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def viewName(self):
            return self.getTypedRuleContext(MySQLParser.ViewNameContext,0)


        def viewTail(self):
            return self.getTypedRuleContext(MySQLParser.ViewTailContext,0)


        def viewReplaceOrAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.ViewReplaceOrAlgorithmContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def viewSuid(self):
            return self.getTypedRuleContext(MySQLParser.ViewSuidContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)




    def createView(self):

        localctx = MySQLParser.CreateViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_createView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==394:
                self.state = 2320
                self.viewReplaceOrAlgorithm()


            self.state = 2324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 2323
                self.definerClause()


            self.state = 2327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==537:
                self.state = 2326
                self.viewSuid()


            self.state = 2329
            self.match(MySQLParser.VIEW_SYMBOL)
            self.state = 2330
            self.viewName()
            self.state = 2331
            self.viewTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewReplaceOrAlgorithmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_SYMBOL(self):
            return self.getToken(MySQLParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def viewAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.ViewAlgorithmContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_viewReplaceOrAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewReplaceOrAlgorithm" ):
                listener.enterViewReplaceOrAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewReplaceOrAlgorithm" ):
                listener.exitViewReplaceOrAlgorithm(self)




    def viewReplaceOrAlgorithm(self):

        localctx = MySQLParser.ViewReplaceOrAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_viewReplaceOrAlgorithm)
        self._la = 0 # Token type
        try:
            self.state = 2339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [394]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2333
                self.match(MySQLParser.OR_SYMBOL)
                self.state = 2334
                self.match(MySQLParser.REPLACE_SYMBOL)
                self.state = 2336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 2335
                    self.viewAlgorithm()


                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2338
                self.viewAlgorithm()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewAlgorithmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algorithm = None # Token

        def ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def UNDEFINED_SYMBOL(self):
            return self.getToken(MySQLParser.UNDEFINED_SYMBOL, 0)

        def MERGE_SYMBOL(self):
            return self.getToken(MySQLParser.MERGE_SYMBOL, 0)

        def TEMPTABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_viewAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewAlgorithm" ):
                listener.enterViewAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewAlgorithm" ):
                listener.exitViewAlgorithm(self)




    def viewAlgorithm(self):

        localctx = MySQLParser.ViewAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_viewAlgorithm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self.match(MySQLParser.ALGORITHM_SYMBOL)
            self.state = 2342
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 2343
            localctx.algorithm = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==335 or _la==578 or _la==602):
                localctx.algorithm = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewSuidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(MySQLParser.SECURITY_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINER_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(MySQLParser.INVOKER_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_viewSuid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewSuid" ):
                listener.enterViewSuid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewSuid" ):
                listener.exitViewSuid(self)




    def viewSuid(self):

        localctx = MySQLParser.ViewSuidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_viewSuid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2345
            self.match(MySQLParser.SQL_SYMBOL)
            self.state = 2346
            self.match(MySQLParser.SECURITY_SYMBOL)
            self.state = 2347
            _la = self._input.LA(1)
            if not(_la==130 or _la==250):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.timing = None # Token
            self.event = None # Token

        def TRIGGER_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGER_SYMBOL, 0)

        def triggerName(self):
            return self.getTypedRuleContext(MySQLParser.TriggerNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def EACH_SYMBOL(self):
            return self.getToken(MySQLParser.EACH_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def BEFORE_SYMBOL(self):
            return self.getToken(MySQLParser.BEFORE_SYMBOL, 0)

        def AFTER_SYMBOL(self):
            return self.getToken(MySQLParser.AFTER_SYMBOL, 0)

        def INSERT_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MySQLParser.DELETE_SYMBOL, 0)

        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def triggerFollowsPrecedesClause(self):
            return self.getTypedRuleContext(MySQLParser.TriggerFollowsPrecedesClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTrigger" ):
                listener.enterCreateTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTrigger" ):
                listener.exitCreateTrigger(self)




    def createTrigger(self):

        localctx = MySQLParser.CreateTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_createTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 2349
                self.definerClause()


            self.state = 2352
            self.match(MySQLParser.TRIGGER_SYMBOL)
            self.state = 2353
            self.triggerName()
            self.state = 2354
            localctx.timing = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==6 or _la==28):
                localctx.timing = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2355
            localctx.event = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==133 or _la==242 or _la==614):
                localctx.event = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2356
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 2357
            self.tableRef()
            self.state = 2358
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 2359
            self.match(MySQLParser.EACH_SYMBOL)
            self.state = 2360
            self.match(MySQLParser.ROW_SYMBOL)
            self.state = 2362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 2361
                self.triggerFollowsPrecedesClause()


            self.state = 2364
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerFollowsPrecedesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def FOLLOWS_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWS_SYMBOL, 0)

        def PRECEDES_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDES_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_triggerFollowsPrecedesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerFollowsPrecedesClause" ):
                listener.enterTriggerFollowsPrecedesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerFollowsPrecedesClause" ):
                listener.exitTriggerFollowsPrecedesClause(self)




    def triggerFollowsPrecedesClause(self):

        localctx = MySQLParser.TriggerFollowsPrecedesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_triggerFollowsPrecedesClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            if not serverVersion >= 50700:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50700")
            self.state = 2367
            localctx.ordering = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==197 or _la==415):
                localctx.ordering = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2368
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def eventName(self):
            return self.getTypedRuleContext(MySQLParser.EventNameContext,0)


        def ON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ON_SYMBOL)
            else:
                return self.getToken(MySQLParser.ON_SYMBOL, i)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEDULE_SYMBOL, 0)

        def schedule(self):
            return self.getTypedRuleContext(MySQLParser.ScheduleContext,0)


        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def definerClause(self):
            return self.getTypedRuleContext(MySQLParser.DefinerClauseContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def COMPLETION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPLETION_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(MySQLParser.PRESERVE_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_createEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateEvent" ):
                listener.enterCreateEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateEvent" ):
                listener.exitCreateEvent(self)




    def createEvent(self):

        localctx = MySQLParser.CreateEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_createEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 2370
                self.definerClause()


            self.state = 2373
            self.match(MySQLParser.EVENT_SYMBOL)
            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 2374
                self.ifNotExists()


            self.state = 2377
            self.eventName()
            self.state = 2378
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 2379
            self.match(MySQLParser.SCHEDULE_SYMBOL)
            self.state = 2380
            self.schedule()
            self.state = 2387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==383:
                self.state = 2381
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 2382
                self.match(MySQLParser.COMPLETION_SYMBOL)
                self.state = 2384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==371:
                    self.state = 2383
                    self.match(MySQLParser.NOT_SYMBOL)


                self.state = 2386
                self.match(MySQLParser.PRESERVE_SYMBOL)


            self.state = 2395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [156]:
                self.state = 2389
                self.match(MySQLParser.ENABLE_SYMBOL)
                pass
            elif token in [140]:
                self.state = 2390
                self.match(MySQLParser.DISABLE_SYMBOL)
                self.state = 2393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==383:
                    self.state = 2391
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 2392
                    self.match(MySQLParser.SLAVE_SYMBOL)


                pass
            elif token in [75, 147]:
                pass
            else:
                pass
            self.state = 2399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 2397
                self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 2398
                self.textLiteral()


            self.state = 2401
            self.match(MySQLParser.DO_SYMBOL)
            self.state = 2402
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)




    def createRole(self):

        localctx = MySQLParser.CreateRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_createRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2404
            self.match(MySQLParser.ROLE_SYMBOL)
            self.state = 2406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 2405
                self.ifNotExists()


            self.state = 2408
            self.roleList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateSpatialReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_SYMBOL(self):
            return self.getToken(MySQLParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def SPATIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SPATIAL_SYMBOL, 0)

        def REFERENCE_SYMBOL(self):
            return self.getToken(MySQLParser.REFERENCE_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(MySQLParser.SYSTEM_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def srsAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SrsAttributeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SrsAttributeContext,i)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createSpatialReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSpatialReference" ):
                listener.enterCreateSpatialReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSpatialReference" ):
                listener.exitCreateSpatialReference(self)




    def createSpatialReference(self):

        localctx = MySQLParser.CreateSpatialReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_createSpatialReference)
        self._la = 0 # Token type
        try:
            self.state = 2435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [394]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2410
                self.match(MySQLParser.OR_SYMBOL)
                self.state = 2411
                self.match(MySQLParser.REPLACE_SYMBOL)
                self.state = 2412
                self.match(MySQLParser.SPATIAL_SYMBOL)
                self.state = 2413
                self.match(MySQLParser.REFERENCE_SYMBOL)
                self.state = 2414
                self.match(MySQLParser.SYSTEM_SYMBOL)
                self.state = 2415
                self.real_ulonglong_number()
                self.state = 2419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==357 or (((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & 7) != 0:
                    self.state = 2416
                    self.srsAttribute()
                    self.state = 2421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [523]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2422
                self.match(MySQLParser.SPATIAL_SYMBOL)
                self.state = 2423
                self.match(MySQLParser.REFERENCE_SYMBOL)
                self.state = 2424
                self.match(MySQLParser.SYSTEM_SYMBOL)
                self.state = 2426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 2425
                    self.ifNotExists()


                self.state = 2428
                self.real_ulonglong_number()
                self.state = 2432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==357 or (((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & 7) != 0:
                    self.state = 2429
                    self.srsAttribute()
                    self.state = 2434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SrsAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME_SYMBOL(self):
            return self.getToken(MySQLParser.NAME_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.TEXT_SYMBOL, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def DEFINITION_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINITION_SYMBOL, 0)

        def ORGANIZATION_SYMBOL(self):
            return self.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def DESCRIPTION_SYMBOL(self):
            return self.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_srsAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSrsAttribute" ):
                listener.enterSrsAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSrsAttribute" ):
                listener.exitSrsAttribute(self)




    def srsAttribute(self):

        localctx = MySQLParser.SrsAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_srsAttribute)
        try:
            self.state = 2452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [357]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2437
                self.match(MySQLParser.NAME_SYMBOL)
                self.state = 2438
                self.match(MySQLParser.TEXT_SYMBOL)
                self.state = 2439
                self.textStringNoLinebreak()
                pass
            elif token in [715]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2440
                self.match(MySQLParser.DEFINITION_SYMBOL)
                self.state = 2441
                self.match(MySQLParser.TEXT_SYMBOL)
                self.state = 2442
                self.textStringNoLinebreak()
                pass
            elif token in [717]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2443
                self.match(MySQLParser.ORGANIZATION_SYMBOL)
                self.state = 2444
                self.textStringNoLinebreak()
                self.state = 2445
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 2446
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 2447
                self.real_ulonglong_number()
                pass
            elif token in [716]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2449
                self.match(MySQLParser.DESCRIPTION_SYMBOL)
                self.state = 2450
                self.match(MySQLParser.TEXT_SYMBOL)
                self.state = 2451
                self.textStringNoLinebreak()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def dropDatabase(self):
            return self.getTypedRuleContext(MySQLParser.DropDatabaseContext,0)


        def dropEvent(self):
            return self.getTypedRuleContext(MySQLParser.DropEventContext,0)


        def dropFunction(self):
            return self.getTypedRuleContext(MySQLParser.DropFunctionContext,0)


        def dropProcedure(self):
            return self.getTypedRuleContext(MySQLParser.DropProcedureContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(MySQLParser.DropIndexContext,0)


        def dropLogfileGroup(self):
            return self.getTypedRuleContext(MySQLParser.DropLogfileGroupContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(MySQLParser.DropServerContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(MySQLParser.DropTableContext,0)


        def dropTableSpace(self):
            return self.getTypedRuleContext(MySQLParser.DropTableSpaceContext,0)


        def dropTrigger(self):
            return self.getTypedRuleContext(MySQLParser.DropTriggerContext,0)


        def dropView(self):
            return self.getTypedRuleContext(MySQLParser.DropViewContext,0)


        def dropRole(self):
            return self.getTypedRuleContext(MySQLParser.DropRoleContext,0)


        def dropSpatialReference(self):
            return self.getTypedRuleContext(MySQLParser.DropSpatialReferenceContext,0)


        def dropUndoTablespace(self):
            return self.getTypedRuleContext(MySQLParser.DropUndoTablespaceContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropStatement" ):
                listener.enterDropStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropStatement" ):
                listener.exitDropStatement(self)




    def dropStatement(self):

        localctx = MySQLParser.DropStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_dropStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2454
            self.match(MySQLParser.DROP_SYMBOL)
            self.state = 2472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 2455
                self.dropDatabase()
                pass

            elif la_ == 2:
                self.state = 2456
                self.dropEvent()
                pass

            elif la_ == 3:
                self.state = 2457
                self.dropFunction()
                pass

            elif la_ == 4:
                self.state = 2458
                self.dropProcedure()
                pass

            elif la_ == 5:
                self.state = 2459
                self.dropIndex()
                pass

            elif la_ == 6:
                self.state = 2460
                self.dropLogfileGroup()
                pass

            elif la_ == 7:
                self.state = 2461
                self.dropServer()
                pass

            elif la_ == 8:
                self.state = 2462
                self.dropTable()
                pass

            elif la_ == 9:
                self.state = 2463
                self.dropTableSpace()
                pass

            elif la_ == 10:
                self.state = 2464
                self.dropTrigger()
                pass

            elif la_ == 11:
                self.state = 2465
                self.dropView()
                pass

            elif la_ == 12:
                self.state = 2466
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 2467
                self.dropRole()
                pass

            elif la_ == 13:
                self.state = 2468
                if not serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80011")
                self.state = 2469
                self.dropSpatialReference()
                pass

            elif la_ == 14:
                self.state = 2470
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 2471
                self.dropUndoTablespace()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(MySQLParser.SchemaRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)




    def dropDatabase(self):

        localctx = MySQLParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_dropDatabase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2474
            self.match(MySQLParser.DATABASE_SYMBOL)
            self.state = 2476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 2475
                self.ifExists()


            self.state = 2478
            self.schemaRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def eventRef(self):
            return self.getTypedRuleContext(MySQLParser.EventRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropEvent" ):
                listener.enterDropEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropEvent" ):
                listener.exitDropEvent(self)




    def dropEvent(self):

        localctx = MySQLParser.DropEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_dropEvent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2480
            self.match(MySQLParser.EVENT_SYMBOL)
            self.state = 2482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 2481
                self.ifExists()


            self.state = 2484
            self.eventRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def functionRef(self):
            return self.getTypedRuleContext(MySQLParser.FunctionRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)




    def dropFunction(self):

        localctx = MySQLParser.DropFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_dropFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2486
            self.match(MySQLParser.FUNCTION_SYMBOL)
            self.state = 2488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 2487
                self.ifExists()


            self.state = 2490
            self.functionRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropProcedure" ):
                listener.enterDropProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropProcedure" ):
                listener.exitDropProcedure(self)




    def dropProcedure(self):

        localctx = MySQLParser.DropProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_dropProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2492
            self.match(MySQLParser.PROCEDURE_SYMBOL)
            self.state = 2494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 2493
                self.ifExists()


            self.state = 2496
            self.procedureRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def indexRef(self):
            return self.getTypedRuleContext(MySQLParser.IndexRefContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def onlineOption(self):
            return self.getTypedRuleContext(MySQLParser.OnlineOptionContext,0)


        def indexLockAndAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.IndexLockAndAlgorithmContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)




    def dropIndex(self):

        localctx = MySQLParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==380 or _la==385:
                self.state = 2498
                self.onlineOption()


            self.state = 2501
            localctx.type_ = self.match(MySQLParser.INDEX_SYMBOL)
            self.state = 2502
            self.indexRef()
            self.state = 2503
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 2504
            self.tableRef()
            self.state = 2506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==287:
                self.state = 2505
                self.indexLockAndAlgorithm()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def logfileGroupRef(self):
            return self.getTypedRuleContext(MySQLParser.LogfileGroupRefContext,0)


        def dropLogfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DropLogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DropLogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_dropLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroup" ):
                listener.enterDropLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroup" ):
                listener.exitDropLogfileGroup(self)




    def dropLogfileGroup(self):

        localctx = MySQLParser.DropLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_dropLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2508
            self.match(MySQLParser.LOGFILE_SYMBOL)
            self.state = 2509
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 2510
            self.logfileGroupRef()
            self.state = 2521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163 or _la==374 or _la==553 or _la==638:
                self.state = 2511
                self.dropLogfileGroupOption()
                self.state = 2518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==163 or _la==374 or _la==553 or _la==638 or _la==773:
                    self.state = 2513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==773:
                        self.state = 2512
                        self.match(MySQLParser.COMMA_SYMBOL)


                    self.state = 2515
                    self.dropLogfileGroupOption()
                    self.state = 2520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tsOptionWait(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionWaitContext,0)


        def tsOptionEngine(self):
            return self.getTypedRuleContext(MySQLParser.TsOptionEngineContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropLogfileGroupOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroupOption" ):
                listener.enterDropLogfileGroupOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroupOption" ):
                listener.exitDropLogfileGroupOption(self)




    def dropLogfileGroupOption(self):

        localctx = MySQLParser.DropLogfileGroupOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_dropLogfileGroupOption)
        try:
            self.state = 2525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [374, 638]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2523
                self.tsOptionWait()
                pass
            elif token in [163, 553]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2524
                self.tsOptionEngine()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVER_SYMBOL(self):
            return self.getToken(MySQLParser.SERVER_SYMBOL, 0)

        def serverRef(self):
            return self.getTypedRuleContext(MySQLParser.ServerRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)




    def dropServer(self):

        localctx = MySQLParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_dropServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2527
            self.match(MySQLParser.SERVER_SYMBOL)
            self.state = 2529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 2528
                self.ifExists()


            self.state = 2531
            self.serverRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def tableRefList(self):
            return self.getTypedRuleContext(MySQLParser.TableRefListContext,0)


        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPORARY_SYMBOL, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def RESTRICT_SYMBOL(self):
            return self.getToken(MySQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)




    def dropTable(self):

        localctx = MySQLParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==577:
                self.state = 2533
                self.match(MySQLParser.TEMPORARY_SYMBOL)


            self.state = 2536
            localctx.type_ = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==571 or _la==574):
                localctx.type_ = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 2537
                self.ifExists()


            self.state = 2540
            self.tableRefList()
            self.state = 2542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49 or _la==471:
                self.state = 2541
                _la = self._input.LA(1)
                if not(_la==49 or _la==471):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceRefContext,0)


        def dropLogfileGroupOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DropLogfileGroupOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DropLogfileGroupOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_dropTableSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableSpace" ):
                listener.enterDropTableSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableSpace" ):
                listener.exitDropTableSpace(self)




    def dropTableSpace(self):

        localctx = MySQLParser.DropTableSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_dropTableSpace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2544
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 2545
            self.tablespaceRef()
            self.state = 2556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163 or _la==374 or _la==553 or _la==638:
                self.state = 2546
                self.dropLogfileGroupOption()
                self.state = 2553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==163 or _la==374 or _la==553 or _la==638 or _la==773:
                    self.state = 2548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==773:
                        self.state = 2547
                        self.match(MySQLParser.COMMA_SYMBOL)


                    self.state = 2550
                    self.dropLogfileGroupOption()
                    self.state = 2555
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIGGER_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGER_SYMBOL, 0)

        def triggerRef(self):
            return self.getTypedRuleContext(MySQLParser.TriggerRefContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTrigger" ):
                listener.enterDropTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTrigger" ):
                listener.exitDropTrigger(self)




    def dropTrigger(self):

        localctx = MySQLParser.DropTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_dropTrigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            self.match(MySQLParser.TRIGGER_SYMBOL)
            self.state = 2560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 2559
                self.ifExists()


            self.state = 2562
            self.triggerRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def viewRefList(self):
            return self.getTypedRuleContext(MySQLParser.ViewRefListContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def RESTRICT_SYMBOL(self):
            return self.getToken(MySQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dropView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)




    def dropView(self):

        localctx = MySQLParser.DropViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_dropView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self.match(MySQLParser.VIEW_SYMBOL)
            self.state = 2566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 2565
                self.ifExists()


            self.state = 2568
            self.viewRefList()
            self.state = 2570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49 or _la==471:
                self.state = 2569
                _la = self._input.LA(1)
                if not(_la==49 or _la==471):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)




    def dropRole(self):

        localctx = MySQLParser.DropRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_dropRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2572
            self.match(MySQLParser.ROLE_SYMBOL)
            self.state = 2574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 2573
                self.ifExists()


            self.state = 2576
            self.roleList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropSpatialReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPATIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SPATIAL_SYMBOL, 0)

        def REFERENCE_SYMBOL(self):
            return self.getToken(MySQLParser.REFERENCE_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(MySQLParser.SYSTEM_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropSpatialReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSpatialReference" ):
                listener.enterDropSpatialReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSpatialReference" ):
                listener.exitDropSpatialReference(self)




    def dropSpatialReference(self):

        localctx = MySQLParser.DropSpatialReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_dropSpatialReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            self.match(MySQLParser.SPATIAL_SYMBOL)
            self.state = 2579
            self.match(MySQLParser.REFERENCE_SYMBOL)
            self.state = 2580
            self.match(MySQLParser.SYSTEM_SYMBOL)
            self.state = 2582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 2581
                self.ifExists()


            self.state = 2584
            self.real_ulonglong_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUndoTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDO_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def tablespaceRef(self):
            return self.getTypedRuleContext(MySQLParser.TablespaceRefContext,0)


        def undoTableSpaceOptions(self):
            return self.getTypedRuleContext(MySQLParser.UndoTableSpaceOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropUndoTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUndoTablespace" ):
                listener.enterDropUndoTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUndoTablespace" ):
                listener.exitDropUndoTablespace(self)




    def dropUndoTablespace(self):

        localctx = MySQLParser.DropUndoTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_dropUndoTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            self.match(MySQLParser.UNDO_SYMBOL)
            self.state = 2587
            self.match(MySQLParser.TABLESPACE_SYMBOL)
            self.state = 2588
            self.tablespaceRef()
            self.state = 2590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163 or _la==553:
                self.state = 2589
                self.undoTableSpaceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME_SYMBOL(self):
            return self.getToken(MySQLParser.RENAME_SYMBOL, 0)

        def renamePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RenamePairContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RenamePairContext,i)


        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_renameTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableStatement" ):
                listener.enterRenameTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableStatement" ):
                listener.exitRenameTableStatement(self)




    def renameTableStatement(self):

        localctx = MySQLParser.RenameTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_renameTableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2592
            self.match(MySQLParser.RENAME_SYMBOL)
            self.state = 2593
            _la = self._input.LA(1)
            if not(_la==571 or _la==574):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2594
            self.renamePair()
            self.state = 2599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 2595
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 2596
                self.renamePair()
                self.state = 2601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenamePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySQLParser.TableNameContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_renamePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenamePair" ):
                listener.enterRenamePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenamePair" ):
                listener.exitRenamePair(self)




    def renamePair(self):

        localctx = MySQLParser.RenamePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_renamePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2602
            self.tableRef()
            self.state = 2603
            self.match(MySQLParser.TO_SYMBOL)
            self.state = 2604
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_truncateTableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTableStatement" ):
                listener.enterTruncateTableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTableStatement" ):
                listener.exitTruncateTableStatement(self)




    def truncateTableStatement(self):

        localctx = MySQLParser.TruncateTableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_truncateTableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.match(MySQLParser.TRUNCATE_SYMBOL)
            self.state = 2608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 2607
                self.match(MySQLParser.TABLE_SYMBOL)


            self.state = 2610
            self.tableRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def textStringLiteralList(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)




    def importStatement(self):

        localctx = MySQLParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2612
            self.match(MySQLParser.IMPORT_SYMBOL)
            self.state = 2613
            self.match(MySQLParser.TABLE_SYMBOL)
            self.state = 2614
            self.match(MySQLParser.FROM_SYMBOL)
            self.state = 2615
            self.textStringLiteralList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL_SYMBOL(self):
            return self.getToken(MySQLParser.CALL_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureRefContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)




    def callStatement(self):

        localctx = MySQLParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_callStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2617
            self.match(MySQLParser.CALL_SYMBOL)
            self.state = 2618
            self.procedureRef()
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==776:
                self.state = 2619
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 2621
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 2620
                    self.exprList()


                self.state = 2623
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_SYMBOL(self):
            return self.getToken(MySQLParser.DELETE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def tableAliasRefList(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasRefListContext,0)


        def tableReferenceList(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListContext,0)


        def withClause(self):
            return self.getTypedRuleContext(MySQLParser.WithClauseContext,0)


        def deleteStatementOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DeleteStatementOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DeleteStatementOptionContext,i)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def partitionDelete(self):
            return self.getTypedRuleContext(MySQLParser.PartitionDeleteContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(MySQLParser.OrderClauseContext,0)


        def simpleLimitClause(self):
            return self.getTypedRuleContext(MySQLParser.SimpleLimitClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = MySQLParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 2626
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 2627
                self.withClause()


            self.state = 2630
            self.match(MySQLParser.DELETE_SYMBOL)
            self.state = 2634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2631
                    self.deleteStatementOption() 
                self.state = 2636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

            self.state = 2669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 2637
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 2661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 2638
                    self.tableAliasRefList()
                    self.state = 2639
                    self.match(MySQLParser.USING_SYMBOL)
                    self.state = 2640
                    self.tableReferenceList()
                    self.state = 2642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==643:
                        self.state = 2641
                        self.whereClause()


                    pass

                elif la_ == 2:
                    self.state = 2644
                    self.tableRef()
                    self.state = 2647
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                    if la_ == 1:
                        self.state = 2645
                        if not serverVersion >= 80017:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion >= 80017")
                        self.state = 2646
                        self.tableAlias()


                    self.state = 2650
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                    if la_ == 1:
                        self.state = 2649
                        self.partitionDelete()


                    self.state = 2653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==643:
                        self.state = 2652
                        self.whereClause()


                    self.state = 2656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==393:
                        self.state = 2655
                        self.orderClause()


                    self.state = 2659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==276:
                        self.state = 2658
                        self.simpleLimitClause()


                    pass


                pass

            elif la_ == 2:
                self.state = 2663
                self.tableAliasRefList()
                self.state = 2664
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 2665
                self.tableReferenceList()
                self.state = 2667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==643:
                    self.state = 2666
                    self.whereClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionDelete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDelete" ):
                listener.enterPartitionDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDelete" ):
                listener.exitPartitionDelete(self)




    def partitionDelete(self):

        localctx = MySQLParser.PartitionDeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_partitionDelete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2671
            if not serverVersion >= 50602:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50602")
            self.state = 2672
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 2673
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2674
            self.identifierList()
            self.state = 2675
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_deleteStatementOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatementOption" ):
                listener.enterDeleteStatementOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatementOption" ):
                listener.exitDeleteStatementOption(self)




    def deleteStatementOption(self):

        localctx = MySQLParser.DeleteStatementOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_deleteStatementOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2677
            _la = self._input.LA(1)
            if not(_la==232 or _la==295 or _la==431):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def selectItemList(self):
            return self.getTypedRuleContext(MySQLParser.SelectItemListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = MySQLParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2679
            self.match(MySQLParser.DO_SYMBOL)
            self.state = 2684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 2680
                if not serverVersion < 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50709")
                self.state = 2681
                self.exprList()
                pass

            elif la_ == 2:
                self.state = 2682
                if not serverVersion >= 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50709")
                self.state = 2683
                self.selectItemList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER_SYMBOL(self):
            return self.getToken(MySQLParser.HANDLER_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def OPEN_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def CLOSE_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def handlerReadOrScan(self):
            return self.getTypedRuleContext(MySQLParser.HandlerReadOrScanContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySQLParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_handlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerStatement" ):
                listener.enterHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerStatement" ):
                listener.exitHandlerStatement(self)




    def handlerStatement(self):

        localctx = MySQLParser.HandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_handlerStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2686
            self.match(MySQLParser.HANDLER_SYMBOL)
            self.state = 2704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 2687
                self.tableRef()
                self.state = 2688
                self.match(MySQLParser.OPEN_SYMBOL)
                self.state = 2690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 2689
                    self.tableAlias()


                pass

            elif la_ == 2:
                self.state = 2692
                self.identifier()
                self.state = 2702
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [66]:
                    self.state = 2693
                    self.match(MySQLParser.CLOSE_SYMBOL)
                    pass
                elif token in [435]:
                    self.state = 2694
                    self.match(MySQLParser.READ_SYMBOL)
                    self.state = 2695
                    self.handlerReadOrScan()
                    self.state = 2697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==643:
                        self.state = 2696
                        self.whereClause()


                    self.state = 2700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==276:
                        self.state = 2699
                        self.limitClause()


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadOrScanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(MySQLParser.NEXT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def values(self):
            return self.getTypedRuleContext(MySQLParser.ValuesContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def PREV_SYMBOL(self):
            return self.getToken(MySQLParser.PREV_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def LESS_THAN_OPERATOR(self):
            return self.getToken(MySQLParser.LESS_THAN_OPERATOR, 0)

        def GREATER_THAN_OPERATOR(self):
            return self.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0)

        def LESS_OR_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0)

        def GREATER_OR_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_handlerReadOrScan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadOrScan" ):
                listener.enterHandlerReadOrScan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadOrScan" ):
                listener.exitHandlerReadOrScan(self)




    def handlerReadOrScan(self):

        localctx = MySQLParser.HandlerReadOrScanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_handlerReadOrScan)
        self._la = 0 # Token type
        try:
            self.state = 2716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2706
                _la = self._input.LA(1)
                if not(_la==191 or _la==367):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2707
                self.identifier()
                self.state = 2714
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [191, 268, 367, 419]:
                    self.state = 2708
                    _la = self._input.LA(1)
                    if not(_la==191 or _la==268 or _la==367 or _la==419):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [750, 753, 754, 755, 756]:
                    self.state = 2709
                    _la = self._input.LA(1)
                    if not((((_la - 750)) & ~0x3f) == 0 and ((1 << (_la - 750)) & 121) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2710
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 2711
                    self.values()
                    self.state = 2712
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def insertFromConstructor(self):
            return self.getTypedRuleContext(MySQLParser.InsertFromConstructorContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(MySQLParser.UpdateListContext,0)


        def insertQueryExpression(self):
            return self.getTypedRuleContext(MySQLParser.InsertQueryExpressionContext,0)


        def insertLockOption(self):
            return self.getTypedRuleContext(MySQLParser.InsertLockOptionContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def usePartition(self):
            return self.getTypedRuleContext(MySQLParser.UsePartitionContext,0)


        def insertUpdateList(self):
            return self.getTypedRuleContext(MySQLParser.InsertUpdateListContext,0)


        def valuesReference(self):
            return self.getTypedRuleContext(MySQLParser.ValuesReferenceContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = MySQLParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2718
            self.match(MySQLParser.INSERT_SYMBOL)
            self.state = 2720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 2719
                self.insertLockOption()


            self.state = 2723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 2722
                self.match(MySQLParser.IGNORE_SYMBOL)


            self.state = 2726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 2725
                self.match(MySQLParser.INTO_SYMBOL)


            self.state = 2728
            self.tableRef()
            self.state = 2730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 2729
                self.usePartition()


            self.state = 2744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 2732
                self.insertFromConstructor()
                self.state = 2735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 2733
                    if not  serverVersion >= 80018:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, " serverVersion >= 80018")
                    self.state = 2734
                    self.valuesReference()


                pass

            elif la_ == 2:
                self.state = 2737
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 2738
                self.updateList()
                self.state = 2741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 2739
                    if not  serverVersion >= 80018:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, " serverVersion >= 80018")
                    self.state = 2740
                    self.valuesReference()


                pass

            elif la_ == 3:
                self.state = 2743
                self.insertQueryExpression()
                pass


            self.state = 2747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==383:
                self.state = 2746
                self.insertUpdateList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertLockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def DELAYED_SYMBOL(self):
            return self.getToken(MySQLParser.DELAYED_SYMBOL, 0)

        def HIGH_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_insertLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertLockOption" ):
                listener.enterInsertLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertLockOption" ):
                listener.exitInsertLockOption(self)




    def insertLockOption(self):

        localctx = MySQLParser.InsertLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_insertLockOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2749
            _la = self._input.LA(1)
            if not(_la==131 or _la==223 or _la==295):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertFromConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertValues(self):
            return self.getTypedRuleContext(MySQLParser.InsertValuesContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def fields(self):
            return self.getTypedRuleContext(MySQLParser.FieldsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insertFromConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertFromConstructor" ):
                listener.enterInsertFromConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertFromConstructor" ):
                listener.exitInsertFromConstructor(self)




    def insertFromConstructor(self):

        localctx = MySQLParser.InsertFromConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_insertFromConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==776:
                self.state = 2751
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 2753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 2752
                    self.fields()


                self.state = 2755
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)


            self.state = 2758
            self.insertValues()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.InsertIdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.InsertIdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFields" ):
                listener.enterFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFields" ):
                listener.exitFields(self)




    def fields(self):

        localctx = MySQLParser.FieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_fields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self.insertIdentifier()
            self.state = 2765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 2761
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 2762
                self.insertIdentifier()
                self.state = 2767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueList(self):
            return self.getTypedRuleContext(MySQLParser.ValueListContext,0)


        def VALUES_SYMBOL(self):
            return self.getToken(MySQLParser.VALUES_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.VALUE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_insertValues

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertValues" ):
                listener.enterInsertValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertValues" ):
                listener.exitInsertValues(self)




    def insertValues(self):

        localctx = MySQLParser.InsertValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_insertValues)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2768
            _la = self._input.LA(1)
            if not(_la==626 or _la==627):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2769
            self.valueList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertQueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionOrParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionOrParensContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def fields(self):
            return self.getTypedRuleContext(MySQLParser.FieldsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insertQueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertQueryExpression" ):
                listener.enterInsertQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertQueryExpression" ):
                listener.exitInsertQueryExpression(self)




    def insertQueryExpression(self):

        localctx = MySQLParser.InsertQueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_insertQueryExpression)
        try:
            self.state = 2778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2771
                self.queryExpressionOrParens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2772
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 2774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 2773
                    self.fields()


                self.state = 2776
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 2777
                self.queryExpressionOrParens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.OPEN_PAR_SYMBOL)
            else:
                return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, i)

        def CLOSE_PAR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.CLOSE_PAR_SYMBOL)
            else:
                return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, i)

        def values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ValuesContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ValuesContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_valueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueList" ):
                listener.enterValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueList" ):
                listener.exitValueList(self)




    def valueList(self):

        localctx = MySQLParser.ValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_valueList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2780
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 2781
                self.values()


            self.state = 2784
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
            self.state = 2793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2785
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 2786
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 2788
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                    if la_ == 1:
                        self.state = 2787
                        self.values()


                    self.state = 2790
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL) 
                self.state = 2795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def DEFAULT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.DEFAULT_SYMBOL)
            else:
                return self.getToken(MySQLParser.DEFAULT_SYMBOL, i)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues" ):
                listener.enterValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues" ):
                listener.exitValues(self)




    def values(self):

        localctx = MySQLParser.ValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2796
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 2797
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass


            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 2800
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 2803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 2801
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2802
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    pass


                self.state = 2809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_valuesReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesReference" ):
                listener.enterValuesReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesReference" ):
                listener.exitValuesReference(self)




    def valuesReference(self):

        localctx = MySQLParser.ValuesReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_valuesReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2810
            self.match(MySQLParser.AS_SYMBOL)
            self.state = 2811
            self.identifier()
            self.state = 2813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==776:
                self.state = 2812
                self.columnInternalRefList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertUpdateListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def DUPLICATE_SYMBOL(self):
            return self.getToken(MySQLParser.DUPLICATE_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(MySQLParser.UpdateListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insertUpdateList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertUpdateList" ):
                listener.enterInsertUpdateList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertUpdateList" ):
                listener.exitInsertUpdateList(self)




    def insertUpdateList(self):

        localctx = MySQLParser.InsertUpdateListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_insertUpdateList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2815
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 2816
            self.match(MySQLParser.DUPLICATE_SYMBOL)
            self.state = 2817
            self.match(MySQLParser.KEY_SYMBOL)
            self.state = 2818
            self.match(MySQLParser.UPDATE_SYMBOL)
            self.state = 2819
            self.updateList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.LOAD_SYMBOL, 0)

        def dataOrXml(self):
            return self.getTypedRuleContext(MySQLParser.DataOrXmlContext,0)


        def INFILE_SYMBOL(self):
            return self.getToken(MySQLParser.INFILE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def loadDataFileTail(self):
            return self.getTypedRuleContext(MySQLParser.LoadDataFileTailContext,0)


        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def usePartition(self):
            return self.getTypedRuleContext(MySQLParser.UsePartitionContext,0)


        def charsetClause(self):
            return self.getTypedRuleContext(MySQLParser.CharsetClauseContext,0)


        def xmlRowsIdentifiedBy(self):
            return self.getTypedRuleContext(MySQLParser.XmlRowsIdentifiedByContext,0)


        def fieldsClause(self):
            return self.getTypedRuleContext(MySQLParser.FieldsClauseContext,0)


        def linesClause(self):
            return self.getTypedRuleContext(MySQLParser.LinesClauseContext,0)


        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def CONCURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONCURRENT_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_loadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStatement" ):
                listener.enterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStatement" ):
                listener.exitLoadStatement(self)




    def loadStatement(self):

        localctx = MySQLParser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_loadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2821
            self.match(MySQLParser.LOAD_SYMBOL)
            self.state = 2822
            self.dataOrXml()
            self.state = 2824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==295:
                self.state = 2823
                _la = self._input.LA(1)
                if not(_la==82 or _la==295):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==284:
                self.state = 2826
                self.match(MySQLParser.LOCAL_SYMBOL)


            self.state = 2829
            self.match(MySQLParser.INFILE_SYMBOL)
            self.state = 2830
            self.textLiteral()
            self.state = 2832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==232 or _la==458:
                self.state = 2831
                _la = self._input.LA(1)
                if not(_la==232 or _la==458):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2834
            self.match(MySQLParser.INTO_SYMBOL)
            self.state = 2835
            self.match(MySQLParser.TABLE_SYMBOL)
            self.state = 2836
            self.tableRef()
            self.state = 2838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2837
                self.usePartition()


            self.state = 2841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58 or _la==60:
                self.state = 2840
                self.charsetClause()


            self.state = 2844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==484:
                self.state = 2843
                self.xmlRowsIdentifiedBy()


            self.state = 2847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 2846
                self.fieldsClause()


            self.state = 2850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 2849
                self.linesClause()


            self.state = 2852
            self.loadDataFileTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataOrXmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def XML_SYMBOL(self):
            return self.getToken(MySQLParser.XML_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dataOrXml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataOrXml" ):
                listener.enterDataOrXml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataOrXml" ):
                listener.exitDataOrXml(self)




    def dataOrXml(self):

        localctx = MySQLParser.DataOrXmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_dataOrXml)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2854
            _la = self._input.LA(1)
            if not(_la==112 or _la==653):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XmlRowsIdentifiedByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.ROWS_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_xmlRowsIdentifiedBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlRowsIdentifiedBy" ):
                listener.enterXmlRowsIdentifiedBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlRowsIdentifiedBy" ):
                listener.exitXmlRowsIdentifiedBy(self)




    def xmlRowsIdentifiedBy(self):

        localctx = MySQLParser.XmlRowsIdentifiedByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_xmlRowsIdentifiedBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2856
            self.match(MySQLParser.ROWS_SYMBOL)
            self.state = 2857
            self.match(MySQLParser.IDENTIFIED_SYMBOL)
            self.state = 2858
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 2859
            self.textString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataFileTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def loadDataFileTargetList(self):
            return self.getTypedRuleContext(MySQLParser.LoadDataFileTargetListContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(MySQLParser.UpdateListContext,0)


        def LINES_SYMBOL(self):
            return self.getToken(MySQLParser.LINES_SYMBOL, 0)

        def ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.ROWS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_loadDataFileTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataFileTail" ):
                listener.enterLoadDataFileTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataFileTail" ):
                listener.exitLoadDataFileTail(self)




    def loadDataFileTail(self):

        localctx = MySQLParser.LoadDataFileTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_loadDataFileTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==232:
                self.state = 2861
                self.match(MySQLParser.IGNORE_SYMBOL)
                self.state = 2862
                self.match(MySQLParser.INT_NUMBER)
                self.state = 2863
                _la = self._input.LA(1)
                if not(_la==278 or _la==484):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==776:
                self.state = 2866
                self.loadDataFileTargetList()


            self.state = 2871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==506:
                self.state = 2869
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 2870
                self.updateList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataFileTargetListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def fieldOrVariableList(self):
            return self.getTypedRuleContext(MySQLParser.FieldOrVariableListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_loadDataFileTargetList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataFileTargetList" ):
                listener.enterLoadDataFileTargetList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataFileTargetList" ):
                listener.exitLoadDataFileTargetList(self)




    def loadDataFileTargetList(self):

        localctx = MySQLParser.LoadDataFileTargetListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_loadDataFileTargetList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2873
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 2874
                self.fieldOrVariableList()


            self.state = 2877
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldOrVariableListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ColumnRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ColumnRefContext,i)


        def userVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UserVariableContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UserVariableContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_fieldOrVariableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldOrVariableList" ):
                listener.enterFieldOrVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldOrVariableList" ):
                listener.exitFieldOrVariableList(self)




    def fieldOrVariableList(self):

        localctx = MySQLParser.FieldOrVariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_fieldOrVariableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2879
                self.columnRef()
                pass

            elif la_ == 2:
                self.state = 2880
                self.userVariable()
                pass


            self.state = 2890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 2883
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 2886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 2884
                    self.columnRef()
                    pass

                elif la_ == 2:
                    self.state = 2885
                    self.userVariable()
                    pass


                self.state = 2892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def insertFromConstructor(self):
            return self.getTypedRuleContext(MySQLParser.InsertFromConstructorContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(MySQLParser.UpdateListContext,0)


        def insertQueryExpression(self):
            return self.getTypedRuleContext(MySQLParser.InsertQueryExpressionContext,0)


        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def usePartition(self):
            return self.getTypedRuleContext(MySQLParser.UsePartitionContext,0)


        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def DELAYED_SYMBOL(self):
            return self.getToken(MySQLParser.DELAYED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_replaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceStatement" ):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceStatement" ):
                listener.exitReplaceStatement(self)




    def replaceStatement(self):

        localctx = MySQLParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_replaceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2893
            self.match(MySQLParser.REPLACE_SYMBOL)
            self.state = 2895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 2894
                _la = self._input.LA(1)
                if not(_la==131 or _la==295):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2897
                self.match(MySQLParser.INTO_SYMBOL)


            self.state = 2900
            self.tableRef()
            self.state = 2902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 2901
                self.usePartition()


            self.state = 2908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 2904
                self.insertFromConstructor()
                pass

            elif la_ == 2:
                self.state = 2905
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 2906
                self.updateList()
                pass

            elif la_ == 3:
                self.state = 2907
                self.insertQueryExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpression(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionContext,0)


        def lockingClauseList(self):
            return self.getTypedRuleContext(MySQLParser.LockingClauseListContext,0)


        def queryExpressionParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,0)


        def selectStatementWithInto(self):
            return self.getTypedRuleContext(MySQLParser.SelectStatementWithIntoContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_selectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatement" ):
                listener.enterSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatement" ):
                listener.exitSelectStatement(self)




    def selectStatement(self):

        localctx = MySQLParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 2916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2910
                self.queryExpression()
                self.state = 2912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200 or _la==287:
                    self.state = 2911
                    self.lockingClauseList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2914
                self.queryExpressionParens()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2915
                self.selectStatementWithInto()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementWithIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def selectStatementWithInto(self):
            return self.getTypedRuleContext(MySQLParser.SelectStatementWithIntoContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionContext,0)


        def intoClause(self):
            return self.getTypedRuleContext(MySQLParser.IntoClauseContext,0)


        def lockingClauseList(self):
            return self.getTypedRuleContext(MySQLParser.LockingClauseListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_selectStatementWithInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatementWithInto" ):
                listener.enterSelectStatementWithInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatementWithInto" ):
                listener.exitSelectStatementWithInto(self)




    def selectStatementWithInto(self):

        localctx = MySQLParser.SelectStatementWithIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_selectStatementWithInto)
        self._la = 0 # Token type
        try:
            self.state = 2930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2918
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 2919
                self.selectStatementWithInto()
                self.state = 2920
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2922
                self.queryExpression()
                self.state = 2923
                self.intoClause()
                self.state = 2925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200 or _la==287:
                    self.state = 2924
                    self.lockingClauseList()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2927
                self.lockingClauseList()
                self.state = 2928
                self.intoClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionBody(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionBodyContext,0)


        def queryExpressionParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,0)


        def withClause(self):
            return self.getTypedRuleContext(MySQLParser.WithClauseContext,0)


        def procedureAnalyseClause(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureAnalyseClauseContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(MySQLParser.OrderClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySQLParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)




    def queryExpression(self):

        localctx = MySQLParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_queryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 2932
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 2933
                self.withClause()


            self.state = 2950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 2936
                self.queryExpressionBody()
                self.state = 2938
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2937
                    self.orderClause()


                self.state = 2941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 2940
                    self.limitClause()


                pass

            elif la_ == 2:
                self.state = 2943
                self.queryExpressionParens()
                self.state = 2945
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 2944
                    self.orderClause()


                self.state = 2948
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 2947
                    self.limitClause()


                pass


            self.state = 2954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 2952
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 2953
                self.procedureAnalyseClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryPrimary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.QueryPrimaryContext)
            else:
                return self.getTypedRuleContext(MySQLParser.QueryPrimaryContext,i)


        def queryExpressionParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.QueryExpressionParensContext)
            else:
                return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,i)


        def UNION_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.UNION_SYMBOL)
            else:
                return self.getToken(MySQLParser.UNION_SYMBOL, i)

        def unionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UnionOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UnionOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_queryExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionBody" ):
                listener.enterQueryExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionBody" ):
                listener.exitQueryExpressionBody(self)




    def queryExpressionBody(self):

        localctx = MySQLParser.QueryExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_queryExpressionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2956
                self.queryPrimary()
                pass

            elif la_ == 2:
                self.state = 2957
                self.queryExpressionParens()
                self.state = 2958
                self.match(MySQLParser.UNION_SYMBOL)
                self.state = 2960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 2959
                    self.unionOption()


                self.state = 2964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 2962
                    self.queryPrimary()
                    pass

                elif la_ == 2:
                    self.state = 2963
                    self.queryExpressionParens()
                    pass


                pass


            self.state = 2978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2968
                    self.match(MySQLParser.UNION_SYMBOL)
                    self.state = 2970
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                    if la_ == 1:
                        self.state = 2969
                        self.unionOption()


                    self.state = 2974
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
                    if la_ == 1:
                        self.state = 2972
                        self.queryPrimary()
                        pass

                    elif la_ == 2:
                        self.state = 2973
                        self.queryExpressionParens()
                        pass

             
                self.state = 2980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def queryExpressionParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,0)


        def queryExpression(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionContext,0)


        def lockingClauseList(self):
            return self.getTypedRuleContext(MySQLParser.LockingClauseListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_queryExpressionParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionParens" ):
                listener.enterQueryExpressionParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionParens" ):
                listener.exitQueryExpressionParens(self)




    def queryExpressionParens(self):

        localctx = MySQLParser.QueryExpressionParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_queryExpressionParens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2981
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 2987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2982
                self.queryExpressionParens()
                pass

            elif la_ == 2:
                self.state = 2983
                self.queryExpression()
                self.state = 2985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200 or _la==287:
                    self.state = 2984
                    self.lockingClauseList()


                pass


            self.state = 2989
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(MySQLParser.QuerySpecificationContext,0)


        def tableValueConstructor(self):
            return self.getTypedRuleContext(MySQLParser.TableValueConstructorContext,0)


        def explicitTable(self):
            return self.getTypedRuleContext(MySQLParser.ExplicitTableContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_queryPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimary" ):
                listener.enterQueryPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimary" ):
                listener.exitQueryPrimary(self)




    def queryPrimary(self):

        localctx = MySQLParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_queryPrimary)
        try:
            self.state = 2996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2991
                self.querySpecification()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2992
                if not serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80019")
                self.state = 2993
                self.tableValueConstructor()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2994
                if not serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80019")
                self.state = 2995
                self.explicitTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT_SYMBOL(self):
            return self.getToken(MySQLParser.SELECT_SYMBOL, 0)

        def selectItemList(self):
            return self.getTypedRuleContext(MySQLParser.SelectItemListContext,0)


        def selectOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SelectOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SelectOptionContext,i)


        def intoClause(self):
            return self.getTypedRuleContext(MySQLParser.IntoClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(MySQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(MySQLParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(MySQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(MySQLParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = MySQLParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2998
            self.match(MySQLParser.SELECT_SYMBOL)
            self.state = 3002
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2999
                    self.selectOption() 
                self.state = 3004
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

            self.state = 3005
            self.selectItemList()
            self.state = 3007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 3006
                self.intoClause()


            self.state = 3010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 3009
                self.fromClause()


            self.state = 3013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 3012
                self.whereClause()


            self.state = 3016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 3015
                self.groupByClause()


            self.state = 3019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.state = 3018
                self.havingClause()


            self.state = 3023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 3021
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 3022
                self.windowClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryExpressionParens(self):
            return self.getTypedRuleContext(MySQLParser.QueryExpressionParensContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = MySQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3025
            self.queryExpressionParens()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def DISTINCT_SYMBOL(self):
            return self.getToken(MySQLParser.DISTINCT_SYMBOL, 0)

        def STRAIGHT_JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0)

        def HIGH_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0)

        def SQL_SMALL_RESULT_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0)

        def SQL_BIG_RESULT_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0)

        def SQL_BUFFER_RESULT_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0)

        def SQL_CALC_FOUND_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_querySpecOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecOption" ):
                listener.enterQuerySpecOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecOption" ):
                listener.exitQuerySpecOption(self)




    def querySpecOption(self):

        localctx = MySQLParser.QuerySpecOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_querySpecOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3027
            _la = self._input.LA(1)
            if not(_la==10 or _la==143 or _la==223 or (((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & 16777259) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_SYMBOL(self):
            return self.getToken(MySQLParser.LIMIT_SYMBOL, 0)

        def limitOptions(self):
            return self.getTypedRuleContext(MySQLParser.LimitOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = MySQLParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3029
            self.match(MySQLParser.LIMIT_SYMBOL)
            self.state = 3030
            self.limitOptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleLimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_SYMBOL(self):
            return self.getToken(MySQLParser.LIMIT_SYMBOL, 0)

        def limitOption(self):
            return self.getTypedRuleContext(MySQLParser.LimitOptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_simpleLimitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleLimitClause" ):
                listener.enterSimpleLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleLimitClause" ):
                listener.exitSimpleLimitClause(self)




    def simpleLimitClause(self):

        localctx = MySQLParser.SimpleLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_simpleLimitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3032
            self.match(MySQLParser.LIMIT_SYMBOL)
            self.state = 3033
            self.limitOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def limitOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.LimitOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.LimitOptionContext,i)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def OFFSET_SYMBOL(self):
            return self.getToken(MySQLParser.OFFSET_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_limitOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitOptions" ):
                listener.enterLimitOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitOptions" ):
                listener.exitLimitOptions(self)




    def limitOptions(self):

        localctx = MySQLParser.LimitOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_limitOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3035
            self.limitOption()
            self.state = 3038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 3036
                _la = self._input.LA(1)
                if not(_la==381 or _la==773):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3037
                self.limitOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def PARAM_MARKER(self):
            return self.getToken(MySQLParser.PARAM_MARKER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_limitOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitOption" ):
                listener.enterLimitOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitOption" ):
                listener.exitLimitOption(self)




    def limitOption(self):

        localctx = MySQLParser.LimitOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_limitOption)
        self._la = 0 # Token type
        try:
            self.state = 3042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3040
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3041
                _la = self._input.LA(1)
                if not((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & 1099511627783) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntoClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def OUTFILE_SYMBOL(self):
            return self.getToken(MySQLParser.OUTFILE_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def DUMPFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DUMPFILE_SYMBOL, 0)

        def textOrIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextOrIdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,i)


        def userVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UserVariableContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UserVariableContext,i)


        def charsetClause(self):
            return self.getTypedRuleContext(MySQLParser.CharsetClauseContext,0)


        def fieldsClause(self):
            return self.getTypedRuleContext(MySQLParser.FieldsClauseContext,0)


        def linesClause(self):
            return self.getTypedRuleContext(MySQLParser.LinesClauseContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_intoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntoClause" ):
                listener.enterIntoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntoClause" ):
                listener.exitIntoClause(self)




    def intoClause(self):

        localctx = MySQLParser.IntoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_intoClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3044
            self.match(MySQLParser.INTO_SYMBOL)
            self.state = 3072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 3045
                self.match(MySQLParser.OUTFILE_SYMBOL)
                self.state = 3046
                self.textStringLiteral()
                self.state = 3048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                if la_ == 1:
                    self.state = 3047
                    self.charsetClause()


                self.state = 3051
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 3050
                    self.fieldsClause()


                self.state = 3054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 3053
                    self.linesClause()


                pass

            elif la_ == 2:
                self.state = 3056
                self.match(MySQLParser.DUMPFILE_SYMBOL)
                self.state = 3057
                self.textStringLiteral()
                pass

            elif la_ == 3:
                self.state = 3060
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                if la_ == 1:
                    self.state = 3058
                    self.textOrIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 3059
                    self.userVariable()
                    pass


                self.state = 3069
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3062
                        self.match(MySQLParser.COMMA_SYMBOL)
                        self.state = 3065
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                        if la_ == 1:
                            self.state = 3063
                            self.textOrIdentifier()
                            pass

                        elif la_ == 2:
                            self.state = 3064
                            self.userVariable()
                            pass

                 
                    self.state = 3071
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureAnalyseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def ANALYSE_SYMBOL(self):
            return self.getToken(MySQLParser.ANALYSE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def INT_NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.INT_NUMBER)
            else:
                return self.getToken(MySQLParser.INT_NUMBER, i)

        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_procedureAnalyseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureAnalyseClause" ):
                listener.enterProcedureAnalyseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureAnalyseClause" ):
                listener.exitProcedureAnalyseClause(self)




    def procedureAnalyseClause(self):

        localctx = MySQLParser.ProcedureAnalyseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_procedureAnalyseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3074
            self.match(MySQLParser.PROCEDURE_SYMBOL)
            self.state = 3075
            self.match(MySQLParser.ANALYSE_SYMBOL)
            self.state = 3076
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==747:
                self.state = 3077
                self.match(MySQLParser.INT_NUMBER)
                self.state = 3080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 3078
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3079
                    self.match(MySQLParser.INT_NUMBER)




            self.state = 3084
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING_SYMBOL(self):
            return self.getToken(MySQLParser.HAVING_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = MySQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3086
            self.match(MySQLParser.HAVING_SYMBOL)
            self.state = 3087
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW_SYMBOL(self):
            return self.getToken(MySQLParser.WINDOW_SYMBOL, 0)

        def windowDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.WindowDefinitionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.WindowDefinitionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)




    def windowClause(self):

        localctx = MySQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3089
            self.match(MySQLParser.WINDOW_SYMBOL)
            self.state = 3090
            self.windowDefinition()
            self.state = 3095
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3091
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3092
                    self.windowDefinition() 
                self.state = 3097
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowName(self):
            return self.getTypedRuleContext(MySQLParser.WindowNameContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(MySQLParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDefinition" ):
                listener.enterWindowDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDefinition" ):
                listener.exitWindowDefinition(self)




    def windowDefinition(self):

        localctx = MySQLParser.WindowDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_windowDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3098
            self.windowName()
            self.state = 3099
            self.match(MySQLParser.AS_SYMBOL)
            self.state = 3100
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def windowSpecDetails(self):
            return self.getTypedRuleContext(MySQLParser.WindowSpecDetailsContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpec" ):
                listener.enterWindowSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpec" ):
                listener.exitWindowSpec(self)




    def windowSpec(self):

        localctx = MySQLParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_windowSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3102
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3103
            self.windowSpecDetails()
            self.state = 3104
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecDetailsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowName(self):
            return self.getTypedRuleContext(MySQLParser.WindowNameContext,0)


        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def orderList(self):
            return self.getTypedRuleContext(MySQLParser.OrderListContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(MySQLParser.OrderClauseContext,0)


        def windowFrameClause(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowSpecDetails

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpecDetails" ):
                listener.enterWindowSpecDetails(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpecDetails" ):
                listener.exitWindowSpecDetails(self)




    def windowSpecDetails(self):

        localctx = MySQLParser.WindowSpecDetailsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_windowSpecDetails)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 3106
                self.windowName()


            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==405:
                self.state = 3109
                self.match(MySQLParser.PARTITION_SYMBOL)
                self.state = 3110
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 3111
                self.orderList()


            self.state = 3115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==393:
                self.state = 3114
                self.orderClause()


            self.state = 3118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==432 or _la==484 or _la==683:
                self.state = 3117
                self.windowFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowFrameUnits(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameUnitsContext,0)


        def windowFrameExtent(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameExtentContext,0)


        def windowFrameExclusion(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameExclusionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameClause" ):
                listener.enterWindowFrameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameClause" ):
                listener.exitWindowFrameClause(self)




    def windowFrameClause(self):

        localctx = MySQLParser.WindowFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_windowFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3120
            self.windowFrameUnits()
            self.state = 3121
            self.windowFrameExtent()
            self.state = 3123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==680:
                self.state = 3122
                self.windowFrameExclusion()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameUnitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.ROWS_SYMBOL, 0)

        def RANGE_SYMBOL(self):
            return self.getToken(MySQLParser.RANGE_SYMBOL, 0)

        def GROUPS_SYMBOL(self):
            return self.getToken(MySQLParser.GROUPS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameUnits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameUnits" ):
                listener.enterWindowFrameUnits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameUnits" ):
                listener.exitWindowFrameUnits(self)




    def windowFrameUnits(self):

        localctx = MySQLParser.WindowFrameUnitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_windowFrameUnits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3125
            _la = self._input.LA(1)
            if not(_la==432 or _la==484 or _la==683):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameExtentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowFrameStart(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameStartContext,0)


        def windowFrameBetween(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameBetweenContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameExtent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameExtent" ):
                listener.enterWindowFrameExtent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameExtent" ):
                listener.exitWindowFrameExtent(self)




    def windowFrameExtent(self):

        localctx = MySQLParser.WindowFrameExtentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_windowFrameExtent)
        try:
            self.state = 3129
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101, 247, 698, 747, 748, 749, 787, 790, 791]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3127
                self.windowFrameStart()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3128
                self.windowFrameBetween()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0)

        def PRECEDING_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDING_SYMBOL, 0)

        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def PARAM_MARKER(self):
            return self.getToken(MySQLParser.PARAM_MARKER, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)


        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameStart" ):
                listener.enterWindowFrameStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameStart" ):
                listener.exitWindowFrameStart(self)




    def windowFrameStart(self):

        localctx = MySQLParser.WindowFrameStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_windowFrameStart)
        try:
            self.state = 3145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [698]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3131
                self.match(MySQLParser.UNBOUNDED_SYMBOL)
                self.state = 3132
                self.match(MySQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [747, 748, 749, 790, 791]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3133
                self.ulonglong_number()
                self.state = 3134
                self.match(MySQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [787]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3136
                self.match(MySQLParser.PARAM_MARKER)
                self.state = 3137
                self.match(MySQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [247]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3138
                self.match(MySQLParser.INTERVAL_SYMBOL)
                self.state = 3139
                self.expr(0)
                self.state = 3140
                self.interval()
                self.state = 3141
                self.match(MySQLParser.PRECEDING_SYMBOL)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3143
                self.match(MySQLParser.CURRENT_SYMBOL)
                self.state = 3144
                self.match(MySQLParser.ROW_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameBetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN_SYMBOL(self):
            return self.getToken(MySQLParser.BETWEEN_SYMBOL, 0)

        def windowFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.WindowFrameBoundContext)
            else:
                return self.getTypedRuleContext(MySQLParser.WindowFrameBoundContext,i)


        def AND_SYMBOL(self):
            return self.getToken(MySQLParser.AND_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameBetween

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameBetween" ):
                listener.enterWindowFrameBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameBetween" ):
                listener.exitWindowFrameBetween(self)




    def windowFrameBetween(self):

        localctx = MySQLParser.WindowFrameBetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_windowFrameBetween)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3147
            self.match(MySQLParser.BETWEEN_SYMBOL)
            self.state = 3148
            self.windowFrameBound()
            self.state = 3149
            self.match(MySQLParser.AND_SYMBOL)
            self.state = 3150
            self.windowFrameBound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowFrameStart(self):
            return self.getTypedRuleContext(MySQLParser.WindowFrameStartContext,0)


        def UNBOUNDED_SYMBOL(self):
            return self.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0)

        def FOLLOWING_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWING_SYMBOL, 0)

        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def PARAM_MARKER(self):
            return self.getToken(MySQLParser.PARAM_MARKER, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameBound" ):
                listener.enterWindowFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameBound" ):
                listener.exitWindowFrameBound(self)




    def windowFrameBound(self):

        localctx = MySQLParser.WindowFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_windowFrameBound)
        try:
            self.state = 3165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3152
                self.windowFrameStart()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3153
                self.match(MySQLParser.UNBOUNDED_SYMBOL)
                self.state = 3154
                self.match(MySQLParser.FOLLOWING_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3155
                self.ulonglong_number()
                self.state = 3156
                self.match(MySQLParser.FOLLOWING_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3158
                self.match(MySQLParser.PARAM_MARKER)
                self.state = 3159
                self.match(MySQLParser.FOLLOWING_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3160
                self.match(MySQLParser.INTERVAL_SYMBOL)
                self.state = 3161
                self.expr(0)
                self.state = 3162
                self.interval()
                self.state = 3163
                self.match(MySQLParser.FOLLOWING_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameExclusionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUDE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCLUDE_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def TIES_SYMBOL(self):
            return self.getToken(MySQLParser.TIES_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def OTHERS_SYMBOL(self):
            return self.getToken(MySQLParser.OTHERS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowFrameExclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrameExclusion" ):
                listener.enterWindowFrameExclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrameExclusion" ):
                listener.exitWindowFrameExclusion(self)




    def windowFrameExclusion(self):

        localctx = MySQLParser.WindowFrameExclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_windowFrameExclusion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3167
            self.match(MySQLParser.EXCLUDE_SYMBOL)
            self.state = 3174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.state = 3168
                self.match(MySQLParser.CURRENT_SYMBOL)
                self.state = 3169
                self.match(MySQLParser.ROW_SYMBOL)
                pass
            elif token in [217]:
                self.state = 3170
                self.match(MySQLParser.GROUP_SYMBOL)
                pass
            elif token in [697]:
                self.state = 3171
                self.match(MySQLParser.TIES_SYMBOL)
                pass
            elif token in [373]:
                self.state = 3172
                self.match(MySQLParser.NO_SYMBOL)
                self.state = 3173
                self.match(MySQLParser.OTHERS_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def commonTableExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CommonTableExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CommonTableExpressionContext,i)


        def RECURSIVE_SYMBOL(self):
            return self.getToken(MySQLParser.RECURSIVE_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)




    def withClause(self):

        localctx = MySQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3176
            self.match(MySQLParser.WITH_SYMBOL)
            self.state = 3178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 3177
                self.match(MySQLParser.RECURSIVE_SYMBOL)


            self.state = 3180
            self.commonTableExpression()
            self.state = 3185
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,327,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3181
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3182
                    self.commonTableExpression() 
                self.state = 3187
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonTableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_commonTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonTableExpression" ):
                listener.enterCommonTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonTableExpression" ):
                listener.exitCommonTableExpression(self)




    def commonTableExpression(self):

        localctx = MySQLParser.CommonTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_commonTableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3188
            self.identifier()
            self.state = 3190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==776:
                self.state = 3189
                self.columnInternalRefList()


            self.state = 3192
            self.match(MySQLParser.AS_SYMBOL)
            self.state = 3193
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def orderList(self):
            return self.getTypedRuleContext(MySQLParser.OrderListContext,0)


        def olapOption(self):
            return self.getTypedRuleContext(MySQLParser.OlapOptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = MySQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_groupByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3195
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 3196
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 3197
            self.orderList()
            self.state = 3199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.state = 3198
                self.olapOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OlapOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def ROLLUP_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLUP_SYMBOL, 0)

        def CUBE_SYMBOL(self):
            return self.getToken(MySQLParser.CUBE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_olapOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOlapOption" ):
                listener.enterOlapOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOlapOption" ):
                listener.exitOlapOption(self)




    def olapOption(self):

        localctx = MySQLParser.OlapOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_olapOption)
        try:
            self.state = 3206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3201
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 3202
                self.match(MySQLParser.ROLLUP_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3203
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 3204
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 3205
                self.match(MySQLParser.CUBE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYMBOL(self):
            return self.getToken(MySQLParser.ORDER_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def orderList(self):
            return self.getTypedRuleContext(MySQLParser.OrderListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_orderClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderClause" ):
                listener.enterOrderClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderClause" ):
                listener.exitOrderClause(self)




    def orderClause(self):

        localctx = MySQLParser.OrderClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_orderClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3208
            self.match(MySQLParser.ORDER_SYMBOL)
            self.state = 3209
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 3210
            self.orderList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC_SYMBOL(self):
            return self.getToken(MySQLParser.ASC_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(MySQLParser.DESC_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection" ):
                listener.enterDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection" ):
                listener.exitDirection(self)




    def direction(self):

        localctx = MySQLParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_direction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3212
            _la = self._input.LA(1)
            if not(_la==18 or _la==134):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def DUAL_SYMBOL(self):
            return self.getToken(MySQLParser.DUAL_SYMBOL, 0)

        def tableReferenceList(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = MySQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3214
            self.match(MySQLParser.FROM_SYMBOL)
            self.state = 3217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 3215
                self.match(MySQLParser.DUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 3216
                self.tableReferenceList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableReferenceListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TableReferenceContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TableReferenceContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableReferenceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableReferenceList" ):
                listener.enterTableReferenceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableReferenceList" ):
                listener.exitTableReferenceList(self)




    def tableReferenceList(self):

        localctx = MySQLParser.TableReferenceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_tableReferenceList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3219
            self.tableReference()
            self.state = 3224
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3220
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3221
                    self.tableReference() 
                self.state = 3226
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableValueConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES_SYMBOL(self):
            return self.getToken(MySQLParser.VALUES_SYMBOL, 0)

        def rowValueExplicit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RowValueExplicitContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RowValueExplicitContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableValueConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValueConstructor" ):
                listener.enterTableValueConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValueConstructor" ):
                listener.exitTableValueConstructor(self)




    def tableValueConstructor(self):

        localctx = MySQLParser.TableValueConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_tableValueConstructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3227
            self.match(MySQLParser.VALUES_SYMBOL)
            self.state = 3228
            self.rowValueExplicit()
            self.state = 3233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3229
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3230
                    self.rowValueExplicit() 
                self.state = 3235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_explicitTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitTable" ):
                listener.enterExplicitTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitTable" ):
                listener.exitExplicitTable(self)




    def explicitTable(self):

        localctx = MySQLParser.ExplicitTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_explicitTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3236
            self.match(MySQLParser.TABLE_SYMBOL)
            self.state = 3237
            self.tableRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowValueExplicitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def values(self):
            return self.getTypedRuleContext(MySQLParser.ValuesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_rowValueExplicit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowValueExplicit" ):
                listener.enterRowValueExplicit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowValueExplicit" ):
                listener.exitRowValueExplicit(self)




    def rowValueExplicit(self):

        localctx = MySQLParser.RowValueExplicitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_rowValueExplicit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3239
            self.match(MySQLParser.ROW_SYMBOL)
            self.state = 3240
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 3241
                self.values()


            self.state = 3244
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecOption(self):
            return self.getTypedRuleContext(MySQLParser.QuerySpecOptionContext,0)


        def SQL_NO_CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0)

        def SQL_CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_CACHE_SYMBOL, 0)

        def MAX_STATEMENT_TIME_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_selectOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectOption" ):
                listener.enterSelectOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectOption" ):
                listener.exitSelectOption(self)




    def selectOption(self):

        localctx = MySQLParser.SelectOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_selectOption)
        try:
            self.state = 3254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3246
                self.querySpecOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3247
                self.match(MySQLParser.SQL_NO_CACHE_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3248
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 3249
                self.match(MySQLParser.SQL_CACHE_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3250
                if not serverVersion >= 50704 and serverVersion < 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50704 && serverVersion < 50708")
                self.state = 3251
                self.match(MySQLParser.MAX_STATEMENT_TIME_SYMBOL)
                self.state = 3252
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3253
                self.real_ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockingClauseListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lockingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.LockingClauseContext)
            else:
                return self.getTypedRuleContext(MySQLParser.LockingClauseContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_lockingClauseList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockingClauseList" ):
                listener.enterLockingClauseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockingClauseList" ):
                listener.exitLockingClauseList(self)




    def lockingClauseList(self):

        localctx = MySQLParser.LockingClauseListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_lockingClauseList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3257 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3256
                self.lockingClause()
                self.state = 3259 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==200 or _la==287):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def lockStrengh(self):
            return self.getTypedRuleContext(MySQLParser.LockStrenghContext,0)


        def OF_SYMBOL(self):
            return self.getToken(MySQLParser.OF_SYMBOL, 0)

        def tableAliasRefList(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasRefListContext,0)


        def lockedRowAction(self):
            return self.getTypedRuleContext(MySQLParser.LockedRowActionContext,0)


        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(MySQLParser.SHARE_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(MySQLParser.MODE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lockingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockingClause" ):
                listener.enterLockingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockingClause" ):
                listener.exitLockingClause(self)




    def lockingClause(self):

        localctx = MySQLParser.LockingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_lockingClause)
        try:
            self.state = 3276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [200]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3261
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 3262
                self.lockStrengh()
                self.state = 3266
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
                if la_ == 1:
                    self.state = 3263
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 3264
                    self.match(MySQLParser.OF_SYMBOL)
                    self.state = 3265
                    self.tableAliasRefList()


                self.state = 3270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 3268
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 3269
                    self.lockedRowAction()


                pass
            elif token in [287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3272
                self.match(MySQLParser.LOCK_SYMBOL)
                self.state = 3273
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 3274
                self.match(MySQLParser.SHARE_SYMBOL)
                self.state = 3275
                self.match(MySQLParser.MODE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStrenghContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(MySQLParser.SHARE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lockStrengh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStrengh" ):
                listener.enterLockStrengh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStrengh" ):
                listener.exitLockStrengh(self)




    def lockStrengh(self):

        localctx = MySQLParser.LockStrenghContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_lockStrengh)
        try:
            self.state = 3281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3278
                self.match(MySQLParser.UPDATE_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3279
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 3280
                self.match(MySQLParser.SHARE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockedRowActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_SYMBOL(self):
            return self.getToken(MySQLParser.SKIP_SYMBOL, 0)

        def LOCKED_SYMBOL(self):
            return self.getToken(MySQLParser.LOCKED_SYMBOL, 0)

        def NOWAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NOWAIT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lockedRowAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockedRowAction" ):
                listener.enterLockedRowAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockedRowAction" ):
                listener.exitLockedRowAction(self)




    def lockedRowAction(self):

        localctx = MySQLParser.LockedRowActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_lockedRowAction)
        try:
            self.state = 3286
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [669]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3283
                self.match(MySQLParser.SKIP_SYMBOL)
                self.state = 3284
                self.match(MySQLParser.LOCKED_SYMBOL)
                pass
            elif token in [671]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3285
                self.match(MySQLParser.NOWAIT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SelectItemContext,i)


        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_selectItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItemList" ):
                listener.enterSelectItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItemList" ):
                listener.exitSelectItemList(self)




    def selectItemList(self):

        localctx = MySQLParser.SelectItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_selectItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 3288
                self.selectItem()
                pass

            elif la_ == 2:
                self.state = 3289
                self.match(MySQLParser.MULT_OPERATOR)
                pass


            self.state = 3296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3292
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3293
                    self.selectItem() 
                self.state = 3298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableWild(self):
            return self.getTypedRuleContext(MySQLParser.TableWildContext,0)


        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def selectAlias(self):
            return self.getTypedRuleContext(MySQLParser.SelectAliasContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_selectItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectItem" ):
                listener.enterSelectItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectItem" ):
                listener.exitSelectItem(self)




    def selectItem(self):

        localctx = MySQLParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_selectItem)
        try:
            self.state = 3304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3299
                self.tableWild()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3300
                self.expr(0)
                self.state = 3302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                if la_ == 1:
                    self.state = 3301
                    self.selectAlias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_selectAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAlias" ):
                listener.enterSelectAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAlias" ):
                listener.exitSelectAlias(self)




    def selectAlias(self):

        localctx = MySQLParser.SelectAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_selectAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 3306
                self.match(MySQLParser.AS_SYMBOL)


            self.state = 3311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 3309
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3310
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE_SYMBOL(self):
            return self.getToken(MySQLParser.WHERE_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = MySQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3313
            self.match(MySQLParser.WHERE_SYMBOL)
            self.state = 3314
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableFactor(self):
            return self.getTypedRuleContext(MySQLParser.TableFactorContext,0)


        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0)

        def escapedTableReference(self):
            return self.getTypedRuleContext(MySQLParser.EscapedTableReferenceContext,0)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0)

        def joinedTable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.JoinedTableContext)
            else:
                return self.getTypedRuleContext(MySQLParser.JoinedTableContext,i)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def OJ_SYMBOL(self):
            return self.getToken(MySQLParser.OJ_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableReference" ):
                listener.enterTableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableReference" ):
                listener.exitTableReference(self)




    def tableReference(self):

        localctx = MySQLParser.TableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_tableReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 3316
                self.tableFactor()
                pass

            elif la_ == 2:
                self.state = 3317
                self.match(MySQLParser.OPEN_CURLY_SYMBOL)
                self.state = 3321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
                if la_ == 1:
                    self.state = 3318
                    if not serverVersion < 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 80017")
                    self.state = 3319
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 3320
                    self.match(MySQLParser.OJ_SYMBOL)
                    pass


                self.state = 3323
                self.escapedTableReference()
                self.state = 3324
                self.match(MySQLParser.CLOSE_CURLY_SYMBOL)
                pass


            self.state = 3331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3328
                    self.joinedTable() 
                self.state = 3333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EscapedTableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableFactor(self):
            return self.getTypedRuleContext(MySQLParser.TableFactorContext,0)


        def joinedTable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.JoinedTableContext)
            else:
                return self.getTypedRuleContext(MySQLParser.JoinedTableContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_escapedTableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscapedTableReference" ):
                listener.enterEscapedTableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscapedTableReference" ):
                listener.exitEscapedTableReference(self)




    def escapedTableReference(self):

        localctx = MySQLParser.EscapedTableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_escapedTableReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3334
            self.tableFactor()
            self.state = 3338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98 or (((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & 8594128897) != 0 or _la==359 or _la==478 or _la==555:
                self.state = 3335
                self.joinedTable()
                self.state = 3340
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinedTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerJoinType(self):
            return self.getTypedRuleContext(MySQLParser.InnerJoinTypeContext,0)


        def tableReference(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListWithParenthesesContext,0)


        def outerJoinType(self):
            return self.getTypedRuleContext(MySQLParser.OuterJoinTypeContext,0)


        def naturalJoinType(self):
            return self.getTypedRuleContext(MySQLParser.NaturalJoinTypeContext,0)


        def tableFactor(self):
            return self.getTypedRuleContext(MySQLParser.TableFactorContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_joinedTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinedTable" ):
                listener.enterJoinedTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinedTable" ):
                listener.exitJoinedTable(self)




    def joinedTable(self):

        localctx = MySQLParser.JoinedTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_joinedTable)
        try:
            self.state = 3360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98, 239, 261, 555]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3341
                self.innerJoinType()
                self.state = 3342
                self.tableReference()
                self.state = 3347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 3343
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 3344
                    self.expr(0)

                elif la_ == 2:
                    self.state = 3345
                    self.match(MySQLParser.USING_SYMBOL)
                    self.state = 3346
                    self.identifierListWithParentheses()


                pass
            elif token in [272, 478]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3349
                self.outerJoinType()
                self.state = 3350
                self.tableReference()
                self.state = 3355
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [383]:
                    self.state = 3351
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 3352
                    self.expr(0)
                    pass
                elif token in [621]:
                    self.state = 3353
                    self.match(MySQLParser.USING_SYMBOL)
                    self.state = 3354
                    self.identifierListWithParentheses()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [359]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3357
                self.naturalJoinType()
                self.state = 3358
                self.tableFactor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NaturalJoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NATURAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATURAL_SYMBOL, 0)

        def JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.JOIN_SYMBOL, 0)

        def INNER_SYMBOL(self):
            return self.getToken(MySQLParser.INNER_SYMBOL, 0)

        def LEFT_SYMBOL(self):
            return self.getToken(MySQLParser.LEFT_SYMBOL, 0)

        def RIGHT_SYMBOL(self):
            return self.getToken(MySQLParser.RIGHT_SYMBOL, 0)

        def OUTER_SYMBOL(self):
            return self.getToken(MySQLParser.OUTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_naturalJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoinType" ):
                listener.enterNaturalJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoinType" ):
                listener.exitNaturalJoinType(self)




    def naturalJoinType(self):

        localctx = MySQLParser.NaturalJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_naturalJoinType)
        self._la = 0 # Token type
        try:
            self.state = 3373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3362
                self.match(MySQLParser.NATURAL_SYMBOL)
                self.state = 3364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==239:
                    self.state = 3363
                    self.match(MySQLParser.INNER_SYMBOL)


                self.state = 3366
                self.match(MySQLParser.JOIN_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3367
                self.match(MySQLParser.NATURAL_SYMBOL)
                self.state = 3368
                _la = self._input.LA(1)
                if not(_la==272 or _la==478):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==395:
                    self.state = 3369
                    self.match(MySQLParser.OUTER_SYMBOL)


                self.state = 3372
                self.match(MySQLParser.JOIN_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerJoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.JOIN_SYMBOL, 0)

        def INNER_SYMBOL(self):
            return self.getToken(MySQLParser.INNER_SYMBOL, 0)

        def CROSS_SYMBOL(self):
            return self.getToken(MySQLParser.CROSS_SYMBOL, 0)

        def STRAIGHT_JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_innerJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoinType" ):
                listener.enterInnerJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoinType" ):
                listener.exitInnerJoinType(self)




    def innerJoinType(self):

        localctx = MySQLParser.InnerJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_innerJoinType)
        self._la = 0 # Token type
        try:
            self.state = 3380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98, 239, 261]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98 or _la==239:
                    self.state = 3375
                    localctx.type_ = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==98 or _la==239):
                        localctx.type_ = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3378
                self.match(MySQLParser.JOIN_SYMBOL)
                pass
            elif token in [555]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3379
                localctx.type_ = self.match(MySQLParser.STRAIGHT_JOIN_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OuterJoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.JOIN_SYMBOL, 0)

        def LEFT_SYMBOL(self):
            return self.getToken(MySQLParser.LEFT_SYMBOL, 0)

        def RIGHT_SYMBOL(self):
            return self.getToken(MySQLParser.RIGHT_SYMBOL, 0)

        def OUTER_SYMBOL(self):
            return self.getToken(MySQLParser.OUTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_outerJoinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoinType" ):
                listener.enterOuterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoinType" ):
                listener.exitOuterJoinType(self)




    def outerJoinType(self):

        localctx = MySQLParser.OuterJoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_outerJoinType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382
            localctx.type_ = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==272 or _la==478):
                localctx.type_ = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==395:
                self.state = 3383
                self.match(MySQLParser.OUTER_SYMBOL)


            self.state = 3386
            self.match(MySQLParser.JOIN_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleTable(self):
            return self.getTypedRuleContext(MySQLParser.SingleTableContext,0)


        def singleTableParens(self):
            return self.getTypedRuleContext(MySQLParser.SingleTableParensContext,0)


        def derivedTable(self):
            return self.getTypedRuleContext(MySQLParser.DerivedTableContext,0)


        def tableReferenceListParens(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListParensContext,0)


        def tableFunction(self):
            return self.getTypedRuleContext(MySQLParser.TableFunctionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableFactor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFactor" ):
                listener.enterTableFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFactor" ):
                listener.exitTableFactor(self)




    def tableFactor(self):

        localctx = MySQLParser.TableFactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_tableFactor)
        try:
            self.state = 3394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3388
                self.singleTable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3389
                self.singleTableParens()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3390
                self.derivedTable()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3391
                self.tableReferenceListParens()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3392
                if not serverVersion >= 80004:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80004")
                self.state = 3393
                self.tableFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def usePartition(self):
            return self.getTypedRuleContext(MySQLParser.UsePartitionContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def indexHintList(self):
            return self.getTypedRuleContext(MySQLParser.IndexHintListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_singleTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTable" ):
                listener.enterSingleTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTable" ):
                listener.exitSingleTable(self)




    def singleTable(self):

        localctx = MySQLParser.SingleTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_singleTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3396
            self.tableRef()
            self.state = 3398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.state = 3397
                self.usePartition()


            self.state = 3401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 3400
                self.tableAlias()


            self.state = 3404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 3403
                self.indexHintList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def singleTable(self):
            return self.getTypedRuleContext(MySQLParser.SingleTableContext,0)


        def singleTableParens(self):
            return self.getTypedRuleContext(MySQLParser.SingleTableParensContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_singleTableParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableParens" ):
                listener.enterSingleTableParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableParens" ):
                listener.exitSingleTableParens(self)




    def singleTableParens(self):

        localctx = MySQLParser.SingleTableParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_singleTableParens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3406
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.state = 3407
                self.singleTable()
                pass

            elif la_ == 2:
                self.state = 3408
                self.singleTableParens()
                pass


            self.state = 3411
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerivedTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefListContext,0)


        def LATERAL_SYMBOL(self):
            return self.getToken(MySQLParser.LATERAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_derivedTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerivedTable" ):
                listener.enterDerivedTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerivedTable" ):
                listener.exitDerivedTable(self)




    def derivedTable(self):

        localctx = MySQLParser.DerivedTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_derivedTable)
        try:
            self.state = 3430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3413
                self.subquery()
                self.state = 3415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 3414
                    self.tableAlias()


                self.state = 3419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                if la_ == 1:
                    self.state = 3417
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 3418
                    self.columnInternalRefList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3421
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 3422
                self.match(MySQLParser.LATERAL_SYMBOL)
                self.state = 3423
                self.subquery()
                self.state = 3425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
                if la_ == 1:
                    self.state = 3424
                    self.tableAlias()


                self.state = 3428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                if la_ == 1:
                    self.state = 3427
                    self.columnInternalRefList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableReferenceListParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def tableReferenceList(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListContext,0)


        def tableReferenceListParens(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListParensContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableReferenceListParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableReferenceListParens" ):
                listener.enterTableReferenceListParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableReferenceListParens" ):
                listener.exitTableReferenceListParens(self)




    def tableReferenceListParens(self):

        localctx = MySQLParser.TableReferenceListParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_tableReferenceListParens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3432
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 3433
                self.tableReferenceList()
                pass

            elif la_ == 2:
                self.state = 3434
                self.tableReferenceListParens()
                pass


            self.state = 3437
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_TABLE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def columnsClause(self):
            return self.getTypedRuleContext(MySQLParser.ColumnsClauseContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunction" ):
                listener.enterTableFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunction" ):
                listener.exitTableFunction(self)




    def tableFunction(self):

        localctx = MySQLParser.TableFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_tableFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3439
            self.match(MySQLParser.JSON_TABLE_SYMBOL)
            self.state = 3440
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3441
            self.expr(0)
            self.state = 3442
            self.match(MySQLParser.COMMA_SYMBOL)
            self.state = 3443
            self.textStringLiteral()
            self.state = 3444
            self.columnsClause()
            self.state = 3445
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
            self.state = 3447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 3446
                self.tableAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def jtColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.JtColumnContext)
            else:
                return self.getTypedRuleContext(MySQLParser.JtColumnContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_columnsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnsClause" ):
                listener.enterColumnsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnsClause" ):
                listener.exitColumnsClause(self)




    def columnsClause(self):

        localctx = MySQLParser.ColumnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_columnsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3449
            self.match(MySQLParser.COLUMNS_SYMBOL)
            self.state = 3450
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3451
            self.jtColumn()
            self.state = 3456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 3452
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 3453
                self.jtColumn()
                self.state = 3458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3459
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JtColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def ORDINALITY_SYMBOL(self):
            return self.getToken(MySQLParser.ORDINALITY_SYMBOL, 0)

        def dataType(self):
            return self.getTypedRuleContext(MySQLParser.DataTypeContext,0)


        def PATH_SYMBOL(self):
            return self.getToken(MySQLParser.PATH_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def EXISTS_SYMBOL(self):
            return self.getToken(MySQLParser.EXISTS_SYMBOL, 0)

        def onEmptyOrError(self):
            return self.getTypedRuleContext(MySQLParser.OnEmptyOrErrorContext,0)


        def NESTED_SYMBOL(self):
            return self.getToken(MySQLParser.NESTED_SYMBOL, 0)

        def columnsClause(self):
            return self.getTypedRuleContext(MySQLParser.ColumnsClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_jtColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJtColumn" ):
                listener.enterJtColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJtColumn" ):
                listener.exitJtColumn(self)




    def jtColumn(self):

        localctx = MySQLParser.JtColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_jtColumn)
        self._la = 0 # Token type
        try:
            self.state = 3484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3461
                self.identifier()
                self.state = 3462
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 3463
                self.match(MySQLParser.ORDINALITY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3465
                self.identifier()
                self.state = 3466
                self.dataType()
                self.state = 3469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 3467
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 3468
                    self.collate()


                self.state = 3472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==174:
                    self.state = 3471
                    self.match(MySQLParser.EXISTS_SYMBOL)


                self.state = 3474
                self.match(MySQLParser.PATH_SYMBOL)
                self.state = 3475
                self.textStringLiteral()
                self.state = 3477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128 or _la==165 or _la==376:
                    self.state = 3476
                    self.onEmptyOrError()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3479
                self.match(MySQLParser.NESTED_SYMBOL)
                self.state = 3480
                self.match(MySQLParser.PATH_SYMBOL)
                self.state = 3481
                self.textStringLiteral()
                self.state = 3482
                self.columnsClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnEmptyOrErrorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def onEmpty(self):
            return self.getTypedRuleContext(MySQLParser.OnEmptyContext,0)


        def onError(self):
            return self.getTypedRuleContext(MySQLParser.OnErrorContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_onEmptyOrError

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnEmptyOrError" ):
                listener.enterOnEmptyOrError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnEmptyOrError" ):
                listener.exitOnEmptyOrError(self)




    def onEmptyOrError(self):

        localctx = MySQLParser.OnEmptyOrErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_onEmptyOrError)
        self._la = 0 # Token type
        try:
            self.state = 3494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3486
                self.onEmpty()
                self.state = 3488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128 or _la==165 or _la==376:
                    self.state = 3487
                    self.onError()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3490
                self.onError()
                self.state = 3492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128 or _la==165 or _la==376:
                    self.state = 3491
                    self.onEmpty()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jtOnResponse(self):
            return self.getTypedRuleContext(MySQLParser.JtOnResponseContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def EMPTY_SYMBOL(self):
            return self.getToken(MySQLParser.EMPTY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_onEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnEmpty" ):
                listener.enterOnEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnEmpty" ):
                listener.exitOnEmpty(self)




    def onEmpty(self):

        localctx = MySQLParser.OnEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_onEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3496
            self.jtOnResponse()
            self.state = 3497
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 3498
            self.match(MySQLParser.EMPTY_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnErrorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jtOnResponse(self):
            return self.getTypedRuleContext(MySQLParser.JtOnResponseContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(MySQLParser.ERROR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_onError

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnError" ):
                listener.enterOnError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnError" ):
                listener.exitOnError(self)




    def onError(self):

        localctx = MySQLParser.OnErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_onError)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3500
            self.jtOnResponse()
            self.state = 3501
            self.match(MySQLParser.ON_SYMBOL)
            self.state = 3502
            self.match(MySQLParser.ERROR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JtOnResponseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_SYMBOL(self):
            return self.getToken(MySQLParser.ERROR_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_jtOnResponse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJtOnResponse" ):
                listener.enterJtOnResponse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJtOnResponse" ):
                listener.exitJtOnResponse(self)




    def jtOnResponse(self):

        localctx = MySQLParser.JtOnResponseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_jtOnResponse)
        try:
            self.state = 3508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [165]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3504
                self.match(MySQLParser.ERROR_SYMBOL)
                pass
            elif token in [376]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3505
                self.match(MySQLParser.NULL_SYMBOL)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3506
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 3507
                self.textStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT_SYMBOL(self):
            return self.getToken(MySQLParser.DISTINCT_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_unionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionOption" ):
                listener.enterUnionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionOption" ):
                listener.exitUnionOption(self)




    def unionOption(self):

        localctx = MySQLParser.UnionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_unionOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3510
            _la = self._input.LA(1)
            if not(_la==10 or _la==143):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)




    def tableAlias(self):

        localctx = MySQLParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 3512
                self.match(MySQLParser.AS_SYMBOL)

            elif la_ == 2:
                self.state = 3513
                if not serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80017")
                self.state = 3514
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 3517
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IndexHintContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IndexHintContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexHintList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintList" ):
                listener.enterIndexHintList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintList" ):
                listener.exitIndexHintList(self)




    def indexHintList(self):

        localctx = MySQLParser.IndexHintListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_indexHintList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3519
            self.indexHint()
            self.state = 3524
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,383,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3520
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3521
                    self.indexHint() 
                self.state = 3526
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexHintType(self):
            return self.getTypedRuleContext(MySQLParser.IndexHintTypeContext,0)


        def keyOrIndex(self):
            return self.getTypedRuleContext(MySQLParser.KeyOrIndexContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def indexList(self):
            return self.getTypedRuleContext(MySQLParser.IndexListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def indexHintClause(self):
            return self.getTypedRuleContext(MySQLParser.IndexHintClauseContext,0)


        def USE_SYMBOL(self):
            return self.getToken(MySQLParser.USE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHint" ):
                listener.enterIndexHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHint" ):
                listener.exitIndexHint(self)




    def indexHint(self):

        localctx = MySQLParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.state = 3547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [198, 232]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3527
                self.indexHintType()
                self.state = 3528
                self.keyOrIndex()
                self.state = 3530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200:
                    self.state = 3529
                    self.indexHintClause()


                self.state = 3532
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 3533
                self.indexList()
                self.state = 3534
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [620]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3536
                self.match(MySQLParser.USE_SYMBOL)
                self.state = 3537
                self.keyOrIndex()
                self.state = 3539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200:
                    self.state = 3538
                    self.indexHintClause()


                self.state = 3541
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 3543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                if la_ == 1:
                    self.state = 3542
                    self.indexList()


                self.state = 3545
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORCE_SYMBOL(self):
            return self.getToken(MySQLParser.FORCE_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexHintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintType" ):
                listener.enterIndexHintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintType" ):
                listener.exitIndexHintType(self)




    def indexHintType(self):

        localctx = MySQLParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_indexHintType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3549
            _la = self._input.LA(1)
            if not(_la==198 or _la==232):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyOrIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyOrIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyOrIndex" ):
                listener.enterKeyOrIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyOrIndex" ):
                listener.exitKeyOrIndex(self)




    def keyOrIndex(self):

        localctx = MySQLParser.KeyOrIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_keyOrIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3551
            _la = self._input.LA(1)
            if not(_la==236 or _la==265):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintKeyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def UNIQUE_SYMBOL(self):
            return self.getToken(MySQLParser.UNIQUE_SYMBOL, 0)

        def keyOrIndex(self):
            return self.getTypedRuleContext(MySQLParser.KeyOrIndexContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_constraintKeyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintKeyType" ):
                listener.enterConstraintKeyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintKeyType" ):
                listener.exitConstraintKeyType(self)




    def constraintKeyType(self):

        localctx = MySQLParser.ConstraintKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_constraintKeyType)
        self._la = 0 # Token type
        try:
            self.state = 3559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [420]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3553
                self.match(MySQLParser.PRIMARY_SYMBOL)
                self.state = 3554
                self.match(MySQLParser.KEY_SYMBOL)
                pass
            elif token in [609]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3555
                self.match(MySQLParser.UNIQUE_SYMBOL)
                self.state = 3557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236 or _la==265:
                    self.state = 3556
                    self.keyOrIndex()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.JOIN_SYMBOL, 0)

        def ORDER_SYMBOL(self):
            return self.getToken(MySQLParser.ORDER_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexHintClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintClause" ):
                listener.enterIndexHintClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintClause" ):
                listener.exitIndexHintClause(self)




    def indexHintClause(self):

        localctx = MySQLParser.IndexHintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_indexHintClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3561
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 3567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [261]:
                self.state = 3562
                self.match(MySQLParser.JOIN_SYMBOL)
                pass
            elif token in [393]:
                self.state = 3563
                self.match(MySQLParser.ORDER_SYMBOL)
                self.state = 3564
                self.match(MySQLParser.BY_SYMBOL)
                pass
            elif token in [217]:
                self.state = 3565
                self.match(MySQLParser.GROUP_SYMBOL)
                self.state = 3566
                self.match(MySQLParser.BY_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IndexListElementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IndexListElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexList" ):
                listener.enterIndexList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexList" ):
                listener.exitIndexList(self)




    def indexList(self):

        localctx = MySQLParser.IndexListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_indexList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3569
            self.indexListElement()
            self.state = 3574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 3570
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 3571
                self.indexListElement()
                self.state = 3576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexListElement" ):
                listener.enterIndexListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexListElement" ):
                listener.exitIndexListElement(self)




    def indexListElement(self):

        localctx = MySQLParser.IndexListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_indexListElement)
        try:
            self.state = 3579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3577
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3578
                self.match(MySQLParser.PRIMARY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def tableReferenceList(self):
            return self.getTypedRuleContext(MySQLParser.TableReferenceListContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def updateList(self):
            return self.getTypedRuleContext(MySQLParser.UpdateListContext,0)


        def withClause(self):
            return self.getTypedRuleContext(MySQLParser.WithClauseContext,0)


        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def orderClause(self):
            return self.getTypedRuleContext(MySQLParser.OrderClauseContext,0)


        def simpleLimitClause(self):
            return self.getTypedRuleContext(MySQLParser.SimpleLimitClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = MySQLParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_updateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.state = 3581
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 3582
                self.withClause()


            self.state = 3585
            self.match(MySQLParser.UPDATE_SYMBOL)
            self.state = 3587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 3586
                self.match(MySQLParser.LOW_PRIORITY_SYMBOL)


            self.state = 3590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 3589
                self.match(MySQLParser.IGNORE_SYMBOL)


            self.state = 3592
            self.tableReferenceList()
            self.state = 3593
            self.match(MySQLParser.SET_SYMBOL)
            self.state = 3594
            self.updateList()
            self.state = 3596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==643:
                self.state = 3595
                self.whereClause()


            self.state = 3599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==393:
                self.state = 3598
                self.orderClause()


            self.state = 3602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==276:
                self.state = 3601
                self.simpleLimitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionOrLockingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionStatement(self):
            return self.getTypedRuleContext(MySQLParser.TransactionStatementContext,0)


        def savepointStatement(self):
            return self.getTypedRuleContext(MySQLParser.SavepointStatementContext,0)


        def lockStatement(self):
            return self.getTypedRuleContext(MySQLParser.LockStatementContext,0)


        def xaStatement(self):
            return self.getTypedRuleContext(MySQLParser.XaStatementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_transactionOrLockingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionOrLockingStatement" ):
                listener.enterTransactionOrLockingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionOrLockingStatement" ):
                listener.exitTransactionOrLockingStatement(self)




    def transactionOrLockingStatement(self):

        localctx = MySQLParser.TransactionOrLockingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_transactionOrLockingStatement)
        try:
            self.state = 3608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3604
                self.transactionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3605
                self.savepointStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3606
                self.lockStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3607
                self.xaStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def TRANSACTION_SYMBOL(self):
            return self.getToken(MySQLParser.TRANSACTION_SYMBOL, 0)

        def transactionCharacteristic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TransactionCharacteristicContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TransactionCharacteristicContext,i)


        def COMMIT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMIT_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(MySQLParser.WORK_SYMBOL, 0)

        def AND_SYMBOL(self):
            return self.getToken(MySQLParser.AND_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(MySQLParser.CHAIN_SYMBOL, 0)

        def RELEASE_SYMBOL(self):
            return self.getToken(MySQLParser.RELEASE_SYMBOL, 0)

        def NO_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.NO_SYMBOL)
            else:
                return self.getToken(MySQLParser.NO_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_transactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStatement" ):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStatement" ):
                listener.exitTransactionStatement(self)




    def transactionStatement(self):

        localctx = MySQLParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_transactionStatement)
        self._la = 0 # Token type
        try:
            self.state = 3635
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [543]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3610
                self.match(MySQLParser.START_SYMBOL)
                self.state = 3611
                self.match(MySQLParser.TRANSACTION_SYMBOL)
                self.state = 3615
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,400,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3612
                        self.transactionCharacteristic() 
                    self.state = 3617
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,400,self._ctx)

                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3618
                self.match(MySQLParser.COMMIT_SYMBOL)
                self.state = 3620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==647:
                    self.state = 3619
                    self.match(MySQLParser.WORK_SYMBOL)


                self.state = 3627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 3622
                    self.match(MySQLParser.AND_SYMBOL)
                    self.state = 3624
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==373:
                        self.state = 3623
                        self.match(MySQLParser.NO_SYMBOL)


                    self.state = 3626
                    self.match(MySQLParser.CHAIN_SYMBOL)


                self.state = 3633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==373 or _la==450:
                    self.state = 3630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==373:
                        self.state = 3629
                        self.match(MySQLParser.NO_SYMBOL)


                    self.state = 3632
                    self.match(MySQLParser.RELEASE_SYMBOL)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_SYMBOL(self):
            return self.getToken(MySQLParser.BEGIN_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(MySQLParser.WORK_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_beginWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginWork" ):
                listener.enterBeginWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginWork" ):
                listener.exitBeginWork(self)




    def beginWork(self):

        localctx = MySQLParser.BeginWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_beginWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3637
            self.match(MySQLParser.BEGIN_SYMBOL)
            self.state = 3639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==647:
                self.state = 3638
                self.match(MySQLParser.WORK_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionCharacteristicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def CONSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONSISTENT_SYMBOL, 0)

        def SNAPSHOT_SYMBOL(self):
            return self.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.WRITE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.ONLY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_transactionCharacteristic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionCharacteristic" ):
                listener.enterTransactionCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionCharacteristic" ):
                listener.exitTransactionCharacteristic(self)




    def transactionCharacteristic(self):

        localctx = MySQLParser.TransactionCharacteristicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_transactionCharacteristic)
        self._la = 0 # Token type
        try:
            self.state = 3647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3641
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 3642
                self.match(MySQLParser.CONSISTENT_SYMBOL)
                self.state = 3643
                self.match(MySQLParser.SNAPSHOT_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3644
                if not serverVersion >= 50605:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50605")
                self.state = 3645
                self.match(MySQLParser.READ_SYMBOL)
                self.state = 3646
                _la = self._input.LA(1)
                if not(_la==386 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepointStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def ROLLBACK_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLBACK_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(MySQLParser.WORK_SYMBOL, 0)

        def AND_SYMBOL(self):
            return self.getToken(MySQLParser.AND_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(MySQLParser.CHAIN_SYMBOL, 0)

        def RELEASE_SYMBOL(self):
            return self.getToken(MySQLParser.RELEASE_SYMBOL, 0)

        def NO_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.NO_SYMBOL)
            else:
                return self.getToken(MySQLParser.NO_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_savepointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepointStatement" ):
                listener.enterSavepointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepointStatement" ):
                listener.exitSavepointStatement(self)




    def savepointStatement(self):

        localctx = MySQLParser.SavepointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_savepointStatement)
        self._la = 0 # Token type
        try:
            self.state = 3678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [489]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3649
                self.match(MySQLParser.SAVEPOINT_SYMBOL)
                self.state = 3650
                self.identifier()
                pass
            elif token in [480]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3651
                self.match(MySQLParser.ROLLBACK_SYMBOL)
                self.state = 3653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==647:
                    self.state = 3652
                    self.match(MySQLParser.WORK_SYMBOL)


                self.state = 3673
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [590]:
                    self.state = 3655
                    self.match(MySQLParser.TO_SYMBOL)
                    self.state = 3657
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
                    if la_ == 1:
                        self.state = 3656
                        self.match(MySQLParser.SAVEPOINT_SYMBOL)


                    self.state = 3659
                    self.identifier()
                    pass
                elif token in [-1, 15, 373, 450, 774]:
                    self.state = 3665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==15:
                        self.state = 3660
                        self.match(MySQLParser.AND_SYMBOL)
                        self.state = 3662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==373:
                            self.state = 3661
                            self.match(MySQLParser.NO_SYMBOL)


                        self.state = 3664
                        self.match(MySQLParser.CHAIN_SYMBOL)


                    self.state = 3671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==373 or _la==450:
                        self.state = 3668
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==373:
                            self.state = 3667
                            self.match(MySQLParser.NO_SYMBOL)


                        self.state = 3670
                        self.match(MySQLParser.RELEASE_SYMBOL)


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [450]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3675
                self.match(MySQLParser.RELEASE_SYMBOL)
                self.state = 3676
                self.match(MySQLParser.SAVEPOINT_SYMBOL)
                self.state = 3677
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def lockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.LockItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.LockItemContext,i)


        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def INSTANCE_SYMBOL(self):
            return self.getToken(MySQLParser.INSTANCE_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def BACKUP_SYMBOL(self):
            return self.getToken(MySQLParser.BACKUP_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MySQLParser.UNLOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStatement" ):
                listener.enterLockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStatement" ):
                listener.exitLockStatement(self)




    def lockStatement(self):

        localctx = MySQLParser.LockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_lockStatement)
        self._la = 0 # Token type
        try:
            self.state = 3702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3680
                self.match(MySQLParser.LOCK_SYMBOL)
                self.state = 3681
                _la = self._input.LA(1)
                if not(_la==571 or _la==574):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3682
                self.lockItem()
                self.state = 3687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 3683
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3684
                    self.lockItem()
                    self.state = 3689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3690
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 3691
                self.match(MySQLParser.LOCK_SYMBOL)
                self.state = 3692
                self.match(MySQLParser.INSTANCE_SYMBOL)
                self.state = 3693
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 3694
                self.match(MySQLParser.BACKUP_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3695
                self.match(MySQLParser.UNLOCK_SYMBOL)
                self.state = 3700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
                if la_ == 1:
                    self.state = 3696
                    self.match(MySQLParser.TABLES_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 3697
                    self.match(MySQLParser.TABLE_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 3698
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 3699
                    self.match(MySQLParser.INSTANCE_SYMBOL)
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def lockOption(self):
            return self.getTypedRuleContext(MySQLParser.LockOptionContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(MySQLParser.TableAliasContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_lockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockItem" ):
                listener.enterLockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockItem" ):
                listener.exitLockItem(self)




    def lockItem(self):

        localctx = MySQLParser.LockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_lockItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3704
            self.tableRef()
            self.state = 3706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.state = 3705
                self.tableAlias()


            self.state = 3708
            self.lockOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.WRITE_SYMBOL, 0)

        def LOW_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockOption" ):
                listener.enterLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockOption" ):
                listener.exitLockOption(self)




    def lockOption(self):

        localctx = MySQLParser.LockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_lockOption)
        self._la = 0 # Token type
        try:
            self.state = 3718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [435]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3710
                self.match(MySQLParser.READ_SYMBOL)
                self.state = 3712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 3711
                    self.match(MySQLParser.LOCAL_SYMBOL)


                pass
            elif token in [295, 649]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==295:
                    self.state = 3714
                    self.match(MySQLParser.LOW_PRIORITY_SYMBOL)


                self.state = 3717
                self.match(MySQLParser.WRITE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA_SYMBOL(self):
            return self.getToken(MySQLParser.XA_SYMBOL, 0)

        def xid(self):
            return self.getTypedRuleContext(MySQLParser.XidContext,0)


        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(MySQLParser.PREPARE_SYMBOL, 0)

        def COMMIT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMIT_SYMBOL, 0)

        def ROLLBACK_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLBACK_SYMBOL, 0)

        def RECOVER_SYMBOL(self):
            return self.getToken(MySQLParser.RECOVER_SYMBOL, 0)

        def xaConvert(self):
            return self.getTypedRuleContext(MySQLParser.XaConvertContext,0)


        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def BEGIN_SYMBOL(self):
            return self.getToken(MySQLParser.BEGIN_SYMBOL, 0)

        def SUSPEND_SYMBOL(self):
            return self.getToken(MySQLParser.SUSPEND_SYMBOL, 0)

        def ONE_SYMBOL(self):
            return self.getToken(MySQLParser.ONE_SYMBOL, 0)

        def PHASE_SYMBOL(self):
            return self.getToken(MySQLParser.PHASE_SYMBOL, 0)

        def JOIN_SYMBOL(self):
            return self.getToken(MySQLParser.JOIN_SYMBOL, 0)

        def RESUME_SYMBOL(self):
            return self.getToken(MySQLParser.RESUME_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def MIGRATE_SYMBOL(self):
            return self.getToken(MySQLParser.MIGRATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_xaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaStatement" ):
                listener.enterXaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaStatement" ):
                listener.exitXaStatement(self)




    def xaStatement(self):

        localctx = MySQLParser.XaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_xaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3720
            self.match(MySQLParser.XA_SYMBOL)
            self.state = 3747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 543]:
                self.state = 3721
                _la = self._input.LA(1)
                if not(_la==29 or _la==543):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3722
                self.xid()
                self.state = 3724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261 or _la==472:
                    self.state = 3723
                    _la = self._input.LA(1)
                    if not(_la==261 or _la==472):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [159]:
                self.state = 3726
                self.match(MySQLParser.END_SYMBOL)
                self.state = 3727
                self.xid()
                self.state = 3733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==566:
                    self.state = 3728
                    self.match(MySQLParser.SUSPEND_SYMBOL)
                    self.state = 3731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==200:
                        self.state = 3729
                        self.match(MySQLParser.FOR_SYMBOL)
                        self.state = 3730
                        self.match(MySQLParser.MIGRATE_SYMBOL)




                pass
            elif token in [417]:
                self.state = 3735
                self.match(MySQLParser.PREPARE_SYMBOL)
                self.state = 3736
                self.xid()
                pass
            elif token in [77]:
                self.state = 3737
                self.match(MySQLParser.COMMIT_SYMBOL)
                self.state = 3738
                self.xid()
                self.state = 3741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==384:
                    self.state = 3739
                    self.match(MySQLParser.ONE_SYMBOL)
                    self.state = 3740
                    self.match(MySQLParser.PHASE_SYMBOL)


                pass
            elif token in [480]:
                self.state = 3743
                self.match(MySQLParser.ROLLBACK_SYMBOL)
                self.state = 3744
                self.xid()
                pass
            elif token in [439]:
                self.state = 3745
                self.match(MySQLParser.RECOVER_SYMBOL)
                self.state = 3746
                self.xaConvert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaConvertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONVERT_SYMBOL(self):
            return self.getToken(MySQLParser.CONVERT_SYMBOL, 0)

        def XID_SYMBOL(self):
            return self.getToken(MySQLParser.XID_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_xaConvert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaConvert" ):
                listener.enterXaConvert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaConvert" ):
                listener.exitXaConvert(self)




    def xaConvert(self):

        localctx = MySQLParser.XaConvertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_xaConvert)
        self._la = 0 # Token type
        try:
            self.state = 3755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3749
                if not serverVersion >= 50704:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50704")
                self.state = 3752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 3750
                    self.match(MySQLParser.CONVERT_SYMBOL)
                    self.state = 3751
                    self.match(MySQLParser.XID_SYMBOL)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_xid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXid" ):
                listener.enterXid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXid" ):
                listener.exitXid(self)




    def xid(self):

        localctx = MySQLParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3757
            self.textString()
            self.state = 3764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==773:
                self.state = 3758
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 3759
                self.textString()
                self.state = 3762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 3760
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3761
                    self.ulong_number()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PURGE_SYMBOL(self):
            return self.getToken(MySQLParser.PURGE_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(MySQLParser.LOGS_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def BEFORE_SYMBOL(self):
            return self.getToken(MySQLParser.BEFORE_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def changeMaster(self):
            return self.getTypedRuleContext(MySQLParser.ChangeMasterContext,0)


        def RESET_SYMBOL(self):
            return self.getToken(MySQLParser.RESET_SYMBOL, 0)

        def resetOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ResetOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ResetOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def PERSIST_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_SYMBOL, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def slave(self):
            return self.getTypedRuleContext(MySQLParser.SlaveContext,0)


        def changeReplication(self):
            return self.getTypedRuleContext(MySQLParser.ChangeReplicationContext,0)


        def replicationLoad(self):
            return self.getTypedRuleContext(MySQLParser.ReplicationLoadContext,0)


        def groupReplication(self):
            return self.getTypedRuleContext(MySQLParser.GroupReplicationContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_replicationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationStatement" ):
                listener.enterReplicationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationStatement" ):
                listener.exitReplicationStatement(self)




    def replicationStatement(self):

        localctx = MySQLParser.ReplicationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_replicationStatement)
        self._la = 0 # Token type
        try:
            self.state = 3799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3766
                self.match(MySQLParser.PURGE_SYMBOL)
                self.state = 3767
                _la = self._input.LA(1)
                if not(_la==32 or _la==316):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3768
                self.match(MySQLParser.LOGS_SYMBOL)
                self.state = 3773
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [590]:
                    self.state = 3769
                    self.match(MySQLParser.TO_SYMBOL)
                    self.state = 3770
                    self.textLiteral()
                    pass
                elif token in [28]:
                    self.state = 3771
                    self.match(MySQLParser.BEFORE_SYMBOL)
                    self.state = 3772
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3775
                self.changeMaster()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3776
                self.match(MySQLParser.RESET_SYMBOL)
                self.state = 3777
                self.resetOption()
                self.state = 3782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 3778
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3779
                    self.resetOption()
                    self.state = 3784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3785
                if not serverVersion > 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion > 80000")
                self.state = 3786
                self.match(MySQLParser.RESET_SYMBOL)
                self.state = 3787
                self.match(MySQLParser.PERSIST_SYMBOL)
                self.state = 3791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==231:
                    self.state = 3788
                    self.ifExists()
                    self.state = 3789
                    self.identifier()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3793
                self.slave()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3794
                if not serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50700")
                self.state = 3795
                self.changeReplication()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3796
                self.replicationLoad()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3797
                if not serverVersion > 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion > 50706")
                self.state = 3798
                self.groupReplication()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def masterResetOptions(self):
            return self.getTypedRuleContext(MySQLParser.MasterResetOptionsContext,0)


        def CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.CACHE_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_resetOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetOption" ):
                listener.enterResetOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetOption" ):
                listener.exitResetOption(self)




    def resetOption(self):

        localctx = MySQLParser.ResetOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_resetOption)
        try:
            self.state = 3815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3801
                localctx.option = self.match(MySQLParser.MASTER_SYMBOL)
                self.state = 3803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
                if la_ == 1:
                    self.state = 3802
                    self.masterResetOptions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3805
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 3806
                localctx.option = self.match(MySQLParser.QUERY_SYMBOL)
                self.state = 3807
                self.match(MySQLParser.CACHE_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3808
                localctx.option = self.match(MySQLParser.SLAVE_SYMBOL)
                self.state = 3810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                if la_ == 1:
                    self.state = 3809
                    self.match(MySQLParser.ALL_SYMBOL)


                self.state = 3813
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
                if la_ == 1:
                    self.state = 3812
                    self.channel()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterResetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_masterResetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterResetOptions" ):
                listener.enterMasterResetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterResetOptions" ):
                listener.exitMasterResetOptions(self)




    def masterResetOptions(self):

        localctx = MySQLParser.MasterResetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_masterResetOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3817
            if not serverVersion >= 80000:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 80000")
            self.state = 3818
            self.match(MySQLParser.TO_SYMBOL)
            self.state = 3823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 3819
                if not serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80017")
                self.state = 3820
                self.real_ulong_number()
                pass

            elif la_ == 2:
                self.state = 3821
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 3822
                self.real_ulonglong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationLoadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.LOAD_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_replicationLoad

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationLoad" ):
                listener.enterReplicationLoad(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationLoad" ):
                listener.exitReplicationLoad(self)




    def replicationLoad(self):

        localctx = MySQLParser.ReplicationLoadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_replicationLoad)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3825
            self.match(MySQLParser.LOAD_SYMBOL)
            self.state = 3829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112]:
                self.state = 3826
                self.match(MySQLParser.DATA_SYMBOL)
                pass
            elif token in [574]:
                self.state = 3827
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 3828
                self.tableRef()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3831
            self.match(MySQLParser.FROM_SYMBOL)
            self.state = 3832
            self.match(MySQLParser.MASTER_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGE_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def changeMasterOptions(self):
            return self.getTypedRuleContext(MySQLParser.ChangeMasterOptionsContext,0)


        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_changeMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMaster" ):
                listener.enterChangeMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMaster" ):
                listener.exitChangeMaster(self)




    def changeMaster(self):

        localctx = MySQLParser.ChangeMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_changeMaster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3834
            self.match(MySQLParser.CHANGE_SYMBOL)
            self.state = 3835
            self.match(MySQLParser.MASTER_SYMBOL)
            self.state = 3836
            self.match(MySQLParser.TO_SYMBOL)
            self.state = 3837
            self.changeMasterOptions()
            self.state = 3839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 3838
                self.channel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def masterOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.MasterOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.MasterOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_changeMasterOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMasterOptions" ):
                listener.enterChangeMasterOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMasterOptions" ):
                listener.exitChangeMasterOptions(self)




    def changeMasterOptions(self):

        localctx = MySQLParser.ChangeMasterOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_changeMasterOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3841
            self.masterOption()
            self.state = 3846
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,444,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3842
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3843
                    self.masterOption() 
                self.state = 3848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,444,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_HOST_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def NETWORK_NAMESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0)

        def MASTER_BIND_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_BIND_SYMBOL, 0)

        def MASTER_USER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_USER_SYMBOL, 0)

        def MASTER_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0)

        def MASTER_PORT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def MASTER_CONNECT_RETRY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0)

        def MASTER_RETRY_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0)

        def MASTER_DELAY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0)

        def MASTER_SSL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0)

        def MASTER_SSL_CA_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0)

        def MASTER_SSL_CAPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0)

        def MASTER_TLS_VERSION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0)

        def MASTER_SSL_CERT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0)

        def MASTER_TLS_CIPHERSUITES_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0)

        def masterTlsCiphersuitesDef(self):
            return self.getTypedRuleContext(MySQLParser.MasterTlsCiphersuitesDefContext,0)


        def MASTER_SSL_CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0)

        def MASTER_SSL_KEY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0)

        def MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0)

        def MASTER_SSL_CRL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def MASTER_SSL_CRLPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0)

        def MASTER_PUBLIC_KEY_PATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0)

        def GET_MASTER_PUBLIC_KEY_SYMBOL(self):
            return self.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0)

        def MASTER_HEARTBEAT_PERIOD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0)

        def IGNORE_SERVER_IDS_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0)

        def serverIdList(self):
            return self.getTypedRuleContext(MySQLParser.ServerIdListContext,0)


        def MASTER_COMPRESSION_ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0)

        def MASTER_AUTO_POSITION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0)

        def PRIVILEGE_CHECKS_USER_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0)

        def privilegeCheckDef(self):
            return self.getTypedRuleContext(MySQLParser.PrivilegeCheckDefContext,0)


        def REQUIRE_ROW_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0)

        def REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0)

        def tablePrimaryKeyCheckDef(self):
            return self.getTypedRuleContext(MySQLParser.TablePrimaryKeyCheckDefContext,0)


        def masterFileDef(self):
            return self.getTypedRuleContext(MySQLParser.MasterFileDefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_masterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterOption" ):
                listener.enterMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterOption" ):
                listener.exitMasterOption(self)




    def masterOption(self):

        localctx = MySQLParser.MasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_masterOption)
        try:
            self.state = 3940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [300]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3849
                self.match(MySQLParser.MASTER_HOST_SYMBOL)
                self.state = 3850
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3851
                self.textStringNoLinebreak()
                pass
            elif token in [729]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3852
                self.match(MySQLParser.NETWORK_NAMESPACE_SYMBOL)
                self.state = 3853
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3854
                self.textStringNoLinebreak()
                pass
            elif token in [297]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3855
                self.match(MySQLParser.MASTER_BIND_SYMBOL)
                self.state = 3856
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3857
                self.textStringNoLinebreak()
                pass
            elif token in [318]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3858
                self.match(MySQLParser.MASTER_USER_SYMBOL)
                self.state = 3859
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3860
                self.textStringNoLinebreak()
                pass
            elif token in [303]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3861
                self.match(MySQLParser.MASTER_PASSWORD_SYMBOL)
                self.state = 3862
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3863
                self.textStringNoLinebreak()
                pass
            elif token in [304]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3864
                self.match(MySQLParser.MASTER_PORT_SYMBOL)
                self.state = 3865
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3866
                self.ulong_number()
                pass
            elif token in [298]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3867
                self.match(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL)
                self.state = 3868
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3869
                self.ulong_number()
                pass
            elif token in [305]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3870
                self.match(MySQLParser.MASTER_RETRY_COUNT_SYMBOL)
                self.state = 3871
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3872
                self.ulong_number()
                pass
            elif token in [299]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3873
                self.match(MySQLParser.MASTER_DELAY_SYMBOL)
                self.state = 3874
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3875
                self.ulong_number()
                pass
            elif token in [314]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3876
                self.match(MySQLParser.MASTER_SSL_SYMBOL)
                self.state = 3877
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3878
                self.ulong_number()
                pass
            elif token in [308]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3879
                self.match(MySQLParser.MASTER_SSL_CA_SYMBOL)
                self.state = 3880
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3881
                self.textStringNoLinebreak()
                pass
            elif token in [307]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3882
                self.match(MySQLParser.MASTER_SSL_CAPATH_SYMBOL)
                self.state = 3883
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3884
                self.textStringNoLinebreak()
                pass
            elif token in [317]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3885
                self.match(MySQLParser.MASTER_TLS_VERSION_SYMBOL)
                self.state = 3886
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3887
                self.textStringNoLinebreak()
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3888
                self.match(MySQLParser.MASTER_SSL_CERT_SYMBOL)
                self.state = 3889
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3890
                self.textStringNoLinebreak()
                pass
            elif token in [738]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3891
                self.match(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL)
                self.state = 3892
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3893
                self.masterTlsCiphersuitesDef()
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3894
                self.match(MySQLParser.MASTER_SSL_CIPHER_SYMBOL)
                self.state = 3895
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3896
                self.textStringNoLinebreak()
                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3897
                self.match(MySQLParser.MASTER_SSL_KEY_SYMBOL)
                self.state = 3898
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3899
                self.textStringNoLinebreak()
                pass
            elif token in [315]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3900
                self.match(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL)
                self.state = 3901
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3902
                self.ulong_number()
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 19)
                self.state = 3903
                self.match(MySQLParser.MASTER_SSL_CRL_SYMBOL)
                self.state = 3904
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3905
                self.textLiteral()
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 20)
                self.state = 3906
                self.match(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL)
                self.state = 3907
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3908
                self.textStringNoLinebreak()
                pass
            elif token in [712]:
                self.enterOuterAlt(localctx, 21)
                self.state = 3909
                self.match(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL)
                self.state = 3910
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3911
                self.textStringNoLinebreak()
                pass
            elif token in [713]:
                self.enterOuterAlt(localctx, 22)
                self.state = 3912
                self.match(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL)
                self.state = 3913
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3914
                self.ulong_number()
                pass
            elif token in [319]:
                self.enterOuterAlt(localctx, 23)
                self.state = 3915
                self.match(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL)
                self.state = 3916
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3917
                self.ulong_number()
                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 24)
                self.state = 3918
                self.match(MySQLParser.IGNORE_SERVER_IDS_SYMBOL)
                self.state = 3919
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3920
                self.serverIdList()
                pass
            elif token in [735]:
                self.enterOuterAlt(localctx, 25)
                self.state = 3921
                self.match(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL)
                self.state = 3922
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3923
                self.textStringLiteral()
                pass
            elif token in [736]:
                self.enterOuterAlt(localctx, 26)
                self.state = 3924
                self.match(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL)
                self.state = 3925
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3926
                self.ulong_number()
                pass
            elif token in [296]:
                self.enterOuterAlt(localctx, 27)
                self.state = 3927
                self.match(MySQLParser.MASTER_AUTO_POSITION_SYMBOL)
                self.state = 3928
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3929
                self.ulong_number()
                pass
            elif token in [737]:
                self.enterOuterAlt(localctx, 28)
                self.state = 3930
                self.match(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL)
                self.state = 3931
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3932
                self.privilegeCheckDef()
                pass
            elif token in [739]:
                self.enterOuterAlt(localctx, 29)
                self.state = 3933
                self.match(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL)
                self.state = 3934
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3935
                self.ulong_number()
                pass
            elif token in [742]:
                self.enterOuterAlt(localctx, 30)
                self.state = 3936
                self.match(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL)
                self.state = 3937
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3938
                self.tablePrimaryKeyCheckDef()
                pass
            elif token in [301, 302, 447, 448]:
                self.enterOuterAlt(localctx, 31)
                self.state = 3939
                self.masterFileDef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeCheckDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userIdentifierOrText(self):
            return self.getTypedRuleContext(MySQLParser.UserIdentifierOrTextContext,0)


        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_privilegeCheckDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeCheckDef" ):
                listener.enterPrivilegeCheckDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeCheckDef" ):
                listener.exitPrivilegeCheckDef(self)




    def privilegeCheckDef(self):

        localctx = MySQLParser.PrivilegeCheckDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_privilegeCheckDef)
        try:
            self.state = 3944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3942
                self.userIdentifierOrText()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3943
                self.match(MySQLParser.NULL_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePrimaryKeyCheckDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STREAM_SYMBOL(self):
            return self.getToken(MySQLParser.STREAM_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def OFF_SYMBOL(self):
            return self.getToken(MySQLParser.OFF_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tablePrimaryKeyCheckDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePrimaryKeyCheckDef" ):
                listener.enterTablePrimaryKeyCheckDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePrimaryKeyCheckDef" ):
                listener.exitTablePrimaryKeyCheckDef(self)




    def tablePrimaryKeyCheckDef(self):

        localctx = MySQLParser.TablePrimaryKeyCheckDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_tablePrimaryKeyCheckDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3946
            _la = self._input.LA(1)
            if not(_la==383 or _la==743 or _la==744):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterTlsCiphersuitesDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_masterTlsCiphersuitesDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterTlsCiphersuitesDef" ):
                listener.enterMasterTlsCiphersuitesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterTlsCiphersuitesDef" ):
                listener.exitMasterTlsCiphersuitesDef(self)




    def masterTlsCiphersuitesDef(self):

        localctx = MySQLParser.MasterTlsCiphersuitesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_masterTlsCiphersuitesDef)
        try:
            self.state = 3950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3948
                self.textStringNoLinebreak()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3949
                self.match(MySQLParser.NULL_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterFileDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def MASTER_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0)

        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def RELAY_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0)

        def RELAY_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_masterFileDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterFileDef" ):
                listener.enterMasterFileDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterFileDef" ):
                listener.exitMasterFileDef(self)




    def masterFileDef(self):

        localctx = MySQLParser.MasterFileDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_masterFileDef)
        try:
            self.state = 3964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [301]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3952
                self.match(MySQLParser.MASTER_LOG_FILE_SYMBOL)
                self.state = 3953
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3954
                self.textStringNoLinebreak()
                pass
            elif token in [302]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3955
                self.match(MySQLParser.MASTER_LOG_POS_SYMBOL)
                self.state = 3956
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3957
                self.ulonglong_number()
                pass
            elif token in [447]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3958
                self.match(MySQLParser.RELAY_LOG_FILE_SYMBOL)
                self.state = 3959
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3960
                self.textStringNoLinebreak()
                pass
            elif token in [448]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3961
                self.match(MySQLParser.RELAY_LOG_POS_SYMBOL)
                self.state = 3962
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3963
                self.ulong_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerIdListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Ulong_numberContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_serverIdList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerIdList" ):
                listener.enterServerIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerIdList" ):
                listener.exitServerIdList(self)




    def serverIdList(self):

        localctx = MySQLParser.ServerIdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_serverIdList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3966
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 3975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & 28587302322183) != 0:
                self.state = 3967
                self.ulong_number()
                self.state = 3972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 3968
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3969
                    self.ulong_number()
                    self.state = 3974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3977
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGE_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATION_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MySQLParser.FILTER_SYMBOL, 0)

        def filterDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FilterDefinitionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FilterDefinitionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_changeReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeReplication" ):
                listener.enterChangeReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeReplication" ):
                listener.exitChangeReplication(self)




    def changeReplication(self):

        localctx = MySQLParser.ChangeReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_changeReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3979
            self.match(MySQLParser.CHANGE_SYMBOL)
            self.state = 3980
            self.match(MySQLParser.REPLICATION_SYMBOL)
            self.state = 3981
            self.match(MySQLParser.FILTER_SYMBOL)
            self.state = 3982
            self.filterDefinition()
            self.state = 3987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,451,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3983
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 3984
                    self.filterDefinition() 
                self.state = 3989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,451,self._ctx)

            self.state = 3992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                self.state = 3990
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 3991
                self.channel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLICATE_DO_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def filterDbList(self):
            return self.getTypedRuleContext(MySQLParser.FilterDbListContext,0)


        def REPLICATE_IGNORE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0)

        def REPLICATE_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0)

        def filterTableList(self):
            return self.getTypedRuleContext(MySQLParser.FilterTableListContext,0)


        def REPLICATE_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0)

        def filterStringList(self):
            return self.getTypedRuleContext(MySQLParser.FilterStringListContext,0)


        def REPLICATE_WILD_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_REWRITE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0)

        def filterDbPairList(self):
            return self.getTypedRuleContext(MySQLParser.FilterDbPairListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_filterDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterDefinition" ):
                listener.enterFilterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterDefinition" ):
                listener.exitFilterDefinition(self)




    def filterDefinition(self):

        localctx = MySQLParser.FilterDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_filterDefinition)
        self._la = 0 # Token type
        try:
            self.state = 4043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [460]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3994
                self.match(MySQLParser.REPLICATE_DO_DB_SYMBOL)
                self.state = 3995
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 3996
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 3998
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                if la_ == 1:
                    self.state = 3997
                    self.filterDbList()


                self.state = 4000
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [461]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4001
                self.match(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL)
                self.state = 4002
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4003
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4005
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                if la_ == 1:
                    self.state = 4004
                    self.filterDbList()


                self.state = 4007
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [462]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4008
                self.match(MySQLParser.REPLICATE_DO_TABLE_SYMBOL)
                self.state = 4009
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4010
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
                if la_ == 1:
                    self.state = 4011
                    self.filterTableList()


                self.state = 4014
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4015
                self.match(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL)
                self.state = 4016
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4017
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4019
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
                if la_ == 1:
                    self.state = 4018
                    self.filterTableList()


                self.state = 4021
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [464]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4022
                self.match(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL)
                self.state = 4023
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4024
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 4025
                    self.filterStringList()


                self.state = 4028
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [465]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4029
                self.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL)
                self.state = 4030
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4031
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
                if la_ == 1:
                    self.state = 4032
                    self.filterStringList()


                self.state = 4035
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [466]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4036
                self.match(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL)
                self.state = 4037
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4038
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 4040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==776:
                    self.state = 4039
                    self.filterDbPairList()


                self.state = 4042
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterDbListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SchemaRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SchemaRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_filterDbList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterDbList" ):
                listener.enterFilterDbList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterDbList" ):
                listener.exitFilterDbList(self)




    def filterDbList(self):

        localctx = MySQLParser.FilterDbListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_filterDbList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4045
            self.schemaRef()
            self.state = 4050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 4046
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4047
                self.schemaRef()
                self.state = 4052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterTableListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filterTableRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FilterTableRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FilterTableRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_filterTableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterTableList" ):
                listener.enterFilterTableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterTableList" ):
                listener.exitFilterTableList(self)




    def filterTableList(self):

        localctx = MySQLParser.FilterTableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_filterTableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4053
            self.filterTableRef()
            self.state = 4058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 4054
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4055
                self.filterTableRef()
                self.state = 4060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterStringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filterWildDbTableString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FilterWildDbTableStringContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FilterWildDbTableStringContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_filterStringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterStringList" ):
                listener.enterFilterStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterStringList" ):
                listener.exitFilterStringList(self)




    def filterStringList(self):

        localctx = MySQLParser.FilterStringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_filterStringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4061
            self.filterWildDbTableString()
            self.state = 4066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 4062
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4063
                self.filterWildDbTableString()
                self.state = 4068
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterWildDbTableStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_filterWildDbTableString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterWildDbTableString" ):
                listener.enterFilterWildDbTableString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterWildDbTableString" ):
                listener.exitFilterWildDbTableString(self)




    def filterWildDbTableString(self):

        localctx = MySQLParser.FilterWildDbTableStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_filterWildDbTableString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4069
            self.textStringNoLinebreak()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterDbPairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaIdentifierPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SchemaIdentifierPairContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SchemaIdentifierPairContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_filterDbPairList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterDbPairList" ):
                listener.enterFilterDbPairList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterDbPairList" ):
                listener.exitFilterDbPairList(self)




    def filterDbPairList(self):

        localctx = MySQLParser.FilterDbPairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_filterDbPairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4071
            self.schemaIdentifierPair()
            self.state = 4076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 4072
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4073
                self.schemaIdentifierPair()
                self.state = 4078
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def slaveConnectionOptions(self):
            return self.getTypedRuleContext(MySQLParser.SlaveConnectionOptionsContext,0)


        def slaveThreadOptions(self):
            return self.getTypedRuleContext(MySQLParser.SlaveThreadOptionsContext,0)


        def UNTIL_SYMBOL(self):
            return self.getToken(MySQLParser.UNTIL_SYMBOL, 0)

        def slaveUntilOptions(self):
            return self.getTypedRuleContext(MySQLParser.SlaveUntilOptionsContext,0)


        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def STOP_SYMBOL(self):
            return self.getToken(MySQLParser.STOP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_slave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlave" ):
                listener.enterSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlave" ):
                listener.exitSlave(self)




    def slave(self):

        localctx = MySQLParser.SlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_slave)
        try:
            self.state = 4100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [543]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4079
                self.match(MySQLParser.START_SYMBOL)
                self.state = 4080
                self.match(MySQLParser.SLAVE_SYMBOL)
                self.state = 4082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
                if la_ == 1:
                    self.state = 4081
                    self.slaveThreadOptions()


                self.state = 4086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
                if la_ == 1:
                    self.state = 4084
                    self.match(MySQLParser.UNTIL_SYMBOL)
                    self.state = 4085
                    self.slaveUntilOptions()


                self.state = 4088
                self.slaveConnectionOptions()
                self.state = 4090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
                if la_ == 1:
                    self.state = 4089
                    self.channel()


                pass
            elif token in [552]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4092
                self.match(MySQLParser.STOP_SYMBOL)
                self.state = 4093
                self.match(MySQLParser.SLAVE_SYMBOL)
                self.state = 4095
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
                if la_ == 1:
                    self.state = 4094
                    self.slaveThreadOptions()


                self.state = 4098
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
                if la_ == 1:
                    self.state = 4097
                    self.channel()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveUntilOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def masterFileDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.MasterFileDefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.MasterFileDefContext,i)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def SQL_AFTER_MTS_GAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0)

        def SQL_BEFORE_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0)

        def SQL_AFTER_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_slaveUntilOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveUntilOptions" ):
                listener.enterSlaveUntilOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveUntilOptions" ):
                listener.exitSlaveUntilOptions(self)




    def slaveUntilOptions(self):

        localctx = MySQLParser.SlaveUntilOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_slaveUntilOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.state = 4102
                self.masterFileDef()
                pass

            elif la_ == 2:
                self.state = 4103
                if not serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50606")
                self.state = 4104
                _la = self._input.LA(1)
                if not(_la==528 or _la==530):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4105
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 4106
                self.textString()
                pass

            elif la_ == 3:
                self.state = 4107
                if not serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50606")
                self.state = 4108
                self.match(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL)
                pass


            self.state = 4115
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,472,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4111
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4112
                    self.masterFileDef() 
                self.state = 4117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveConnectionOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def EQUAL_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.EQUAL_OPERATOR)
            else:
                return self.getToken(MySQLParser.EQUAL_OPERATOR, i)

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringContext,i)


        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def DEFAULT_AUTH_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0)

        def PLUGIN_DIR_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_slaveConnectionOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveConnectionOptions" ):
                listener.enterSlaveConnectionOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveConnectionOptions" ):
                listener.exitSlaveConnectionOptions(self)




    def slaveConnectionOptions(self):

        localctx = MySQLParser.SlaveConnectionOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_slaveConnectionOptions)
        try:
            self.state = 4140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4118
                if not serverVersion >= 50604:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50604")
                self.state = 4122
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
                if la_ == 1:
                    self.state = 4119
                    self.match(MySQLParser.USER_SYMBOL)
                    self.state = 4120
                    self.match(MySQLParser.EQUAL_OPERATOR)
                    self.state = 4121
                    self.textString()


                self.state = 4127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
                if la_ == 1:
                    self.state = 4124
                    self.match(MySQLParser.PASSWORD_SYMBOL)
                    self.state = 4125
                    self.match(MySQLParser.EQUAL_OPERATOR)
                    self.state = 4126
                    self.textString()


                self.state = 4132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
                if la_ == 1:
                    self.state = 4129
                    self.match(MySQLParser.DEFAULT_AUTH_SYMBOL)
                    self.state = 4130
                    self.match(MySQLParser.EQUAL_OPERATOR)
                    self.state = 4131
                    self.textString()


                self.state = 4137
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
                if la_ == 1:
                    self.state = 4134
                    self.match(MySQLParser.PLUGIN_DIR_SYMBOL)
                    self.state = 4135
                    self.match(MySQLParser.EQUAL_OPERATOR)
                    self.state = 4136
                    self.textString()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveThreadOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slaveThreadOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SlaveThreadOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SlaveThreadOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_slaveThreadOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveThreadOptions" ):
                listener.enterSlaveThreadOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveThreadOptions" ):
                listener.exitSlaveThreadOptions(self)




    def slaveThreadOptions(self):

        localctx = MySQLParser.SlaveThreadOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_slaveThreadOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4142
            self.slaveThreadOption()
            self.state = 4147
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,478,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4143
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4144
                    self.slaveThreadOption() 
                self.state = 4149
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,478,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlaveThreadOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELAY_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0)

        def SQL_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_slaveThreadOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlaveThreadOption" ):
                listener.enterSlaveThreadOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlaveThreadOption" ):
                listener.exitSlaveThreadOption(self)




    def slaveThreadOption(self):

        localctx = MySQLParser.SlaveThreadOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_slaveThreadOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4150
            _la = self._input.LA(1)
            if not(_la==449 or _la==538):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0)

        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def STOP_SYMBOL(self):
            return self.getToken(MySQLParser.STOP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_groupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupReplication" ):
                listener.enterGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupReplication" ):
                listener.exitGroupReplication(self)




    def groupReplication(self):

        localctx = MySQLParser.GroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_groupReplication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4152
            _la = self._input.LA(1)
            if not(_la==543 or _la==552):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4153
            self.match(MySQLParser.GROUP_REPLICATION_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(MySQLParser.PREPARE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def userVariable(self):
            return self.getTypedRuleContext(MySQLParser.UserVariableContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(MySQLParser.ExecuteStatementContext,0)


        def DEALLOCATE_SYMBOL(self):
            return self.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_preparedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparedStatement" ):
                listener.enterPreparedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparedStatement" ):
                listener.exitPreparedStatement(self)




    def preparedStatement(self):

        localctx = MySQLParser.PreparedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_preparedStatement)
        self._la = 0 # Token type
        try:
            self.state = 4166
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [417]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4155
                localctx.type_ = self.match(MySQLParser.PREPARE_SYMBOL)
                self.state = 4156
                self.identifier()
                self.state = 4157
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 4160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
                if la_ == 1:
                    self.state = 4158
                    self.textLiteral()
                    pass

                elif la_ == 2:
                    self.state = 4159
                    self.userVariable()
                    pass


                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4162
                self.executeStatement()
                pass
            elif token in [123, 148]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4163
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==123 or _la==148):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4164
                self.match(MySQLParser.PREPARE_SYMBOL)
                self.state = 4165
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE_SYMBOL(self):
            return self.getToken(MySQLParser.EXECUTE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def executeVarList(self):
            return self.getTypedRuleContext(MySQLParser.ExecuteVarListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)




    def executeStatement(self):

        localctx = MySQLParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4168
            self.match(MySQLParser.EXECUTE_SYMBOL)
            self.state = 4169
            self.identifier()
            self.state = 4172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==621:
                self.state = 4170
                self.match(MySQLParser.USING_SYMBOL)
                self.state = 4171
                self.executeVarList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteVarListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UserVariableContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UserVariableContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_executeVarList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteVarList" ):
                listener.enterExecuteVarList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteVarList" ):
                listener.exitExecuteVarList(self)




    def executeVarList(self):

        localctx = MySQLParser.ExecuteVarListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_executeVarList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4174
            self.userVariable()
            self.state = 4179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 4175
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4176
                self.userVariable()
                self.state = 4181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloneStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLONE_SYMBOL(self):
            return self.getToken(MySQLParser.CLONE_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def REMOTE_SYMBOL(self):
            return self.getToken(MySQLParser.REMOTE_SYMBOL, 0)

        def INSTANCE_SYMBOL(self):
            return self.getToken(MySQLParser.INSTANCE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MySQLParser.COLON_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATION_SYMBOL, 0)

        def dataDirSSL(self):
            return self.getTypedRuleContext(MySQLParser.DataDirSSLContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_cloneStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneStatement" ):
                listener.enterCloneStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneStatement" ):
                listener.exitCloneStatement(self)




    def cloneStatement(self):

        localctx = MySQLParser.CloneStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_cloneStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4182
            self.match(MySQLParser.CLONE_SYMBOL)
            self.state = 4207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.state = 4183
                self.match(MySQLParser.LOCAL_SYMBOL)
                self.state = 4184
                self.match(MySQLParser.DATA_SYMBOL)
                self.state = 4185
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 4187
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
                if la_ == 1:
                    self.state = 4186
                    self.equal()


                self.state = 4189
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.state = 4190
                self.match(MySQLParser.REMOTE_SYMBOL)
                self.state = 4193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200:
                    self.state = 4191
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 4192
                    self.match(MySQLParser.REPLICATION_SYMBOL)


                pass

            elif la_ == 3:
                self.state = 4195
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 4196
                self.match(MySQLParser.INSTANCE_SYMBOL)
                self.state = 4197
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 4198
                self.user()
                self.state = 4199
                self.match(MySQLParser.COLON_SYMBOL)
                self.state = 4200
                self.ulong_number()
                self.state = 4201
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 4202
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 4203
                self.textStringLiteral()
                self.state = 4205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112 or _la==467:
                    self.state = 4204
                    self.dataDirSSL()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDirSSLContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ssl(self):
            return self.getTypedRuleContext(MySQLParser.SslContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dataDirSSL

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDirSSL" ):
                listener.enterDataDirSSL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDirSSL" ):
                listener.exitDataDirSSL(self)




    def dataDirSSL(self):

        localctx = MySQLParser.DataDirSSLContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_dataDirSSL)
        self._la = 0 # Token type
        try:
            self.state = 4219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [467]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4209
                self.ssl()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4210
                self.match(MySQLParser.DATA_SYMBOL)
                self.state = 4211
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 4213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
                if la_ == 1:
                    self.state = 4212
                    self.equal()


                self.state = 4215
                self.textStringLiteral()
                self.state = 4217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==467:
                    self.state = 4216
                    self.ssl()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SslContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRE_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_SYMBOL, 0)

        def SSL_SYMBOL(self):
            return self.getToken(MySQLParser.SSL_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ssl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSsl" ):
                listener.enterSsl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSsl" ):
                listener.exitSsl(self)




    def ssl(self):

        localctx = MySQLParser.SslContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_ssl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4221
            self.match(MySQLParser.REQUIRE_SYMBOL)
            self.state = 4223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==373:
                self.state = 4222
                self.match(MySQLParser.NO_SYMBOL)


            self.state = 4225
            self.match(MySQLParser.SSL_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountManagementStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUser(self):
            return self.getTypedRuleContext(MySQLParser.AlterUserContext,0)


        def createUser(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(MySQLParser.DropUserContext,0)


        def grant(self):
            return self.getTypedRuleContext(MySQLParser.GrantContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(MySQLParser.RenameUserContext,0)


        def revoke(self):
            return self.getTypedRuleContext(MySQLParser.RevokeContext,0)


        def setRole(self):
            return self.getTypedRuleContext(MySQLParser.SetRoleContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_accountManagementStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountManagementStatement" ):
                listener.enterAccountManagementStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountManagementStatement" ):
                listener.exitAccountManagementStatement(self)




    def accountManagementStatement(self):

        localctx = MySQLParser.AccountManagementStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_accountManagementStatement)
        try:
            self.state = 4236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4227
                if not serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50606")
                self.state = 4228
                self.alterUser()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4229
                self.createUser()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4230
                self.dropUser()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4231
                self.grant()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4232
                self.renameUser()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4233
                self.revoke()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4234
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4235
                self.setRole()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MySQLParser.ALTER_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def alterUserTail(self):
            return self.getTypedRuleContext(MySQLParser.AlterUserTailContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUser" ):
                listener.enterAlterUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUser" ):
                listener.exitAlterUser(self)




    def alterUser(self):

        localctx = MySQLParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_alterUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4238
            self.match(MySQLParser.ALTER_SYMBOL)
            self.state = 4239
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
            if la_ == 1:
                self.state = 4240
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 4241
                self.ifExists()


            self.state = 4244
            self.alterUserTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createUserTail(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserTailContext,0)


        def createUserList(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserListContext,0)


        def alterUserList(self):
            return self.getTypedRuleContext(MySQLParser.AlterUserListContext,0)


        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def replacePassword(self):
            return self.getTypedRuleContext(MySQLParser.ReplacePasswordContext,0)


        def retainCurrentPassword(self):
            return self.getTypedRuleContext(MySQLParser.RetainCurrentPasswordContext,0)


        def discardOldPassword(self):
            return self.getTypedRuleContext(MySQLParser.DiscardOldPasswordContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def RANDOM_SYMBOL(self):
            return self.getToken(MySQLParser.RANDOM_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def FAILED_LOGIN_ATTEMPTS_SYMBOL(self):
            return self.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def PASSWORD_LOCK_TIME_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0)

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterUserTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserTail" ):
                listener.enterAlterUserTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserTail" ):
                listener.exitAlterUserTail(self)




    def alterUserTail(self):

        localctx = MySQLParser.AlterUserTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_alterUserTail)
        self._la = 0 # Token type
        try:
            self.state = 4300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
                if la_ == 1:
                    self.state = 4246
                    if not serverVersion < 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 80014")
                    self.state = 4247
                    self.createUserList()
                    pass

                elif la_ == 2:
                    self.state = 4248
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 4249
                    self.alterUserList()
                    pass


                self.state = 4252
                self.createUserTail()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4254
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 4255
                self.user()
                self.state = 4256
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 4257
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 4258
                self.textString()
                self.state = 4261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
                if la_ == 1:
                    self.state = 4259
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 4260
                    self.replacePassword()


                self.state = 4265
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
                if la_ == 1:
                    self.state = 4263
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 4264
                    self.retainCurrentPassword()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4267
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 4268
                self.user()
                self.state = 4269
                self.discardOldPassword()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4271
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4272
                self.user()
                self.state = 4273
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 4274
                self.match(MySQLParser.ROLE_SYMBOL)
                self.state = 4278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
                if la_ == 1:
                    self.state = 4275
                    self.match(MySQLParser.ALL_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 4276
                    self.match(MySQLParser.NONE_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 4277
                    self.roleList()
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4280
                if not serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80018")
                self.state = 4281
                self.user()
                self.state = 4282
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 4285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==645:
                    self.state = 4283
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 4284
                    self.textOrIdentifier()


                self.state = 4287
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 4288
                self.match(MySQLParser.RANDOM_SYMBOL)
                self.state = 4289
                self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 4291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==727:
                    self.state = 4290
                    self.retainCurrentPassword()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4293
                self.match(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL)
                self.state = 4294
                self.real_ulong_number()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4295
                self.match(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL)
                self.state = 4298
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [747, 748, 749, 788]:
                    self.state = 4296
                    self.real_ulong_number()
                    pass
                elif token in [698]:
                    self.state = 4297
                    self.match(MySQLParser.UNBOUNDED_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def parentheses(self):
            return self.getTypedRuleContext(MySQLParser.ParenthesesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_userFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserFunction" ):
                listener.enterUserFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserFunction" ):
                listener.exitUserFunction(self)




    def userFunction(self):

        localctx = MySQLParser.UserFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_userFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4302
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4303
            self.parentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def createUserList(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserListContext,0)


        def defaultRoleClause(self):
            return self.getTypedRuleContext(MySQLParser.DefaultRoleClauseContext,0)


        def createUserTail(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserTailContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUser" ):
                listener.enterCreateUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUser" ):
                listener.exitCreateUser(self)




    def createUser(self):

        localctx = MySQLParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_createUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4305
            self.match(MySQLParser.CREATE_SYMBOL)
            self.state = 4306
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
            if la_ == 1:
                self.state = 4307
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 4308
                self.ifNotExists()
                pass

            elif la_ == 2:
                pass


            self.state = 4312
            self.createUserList()
            self.state = 4313
            self.defaultRoleClause()
            self.state = 4314
            self.createUserTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requireClause(self):
            return self.getTypedRuleContext(MySQLParser.RequireClauseContext,0)


        def connectOptions(self):
            return self.getTypedRuleContext(MySQLParser.ConnectOptionsContext,0)


        def accountLockPasswordExpireOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AccountLockPasswordExpireOptionsContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AccountLockPasswordExpireOptionsContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_createUserTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserTail" ):
                listener.enterCreateUserTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserTail" ):
                listener.exitCreateUserTail(self)




    def createUserTail(self):

        localctx = MySQLParser.CreateUserTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_createUserTail)
        self._la = 0 # Token type
        try:
            self.state = 4330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4316
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 4318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==467:
                    self.state = 4317
                    self.requireClause()


                self.state = 4321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==645:
                    self.state = 4320
                    self.connectOptions()


                self.state = 4326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==406:
                    self.state = 4323
                    self.accountLockPasswordExpireOptions()
                    self.state = 4328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_defaultRoleClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRoleClause" ):
                listener.enterDefaultRoleClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRoleClause" ):
                listener.exitDefaultRoleClause(self)




    def defaultRoleClause(self):

        localctx = MySQLParser.DefaultRoleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_defaultRoleClause)
        try:
            self.state = 4339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4332
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
                if la_ == 1:
                    self.state = 4333
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    self.state = 4334
                    self.match(MySQLParser.ROLE_SYMBOL)
                    self.state = 4335
                    self.roleList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def REQUIRE_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_SYMBOL, 0)

        def requireList(self):
            return self.getTypedRuleContext(MySQLParser.RequireListContext,0)


        def SSL_SYMBOL(self):
            return self.getToken(MySQLParser.SSL_SYMBOL, 0)

        def X509_SYMBOL(self):
            return self.getToken(MySQLParser.X509_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_requireClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireClause" ):
                listener.enterRequireClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireClause" ):
                listener.exitRequireClause(self)




    def requireClause(self):

        localctx = MySQLParser.RequireClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_requireClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4341
            self.match(MySQLParser.REQUIRE_SYMBOL)
            self.state = 4344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 259, 559]:
                self.state = 4342
                self.requireList()
                pass
            elif token in [369, 539, 650]:
                self.state = 4343
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==369 or _la==539 or _la==650):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def MAX_QUERIES_PER_HOUR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL)
            else:
                return self.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i)

        def ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Ulong_numberContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,i)


        def MAX_UPDATES_PER_HOUR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL)
            else:
                return self.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL)
            else:
                return self.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i)

        def MAX_USER_CONNECTIONS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL)
            else:
                return self.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_connectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectOptions" ):
                listener.enterConnectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectOptions" ):
                listener.exitConnectOptions(self)




    def connectOptions(self):

        localctx = MySQLParser.ConnectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_connectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4346
            self.match(MySQLParser.WITH_SYMBOL)
            self.state = 4355 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4355
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [322]:
                    self.state = 4347
                    self.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL)
                    self.state = 4348
                    self.ulong_number()
                    pass
                elif token in [327]:
                    self.state = 4349
                    self.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL)
                    self.state = 4350
                    self.ulong_number()
                    pass
                elif token in [321]:
                    self.state = 4351
                    self.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL)
                    self.state = 4352
                    self.ulong_number()
                    pass
                elif token in [328]:
                    self.state = 4353
                    self.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL)
                    self.state = 4354
                    self.ulong_number()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4357 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 195) != 0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountLockPasswordExpireOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MySQLParser.UNLOCK_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def EXPIRE_SYMBOL(self):
            return self.getToken(MySQLParser.EXPIRE_SYMBOL, 0)

        def HISTORY_SYMBOL(self):
            return self.getToken(MySQLParser.HISTORY_SYMBOL, 0)

        def REUSE_SYMBOL(self):
            return self.getToken(MySQLParser.REUSE_SYMBOL, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)

        def REQUIRE_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SYMBOL, 0)

        def NEVER_SYMBOL(self):
            return self.getToken(MySQLParser.NEVER_SYMBOL, 0)

        def OPTIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_accountLockPasswordExpireOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountLockPasswordExpireOptions" ):
                listener.enterAccountLockPasswordExpireOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountLockPasswordExpireOptions" ):
                listener.exitAccountLockPasswordExpireOptions(self)




    def accountLockPasswordExpireOptions(self):

        localctx = MySQLParser.AccountLockPasswordExpireOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_accountLockPasswordExpireOptions)
        self._la = 0 # Token type
        try:
            self.state = 4392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4359
                self.match(MySQLParser.ACCOUNT_SYMBOL)
                self.state = 4360
                _la = self._input.LA(1)
                if not(_la==287 or _la==611):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [406]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4361
                self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 4390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                if la_ == 1:
                    self.state = 4362
                    self.match(MySQLParser.EXPIRE_SYMBOL)
                    self.state = 4369
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [247]:
                        self.state = 4363
                        self.match(MySQLParser.INTERVAL_SYMBOL)
                        self.state = 4364
                        self.real_ulong_number()
                        self.state = 4365
                        self.match(MySQLParser.DAY_SYMBOL)
                        pass
                    elif token in [365]:
                        self.state = 4367
                        self.match(MySQLParser.NEVER_SYMBOL)
                        pass
                    elif token in [128]:
                        self.state = 4368
                        self.match(MySQLParser.DEFAULT_SYMBOL)
                        pass
                    elif token in [-1, 2, 406, 774]:
                        pass
                    else:
                        pass
                    pass

                elif la_ == 2:
                    self.state = 4371
                    self.match(MySQLParser.HISTORY_SYMBOL)
                    self.state = 4374
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [747, 748, 749, 788]:
                        self.state = 4372
                        self.real_ulong_number()
                        pass
                    elif token in [128]:
                        self.state = 4373
                        self.match(MySQLParser.DEFAULT_SYMBOL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 4376
                    self.match(MySQLParser.REUSE_SYMBOL)
                    self.state = 4377
                    self.match(MySQLParser.INTERVAL_SYMBOL)
                    self.state = 4382
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [747, 748, 749, 788]:
                        self.state = 4378
                        self.real_ulong_number()
                        self.state = 4379
                        self.match(MySQLParser.DAY_SYMBOL)
                        pass
                    elif token in [128]:
                        self.state = 4381
                        self.match(MySQLParser.DEFAULT_SYMBOL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 4:
                    self.state = 4384
                    if not serverVersion >= 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80014")
                    self.state = 4385
                    self.match(MySQLParser.REQUIRE_SYMBOL)
                    self.state = 4386
                    self.match(MySQLParser.CURRENT_SYMBOL)
                    self.state = 4388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==128 or _la==719:
                        self.state = 4387
                        _la = self._input.LA(1)
                        if not(_la==128 or _la==719):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(MySQLParser.UserListContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySQLParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dropUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUser" ):
                listener.enterDropUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUser" ):
                listener.exitDropUser(self)




    def dropUser(self):

        localctx = MySQLParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_dropUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4394
            self.match(MySQLParser.DROP_SYMBOL)
            self.state = 4395
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.state = 4396
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 4397
                self.ifExists()


            self.state = 4400
            self.userList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.GRANT_SYMBOL)
            else:
                return self.getToken(MySQLParser.GRANT_SYMBOL, i)

        def roleOrPrivilegesList(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrPrivilegesListContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(MySQLParser.UserListContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def grantIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.GrantIdentifierContext,0)


        def grantTargetList(self):
            return self.getTypedRuleContext(MySQLParser.GrantTargetListContext,0)


        def PROXY_SYMBOL(self):
            return self.getToken(MySQLParser.PROXY_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def ADMIN_SYMBOL(self):
            return self.getToken(MySQLParser.ADMIN_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def aclType(self):
            return self.getTypedRuleContext(MySQLParser.AclTypeContext,0)


        def versionedRequireClause(self):
            return self.getTypedRuleContext(MySQLParser.VersionedRequireClauseContext,0)


        def grantOptions(self):
            return self.getTypedRuleContext(MySQLParser.GrantOptionsContext,0)


        def grantAs(self):
            return self.getTypedRuleContext(MySQLParser.GrantAsContext,0)


        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_grant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant" ):
                listener.enterGrant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant" ):
                listener.exitGrant(self)




    def grant(self):

        localctx = MySQLParser.GrantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_grant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4402
            self.match(MySQLParser.GRANT_SYMBOL)
            self.state = 4445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                self.state = 4403
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4404
                self.roleOrPrivilegesList()
                self.state = 4405
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4406
                self.userList()
                self.state = 4410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==645:
                    self.state = 4407
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 4408
                    self.match(MySQLParser.ADMIN_SYMBOL)
                    self.state = 4409
                    self.match(MySQLParser.OPTION_SYMBOL)


                pass

            elif la_ == 2:
                self.state = 4417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
                if la_ == 1:
                    self.state = 4412
                    self.roleOrPrivilegesList()
                    pass

                elif la_ == 2:
                    self.state = 4413
                    self.match(MySQLParser.ALL_SYMBOL)
                    self.state = 4415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==421:
                        self.state = 4414
                        self.match(MySQLParser.PRIVILEGES_SYMBOL)


                    pass


                self.state = 4419
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 4420
                    self.aclType()


                self.state = 4423
                self.grantIdentifier()
                self.state = 4424
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4425
                self.grantTargetList()
                self.state = 4427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
                if la_ == 1:
                    self.state = 4426
                    self.versionedRequireClause()


                self.state = 4430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
                if la_ == 1:
                    self.state = 4429
                    self.grantOptions()


                self.state = 4433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 4432
                    self.grantAs()


                pass

            elif la_ == 3:
                self.state = 4435
                self.match(MySQLParser.PROXY_SYMBOL)
                self.state = 4436
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4437
                self.user()
                self.state = 4438
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4439
                self.grantTargetList()
                self.state = 4443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==645:
                    self.state = 4440
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 4441
                    self.match(MySQLParser.GRANT_SYMBOL)
                    self.state = 4442
                    self.match(MySQLParser.OPTION_SYMBOL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantTargetListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createUserList(self):
            return self.getTypedRuleContext(MySQLParser.CreateUserListContext,0)


        def userList(self):
            return self.getTypedRuleContext(MySQLParser.UserListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_grantTargetList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantTargetList" ):
                listener.enterGrantTargetList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantTargetList" ):
                listener.exitGrantTargetList(self)




    def grantTargetList(self):

        localctx = MySQLParser.GrantTargetListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_grantTargetList)
        try:
            self.state = 4451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4447
                if not serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80011")
                self.state = 4448
                self.createUserList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4449
                if not serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80011")
                self.state = 4450
                self.userList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def grantOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.GrantOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.GrantOptionContext,i)


        def GRANT_SYMBOL(self):
            return self.getToken(MySQLParser.GRANT_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_grantOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOptions" ):
                listener.enterGrantOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOptions" ):
                listener.exitGrantOptions(self)




    def grantOptions(self):

        localctx = MySQLParser.GrantOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_grantOptions)
        self._la = 0 # Token type
        try:
            self.state = 4464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4453
                if not serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80011")
                self.state = 4454
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 4456 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4455
                    self.grantOption()
                    self.state = 4458 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==215 or (((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 195) != 0):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4460
                if not serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80011")
                self.state = 4461
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 4462
                self.match(MySQLParser.GRANT_SYMBOL)
                self.state = 4463
                self.match(MySQLParser.OPTION_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptRoleListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT_SYMBOL(self):
            return self.getToken(MySQLParser.EXCEPT_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_exceptRoleList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptRoleList" ):
                listener.enterExceptRoleList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptRoleList" ):
                listener.exitExceptRoleList(self)




    def exceptRoleList(self):

        localctx = MySQLParser.ExceptRoleListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_exceptRoleList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4466
            self.match(MySQLParser.EXCEPT_SYMBOL)
            self.state = 4467
            self.roleList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithRolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def roleList(self):
            return self.getTypedRuleContext(MySQLParser.RoleListContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def exceptRoleList(self):
            return self.getTypedRuleContext(MySQLParser.ExceptRoleListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_withRoles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithRoles" ):
                listener.enterWithRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithRoles" ):
                listener.exitWithRoles(self)




    def withRoles(self):

        localctx = MySQLParser.WithRolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_withRoles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4469
            self.match(MySQLParser.WITH_SYMBOL)
            self.state = 4470
            self.match(MySQLParser.ROLE_SYMBOL)
            self.state = 4478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
            if la_ == 1:
                self.state = 4471
                self.roleList()
                pass

            elif la_ == 2:
                self.state = 4472
                self.match(MySQLParser.ALL_SYMBOL)
                self.state = 4474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==663:
                    self.state = 4473
                    self.exceptRoleList()


                pass

            elif la_ == 3:
                self.state = 4476
                self.match(MySQLParser.NONE_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 4477
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantAsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def withRoles(self):
            return self.getTypedRuleContext(MySQLParser.WithRolesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_grantAs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantAs" ):
                listener.enterGrantAs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantAs" ):
                listener.exitGrantAs(self)




    def grantAs(self):

        localctx = MySQLParser.GrantAsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_grantAs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4480
            self.match(MySQLParser.AS_SYMBOL)
            self.state = 4481
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==645:
                self.state = 4482
                self.withRoles()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionedRequireClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requireClause(self):
            return self.getTypedRuleContext(MySQLParser.RequireClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_versionedRequireClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionedRequireClause" ):
                listener.enterVersionedRequireClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionedRequireClause" ):
                listener.exitVersionedRequireClause(self)




    def versionedRequireClause(self):

        localctx = MySQLParser.VersionedRequireClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_versionedRequireClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4485
            if not serverVersion < 80011:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion < 80011")
            self.state = 4486
            self.requireClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME_SYMBOL(self):
            return self.getToken(MySQLParser.RENAME_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def user(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UserContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UserContext,i)


        def TO_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.TO_SYMBOL)
            else:
                return self.getToken(MySQLParser.TO_SYMBOL, i)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_renameUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUser" ):
                listener.enterRenameUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUser" ):
                listener.exitRenameUser(self)




    def renameUser(self):

        localctx = MySQLParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_renameUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4488
            self.match(MySQLParser.RENAME_SYMBOL)
            self.state = 4489
            self.match(MySQLParser.USER_SYMBOL)
            self.state = 4490
            self.user()
            self.state = 4491
            self.match(MySQLParser.TO_SYMBOL)
            self.state = 4492
            self.user()
            self.state = 4500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 4493
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4494
                self.user()
                self.state = 4495
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4496
                self.user()
                self.state = 4502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MySQLParser.REVOKE_SYMBOL, 0)

        def roleOrPrivilegesList(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrPrivilegesListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(MySQLParser.UserListContext,0)


        def onTypeTo(self):
            return self.getTypedRuleContext(MySQLParser.OnTypeToContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(MySQLParser.PROXY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def grantIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.GrantIdentifierContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(MySQLParser.GRANT_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def aclType(self):
            return self.getTypedRuleContext(MySQLParser.AclTypeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_revoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke" ):
                listener.enterRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke" ):
                listener.exitRevoke(self)




    def revoke(self):

        localctx = MySQLParser.RevokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_revoke)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4503
            self.match(MySQLParser.REVOKE_SYMBOL)
            self.state = 4537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
            if la_ == 1:
                self.state = 4504
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4505
                self.roleOrPrivilegesList()
                self.state = 4506
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 4507
                self.userList()
                pass

            elif la_ == 2:
                self.state = 4509
                self.roleOrPrivilegesList()
                self.state = 4510
                self.onTypeTo()
                self.state = 4511
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 4512
                self.userList()
                pass

            elif la_ == 3:
                self.state = 4514
                self.match(MySQLParser.ALL_SYMBOL)
                self.state = 4516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,534,self._ctx)
                if la_ == 1:
                    self.state = 4515
                    self.match(MySQLParser.PRIVILEGES_SYMBOL)


                self.state = 4529
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
                if la_ == 1:
                    self.state = 4518
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 4519
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 4521
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                    if la_ == 1:
                        self.state = 4520
                        self.aclType()


                    self.state = 4523
                    self.grantIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 4524
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4525
                    self.match(MySQLParser.GRANT_SYMBOL)
                    self.state = 4526
                    self.match(MySQLParser.OPTION_SYMBOL)
                    self.state = 4527
                    self.match(MySQLParser.FROM_SYMBOL)
                    self.state = 4528
                    self.userList()
                    pass


                pass

            elif la_ == 4:
                self.state = 4531
                self.match(MySQLParser.PROXY_SYMBOL)
                self.state = 4532
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4533
                self.user()
                self.state = 4534
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 4535
                self.userList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnTypeToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def grantIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.GrantIdentifierContext,0)


        def aclType(self):
            return self.getTypedRuleContext(MySQLParser.AclTypeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_onTypeTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnTypeTo" ):
                listener.enterOnTypeTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnTypeTo" ):
                listener.exitOnTypeTo(self)




    def onTypeTo(self):

        localctx = MySQLParser.OnTypeToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_onTypeTo)
        self._la = 0 # Token type
        try:
            self.state = 4553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4539
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 4540
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4542
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
                if la_ == 1:
                    self.state = 4541
                    self.aclType()


                self.state = 4544
                self.grantIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4545
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==383:
                    self.state = 4546
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 4548
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
                    if la_ == 1:
                        self.state = 4547
                        self.aclType()


                    self.state = 4550
                    self.grantIdentifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AclTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_aclType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAclType" ):
                listener.enterAclType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAclType" ):
                listener.exitAclType(self)




    def aclType(self):

        localctx = MySQLParser.AclTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_aclType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4555
            _la = self._input.LA(1)
            if not(_la==206 or _la==422 or _la==574):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrPrivilegesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleOrPrivilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoleOrPrivilegeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoleOrPrivilegeContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_roleOrPrivilegesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrPrivilegesList" ):
                listener.enterRoleOrPrivilegesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrPrivilegesList" ):
                listener.exitRoleOrPrivilegesList(self)




    def roleOrPrivilegesList(self):

        localctx = MySQLParser.RoleOrPrivilegesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_roleOrPrivilegesList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4557
            self.roleOrPrivilege()
            self.state = 4562
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,542,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4558
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4559
                    self.roleOrPrivilege() 
                self.state = 4564
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,542,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrPrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.object_ = None # Token

        def roleIdentifierOrText(self):
            return self.getTypedRuleContext(MySQLParser.RoleIdentifierOrTextContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(MySQLParser.AT_TEXT_SUFFIX, 0)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def columnInternalRefList(self):
            return self.getTypedRuleContext(MySQLParser.ColumnInternalRefListContext,0)


        def SELECT_SYMBOL(self):
            return self.getToken(MySQLParser.SELECT_SYMBOL, 0)

        def INSERT_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def REFERENCES_SYMBOL(self):
            return self.getToken(MySQLParser.REFERENCES_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MySQLParser.DELETE_SYMBOL, 0)

        def USAGE_SYMBOL(self):
            return self.getToken(MySQLParser.USAGE_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def EXECUTE_SYMBOL(self):
            return self.getToken(MySQLParser.EXECUTE_SYMBOL, 0)

        def RELOAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELOAD_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def PROCESS_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESS_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(MySQLParser.PROXY_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(MySQLParser.SUPER_SYMBOL, 0)

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def TRIGGER_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGER_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(MySQLParser.GRANT_SYMBOL, 0)

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def SHOW_SYMBOL(self):
            return self.getToken(MySQLParser.SHOW_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASES_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPORARY_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def ROUTINE_SYMBOL(self):
            return self.getToken(MySQLParser.ROUTINE_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATION_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MySQLParser.CLIENT_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def ALTER_SYMBOL(self):
            return self.getToken(MySQLParser.ALTER_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_roleOrPrivilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrPrivilege" ):
                listener.enterRoleOrPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrPrivilege" ):
                listener.exitRoleOrPrivilege(self)




    def roleOrPrivilege(self):

        localctx = MySQLParser.RoleOrPrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_roleOrPrivilege)
        self._la = 0 # Token type
        try:
            self.state = 4606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4565
                if not serverVersion > 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion > 80000")
                self.state = 4576
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
                if la_ == 1:
                    self.state = 4566
                    self.roleIdentifierOrText()
                    self.state = 4568
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
                    if la_ == 1:
                        self.state = 4567
                        self.columnInternalRefList()


                    pass

                elif la_ == 2:
                    self.state = 4570
                    self.roleIdentifierOrText()
                    self.state = 4574
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [784]:
                        self.state = 4571
                        self.match(MySQLParser.AT_TEXT_SUFFIX)
                        pass
                    elif token in [783]:
                        self.state = 4572
                        self.match(MySQLParser.AT_SIGN_SYMBOL)
                        self.state = 4573
                        self.textOrIdentifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4578
                _la = self._input.LA(1)
                if not(_la==242 or _la==443 or _la==497 or _la==614):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,546,self._ctx)
                if la_ == 1:
                    self.state = 4579
                    self.columnInternalRefList()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4582
                _la = self._input.LA(1)
                if not((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 36030033969577985) != 0 or _la==236 or (((_la - 423)) & ~0x3f) == 0 and ((1 << (_la - 423)) & 268435473) != 0 or _la==510 or _la==565 or _la==594 or _la==616):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4583
                self.match(MySQLParser.GRANT_SYMBOL)
                self.state = 4584
                self.match(MySQLParser.OPTION_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4585
                self.match(MySQLParser.SHOW_SYMBOL)
                self.state = 4586
                self.match(MySQLParser.DATABASES_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4587
                self.match(MySQLParser.CREATE_SYMBOL)
                self.state = 4591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
                if la_ == 1:
                    self.state = 4588
                    self.match(MySQLParser.TEMPORARY_SYMBOL)
                    self.state = 4589
                    localctx.object_ = self.match(MySQLParser.TABLES_SYMBOL)

                elif la_ == 2:
                    self.state = 4590
                    localctx.object_ = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==483 or _la==572 or _la==618 or _la==636):
                        localctx.object_ = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4593
                self.match(MySQLParser.LOCK_SYMBOL)
                self.state = 4594
                self.match(MySQLParser.TABLES_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4595
                self.match(MySQLParser.REPLICATION_SYMBOL)
                self.state = 4596
                localctx.object_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==65 or _la==514):
                    localctx.object_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4597
                self.match(MySQLParser.SHOW_SYMBOL)
                self.state = 4598
                self.match(MySQLParser.VIEW_SYMBOL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4599
                self.match(MySQLParser.ALTER_SYMBOL)
                self.state = 4601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
                if la_ == 1:
                    self.state = 4600
                    self.match(MySQLParser.ROUTINE_SYMBOL)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4603
                if not serverVersion > 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion > 80000")
                self.state = 4604
                _la = self._input.LA(1)
                if not(_la==97 or _la==148):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4605
                self.match(MySQLParser.ROLE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MULT_OPERATOR)
            else:
                return self.getToken(MySQLParser.MULT_OPERATOR, i)

        def DOT_SYMBOL(self):
            return self.getToken(MySQLParser.DOT_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(MySQLParser.SchemaRefContext,0)


        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_grantIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantIdentifier" ):
                listener.enterGrantIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantIdentifier" ):
                listener.exitGrantIdentifier(self)




    def grantIdentifier(self):

        localctx = MySQLParser.GrantIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_grantIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 4624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,552,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4608
                self.match(MySQLParser.MULT_OPERATOR)
                self.state = 4611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==772:
                    self.state = 4609
                    self.match(MySQLParser.DOT_SYMBOL)
                    self.state = 4610
                    self.match(MySQLParser.MULT_OPERATOR)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4613
                self.schemaRef()
                self.state = 4616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==772:
                    self.state = 4614
                    self.match(MySQLParser.DOT_SYMBOL)
                    self.state = 4615
                    self.match(MySQLParser.MULT_OPERATOR)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4618
                self.tableRef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4619
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 4620
                self.schemaRef()
                self.state = 4621
                self.match(MySQLParser.DOT_SYMBOL)
                self.state = 4622
                self.tableRef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requireListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RequireListElementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RequireListElementContext,i)


        def AND_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.AND_SYMBOL)
            else:
                return self.getToken(MySQLParser.AND_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_requireList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireList" ):
                listener.enterRequireList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireList" ):
                listener.exitRequireList(self)




    def requireList(self):

        localctx = MySQLParser.RequireListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_requireList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4626
            self.requireListElement()
            self.state = 4633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,554,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==15:
                        self.state = 4627
                        self.match(MySQLParser.AND_SYMBOL)


                    self.state = 4630
                    self.requireListElement() 
                self.state = 4635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,554,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.element = None # Token

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.CIPHER_SYMBOL, 0)

        def ISSUER_SYMBOL(self):
            return self.getToken(MySQLParser.ISSUER_SYMBOL, 0)

        def SUBJECT_SYMBOL(self):
            return self.getToken(MySQLParser.SUBJECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_requireListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireListElement" ):
                listener.enterRequireListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireListElement" ):
                listener.exitRequireListElement(self)




    def requireListElement(self):

        localctx = MySQLParser.RequireListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_requireListElement)
        try:
            self.state = 4642
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4636
                localctx.element = self.match(MySQLParser.CIPHER_SYMBOL)
                self.state = 4637
                self.textString()
                pass
            elif token in [259]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4638
                localctx.element = self.match(MySQLParser.ISSUER_SYMBOL)
                self.state = 4639
                self.textString()
                pass
            elif token in [559]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4640
                localctx.element = self.match(MySQLParser.SUBJECT_SYMBOL)
                self.state = 4641
                self.textString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def OPTION_SYMBOL(self):
            return self.getToken(MySQLParser.OPTION_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(MySQLParser.GRANT_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def MAX_QUERIES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0)

        def MAX_UPDATES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0)

        def MAX_USER_CONNECTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_grantOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantOption" ):
                listener.enterGrantOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantOption" ):
                listener.exitGrantOption(self)




    def grantOption(self):

        localctx = MySQLParser.GrantOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_grantOption)
        try:
            self.state = 4654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [215]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4644
                localctx.option = self.match(MySQLParser.GRANT_SYMBOL)
                self.state = 4645
                self.match(MySQLParser.OPTION_SYMBOL)
                pass
            elif token in [322]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4646
                localctx.option = self.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL)
                self.state = 4647
                self.ulong_number()
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4648
                localctx.option = self.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL)
                self.state = 4649
                self.ulong_number()
                pass
            elif token in [321]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4650
                localctx.option = self.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL)
                self.state = 4651
                self.ulong_number()
                pass
            elif token in [328]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4652
                localctx.option = self.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL)
                self.state = 4653
                self.ulong_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def roleList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoleListContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoleListContext,i)


        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def EXCEPT_SYMBOL(self):
            return self.getToken(MySQLParser.EXCEPT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_setRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)




    def setRole(self):

        localctx = MySQLParser.SetRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_setRole)
        self._la = 0 # Token type
        try:
            self.state = 4679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4656
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 4657
                self.match(MySQLParser.ROLE_SYMBOL)
                self.state = 4658
                self.roleList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4659
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 4660
                self.match(MySQLParser.ROLE_SYMBOL)
                self.state = 4661
                _la = self._input.LA(1)
                if not(_la==128 or _la==369):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4662
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 4663
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 4664
                self.match(MySQLParser.ROLE_SYMBOL)
                self.state = 4668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
                if la_ == 1:
                    self.state = 4665
                    self.roleList()
                    pass

                elif la_ == 2:
                    self.state = 4666
                    self.match(MySQLParser.NONE_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 4667
                    self.match(MySQLParser.ALL_SYMBOL)
                    pass


                self.state = 4670
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4671
                self.roleList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4672
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 4673
                self.match(MySQLParser.ROLE_SYMBOL)
                self.state = 4674
                self.match(MySQLParser.ALL_SYMBOL)
                self.state = 4677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==663:
                    self.state = 4675
                    self.match(MySQLParser.EXCEPT_SYMBOL)
                    self.state = 4676
                    self.roleList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def role(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RoleContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RoleContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_roleList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleList" ):
                listener.enterRoleList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleList" ):
                listener.exitRoleList(self)




    def roleList(self):

        localctx = MySQLParser.RoleListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_roleList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4681
            self.role()
            self.state = 4686
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,560,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4682
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4683
                    self.role() 
                self.state = 4688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,560,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleIdentifierOrText(self):
            return self.getTypedRuleContext(MySQLParser.RoleIdentifierOrTextContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(MySQLParser.AT_TEXT_SUFFIX, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole" ):
                listener.enterRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole" ):
                listener.exitRole(self)




    def role(self):

        localctx = MySQLParser.RoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4689
            self.roleIdentifierOrText()
            self.state = 4693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
            if la_ == 1:
                self.state = 4690
                self.match(MySQLParser.AT_SIGN_SYMBOL)
                self.state = 4691
                self.textOrIdentifier()

            elif la_ == 2:
                self.state = 4692
                self.match(MySQLParser.AT_TEXT_SUFFIX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAdministrationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def tableRefList(self):
            return self.getTypedRuleContext(MySQLParser.TableRefListContext,0)


        def ANALYZE_SYMBOL(self):
            return self.getToken(MySQLParser.ANALYZE_SYMBOL, 0)

        def noWriteToBinLog(self):
            return self.getTypedRuleContext(MySQLParser.NoWriteToBinLogContext,0)


        def histogram(self):
            return self.getTypedRuleContext(MySQLParser.HistogramContext,0)


        def CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.CHECK_SYMBOL, 0)

        def checkOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CheckOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CheckOptionContext,i)


        def CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.CHECKSUM_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def OPTIMIZE_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0)

        def REPAIR_SYMBOL(self):
            return self.getToken(MySQLParser.REPAIR_SYMBOL, 0)

        def repairType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.RepairTypeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.RepairTypeContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableAdministrationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAdministrationStatement" ):
                listener.enterTableAdministrationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAdministrationStatement" ):
                listener.exitTableAdministrationStatement(self)




    def tableAdministrationStatement(self):

        localctx = MySQLParser.TableAdministrationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_tableAdministrationStatement)
        self._la = 0 # Token type
        try:
            self.state = 4738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4695
                localctx.type_ = self.match(MySQLParser.ANALYZE_SYMBOL)
                self.state = 4697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284 or _la==375:
                    self.state = 4696
                    self.noWriteToBinLog()


                self.state = 4699
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4700
                self.tableRefList()
                self.state = 4703
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
                if la_ == 1:
                    self.state = 4701
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 4702
                    self.histogram()


                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4705
                localctx.type_ = self.match(MySQLParser.CHECK_SYMBOL)
                self.state = 4706
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4707
                self.tableRefList()
                self.state = 4711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==56 or (((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & 1048593) != 0 or _la==333 or _la==431:
                    self.state = 4708
                    self.checkOption()
                    self.state = 4713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4714
                localctx.type_ = self.match(MySQLParser.CHECKSUM_SYMBOL)
                self.state = 4715
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4716
                self.tableRefList()
                self.state = 4718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180 or _la==431:
                    self.state = 4717
                    _la = self._input.LA(1)
                    if not(_la==180 or _la==431):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [388]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4720
                localctx.type_ = self.match(MySQLParser.OPTIMIZE_SYMBOL)
                self.state = 4722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284 or _la==375:
                    self.state = 4721
                    self.noWriteToBinLog()


                self.state = 4724
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4725
                self.tableRefList()
                pass
            elif token in [455]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4726
                localctx.type_ = self.match(MySQLParser.REPAIR_SYMBOL)
                self.state = 4728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284 or _la==375:
                    self.state = 4727
                    self.noWriteToBinLog()


                self.state = 4730
                self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4731
                self.tableRefList()
                self.state = 4735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==180 or _la==431 or _la==619:
                    self.state = 4732
                    self.repairType()
                    self.state = 4737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HistogramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def HISTOGRAM_SYMBOL(self):
            return self.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def BUCKETS_SYMBOL(self):
            return self.getToken(MySQLParser.BUCKETS_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_histogram

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHistogram" ):
                listener.enterHistogram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHistogram" ):
                listener.exitHistogram(self)




    def histogram(self):

        localctx = MySQLParser.HistogramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_histogram)
        self._la = 0 # Token type
        try:
            self.state = 4753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [614]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4740
                self.match(MySQLParser.UPDATE_SYMBOL)
                self.state = 4741
                self.match(MySQLParser.HISTOGRAM_SYMBOL)
                self.state = 4742
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4743
                self.identifierList()
                self.state = 4747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==645:
                    self.state = 4744
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 4745
                    self.match(MySQLParser.INT_NUMBER)
                    self.state = 4746
                    self.match(MySQLParser.BUCKETS_SYMBOL)


                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4749
                self.match(MySQLParser.DROP_SYMBOL)
                self.state = 4750
                self.match(MySQLParser.HISTOGRAM_SYMBOL)
                self.state = 4751
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 4752
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def UPGRADE_SYMBOL(self):
            return self.getToken(MySQLParser.UPGRADE_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def FAST_SYMBOL(self):
            return self.getToken(MySQLParser.FAST_SYMBOL, 0)

        def MEDIUM_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUM_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def CHANGED_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_checkOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckOption" ):
                listener.enterCheckOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckOption" ):
                listener.exitCheckOption(self)




    def checkOption(self):

        localctx = MySQLParser.CheckOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_checkOption)
        self._la = 0 # Token type
        try:
            self.state = 4758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [200]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4755
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 4756
                self.match(MySQLParser.UPGRADE_SYMBOL)
                pass
            elif token in [56, 180, 184, 333, 431]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4757
                _la = self._input.LA(1)
                if not(_la==56 or _la==180 or _la==184 or _la==333 or _la==431):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepairTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def USE_FRM_SYMBOL(self):
            return self.getToken(MySQLParser.USE_FRM_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_repairType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairType" ):
                listener.enterRepairType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairType" ):
                listener.exitRepairType(self)




    def repairType(self):

        localctx = MySQLParser.RepairTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_repairType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4760
            _la = self._input.LA(1)
            if not(_la==180 or _la==431 or _la==619):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallUninstallStatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.action = None # Token
            self.type_ = None # Token

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def SONAME_SYMBOL(self):
            return self.getToken(MySQLParser.SONAME_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def INSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.INSTALL_SYMBOL, 0)

        def PLUGIN_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_SYMBOL, 0)

        def textStringLiteralList(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralListContext,0)


        def COMPONENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPONENT_SYMBOL, 0)

        def pluginRef(self):
            return self.getTypedRuleContext(MySQLParser.PluginRefContext,0)


        def UNINSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.UNINSTALL_SYMBOL, 0)

        def componentRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ComponentRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ComponentRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_installUninstallStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallUninstallStatment" ):
                listener.enterInstallUninstallStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallUninstallStatment" ):
                listener.exitInstallUninstallStatment(self)




    def installUninstallStatment(self):

        localctx = MySQLParser.InstallUninstallStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_installUninstallStatment)
        self._la = 0 # Token type
        try:
            self.state = 4784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4762
                localctx.action = self.match(MySQLParser.INSTALL_SYMBOL)
                self.state = 4763
                localctx.type_ = self.match(MySQLParser.PLUGIN_SYMBOL)
                self.state = 4764
                self.identifier()
                self.state = 4765
                self.match(MySQLParser.SONAME_SYMBOL)
                self.state = 4766
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4768
                localctx.action = self.match(MySQLParser.INSTALL_SYMBOL)
                self.state = 4769
                localctx.type_ = self.match(MySQLParser.COMPONENT_SYMBOL)
                self.state = 4770
                self.textStringLiteralList()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4771
                localctx.action = self.match(MySQLParser.UNINSTALL_SYMBOL)
                self.state = 4772
                localctx.type_ = self.match(MySQLParser.PLUGIN_SYMBOL)
                self.state = 4773
                self.pluginRef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4774
                localctx.action = self.match(MySQLParser.UNINSTALL_SYMBOL)
                self.state = 4775
                localctx.type_ = self.match(MySQLParser.COMPONENT_SYMBOL)
                self.state = 4776
                self.componentRef()
                self.state = 4781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 4777
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4778
                    self.componentRef()
                    self.state = 4783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def startOptionValueList(self):
            return self.getTypedRuleContext(MySQLParser.StartOptionValueListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)




    def setStatement(self):

        localctx = MySQLParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_setStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4786
            self.match(MySQLParser.SET_SYMBOL)
            self.state = 4787
            self.startOptionValueList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartOptionValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionValueNoOptionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionValueNoOptionTypeContext,0)


        def optionValueListContinued(self):
            return self.getTypedRuleContext(MySQLParser.OptionValueListContinuedContext,0)


        def TRANSACTION_SYMBOL(self):
            return self.getToken(MySQLParser.TRANSACTION_SYMBOL, 0)

        def transactionCharacteristics(self):
            return self.getTypedRuleContext(MySQLParser.TransactionCharacteristicsContext,0)


        def optionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionTypeContext,0)


        def startOptionValueListFollowingOptionType(self):
            return self.getTypedRuleContext(MySQLParser.StartOptionValueListFollowingOptionTypeContext,0)


        def PASSWORD_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.PASSWORD_SYMBOL)
            else:
                return self.getToken(MySQLParser.PASSWORD_SYMBOL, i)

        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def OLD_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def replacePassword(self):
            return self.getTypedRuleContext(MySQLParser.ReplacePasswordContext,0)


        def retainCurrentPassword(self):
            return self.getTypedRuleContext(MySQLParser.RetainCurrentPasswordContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MySQLParser.TO_SYMBOL, 0)

        def RANDOM_SYMBOL(self):
            return self.getToken(MySQLParser.RANDOM_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_startOptionValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartOptionValueList" ):
                listener.enterStartOptionValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartOptionValueList" ):
                listener.exitStartOptionValueList(self)




    def startOptionValueList(self):

        localctx = MySQLParser.StartOptionValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_startOptionValueList)
        self._la = 0 # Token type
        try:
            self.state = 4845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4789
                self.optionValueNoOptionType()
                self.state = 4790
                self.optionValueListContinued()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4792
                self.match(MySQLParser.TRANSACTION_SYMBOL)
                self.state = 4793
                self.transactionCharacteristics()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4794
                self.optionType()
                self.state = 4795
                self.startOptionValueListFollowingOptionType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4797
                self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 4800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200:
                    self.state = 4798
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 4799
                    self.user()


                self.state = 4802
                self.equal()
                self.state = 4829
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
                if la_ == 1:
                    self.state = 4803
                    self.textString()
                    self.state = 4805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==458:
                        self.state = 4804
                        self.replacePassword()


                    self.state = 4808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==727:
                        self.state = 4807
                        self.retainCurrentPassword()


                    pass

                elif la_ == 2:
                    self.state = 4810
                    self.textString()
                    self.state = 4812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==458:
                        self.state = 4811
                        self.replacePassword()


                    self.state = 4815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==727:
                        self.state = 4814
                        self.retainCurrentPassword()


                    pass

                elif la_ == 3:
                    self.state = 4817
                    if not serverVersion < 50706:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 50706")
                    self.state = 4818
                    self.match(MySQLParser.OLD_PASSWORD_SYMBOL)
                    self.state = 4819
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 4820
                    self.textString()
                    self.state = 4821
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 4823
                    if not serverVersion < 80014:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 80014")
                    self.state = 4824
                    self.match(MySQLParser.PASSWORD_SYMBOL)
                    self.state = 4825
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 4826
                    self.textString()
                    self.state = 4827
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4831
                if not serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80018")
                self.state = 4832
                self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 4835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200:
                    self.state = 4833
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 4834
                    self.user()


                self.state = 4837
                self.match(MySQLParser.TO_SYMBOL)
                self.state = 4838
                self.match(MySQLParser.RANDOM_SYMBOL)
                self.state = 4840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==458:
                    self.state = 4839
                    self.replacePassword()


                self.state = 4843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==727:
                    self.state = 4842
                    self.retainCurrentPassword()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionCharacteristicsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionAccessMode(self):
            return self.getTypedRuleContext(MySQLParser.TransactionAccessModeContext,0)


        def isolationLevel(self):
            return self.getTypedRuleContext(MySQLParser.IsolationLevelContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_transactionCharacteristics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionCharacteristics" ):
                listener.enterTransactionCharacteristics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionCharacteristics" ):
                listener.exitTransactionCharacteristics(self)




    def transactionCharacteristics(self):

        localctx = MySQLParser.TransactionCharacteristicsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_transactionCharacteristics)
        self._la = 0 # Token type
        try:
            self.state = 4856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [435]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4847
                self.transactionAccessMode()
                self.state = 4849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 4848
                    self.isolationLevel()


                pass
            elif token in [258]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4851
                self.isolationLevel()
                self.state = 4854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 4852
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 4853
                    self.transactionAccessMode()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionAccessModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.WRITE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.ONLY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_transactionAccessMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)




    def transactionAccessMode(self):

        localctx = MySQLParser.TransactionAccessModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_transactionAccessMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4858
            self.match(MySQLParser.READ_SYMBOL)
            self.state = 4859
            _la = self._input.LA(1)
            if not(_la==386 or _la==649):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsolationLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION_SYMBOL(self):
            return self.getToken(MySQLParser.ISOLATION_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.LEVEL_SYMBOL, 0)

        def REPEATABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPEATABLE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def SERIALIZABLE_SYMBOL(self):
            return self.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0)

        def COMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.COMMITTED_SYMBOL, 0)

        def UNCOMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_isolationLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)




    def isolationLevel(self):

        localctx = MySQLParser.IsolationLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_isolationLevel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4861
            self.match(MySQLParser.ISOLATION_SYMBOL)
            self.state = 4862
            self.match(MySQLParser.LEVEL_SYMBOL)
            self.state = 4868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [456]:
                self.state = 4863
                self.match(MySQLParser.REPEATABLE_SYMBOL)
                self.state = 4864
                self.match(MySQLParser.READ_SYMBOL)
                pass
            elif token in [435]:
                self.state = 4865
                self.match(MySQLParser.READ_SYMBOL)
                self.state = 4866
                _la = self._input.LA(1)
                if not(_la==76 or _la==601):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [500]:
                self.state = 4867
                self.match(MySQLParser.SERIALIZABLE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueListContinuedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def optionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.OptionValueContext)
            else:
                return self.getTypedRuleContext(MySQLParser.OptionValueContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_optionValueListContinued

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValueListContinued" ):
                listener.enterOptionValueListContinued(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValueListContinued" ):
                listener.exitOptionValueListContinued(self)




    def optionValueListContinued(self):

        localctx = MySQLParser.OptionValueListContinuedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_optionValueListContinued)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 4870
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 4871
                self.optionValue()
                self.state = 4876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueNoOptionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def internalVariableName(self):
            return self.getTypedRuleContext(MySQLParser.InternalVariableNameContext,0)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def setExprOrDefault(self):
            return self.getTypedRuleContext(MySQLParser.SetExprOrDefaultContext,0)


        def charsetClause(self):
            return self.getTypedRuleContext(MySQLParser.CharsetClauseContext,0)


        def userVariable(self):
            return self.getTypedRuleContext(MySQLParser.UserVariableContext,0)


        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def setSystemVariable(self):
            return self.getTypedRuleContext(MySQLParser.SetSystemVariableContext,0)


        def NAMES_SYMBOL(self):
            return self.getToken(MySQLParser.NAMES_SYMBOL, 0)

        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_optionValueNoOptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValueNoOptionType" ):
                listener.enterOptionValueNoOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValueNoOptionType" ):
                listener.exitOptionValueNoOptionType(self)




    def optionValueNoOptionType(self):

        localctx = MySQLParser.OptionValueNoOptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_optionValueNoOptionType)
        self._la = 0 # Token type
        try:
            self.state = 4902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4877
                self.internalVariableName()
                self.state = 4878
                self.equal()
                self.state = 4879
                self.setExprOrDefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4881
                self.charsetClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4882
                self.userVariable()
                self.state = 4883
                self.equal()
                self.state = 4884
                self.expr(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4886
                self.setSystemVariable()
                self.state = 4887
                self.equal()
                self.state = 4888
                self.setExprOrDefault()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4890
                self.match(MySQLParser.NAMES_SYMBOL)
                self.state = 4900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,591,self._ctx)
                if la_ == 1:
                    self.state = 4891
                    self.equal()
                    self.state = 4892
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4894
                    self.charsetName()
                    self.state = 4896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==69:
                        self.state = 4895
                        self.collate()


                    pass

                elif la_ == 3:
                    self.state = 4898
                    if not serverVersion >= 80011:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80011")
                    self.state = 4899
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionTypeContext,0)


        def internalVariableName(self):
            return self.getTypedRuleContext(MySQLParser.InternalVariableNameContext,0)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def setExprOrDefault(self):
            return self.getTypedRuleContext(MySQLParser.SetExprOrDefaultContext,0)


        def optionValueNoOptionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionValueNoOptionTypeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_optionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValue" ):
                listener.enterOptionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValue" ):
                listener.exitOptionValue(self)




    def optionValue(self):

        localctx = MySQLParser.OptionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_optionValue)
        try:
            self.state = 4910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4904
                self.optionType()
                self.state = 4905
                self.internalVariableName()
                self.state = 4906
                self.equal()
                self.state = 4907
                self.setExprOrDefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4909
                self.optionValueNoOptionType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetSystemVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0)

        def internalVariableName(self):
            return self.getTypedRuleContext(MySQLParser.InternalVariableNameContext,0)


        def setVarIdentType(self):
            return self.getTypedRuleContext(MySQLParser.SetVarIdentTypeContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_setSystemVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSystemVariable" ):
                listener.enterSetSystemVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSystemVariable" ):
                listener.exitSetSystemVariable(self)




    def setSystemVariable(self):

        localctx = MySQLParser.SetSystemVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_setSystemVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4912
            self.match(MySQLParser.AT_AT_SIGN_SYMBOL)
            self.state = 4914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
            if la_ == 1:
                self.state = 4913
                self.setVarIdentType()


            self.state = 4916
            self.internalVariableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartOptionValueListFollowingOptionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionValueFollowingOptionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionValueFollowingOptionTypeContext,0)


        def optionValueListContinued(self):
            return self.getTypedRuleContext(MySQLParser.OptionValueListContinuedContext,0)


        def TRANSACTION_SYMBOL(self):
            return self.getToken(MySQLParser.TRANSACTION_SYMBOL, 0)

        def transactionCharacteristics(self):
            return self.getTypedRuleContext(MySQLParser.TransactionCharacteristicsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_startOptionValueListFollowingOptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartOptionValueListFollowingOptionType" ):
                listener.enterStartOptionValueListFollowingOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartOptionValueListFollowingOptionType" ):
                listener.exitStartOptionValueListFollowingOptionType(self)




    def startOptionValueListFollowingOptionType(self):

        localctx = MySQLParser.StartOptionValueListFollowingOptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_startOptionValueListFollowingOptionType)
        try:
            self.state = 4923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4918
                self.optionValueFollowingOptionType()
                self.state = 4919
                self.optionValueListContinued()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4921
                self.match(MySQLParser.TRANSACTION_SYMBOL)
                self.state = 4922
                self.transactionCharacteristics()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueFollowingOptionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def internalVariableName(self):
            return self.getTypedRuleContext(MySQLParser.InternalVariableNameContext,0)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def setExprOrDefault(self):
            return self.getTypedRuleContext(MySQLParser.SetExprOrDefaultContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_optionValueFollowingOptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValueFollowingOptionType" ):
                listener.enterOptionValueFollowingOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValueFollowingOptionType" ):
                listener.exitOptionValueFollowingOptionType(self)




    def optionValueFollowingOptionType(self):

        localctx = MySQLParser.OptionValueFollowingOptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_optionValueFollowingOptionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4925
            self.internalVariableName()
            self.state = 4926
            self.equal()
            self.state = 4927
            self.setExprOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExprOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(MySQLParser.SYSTEM_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_setExprOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetExprOrDefault" ):
                listener.enterSetExprOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetExprOrDefault" ):
                listener.exitSetExprOrDefault(self)




    def setExprOrDefault(self):

        localctx = MySQLParser.SetExprOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_setExprOrDefault)
        self._la = 0 # Token type
        try:
            self.state = 4933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4929
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4930
                _la = self._input.LA(1)
                if not(_la==10 or _la==32 or _la==128 or _la==383):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4931
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 4932
                _la = self._input.LA(1)
                if not(_la==487 or _la==710):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token
            self.object_ = None # Token

        def SHOW_SYMBOL(self):
            return self.getToken(MySQLParser.SHOW_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MySQLParser.STATUS_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def EVENTS_SYMBOL(self):
            return self.getToken(MySQLParser.EVENTS_SYMBOL, 0)

        def fromOrIn(self):
            return self.getTypedRuleContext(MySQLParser.FromOrInContext,0)


        def COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.COUNT_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def charset(self):
            return self.getTypedRuleContext(MySQLParser.CharsetContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def userList(self):
            return self.getTypedRuleContext(MySQLParser.UserListContext,0)


        def CODE_SYMBOL(self):
            return self.getToken(MySQLParser.CODE_SYMBOL, 0)

        def procedureRef(self):
            return self.getTypedRuleContext(MySQLParser.ProcedureRefContext,0)


        def functionRef(self):
            return self.getTypedRuleContext(MySQLParser.FunctionRefContext,0)


        def AUTHORS_SYMBOL(self):
            return self.getToken(MySQLParser.AUTHORS_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASES_SYMBOL, 0)

        def TRIGGERS_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGERS_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def OPEN_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_SYMBOL, 0)

        def PLUGINS_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGINS_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def MUTEX_SYMBOL(self):
            return self.getToken(MySQLParser.MUTEX_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(MySQLParser.LOGS_SYMBOL, 0)

        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def ENGINES_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINES_SYMBOL, 0)

        def WARNINGS_SYMBOL(self):
            return self.getToken(MySQLParser.WARNINGS_SYMBOL, 0)

        def ERRORS_SYMBOL(self):
            return self.getToken(MySQLParser.ERRORS_SYMBOL, 0)

        def PROFILES_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILES_SYMBOL, 0)

        def PROFILE_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILE_SYMBOL, 0)

        def PROCESSLIST_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATION_SYMBOL, 0)

        def CONTRIBUTORS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MySQLParser.GRANTS_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MySQLParser.PROCEDURE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def engineRef(self):
            return self.getTypedRuleContext(MySQLParser.EngineRefContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(MySQLParser.HOSTS_SYMBOL, 0)

        def nonBlocking(self):
            return self.getTypedRuleContext(MySQLParser.NonBlockingContext,0)


        def BINLOG_SYMBOL(self):
            return self.getToken(MySQLParser.BINLOG_SYMBOL, 0)

        def RELAYLOG_SYMBOL(self):
            return self.getToken(MySQLParser.RELAYLOG_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def INDEXES_SYMBOL(self):
            return self.getToken(MySQLParser.INDEXES_SYMBOL, 0)

        def KEYS_SYMBOL(self):
            return self.getToken(MySQLParser.KEYS_SYMBOL, 0)

        def VARIABLES_SYMBOL(self):
            return self.getToken(MySQLParser.VARIABLES_SYMBOL, 0)

        def schemaRef(self):
            return self.getTypedRuleContext(MySQLParser.SchemaRefContext,0)


        def eventRef(self):
            return self.getTypedRuleContext(MySQLParser.EventRefContext,0)


        def triggerRef(self):
            return self.getTypedRuleContext(MySQLParser.TriggerRefContext,0)


        def viewRef(self):
            return self.getTypedRuleContext(MySQLParser.ViewRefContext,0)


        def likeOrWhere(self):
            return self.getTypedRuleContext(MySQLParser.LikeOrWhereContext,0)


        def showCommandType(self):
            return self.getTypedRuleContext(MySQLParser.ShowCommandTypeContext,0)


        def inDb(self):
            return self.getTypedRuleContext(MySQLParser.InDbContext,0)


        def FULL_SYMBOL(self):
            return self.getToken(MySQLParser.FULL_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySQLParser.LimitClauseContext,0)


        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def profileType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ProfileTypeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ProfileTypeContext,i)


        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def optionType(self):
            return self.getTypedRuleContext(MySQLParser.OptionTypeContext,0)


        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def TRIGGER_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGER_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySQLParser.IfNotExistsContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_showStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatement" ):
                listener.enterShowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatement" ):
                listener.exitShowStatement(self)




    def showStatement(self):

        localctx = MySQLParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4935
            self.match(MySQLParser.SHOW_SYMBOL)
            self.state = 5155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,640,self._ctx)
            if la_ == 1:
                self.state = 4936
                if not serverVersion < 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50700")
                self.state = 4937
                localctx.value = self.match(MySQLParser.AUTHORS_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 4938
                localctx.value = self.match(MySQLParser.DATABASES_SYMBOL)
                self.state = 4940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 4939
                    self.likeOrWhere()


                pass

            elif la_ == 3:
                self.state = 4943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,598,self._ctx)
                if la_ == 1:
                    self.state = 4942
                    self.showCommandType()


                self.state = 4945
                localctx.value = self.match(MySQLParser.TABLES_SYMBOL)
                self.state = 4947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203 or _la==251:
                    self.state = 4946
                    self.inDb()


                self.state = 4950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 4949
                    self.likeOrWhere()


                pass

            elif la_ == 4:
                self.state = 4953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==204:
                    self.state = 4952
                    self.match(MySQLParser.FULL_SYMBOL)


                self.state = 4955
                localctx.value = self.match(MySQLParser.TRIGGERS_SYMBOL)
                self.state = 4957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203 or _la==251:
                    self.state = 4956
                    self.inDb()


                self.state = 4960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 4959
                    self.likeOrWhere()


                pass

            elif la_ == 5:
                self.state = 4962
                localctx.value = self.match(MySQLParser.EVENTS_SYMBOL)
                self.state = 4964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203 or _la==251:
                    self.state = 4963
                    self.inDb()


                self.state = 4967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 4966
                    self.likeOrWhere()


                pass

            elif la_ == 6:
                self.state = 4969
                localctx.value = self.match(MySQLParser.TABLE_SYMBOL)
                self.state = 4970
                self.match(MySQLParser.STATUS_SYMBOL)
                self.state = 4972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203 or _la==251:
                    self.state = 4971
                    self.inDb()


                self.state = 4975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 4974
                    self.likeOrWhere()


                pass

            elif la_ == 7:
                self.state = 4977
                localctx.value = self.match(MySQLParser.OPEN_SYMBOL)
                self.state = 4978
                self.match(MySQLParser.TABLES_SYMBOL)
                self.state = 4980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203 or _la==251:
                    self.state = 4979
                    self.inDb()


                self.state = 4983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 4982
                    self.likeOrWhere()


                pass

            elif la_ == 8:
                self.state = 4985
                localctx.value = self.match(MySQLParser.PLUGINS_SYMBOL)
                pass

            elif la_ == 9:
                self.state = 4986
                localctx.value = self.match(MySQLParser.ENGINE_SYMBOL)
                self.state = 4989
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,610,self._ctx)
                if la_ == 1:
                    self.state = 4987
                    self.engineRef()
                    pass

                elif la_ == 2:
                    self.state = 4988
                    self.match(MySQLParser.ALL_SYMBOL)
                    pass


                self.state = 4991
                _la = self._input.LA(1)
                if not(_la==289 or _la==354 or _la==547):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                self.state = 4993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,611,self._ctx)
                if la_ == 1:
                    self.state = 4992
                    self.showCommandType()


                self.state = 4995
                localctx.value = self.match(MySQLParser.COLUMNS_SYMBOL)
                self.state = 4996
                _la = self._input.LA(1)
                if not(_la==203 or _la==251):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4997
                self.tableRef()
                self.state = 4999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203 or _la==251:
                    self.state = 4998
                    self.inDb()


                self.state = 5002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 5001
                    self.likeOrWhere()


                pass

            elif la_ == 11:
                self.state = 5004
                _la = self._input.LA(1)
                if not(_la==32 or _la==316):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5005
                localctx.value = self.match(MySQLParser.LOGS_SYMBOL)
                pass

            elif la_ == 12:
                self.state = 5006
                localctx.value = self.match(MySQLParser.SLAVE_SYMBOL)
                self.state = 5013
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [225]:
                    self.state = 5007
                    self.match(MySQLParser.HOSTS_SYMBOL)
                    pass
                elif token in [547]:
                    self.state = 5008
                    self.match(MySQLParser.STATUS_SYMBOL)
                    self.state = 5009
                    self.nonBlocking()
                    self.state = 5011
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,614,self._ctx)
                    if la_ == 1:
                        self.state = 5010
                        self.channel()


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 5015
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==33 or _la==446):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5016
                self.match(MySQLParser.EVENTS_SYMBOL)
                self.state = 5019
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,616,self._ctx)
                if la_ == 1:
                    self.state = 5017
                    self.match(MySQLParser.IN_SYMBOL)
                    self.state = 5018
                    self.textString()


                self.state = 5023
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,617,self._ctx)
                if la_ == 1:
                    self.state = 5021
                    self.match(MySQLParser.FROM_SYMBOL)
                    self.state = 5022
                    self.ulonglong_number()


                self.state = 5026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,618,self._ctx)
                if la_ == 1:
                    self.state = 5025
                    self.limitClause()


                self.state = 5029
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,619,self._ctx)
                if la_ == 1:
                    self.state = 5028
                    self.channel()


                pass

            elif la_ == 14:
                self.state = 5033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
                if la_ == 1:
                    self.state = 5031
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5032
                    self.match(MySQLParser.EXTENDED_SYMBOL)


                self.state = 5035
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 235)) & ~0x3f) == 0 and ((1 << (_la - 235)) & 268435459) != 0):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5036
                self.fromOrIn()
                self.state = 5037
                self.tableRef()
                self.state = 5039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203 or _la==251:
                    self.state = 5038
                    self.inDb()


                self.state = 5042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==643:
                    self.state = 5041
                    self.whereClause()


                pass

            elif la_ == 15:
                self.state = 5045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==553:
                    self.state = 5044
                    self.match(MySQLParser.STORAGE_SYMBOL)


                self.state = 5047
                localctx.value = self.match(MySQLParser.ENGINES_SYMBOL)
                pass

            elif la_ == 16:
                self.state = 5048
                self.match(MySQLParser.COUNT_SYMBOL)
                self.state = 5049
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5050
                self.match(MySQLParser.MULT_OPERATOR)
                self.state = 5051
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5052
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==166 or _la==639):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 17:
                self.state = 5053
                localctx.value = self.match(MySQLParser.WARNINGS_SYMBOL)
                self.state = 5055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==276:
                    self.state = 5054
                    self.limitClause()


                pass

            elif la_ == 18:
                self.state = 5057
                localctx.value = self.match(MySQLParser.ERRORS_SYMBOL)
                self.state = 5059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==276:
                    self.state = 5058
                    self.limitClause()


                pass

            elif la_ == 19:
                self.state = 5061
                localctx.value = self.match(MySQLParser.PROFILES_SYMBOL)
                pass

            elif la_ == 20:
                self.state = 5062
                localctx.value = self.match(MySQLParser.PROFILE_SYMBOL)
                self.state = 5071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10 or _la==40 or _la==91 or _la==96 or _la==256 or _la==334 or _la==400 or _la==522 or _la==567:
                    self.state = 5063
                    self.profileType()
                    self.state = 5068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==773:
                        self.state = 5064
                        self.match(MySQLParser.COMMA_SYMBOL)
                        self.state = 5065
                        self.profileType()
                        self.state = 5070
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200:
                    self.state = 5073
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 5074
                    self.match(MySQLParser.QUERY_SYMBOL)
                    self.state = 5075
                    self.match(MySQLParser.INT_NUMBER)


                self.state = 5079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==276:
                    self.state = 5078
                    self.limitClause()


                pass

            elif la_ == 21:
                self.state = 5082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214 or _la==284 or _la==502 or _la==658 or _la==673:
                    self.state = 5081
                    self.optionType()


                self.state = 5084
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==547 or _la==631):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 5085
                    self.likeOrWhere()


                pass

            elif la_ == 22:
                self.state = 5089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==204:
                    self.state = 5088
                    self.match(MySQLParser.FULL_SYMBOL)


                self.state = 5091
                localctx.value = self.match(MySQLParser.PROCESSLIST_SYMBOL)
                pass

            elif la_ == 23:
                self.state = 5092
                self.charset()
                self.state = 5094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 5093
                    self.likeOrWhere()


                pass

            elif la_ == 24:
                self.state = 5096
                localctx.value = self.match(MySQLParser.COLLATION_SYMBOL)
                self.state = 5098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 5097
                    self.likeOrWhere()


                pass

            elif la_ == 25:
                self.state = 5100
                if not serverVersion < 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50700")
                self.state = 5101
                localctx.value = self.match(MySQLParser.CONTRIBUTORS_SYMBOL)
                pass

            elif la_ == 26:
                self.state = 5102
                localctx.value = self.match(MySQLParser.PRIVILEGES_SYMBOL)
                pass

            elif la_ == 27:
                self.state = 5103
                localctx.value = self.match(MySQLParser.GRANTS_SYMBOL)
                self.state = 5106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200:
                    self.state = 5104
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 5105
                    self.user()


                pass

            elif la_ == 28:
                self.state = 5108
                localctx.value = self.match(MySQLParser.GRANTS_SYMBOL)
                self.state = 5109
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 5110
                self.user()
                self.state = 5111
                self.match(MySQLParser.USING_SYMBOL)
                self.state = 5112
                self.userList()
                pass

            elif la_ == 29:
                self.state = 5114
                localctx.value = self.match(MySQLParser.MASTER_SYMBOL)
                self.state = 5115
                self.match(MySQLParser.STATUS_SYMBOL)
                pass

            elif la_ == 30:
                self.state = 5116
                localctx.value = self.match(MySQLParser.CREATE_SYMBOL)
                self.state = 5137
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
                if la_ == 1:
                    self.state = 5117
                    localctx.object_ = self.match(MySQLParser.DATABASE_SYMBOL)
                    self.state = 5119
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,636,self._ctx)
                    if la_ == 1:
                        self.state = 5118
                        self.ifNotExists()


                    self.state = 5121
                    self.schemaRef()
                    pass

                elif la_ == 2:
                    self.state = 5122
                    localctx.object_ = self.match(MySQLParser.EVENT_SYMBOL)
                    self.state = 5123
                    self.eventRef()
                    pass

                elif la_ == 3:
                    self.state = 5124
                    localctx.object_ = self.match(MySQLParser.FUNCTION_SYMBOL)
                    self.state = 5125
                    self.functionRef()
                    pass

                elif la_ == 4:
                    self.state = 5126
                    localctx.object_ = self.match(MySQLParser.PROCEDURE_SYMBOL)
                    self.state = 5127
                    self.procedureRef()
                    pass

                elif la_ == 5:
                    self.state = 5128
                    localctx.object_ = self.match(MySQLParser.TABLE_SYMBOL)
                    self.state = 5129
                    self.tableRef()
                    pass

                elif la_ == 6:
                    self.state = 5130
                    localctx.object_ = self.match(MySQLParser.TRIGGER_SYMBOL)
                    self.state = 5131
                    self.triggerRef()
                    pass

                elif la_ == 7:
                    self.state = 5132
                    localctx.object_ = self.match(MySQLParser.VIEW_SYMBOL)
                    self.state = 5133
                    self.viewRef()
                    pass

                elif la_ == 8:
                    self.state = 5134
                    if not serverVersion >= 50704:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 50704")
                    self.state = 5135
                    localctx.object_ = self.match(MySQLParser.USER_SYMBOL)
                    self.state = 5136
                    self.user()
                    pass


                pass

            elif la_ == 31:
                self.state = 5139
                localctx.value = self.match(MySQLParser.PROCEDURE_SYMBOL)
                self.state = 5140
                self.match(MySQLParser.STATUS_SYMBOL)
                self.state = 5142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 5141
                    self.likeOrWhere()


                pass

            elif la_ == 32:
                self.state = 5144
                localctx.value = self.match(MySQLParser.FUNCTION_SYMBOL)
                self.state = 5145
                self.match(MySQLParser.STATUS_SYMBOL)
                self.state = 5147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275 or _la==643:
                    self.state = 5146
                    self.likeOrWhere()


                pass

            elif la_ == 33:
                self.state = 5149
                localctx.value = self.match(MySQLParser.PROCEDURE_SYMBOL)
                self.state = 5150
                self.match(MySQLParser.CODE_SYMBOL)
                self.state = 5151
                self.procedureRef()
                pass

            elif la_ == 34:
                self.state = 5152
                localctx.value = self.match(MySQLParser.FUNCTION_SYMBOL)
                self.state = 5153
                self.match(MySQLParser.CODE_SYMBOL)
                self.state = 5154
                self.functionRef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCommandTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL_SYMBOL(self):
            return self.getToken(MySQLParser.FULL_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_showCommandType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCommandType" ):
                listener.enterShowCommandType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCommandType" ):
                listener.exitShowCommandType(self)




    def showCommandType(self):

        localctx = MySQLParser.ShowCommandTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_showCommandType)
        self._la = 0 # Token type
        try:
            self.state = 5163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5157
                self.match(MySQLParser.FULL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5158
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 5159
                self.match(MySQLParser.EXTENDED_SYMBOL)
                self.state = 5161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==204:
                    self.state = 5160
                    self.match(MySQLParser.FULL_SYMBOL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonBlockingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONBLOCKING_SYMBOL(self):
            return self.getToken(MySQLParser.NONBLOCKING_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_nonBlocking

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonBlocking" ):
                listener.enterNonBlocking(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonBlocking" ):
                listener.exitNonBlocking(self)




    def nonBlocking(self):

        localctx = MySQLParser.NonBlockingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_nonBlocking)
        try:
            self.state = 5170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,644,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5165
                if not serverVersion >= 50700 and serverVersion < 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50700 && serverVersion < 50706")
                self.state = 5167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
                if la_ == 1:
                    self.state = 5166
                    self.match(MySQLParser.NONBLOCKING_SYMBOL)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromOrInContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_fromOrIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromOrIn" ):
                listener.enterFromOrIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromOrIn" ):
                listener.exitFromOrIn(self)




    def fromOrIn(self):

        localctx = MySQLParser.FromOrInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_fromOrIn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5172
            _la = self._input.LA(1)
            if not(_la==203 or _la==251):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InDbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromOrIn(self):
            return self.getTypedRuleContext(MySQLParser.FromOrInContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_inDb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInDb" ):
                listener.enterInDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInDb" ):
                listener.exitInDb(self)




    def inDb(self):

        localctx = MySQLParser.InDbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_inDb)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5174
            self.fromOrIn()
            self.state = 5175
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProfileTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK_SYMBOL(self):
            return self.getToken(MySQLParser.BLOCK_SYMBOL, 0)

        def IO_SYMBOL(self):
            return self.getToken(MySQLParser.IO_SYMBOL, 0)

        def CONTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.CONTEXT_SYMBOL, 0)

        def SWITCHES_SYMBOL(self):
            return self.getToken(MySQLParser.SWITCHES_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MySQLParser.PAGE_SYMBOL, 0)

        def FAULTS_SYMBOL(self):
            return self.getToken(MySQLParser.FAULTS_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def CPU_SYMBOL(self):
            return self.getToken(MySQLParser.CPU_SYMBOL, 0)

        def IPC_SYMBOL(self):
            return self.getToken(MySQLParser.IPC_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(MySQLParser.MEMORY_SYMBOL, 0)

        def SOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.SOURCE_SYMBOL, 0)

        def SWAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SWAPS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_profileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfileType" ):
                listener.enterProfileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfileType" ):
                listener.exitProfileType(self)




    def profileType(self):

        localctx = MySQLParser.ProfileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_profileType)
        self._la = 0 # Token type
        try:
            self.state = 5184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5177
                self.match(MySQLParser.BLOCK_SYMBOL)
                self.state = 5178
                self.match(MySQLParser.IO_SYMBOL)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5179
                self.match(MySQLParser.CONTEXT_SYMBOL)
                self.state = 5180
                self.match(MySQLParser.SWITCHES_SYMBOL)
                pass
            elif token in [400]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5181
                self.match(MySQLParser.PAGE_SYMBOL)
                self.state = 5182
                self.match(MySQLParser.FAULTS_SYMBOL)
                pass
            elif token in [10, 96, 256, 334, 522, 567]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5183
                _la = self._input.LA(1)
                if not(_la==10 or _la==96 or _la==256 or _la==334 or _la==522 or _la==567):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherAdministrativeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def BINLOG_SYMBOL(self):
            return self.getToken(MySQLParser.BINLOG_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def keyCacheListOrParts(self):
            return self.getTypedRuleContext(MySQLParser.KeyCacheListOrPartsContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.CACHE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def FLUSH_SYMBOL(self):
            return self.getToken(MySQLParser.FLUSH_SYMBOL, 0)

        def flushTables(self):
            return self.getTypedRuleContext(MySQLParser.FlushTablesContext,0)


        def flushOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FlushOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FlushOptionContext,i)


        def noWriteToBinLog(self):
            return self.getTypedRuleContext(MySQLParser.NoWriteToBinLogContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def KILL_SYMBOL(self):
            return self.getToken(MySQLParser.KILL_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(MySQLParser.CONNECTION_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def preloadTail(self):
            return self.getTypedRuleContext(MySQLParser.PreloadTailContext,0)


        def LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.LOAD_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_otherAdministrativeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherAdministrativeStatement" ):
                listener.enterOtherAdministrativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherAdministrativeStatement" ):
                listener.exitOtherAdministrativeStatement(self)




    def otherAdministrativeStatement(self):

        localctx = MySQLParser.OtherAdministrativeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_otherAdministrativeStatement)
        self._la = 0 # Token type
        try:
            self.state = 5223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5186
                localctx.type_ = self.match(MySQLParser.BINLOG_SYMBOL)
                self.state = 5187
                self.textLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5188
                localctx.type_ = self.match(MySQLParser.CACHE_SYMBOL)
                self.state = 5189
                self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 5190
                self.keyCacheListOrParts()
                self.state = 5191
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 5194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
                if la_ == 1:
                    self.state = 5192
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 5193
                    self.match(MySQLParser.DEFAULT_SYMBOL)
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5196
                localctx.type_ = self.match(MySQLParser.FLUSH_SYMBOL)
                self.state = 5198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
                if la_ == 1:
                    self.state = 5197
                    self.noWriteToBinLog()


                self.state = 5209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,649,self._ctx)
                if la_ == 1:
                    self.state = 5200
                    self.flushTables()
                    pass

                elif la_ == 2:
                    self.state = 5201
                    self.flushOption()
                    self.state = 5206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==773:
                        self.state = 5202
                        self.match(MySQLParser.COMMA_SYMBOL)
                        self.state = 5203
                        self.flushOption()
                        self.state = 5208
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5211
                localctx.type_ = self.match(MySQLParser.KILL_SYMBOL)
                self.state = 5213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,650,self._ctx)
                if la_ == 1:
                    self.state = 5212
                    _la = self._input.LA(1)
                    if not(_la==84 or _la==430):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5215
                self.expr(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5216
                localctx.type_ = self.match(MySQLParser.LOAD_SYMBOL)
                self.state = 5217
                self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 5218
                self.match(MySQLParser.INTO_SYMBOL)
                self.state = 5219
                self.match(MySQLParser.CACHE_SYMBOL)
                self.state = 5220
                self.preloadTail()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5221
                if not serverVersion >= 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50709")
                self.state = 5222
                localctx.type_ = self.match(MySQLParser.SHUTDOWN_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyCacheListOrPartsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyCacheList(self):
            return self.getTypedRuleContext(MySQLParser.KeyCacheListContext,0)


        def assignToKeycachePartition(self):
            return self.getTypedRuleContext(MySQLParser.AssignToKeycachePartitionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_keyCacheListOrParts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyCacheListOrParts" ):
                listener.enterKeyCacheListOrParts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyCacheListOrParts" ):
                listener.exitKeyCacheListOrParts(self)




    def keyCacheListOrParts(self):

        localctx = MySQLParser.KeyCacheListOrPartsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_keyCacheListOrParts)
        try:
            self.state = 5227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,652,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5225
                self.keyCacheList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5226
                self.assignToKeycachePartition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyCacheListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignToKeycache(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AssignToKeycacheContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AssignToKeycacheContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyCacheList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyCacheList" ):
                listener.enterKeyCacheList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyCacheList" ):
                listener.exitKeyCacheList(self)




    def keyCacheList(self):

        localctx = MySQLParser.KeyCacheListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_keyCacheList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5229
            self.assignToKeycache()
            self.state = 5234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 5230
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5231
                self.assignToKeycache()
                self.state = 5236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignToKeycacheContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def cacheKeyList(self):
            return self.getTypedRuleContext(MySQLParser.CacheKeyListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_assignToKeycache

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignToKeycache" ):
                listener.enterAssignToKeycache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignToKeycache" ):
                listener.exitAssignToKeycache(self)




    def assignToKeycache(self):

        localctx = MySQLParser.AssignToKeycacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_assignToKeycache)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5237
            self.tableRef()
            self.state = 5239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236 or _la==265:
                self.state = 5238
                self.cacheKeyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignToKeycachePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def allOrPartitionNameList(self):
            return self.getTypedRuleContext(MySQLParser.AllOrPartitionNameListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def cacheKeyList(self):
            return self.getTypedRuleContext(MySQLParser.CacheKeyListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_assignToKeycachePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignToKeycachePartition" ):
                listener.enterAssignToKeycachePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignToKeycachePartition" ):
                listener.exitAssignToKeycachePartition(self)




    def assignToKeycachePartition(self):

        localctx = MySQLParser.AssignToKeycachePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_assignToKeycachePartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5241
            self.tableRef()
            self.state = 5242
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 5243
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 5244
            self.allOrPartitionNameList()
            self.state = 5245
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
            self.state = 5247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236 or _la==265:
                self.state = 5246
                self.cacheKeyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CacheKeyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyOrIndex(self):
            return self.getTypedRuleContext(MySQLParser.KeyOrIndexContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def keyUsageList(self):
            return self.getTypedRuleContext(MySQLParser.KeyUsageListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_cacheKeyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheKeyList" ):
                listener.enterCacheKeyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheKeyList" ):
                listener.exitCacheKeyList(self)




    def cacheKeyList(self):

        localctx = MySQLParser.CacheKeyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_cacheKeyList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5249
            self.keyOrIndex()
            self.state = 5250
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 5252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,656,self._ctx)
            if la_ == 1:
                self.state = 5251
                self.keyUsageList()


            self.state = 5254
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyUsageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyUsageElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyUsageElement" ):
                listener.enterKeyUsageElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyUsageElement" ):
                listener.exitKeyUsageElement(self)




    def keyUsageElement(self):

        localctx = MySQLParser.KeyUsageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_keyUsageElement)
        try:
            self.state = 5258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5256
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5257
                self.match(MySQLParser.PRIMARY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyUsageListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyUsageElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.KeyUsageElementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.KeyUsageElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyUsageList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyUsageList" ):
                listener.enterKeyUsageList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyUsageList" ):
                listener.exitKeyUsageList(self)




    def keyUsageList(self):

        localctx = MySQLParser.KeyUsageListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_keyUsageList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5260
            self.keyUsageElement()
            self.state = 5265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 5261
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5262
                self.keyUsageElement()
                self.state = 5267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def DES_KEY_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(MySQLParser.HOSTS_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MySQLParser.STATUS_SYMBOL, 0)

        def USER_RESOURCES_SYMBOL(self):
            return self.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(MySQLParser.LOGS_SYMBOL, 0)

        def logType(self):
            return self.getTypedRuleContext(MySQLParser.LogTypeContext,0)


        def RELAY_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_SYMBOL, 0)

        def channel(self):
            return self.getTypedRuleContext(MySQLParser.ChannelContext,0)


        def CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.CACHE_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def OPTIMIZER_COSTS_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_flushOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushOption" ):
                listener.enterFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushOption" ):
                listener.exitFlushOption(self)




    def flushOption(self):

        localctx = MySQLParser.FlushOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_flushOption)
        self._la = 0 # Token type
        try:
            self.state = 5283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5268
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==136 or _la==225 or _la==421 or _la==547 or _la==617):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32 or (((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & 35184372088837) != 0 or _la==515:
                    self.state = 5269
                    self.logType()


                self.state = 5272
                localctx.option = self.match(MySQLParser.LOGS_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5273
                localctx.option = self.match(MySQLParser.RELAY_SYMBOL)
                self.state = 5274
                self.match(MySQLParser.LOGS_SYMBOL)
                self.state = 5276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,660,self._ctx)
                if la_ == 1:
                    self.state = 5275
                    self.channel()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5278
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 5279
                localctx.option = self.match(MySQLParser.QUERY_SYMBOL)
                self.state = 5280
                self.match(MySQLParser.CACHE_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5281
                if not serverVersion >= 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50706")
                self.state = 5282
                localctx.option = self.match(MySQLParser.OPTIMIZER_COSTS_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(MySQLParser.ERROR_SYMBOL, 0)

        def GENERAL_SYMBOL(self):
            return self.getToken(MySQLParser.GENERAL_SYMBOL, 0)

        def SLOW_SYMBOL(self):
            return self.getToken(MySQLParser.SLOW_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_logType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogType" ):
                listener.enterLogType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogType" ):
                listener.exitLogType(self)




    def logType(self):

        localctx = MySQLParser.LogTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_logType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5285
            _la = self._input.LA(1)
            if not(_la==32 or (((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & 35184372088837) != 0 or _la==515):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def flushTablesOptions(self):
            return self.getTypedRuleContext(MySQLParser.FlushTablesOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_flushTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTables" ):
                listener.enterFlushTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTables" ):
                listener.exitFlushTables(self)




    def flushTables(self):

        localctx = MySQLParser.FlushTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_flushTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5287
            _la = self._input.LA(1)
            if not(_la==571 or _la==574):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,663,self._ctx)
            if la_ == 1:
                self.state = 5288
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 5289
                self.match(MySQLParser.READ_SYMBOL)
                self.state = 5290
                self.match(MySQLParser.LOCK_SYMBOL)

            elif la_ == 2:
                self.state = 5291
                self.identifierList()
                self.state = 5293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,662,self._ctx)
                if la_ == 1:
                    self.state = 5292
                    self.flushTablesOptions()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTablesOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def EXPORT_SYMBOL(self):
            return self.getToken(MySQLParser.EXPORT_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MySQLParser.READ_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MySQLParser.LOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_flushTablesOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTablesOptions" ):
                listener.enterFlushTablesOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTablesOptions" ):
                listener.exitFlushTablesOptions(self)




    def flushTablesOptions(self):

        localctx = MySQLParser.FlushTablesOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_flushTablesOptions)
        try:
            self.state = 5303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,664,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5297
                if not serverVersion >= 50606:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50606")
                self.state = 5298
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 5299
                self.match(MySQLParser.EXPORT_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5300
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 5301
                self.match(MySQLParser.READ_SYMBOL)
                self.state = 5302
                self.match(MySQLParser.LOCK_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreloadTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def adminPartition(self):
            return self.getTypedRuleContext(MySQLParser.AdminPartitionContext,0)


        def cacheKeyList(self):
            return self.getTypedRuleContext(MySQLParser.CacheKeyListContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(MySQLParser.LEAVES_SYMBOL, 0)

        def preloadList(self):
            return self.getTypedRuleContext(MySQLParser.PreloadListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_preloadTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreloadTail" ):
                listener.enterPreloadTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreloadTail" ):
                listener.exitPreloadTail(self)




    def preloadTail(self):

        localctx = MySQLParser.PreloadTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_preloadTail)
        self._la = 0 # Token type
        try:
            self.state = 5315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5305
                self.tableRef()
                self.state = 5306
                self.adminPartition()
                self.state = 5308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236 or _la==265:
                    self.state = 5307
                    self.cacheKeyList()


                self.state = 5312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232:
                    self.state = 5310
                    self.match(MySQLParser.IGNORE_SYMBOL)
                    self.state = 5311
                    self.match(MySQLParser.LEAVES_SYMBOL)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5314
                self.preloadList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreloadListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preloadKeys(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PreloadKeysContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PreloadKeysContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_preloadList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreloadList" ):
                listener.enterPreloadList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreloadList" ):
                listener.exitPreloadList(self)




    def preloadList(self):

        localctx = MySQLParser.PreloadListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_preloadList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5317
            self.preloadKeys()
            self.state = 5322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 5318
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5319
                self.preloadKeys()
                self.state = 5324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreloadKeysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def cacheKeyList(self):
            return self.getTypedRuleContext(MySQLParser.CacheKeyListContext,0)


        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(MySQLParser.LEAVES_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_preloadKeys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreloadKeys" ):
                listener.enterPreloadKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreloadKeys" ):
                listener.exitPreloadKeys(self)




    def preloadKeys(self):

        localctx = MySQLParser.PreloadKeysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_preloadKeys)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5325
            self.tableRef()
            self.state = 5327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236 or _la==265:
                self.state = 5326
                self.cacheKeyList()


            self.state = 5331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==232:
                self.state = 5329
                self.match(MySQLParser.IGNORE_SYMBOL)
                self.state = 5330
                self.match(MySQLParser.LEAVES_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdminPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def allOrPartitionNameList(self):
            return self.getTypedRuleContext(MySQLParser.AllOrPartitionNameListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_adminPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdminPartition" ):
                listener.enterAdminPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdminPartition" ):
                listener.exitAdminPartition(self)




    def adminPartition(self):

        localctx = MySQLParser.AdminPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_adminPartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5333
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 5334
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 5335
            self.allOrPartitionNameList()
            self.state = 5336
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupManagementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createResourceGroup(self):
            return self.getTypedRuleContext(MySQLParser.CreateResourceGroupContext,0)


        def alterResourceGroup(self):
            return self.getTypedRuleContext(MySQLParser.AlterResourceGroupContext,0)


        def setResourceGroup(self):
            return self.getTypedRuleContext(MySQLParser.SetResourceGroupContext,0)


        def dropResourceGroup(self):
            return self.getTypedRuleContext(MySQLParser.DropResourceGroupContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_resourceGroupManagement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupManagement" ):
                listener.enterResourceGroupManagement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupManagement" ):
                listener.exitResourceGroupManagement(self)




    def resourceGroupManagement(self):

        localctx = MySQLParser.ResourceGroupManagementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_resourceGroupManagement)
        try:
            self.state = 5342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5338
                self.createResourceGroup()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5339
                self.alterResourceGroup()
                pass
            elif token in [506]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5340
                self.setResourceGroup()
                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5341
                self.dropResourceGroup()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateResourceGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MySQLParser.CREATE_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def TYPE_SYMBOL(self):
            return self.getToken(MySQLParser.TYPE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def SYSTEM_SYMBOL(self):
            return self.getToken(MySQLParser.SYSTEM_SYMBOL, 0)

        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def resourceGroupVcpuList(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupVcpuListContext,0)


        def resourceGroupPriority(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupPriorityContext,0)


        def resourceGroupEnableDisable(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupEnableDisableContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateResourceGroup" ):
                listener.enterCreateResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateResourceGroup" ):
                listener.exitCreateResourceGroup(self)




    def createResourceGroup(self):

        localctx = MySQLParser.CreateResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_createResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5344
            self.match(MySQLParser.CREATE_SYMBOL)
            self.state = 5345
            self.match(MySQLParser.RESOURCE_SYMBOL)
            self.state = 5346
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 5347
            self.identifier()
            self.state = 5348
            self.match(MySQLParser.TYPE_SYMBOL)
            self.state = 5350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==750 or _la==751:
                self.state = 5349
                self.equal()


            self.state = 5352
            _la = self._input.LA(1)
            if not(_la==618 or _la==710):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==711:
                self.state = 5353
                self.resourceGroupVcpuList()


            self.state = 5357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==708:
                self.state = 5356
                self.resourceGroupPriority()


            self.state = 5360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140 or _la==156:
                self.state = 5359
                self.resourceGroupEnableDisable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupVcpuListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VCPU_SYMBOL(self):
            return self.getToken(MySQLParser.VCPU_SYMBOL, 0)

        def vcpuNumOrRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.VcpuNumOrRangeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.VcpuNumOrRangeContext,i)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_resourceGroupVcpuList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupVcpuList" ):
                listener.enterResourceGroupVcpuList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupVcpuList" ):
                listener.exitResourceGroupVcpuList(self)




    def resourceGroupVcpuList(self):

        localctx = MySQLParser.ResourceGroupVcpuListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_resourceGroupVcpuList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5362
            self.match(MySQLParser.VCPU_SYMBOL)
            self.state = 5364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==750 or _la==751:
                self.state = 5363
                self.equal()


            self.state = 5366
            self.vcpuNumOrRange()
            self.state = 5373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==747 or _la==773:
                self.state = 5368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 5367
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 5370
                self.vcpuNumOrRange()
                self.state = 5375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VcpuNumOrRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.INT_NUMBER)
            else:
                return self.getToken(MySQLParser.INT_NUMBER, i)

        def MINUS_OPERATOR(self):
            return self.getToken(MySQLParser.MINUS_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_vcpuNumOrRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVcpuNumOrRange" ):
                listener.enterVcpuNumOrRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVcpuNumOrRange" ):
                listener.exitVcpuNumOrRange(self)




    def vcpuNumOrRange(self):

        localctx = MySQLParser.VcpuNumOrRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_vcpuNumOrRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5376
            self.match(MySQLParser.INT_NUMBER)
            self.state = 5379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==759:
                self.state = 5377
                self.match(MySQLParser.MINUS_OPERATOR)
                self.state = 5378
                self.match(MySQLParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupPriorityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THREAD_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_resourceGroupPriority

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupPriority" ):
                listener.enterResourceGroupPriority(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupPriority" ):
                listener.exitResourceGroupPriority(self)




    def resourceGroupPriority(self):

        localctx = MySQLParser.ResourceGroupPriorityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_resourceGroupPriority)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5381
            self.match(MySQLParser.THREAD_PRIORITY_SYMBOL)
            self.state = 5383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==750 or _la==751:
                self.state = 5382
                self.equal()


            self.state = 5385
            self.match(MySQLParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupEnableDisableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_resourceGroupEnableDisable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupEnableDisable" ):
                listener.enterResourceGroupEnableDisable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupEnableDisable" ):
                listener.exitResourceGroupEnableDisable(self)




    def resourceGroupEnableDisable(self):

        localctx = MySQLParser.ResourceGroupEnableDisableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_resourceGroupEnableDisable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5387
            _la = self._input.LA(1)
            if not(_la==140 or _la==156):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterResourceGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MySQLParser.ALTER_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def resourceGroupRef(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupRefContext,0)


        def resourceGroupVcpuList(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupVcpuListContext,0)


        def resourceGroupPriority(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupPriorityContext,0)


        def resourceGroupEnableDisable(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupEnableDisableContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(MySQLParser.FORCE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterResourceGroup" ):
                listener.enterAlterResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterResourceGroup" ):
                listener.exitAlterResourceGroup(self)




    def alterResourceGroup(self):

        localctx = MySQLParser.AlterResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_alterResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5389
            self.match(MySQLParser.ALTER_SYMBOL)
            self.state = 5390
            self.match(MySQLParser.RESOURCE_SYMBOL)
            self.state = 5391
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 5392
            self.resourceGroupRef()
            self.state = 5394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==711:
                self.state = 5393
                self.resourceGroupVcpuList()


            self.state = 5397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==708:
                self.state = 5396
                self.resourceGroupPriority()


            self.state = 5400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140 or _la==156:
                self.state = 5399
                self.resourceGroupEnableDisable()


            self.state = 5403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198:
                self.state = 5402
                self.match(MySQLParser.FORCE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetResourceGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def threadIdList(self):
            return self.getTypedRuleContext(MySQLParser.ThreadIdListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_setResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetResourceGroup" ):
                listener.enterSetResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetResourceGroup" ):
                listener.exitSetResourceGroup(self)




    def setResourceGroup(self):

        localctx = MySQLParser.SetResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_setResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5405
            self.match(MySQLParser.SET_SYMBOL)
            self.state = 5406
            self.match(MySQLParser.RESOURCE_SYMBOL)
            self.state = 5407
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 5408
            self.identifier()
            self.state = 5411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==200:
                self.state = 5409
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 5410
                self.threadIdList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadIdListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Real_ulong_numberContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_threadIdList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadIdList" ):
                listener.enterThreadIdList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadIdList" ):
                listener.exitThreadIdList(self)




    def threadIdList(self):

        localctx = MySQLParser.ThreadIdListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_threadIdList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5413
            self.real_ulong_number()
            self.state = 5420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & 2199090364423) != 0:
                self.state = 5415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 5414
                    self.match(MySQLParser.COMMA_SYMBOL)


                self.state = 5417
                self.real_ulong_number()
                self.state = 5422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropResourceGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MySQLParser.DROP_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_SYMBOL, 0)

        def resourceGroupRef(self):
            return self.getTypedRuleContext(MySQLParser.ResourceGroupRefContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(MySQLParser.FORCE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dropResourceGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropResourceGroup" ):
                listener.enterDropResourceGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropResourceGroup" ):
                listener.exitDropResourceGroup(self)




    def dropResourceGroup(self):

        localctx = MySQLParser.DropResourceGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_dropResourceGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5423
            self.match(MySQLParser.DROP_SYMBOL)
            self.state = 5424
            self.match(MySQLParser.RESOURCE_SYMBOL)
            self.state = 5425
            self.match(MySQLParser.GROUP_SYMBOL)
            self.state = 5426
            self.resourceGroupRef()
            self.state = 5428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198:
                self.state = 5427
                self.match(MySQLParser.FORCE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describeStatement(self):
            return self.getTypedRuleContext(MySQLParser.DescribeStatementContext,0)


        def explainStatement(self):
            return self.getTypedRuleContext(MySQLParser.ExplainStatementContext,0)


        def helpCommand(self):
            return self.getTypedRuleContext(MySQLParser.HelpCommandContext,0)


        def useCommand(self):
            return self.getTypedRuleContext(MySQLParser.UseCommandContext,0)


        def restartServer(self):
            return self.getTypedRuleContext(MySQLParser.RestartServerContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)




    def utilityStatement(self):

        localctx = MySQLParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_utilityStatement)
        try:
            self.state = 5436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,689,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5430
                self.describeStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5431
                self.explainStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5432
                self.helpCommand()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5433
                self.useCommand()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5434
                if not serverVersion >= 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80011")
                self.state = 5435
                self.restartServer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def EXPLAIN_SYMBOL(self):
            return self.getToken(MySQLParser.EXPLAIN_SYMBOL, 0)

        def DESCRIBE_SYMBOL(self):
            return self.getToken(MySQLParser.DESCRIBE_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(MySQLParser.DESC_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def columnRef(self):
            return self.getTypedRuleContext(MySQLParser.ColumnRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_describeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeStatement" ):
                listener.enterDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeStatement" ):
                listener.exitDescribeStatement(self)




    def describeStatement(self):

        localctx = MySQLParser.DescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_describeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5438
            _la = self._input.LA(1)
            if not((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 17592186044419) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5439
            self.tableRef()
            self.state = 5442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,690,self._ctx)
            if la_ == 1:
                self.state = 5440
                self.textString()

            elif la_ == 2:
                self.state = 5441
                self.columnRef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explainableStatement(self):
            return self.getTypedRuleContext(MySQLParser.ExplainableStatementContext,0)


        def EXPLAIN_SYMBOL(self):
            return self.getToken(MySQLParser.EXPLAIN_SYMBOL, 0)

        def DESCRIBE_SYMBOL(self):
            return self.getToken(MySQLParser.DESCRIBE_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(MySQLParser.DESC_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def PARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONS_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.FORMAT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def ANALYZE_SYMBOL(self):
            return self.getToken(MySQLParser.ANALYZE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_explainStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainStatement" ):
                listener.enterExplainStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainStatement" ):
                listener.exitExplainStatement(self)




    def explainStatement(self):

        localctx = MySQLParser.ExplainStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_explainStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5444
            _la = self._input.LA(1)
            if not((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 17592186044419) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,691,self._ctx)
            if la_ == 1:
                self.state = 5445
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 5446
                self.match(MySQLParser.EXTENDED_SYMBOL)

            elif la_ == 2:
                self.state = 5447
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 5448
                self.match(MySQLParser.PARTITIONS_SYMBOL)

            elif la_ == 3:
                self.state = 5449
                if not serverVersion >= 50605:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50605")
                self.state = 5450
                self.match(MySQLParser.FORMAT_SYMBOL)
                self.state = 5451
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 5452
                self.textOrIdentifier()

            elif la_ == 4:
                self.state = 5453
                if not serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80018")
                self.state = 5454
                self.match(MySQLParser.ANALYZE_SYMBOL)

            elif la_ == 5:
                self.state = 5455
                if not serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80019")
                self.state = 5456
                self.match(MySQLParser.ANALYZE_SYMBOL)
                self.state = 5457
                self.match(MySQLParser.FORMAT_SYMBOL)
                self.state = 5458
                self.match(MySQLParser.EQUAL_OPERATOR)
                self.state = 5459
                self.textOrIdentifier()


            self.state = 5462
            self.explainableStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(MySQLParser.SelectStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(MySQLParser.DeleteStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(MySQLParser.InsertStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(MySQLParser.ReplaceStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(MySQLParser.UpdateStatementContext,0)


        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(MySQLParser.CONNECTION_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_explainableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainableStatement" ):
                listener.enterExplainableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainableStatement" ):
                listener.exitExplainableStatement(self)




    def explainableStatement(self):

        localctx = MySQLParser.ExplainableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_explainableStatement)
        try:
            self.state = 5476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,693,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5464
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5465
                if not serverVersion >= 50603:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50603")
                self.state = 5470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,692,self._ctx)
                if la_ == 1:
                    self.state = 5466
                    self.deleteStatement()
                    pass

                elif la_ == 2:
                    self.state = 5467
                    self.insertStatement()
                    pass

                elif la_ == 3:
                    self.state = 5468
                    self.replaceStatement()
                    pass

                elif la_ == 4:
                    self.state = 5469
                    self.updateStatement()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5472
                if not serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50700")
                self.state = 5473
                self.match(MySQLParser.FOR_SYMBOL)
                self.state = 5474
                self.match(MySQLParser.CONNECTION_SYMBOL)
                self.state = 5475
                self.real_ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP_SYMBOL(self):
            return self.getToken(MySQLParser.HELP_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_helpCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpCommand" ):
                listener.enterHelpCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpCommand" ):
                listener.exitHelpCommand(self)




    def helpCommand(self):

        localctx = MySQLParser.HelpCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_helpCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5478
            self.match(MySQLParser.HELP_SYMBOL)
            self.state = 5479
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MySQLParser.USE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_useCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseCommand" ):
                listener.enterUseCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseCommand" ):
                listener.exitUseCommand(self)




    def useCommand(self):

        localctx = MySQLParser.UseCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_useCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5481
            self.match(MySQLParser.USE_SYMBOL)
            self.state = 5482
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestartServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTART_SYMBOL(self):
            return self.getToken(MySQLParser.RESTART_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_restartServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestartServer" ):
                listener.enterRestartServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestartServer" ):
                listener.exitRestartServer(self)




    def restartServer(self):

        localctx = MySQLParser.RestartServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_restartServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5484
            self.match(MySQLParser.RESTART_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySQLParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExprOrContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)

        def OR_SYMBOL(self):
            return self.getToken(MySQLParser.OR_SYMBOL, 0)
        def LOGICAL_OR_OPERATOR(self):
            return self.getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprOr" ):
                listener.enterExprOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprOr" ):
                listener.exitExprOr(self)


    class ExprNotContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprNot" ):
                listener.enterExprNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprNot" ):
                listener.exitExprNot(self)


    class ExprIsContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.ExprContext
            super().__init__(parser)
            self.type_ = None # Token
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(MySQLParser.BoolPriContext,0)

        def IS_SYMBOL(self):
            return self.getToken(MySQLParser.IS_SYMBOL, 0)
        def TRUE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUE_SYMBOL, 0)
        def FALSE_SYMBOL(self):
            return self.getToken(MySQLParser.FALSE_SYMBOL, 0)
        def UNKNOWN_SYMBOL(self):
            return self.getToken(MySQLParser.UNKNOWN_SYMBOL, 0)
        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprIs" ):
                listener.enterExprIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprIs" ):
                listener.exitExprIs(self)


    class ExprAndContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)

        def AND_SYMBOL(self):
            return self.getToken(MySQLParser.AND_SYMBOL, 0)
        def LOGICAL_AND_OPERATOR(self):
            return self.getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprAnd" ):
                listener.enterExprAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprAnd" ):
                listener.exitExprAnd(self)


    class ExprXorContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)

        def XOR_SYMBOL(self):
            return self.getToken(MySQLParser.XOR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprXor" ):
                listener.enterExprXor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprXor" ):
                listener.exitExprXor(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 676
        self.enterRecursionRule(localctx, 676, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,696,self._ctx)
            if la_ == 1:
                localctx = MySQLParser.ExprIsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5487
                self.boolPri(0)
                self.state = 5493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,695,self._ctx)
                if la_ == 1:
                    self.state = 5488
                    self.match(MySQLParser.IS_SYMBOL)
                    self.state = 5490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==371 or _la==745:
                        self.state = 5489
                        self.notRule()


                    self.state = 5492
                    localctx.type_ = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==183 or _la==596 or _la==610):
                        localctx.type_ = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                localctx = MySQLParser.ExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5495
                self.match(MySQLParser.NOT_SYMBOL)
                self.state = 5496
                self.expr(4)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5510
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,698,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5508
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,697,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.ExprAndContext(self, MySQLParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 5499
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5500
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==15 or _la==767):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5501
                        self.expr(4)
                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.ExprXorContext(self, MySQLParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 5502
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5503
                        self.match(MySQLParser.XOR_SYMBOL)
                        self.state = 5504
                        self.expr(3)
                        pass

                    elif la_ == 3:
                        localctx = MySQLParser.ExprOrContext(self, MySQLParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 5505
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5506
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==394 or _la==770):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5507
                        self.expr(2)
                        pass

             
                self.state = 5512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,698,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BoolPriContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySQLParser.RULE_boolPri

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PrimaryExprPredicateContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprPredicate" ):
                listener.enterPrimaryExprPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprPredicate" ):
                listener.exitPrimaryExprPredicate(self)


    class PrimaryExprCompareContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(MySQLParser.BoolPriContext,0)

        def compOp(self):
            return self.getTypedRuleContext(MySQLParser.CompOpContext,0)

        def predicate(self):
            return self.getTypedRuleContext(MySQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprCompare" ):
                listener.enterPrimaryExprCompare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprCompare" ):
                listener.exitPrimaryExprCompare(self)


    class PrimaryExprAllAnyContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(MySQLParser.BoolPriContext,0)

        def compOp(self):
            return self.getTypedRuleContext(MySQLParser.CompOpContext,0)

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)
        def ANY_SYMBOL(self):
            return self.getToken(MySQLParser.ANY_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprAllAny" ):
                listener.enterPrimaryExprAllAny(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprAllAny" ):
                listener.exitPrimaryExprAllAny(self)


    class PrimaryExprIsNullContext(BoolPriContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.BoolPriContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolPri(self):
            return self.getTypedRuleContext(MySQLParser.BoolPriContext,0)

        def IS_SYMBOL(self):
            return self.getToken(MySQLParser.IS_SYMBOL, 0)
        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)
        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExprIsNull" ):
                listener.enterPrimaryExprIsNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExprIsNull" ):
                listener.exitPrimaryExprIsNull(self)



    def boolPri(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.BoolPriContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 678
        self.enterRecursionRule(localctx, 678, self.RULE_boolPri, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MySQLParser.PrimaryExprPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 5514
            self.predicate()
            self._ctx.stop = self._input.LT(-1)
            self.state = 5533
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,701,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5531
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.PrimaryExprIsNullContext(self, MySQLParser.BoolPriContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolPri)
                        self.state = 5516
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5517
                        self.match(MySQLParser.IS_SYMBOL)
                        self.state = 5519
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==371 or _la==745:
                            self.state = 5518
                            self.notRule()


                        self.state = 5521
                        self.match(MySQLParser.NULL_SYMBOL)
                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.PrimaryExprCompareContext(self, MySQLParser.BoolPriContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolPri)
                        self.state = 5522
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5523
                        self.compOp()
                        self.state = 5524
                        self.predicate()
                        pass

                    elif la_ == 3:
                        localctx = MySQLParser.PrimaryExprAllAnyContext(self, MySQLParser.BoolPriContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolPri)
                        self.state = 5526
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5527
                        self.compOp()
                        self.state = 5528
                        _la = self._input.LA(1)
                        if not(_la==10 or _la==16):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5529
                        self.subquery()
                        pass

             
                self.state = 5535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,701,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CompOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def NULL_SAFE_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0)

        def GREATER_OR_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0)

        def GREATER_THAN_OPERATOR(self):
            return self.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0)

        def LESS_OR_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0)

        def LESS_THAN_OPERATOR(self):
            return self.getToken(MySQLParser.LESS_THAN_OPERATOR, 0)

        def NOT_EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_compOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompOp" ):
                listener.enterCompOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompOp" ):
                listener.exitCompOp(self)




    def compOp(self):

        localctx = MySQLParser.CompOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_compOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5536
            _la = self._input.LA(1)
            if not((((_la - 750)) & ~0x3f) == 0 and ((1 << (_la - 750)) & 253) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.BitExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.BitExprContext,i)


        def predicateOperations(self):
            return self.getTypedRuleContext(MySQLParser.PredicateOperationsContext,0)


        def MEMBER_SYMBOL(self):
            return self.getToken(MySQLParser.MEMBER_SYMBOL, 0)

        def simpleExprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprWithParenthesesContext,0)


        def SOUNDS_SYMBOL(self):
            return self.getToken(MySQLParser.SOUNDS_SYMBOL, 0)

        def LIKE_SYMBOL(self):
            return self.getToken(MySQLParser.LIKE_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def OF_SYMBOL(self):
            return self.getToken(MySQLParser.OF_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = MySQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5538
            self.bitExpr(0)
            self.state = 5552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
            if la_ == 1:
                self.state = 5540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==371 or _la==745:
                    self.state = 5539
                    self.notRule()


                self.state = 5542
                self.predicateOperations()

            elif la_ == 2:
                self.state = 5543
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 5544
                self.match(MySQLParser.MEMBER_SYMBOL)
                self.state = 5546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==668:
                    self.state = 5545
                    self.match(MySQLParser.OF_SYMBOL)


                self.state = 5548
                self.simpleExprWithParentheses()

            elif la_ == 3:
                self.state = 5549
                self.match(MySQLParser.SOUNDS_SYMBOL)
                self.state = 5550
                self.match(MySQLParser.LIKE_SYMBOL)
                self.state = 5551
                self.bitExpr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySQLParser.RULE_predicateOperations

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PredicateExprRegexContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REGEXP_SYMBOL(self):
            return self.getToken(MySQLParser.REGEXP_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprRegex" ):
                listener.enterPredicateExprRegex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprRegex" ):
                listener.exitPredicateExprRegex(self)


    class PredicateExprBetweenContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN_SYMBOL(self):
            return self.getToken(MySQLParser.BETWEEN_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)

        def AND_SYMBOL(self):
            return self.getToken(MySQLParser.AND_SYMBOL, 0)
        def predicate(self):
            return self.getTypedRuleContext(MySQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprBetween" ):
                listener.enterPredicateExprBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprBetween" ):
                listener.exitPredicateExprBetween(self)


    class PredicateExprInContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)
        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprIn" ):
                listener.enterPredicateExprIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprIn" ):
                listener.exitPredicateExprIn(self)


    class PredicateExprLikeContext(PredicateOperationsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PredicateOperationsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIKE_SYMBOL(self):
            return self.getToken(MySQLParser.LIKE_SYMBOL, 0)
        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SimpleExprContext,i)

        def ESCAPE_SYMBOL(self):
            return self.getToken(MySQLParser.ESCAPE_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExprLike" ):
                listener.enterPredicateExprLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExprLike" ):
                listener.exitPredicateExprLike(self)



    def predicateOperations(self):

        localctx = MySQLParser.PredicateOperationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_predicateOperations)
        try:
            self.state = 5575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [251]:
                localctx = MySQLParser.PredicateExprInContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5554
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 5560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,705,self._ctx)
                if la_ == 1:
                    self.state = 5555
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 5556
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 5557
                    self.exprList()
                    self.state = 5558
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass


                pass
            elif token in [30]:
                localctx = MySQLParser.PredicateExprBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5562
                self.match(MySQLParser.BETWEEN_SYMBOL)
                self.state = 5563
                self.bitExpr(0)
                self.state = 5564
                self.match(MySQLParser.AND_SYMBOL)
                self.state = 5565
                self.predicate()
                pass
            elif token in [275]:
                localctx = MySQLParser.PredicateExprLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5567
                self.match(MySQLParser.LIKE_SYMBOL)
                self.state = 5568
                self.simpleExpr(0)
                self.state = 5571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
                if la_ == 1:
                    self.state = 5569
                    self.match(MySQLParser.ESCAPE_SYMBOL)
                    self.state = 5570
                    self.simpleExpr(0)


                pass
            elif token in [444]:
                localctx = MySQLParser.PredicateExprRegexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5573
                self.match(MySQLParser.REGEXP_SYMBOL)
                self.state = 5574
                self.bitExpr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)


        def bitExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.BitExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.BitExprContext,i)


        def BITWISE_XOR_OPERATOR(self):
            return self.getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0)

        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def DIV_OPERATOR(self):
            return self.getToken(MySQLParser.DIV_OPERATOR, 0)

        def MOD_OPERATOR(self):
            return self.getToken(MySQLParser.MOD_OPERATOR, 0)

        def DIV_SYMBOL(self):
            return self.getToken(MySQLParser.DIV_SYMBOL, 0)

        def MOD_SYMBOL(self):
            return self.getToken(MySQLParser.MOD_SYMBOL, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(MySQLParser.PLUS_OPERATOR, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(MySQLParser.MINUS_OPERATOR, 0)

        def SHIFT_LEFT_OPERATOR(self):
            return self.getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0)

        def SHIFT_RIGHT_OPERATOR(self):
            return self.getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0)

        def BITWISE_AND_OPERATOR(self):
            return self.getToken(MySQLParser.BITWISE_AND_OPERATOR, 0)

        def BITWISE_OR_OPERATOR(self):
            return self.getToken(MySQLParser.BITWISE_OR_OPERATOR, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_bitExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpr" ):
                listener.enterBitExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpr" ):
                listener.exitBitExpr(self)



    def bitExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.BitExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 686
        self.enterRecursionRule(localctx, 686, self.RULE_bitExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5578
            self.simpleExpr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 5606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,709,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5604
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,708,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5580
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 5581
                        localctx.op = self.match(MySQLParser.BITWISE_XOR_OPERATOR)
                        self.state = 5582
                        self.bitExpr(8)
                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5583
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 5584
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==145 or _la==349 or (((_la - 760)) & ~0x3f) == 0 and ((1 << (_la - 760)) & 7) != 0):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5585
                        self.bitExpr(7)
                        pass

                    elif la_ == 3:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5586
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 5587
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==758 or _la==759):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5588
                        self.bitExpr(6)
                        pass

                    elif la_ == 4:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5589
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5590
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==765 or _la==766):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5591
                        self.bitExpr(4)
                        pass

                    elif la_ == 5:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5592
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5593
                        localctx.op = self.match(MySQLParser.BITWISE_AND_OPERATOR)
                        self.state = 5594
                        self.bitExpr(3)
                        pass

                    elif la_ == 6:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5595
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5596
                        localctx.op = self.match(MySQLParser.BITWISE_OR_OPERATOR)
                        self.state = 5597
                        self.bitExpr(2)
                        pass

                    elif la_ == 7:
                        localctx = MySQLParser.BitExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bitExpr)
                        self.state = 5598
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 5599
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==758 or _la==759):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5600
                        self.match(MySQLParser.INTERVAL_SYMBOL)
                        self.state = 5601
                        self.expr(0)
                        self.state = 5602
                        self.interval()
                        pass

             
                self.state = 5608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,709,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SimpleExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySQLParser.RULE_simpleExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SimpleExprConvertContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT_SYMBOL(self):
            return self.getToken(MySQLParser.CONVERT_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)

        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)
        def castType(self):
            return self.getTypedRuleContext(MySQLParser.CastTypeContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprConvert" ):
                listener.enterSimpleExprConvert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprConvert" ):
                listener.exitSimpleExprConvert(self)


    class SimpleExprVariableContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(MySQLParser.VariableContext,0)

        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprVariable" ):
                listener.enterSimpleExprVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprVariable" ):
                listener.exitSimpleExprVariable(self)


    class SimpleExprCastContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST_SYMBOL(self):
            return self.getToken(MySQLParser.CAST_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)
        def castType(self):
            return self.getTypedRuleContext(MySQLParser.CastTypeContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def arrayCast(self):
            return self.getTypedRuleContext(MySQLParser.ArrayCastContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprCast" ):
                listener.enterSimpleExprCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprCast" ):
                listener.exitSimpleExprCast(self)


    class SimpleExprUnaryContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)

        def PLUS_OPERATOR(self):
            return self.getToken(MySQLParser.PLUS_OPERATOR, 0)
        def MINUS_OPERATOR(self):
            return self.getToken(MySQLParser.MINUS_OPERATOR, 0)
        def BITWISE_NOT_OPERATOR(self):
            return self.getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprUnary" ):
                listener.enterSimpleExprUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprUnary" ):
                listener.exitSimpleExprUnary(self)


    class SimpleExprOdbcContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0)
        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)

        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprOdbc" ):
                listener.enterSimpleExprOdbc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprOdbc" ):
                listener.exitSimpleExprOdbc(self)


    class SimpleExprRuntimeFunctionContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def runtimeFunctionCall(self):
            return self.getTypedRuleContext(MySQLParser.RuntimeFunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprRuntimeFunction" ):
                listener.enterSimpleExprRuntimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprRuntimeFunction" ):
                listener.exitSimpleExprRuntimeFunction(self)


    class SimpleExprFunctionContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MySQLParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprFunction" ):
                listener.enterSimpleExprFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprFunction" ):
                listener.exitSimpleExprFunction(self)


    class SimpleExprCollateContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)

        def COLLATE_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATE_SYMBOL, 0)
        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprCollate" ):
                listener.enterSimpleExprCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprCollate" ):
                listener.exitSimpleExprCollate(self)


    class SimpleExprMatchContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MATCH_SYMBOL(self):
            return self.getToken(MySQLParser.MATCH_SYMBOL, 0)
        def identListArg(self):
            return self.getTypedRuleContext(MySQLParser.IdentListArgContext,0)

        def AGAINST_SYMBOL(self):
            return self.getToken(MySQLParser.AGAINST_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def fulltextOptions(self):
            return self.getTypedRuleContext(MySQLParser.FulltextOptionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprMatch" ):
                listener.enterSimpleExprMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprMatch" ):
                listener.exitSimpleExprMatch(self)


    class SimpleExprWindowingFunctionContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def windowFunctionCall(self):
            return self.getTypedRuleContext(MySQLParser.WindowFunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprWindowingFunction" ):
                listener.enterSimpleExprWindowingFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprWindowingFunction" ):
                listener.exitSimpleExprWindowingFunction(self)


    class SimpleExprBinaryContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)
        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprBinary" ):
                listener.enterSimpleExprBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprBinary" ):
                listener.exitSimpleExprBinary(self)


    class SimpleExprColumnRefContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnRef(self):
            return self.getTypedRuleContext(MySQLParser.ColumnRefContext,0)

        def jsonOperator(self):
            return self.getTypedRuleContext(MySQLParser.JsonOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprColumnRef" ):
                listener.enterSimpleExprColumnRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprColumnRef" ):
                listener.exitSimpleExprColumnRef(self)


    class SimpleExprParamMarkerContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARAM_MARKER(self):
            return self.getToken(MySQLParser.PARAM_MARKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprParamMarker" ):
                listener.enterSimpleExprParamMarker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprParamMarker" ):
                listener.exitSimpleExprParamMarker(self)


    class SimpleExprSumContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sumExpr(self):
            return self.getTypedRuleContext(MySQLParser.SumExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprSum" ):
                listener.enterSimpleExprSum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprSum" ):
                listener.exitSimpleExprSum(self)


    class SimpleExprConvertUsingContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT_SYMBOL(self):
            return self.getToken(MySQLParser.CONVERT_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)

        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprConvertUsing" ):
                listener.enterSimpleExprConvertUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprConvertUsing" ):
                listener.exitSimpleExprConvertUsing(self)


    class SimpleExprSubQueryContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MySQLParser.EXISTS_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprSubQuery" ):
                listener.enterSimpleExprSubQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprSubQuery" ):
                listener.exitSimpleExprSubQuery(self)


    class SimpleExprGroupingOperationContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groupingOperation(self):
            return self.getTypedRuleContext(MySQLParser.GroupingOperationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprGroupingOperation" ):
                listener.enterSimpleExprGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprGroupingOperation" ):
                listener.exitSimpleExprGroupingOperation(self)


    class SimpleExprNotContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def not2Rule(self):
            return self.getTypedRuleContext(MySQLParser.Not2RuleContext,0)

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprNot" ):
                listener.enterSimpleExprNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprNot" ):
                listener.exitSimpleExprNot(self)


    class SimpleExprValuesContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES_SYMBOL(self):
            return self.getToken(MySQLParser.VALUES_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def simpleIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.SimpleIdentifierContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprValues" ):
                listener.enterSimpleExprValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprValues" ):
                listener.exitSimpleExprValues(self)


    class SimpleExprDefaultContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def simpleIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.SimpleIdentifierContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprDefault" ):
                listener.enterSimpleExprDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprDefault" ):
                listener.exitSimpleExprDefault(self)


    class SimpleExprListContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprList" ):
                listener.enterSimpleExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprList" ):
                listener.exitSimpleExprList(self)


    class SimpleExprIntervalContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)

        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)

        def PLUS_OPERATOR(self):
            return self.getToken(MySQLParser.PLUS_OPERATOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprInterval" ):
                listener.enterSimpleExprInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprInterval" ):
                listener.exitSimpleExprInterval(self)


    class SimpleExprCaseContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CASE_SYMBOL(self):
            return self.getToken(MySQLParser.CASE_SYMBOL, 0)
        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)

        def whenExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.WhenExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.WhenExpressionContext,i)

        def thenExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ThenExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ThenExpressionContext,i)

        def elseExpression(self):
            return self.getTypedRuleContext(MySQLParser.ElseExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprCase" ):
                listener.enterSimpleExprCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprCase" ):
                listener.exitSimpleExprCase(self)


    class SimpleExprConcatContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpleExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SimpleExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SimpleExprContext,i)

        def CONCAT_PIPES_SYMBOL(self):
            return self.getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprConcat" ):
                listener.enterSimpleExprConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprConcat" ):
                listener.exitSimpleExprConcat(self)


    class SimpleExprLiteralContext(SimpleExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.SimpleExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(MySQLParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprLiteral" ):
                listener.enterSimpleExprLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprLiteral" ):
                listener.exitSimpleExprLiteral(self)



    def simpleExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.SimpleExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 688
        self.enterRecursionRule(localctx, 688, self.RULE_simpleExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,719,self._ctx)
            if la_ == 1:
                localctx = MySQLParser.SimpleExprVariableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5610
                self.variable()
                self.state = 5614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,710,self._ctx)
                if la_ == 1:
                    self.state = 5611
                    self.equal()
                    self.state = 5612
                    self.expr(0)


                pass

            elif la_ == 2:
                localctx = MySQLParser.SimpleExprColumnRefContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5616
                self.columnRef()
                self.state = 5618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,711,self._ctx)
                if la_ == 1:
                    self.state = 5617
                    self.jsonOperator()


                pass

            elif la_ == 3:
                localctx = MySQLParser.SimpleExprRuntimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5620
                self.runtimeFunctionCall()
                pass

            elif la_ == 4:
                localctx = MySQLParser.SimpleExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5621
                self.functionCall()
                pass

            elif la_ == 5:
                localctx = MySQLParser.SimpleExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5622
                self.literal()
                pass

            elif la_ == 6:
                localctx = MySQLParser.SimpleExprParamMarkerContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5623
                self.match(MySQLParser.PARAM_MARKER)
                pass

            elif la_ == 7:
                localctx = MySQLParser.SimpleExprSumContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5624
                self.sumExpr()
                pass

            elif la_ == 8:
                localctx = MySQLParser.SimpleExprGroupingOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5625
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 5626
                self.groupingOperation()
                pass

            elif la_ == 9:
                localctx = MySQLParser.SimpleExprWindowingFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5627
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 5628
                self.windowFunctionCall()
                pass

            elif la_ == 10:
                localctx = MySQLParser.SimpleExprUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5629
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 758)) & ~0x3f) == 0 and ((1 << (_la - 758)) & 67) != 0):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5630
                self.simpleExpr(14)
                pass

            elif la_ == 11:
                localctx = MySQLParser.SimpleExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5631
                self.not2Rule()
                self.state = 5632
                self.simpleExpr(13)
                pass

            elif la_ == 12:
                localctx = MySQLParser.SimpleExprListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==487:
                    self.state = 5634
                    self.match(MySQLParser.ROW_SYMBOL)


                self.state = 5637
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5638
                self.exprList()
                self.state = 5639
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 13:
                localctx = MySQLParser.SimpleExprSubQueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==174:
                    self.state = 5641
                    self.match(MySQLParser.EXISTS_SYMBOL)


                self.state = 5644
                self.subquery()
                pass

            elif la_ == 14:
                localctx = MySQLParser.SimpleExprOdbcContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5645
                self.match(MySQLParser.OPEN_CURLY_SYMBOL)
                self.state = 5646
                self.identifier()
                self.state = 5647
                self.expr(0)
                self.state = 5648
                self.match(MySQLParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 15:
                localctx = MySQLParser.SimpleExprMatchContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5650
                self.match(MySQLParser.MATCH_SYMBOL)
                self.state = 5651
                self.identListArg()
                self.state = 5652
                self.match(MySQLParser.AGAINST_SYMBOL)
                self.state = 5653
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5654
                self.bitExpr(0)
                self.state = 5656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==251 or _la==645:
                    self.state = 5655
                    self.fulltextOptions()


                self.state = 5658
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 16:
                localctx = MySQLParser.SimpleExprBinaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5660
                self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 5661
                self.simpleExpr(8)
                pass

            elif la_ == 17:
                localctx = MySQLParser.SimpleExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5662
                self.match(MySQLParser.CAST_SYMBOL)
                self.state = 5663
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5664
                self.expr(0)
                self.state = 5665
                self.match(MySQLParser.AS_SYMBOL)
                self.state = 5666
                self.castType()
                self.state = 5668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,715,self._ctx)
                if la_ == 1:
                    self.state = 5667
                    self.arrayCast()


                self.state = 5670
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 18:
                localctx = MySQLParser.SimpleExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5672
                self.match(MySQLParser.CASE_SYMBOL)
                self.state = 5674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,716,self._ctx)
                if la_ == 1:
                    self.state = 5673
                    self.expr(0)


                self.state = 5679 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5676
                    self.whenExpression()
                    self.state = 5677
                    self.thenExpression()
                    self.state = 5681 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==642):
                        break

                self.state = 5684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==154:
                    self.state = 5683
                    self.elseExpression()


                self.state = 5686
                self.match(MySQLParser.END_SYMBOL)
                pass

            elif la_ == 19:
                localctx = MySQLParser.SimpleExprConvertContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5688
                self.match(MySQLParser.CONVERT_SYMBOL)
                self.state = 5689
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5690
                self.expr(0)
                self.state = 5691
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5692
                self.castType()
                self.state = 5693
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 20:
                localctx = MySQLParser.SimpleExprConvertUsingContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5695
                self.match(MySQLParser.CONVERT_SYMBOL)
                self.state = 5696
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5697
                self.expr(0)
                self.state = 5698
                self.match(MySQLParser.USING_SYMBOL)
                self.state = 5699
                self.charsetName()
                self.state = 5700
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 21:
                localctx = MySQLParser.SimpleExprDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5702
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 5703
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5704
                self.simpleIdentifier()
                self.state = 5705
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 22:
                localctx = MySQLParser.SimpleExprValuesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5707
                self.match(MySQLParser.VALUES_SYMBOL)
                self.state = 5708
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5709
                self.simpleIdentifier()
                self.state = 5710
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 23:
                localctx = MySQLParser.SimpleExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5712
                self.match(MySQLParser.INTERVAL_SYMBOL)
                self.state = 5713
                self.expr(0)
                self.state = 5714
                self.interval()
                self.state = 5715
                self.match(MySQLParser.PLUS_OPERATOR)
                self.state = 5716
                self.expr(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,721,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5726
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,720,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.SimpleExprConcatContext(self, MySQLParser.SimpleExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleExpr)
                        self.state = 5720
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 5721
                        self.match(MySQLParser.CONCAT_PIPES_SYMBOL)
                        self.state = 5722
                        self.simpleExpr(16)
                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.SimpleExprCollateContext(self, MySQLParser.SimpleExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleExpr)
                        self.state = 5723
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 5724
                        self.match(MySQLParser.COLLATE_SYMBOL)
                        self.state = 5725
                        self.textOrIdentifier()
                        pass

             
                self.state = 5730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,721,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArrayCastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_SYMBOL(self):
            return self.getToken(MySQLParser.ARRAY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_arrayCast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCast" ):
                listener.enterArrayCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCast" ):
                listener.exitArrayCast(self)




    def arrayCast(self):

        localctx = MySQLParser.ArrayCastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_arrayCast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5731
            if not serverVersion >= 80017:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 80017")
            self.state = 5732
            self.match(MySQLParser.ARRAY_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_SEPARATOR_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def JSON_UNQUOTED_SEPARATOR_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_jsonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOperator" ):
                listener.enterJsonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOperator" ):
                listener.exitJsonOperator(self)




    def jsonOperator(self):

        localctx = MySQLParser.JsonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_jsonOperator)
        try:
            self.state = 5740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5734
                if not serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50708")
                self.state = 5735
                self.match(MySQLParser.JSON_SEPARATOR_SYMBOL)
                self.state = 5736
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5737
                if not serverVersion >= 50713:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50713")
                self.state = 5738
                self.match(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL)
                self.state = 5739
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SumExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def inSumExpr(self):
            return self.getTypedRuleContext(MySQLParser.InSumExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def AVG_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_SYMBOL, 0)

        def DISTINCT_SYMBOL(self):
            return self.getToken(MySQLParser.DISTINCT_SYMBOL, 0)

        def windowingClause(self):
            return self.getTypedRuleContext(MySQLParser.WindowingClauseContext,0)


        def BIT_AND_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_AND_SYMBOL, 0)

        def BIT_OR_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_OR_SYMBOL, 0)

        def BIT_XOR_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_XOR_SYMBOL, 0)

        def jsonFunction(self):
            return self.getTypedRuleContext(MySQLParser.JsonFunctionContext,0)


        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.COUNT_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def MIN_SYMBOL(self):
            return self.getToken(MySQLParser.MIN_SYMBOL, 0)

        def MAX_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_SYMBOL, 0)

        def STD_SYMBOL(self):
            return self.getToken(MySQLParser.STD_SYMBOL, 0)

        def VARIANCE_SYMBOL(self):
            return self.getToken(MySQLParser.VARIANCE_SYMBOL, 0)

        def STDDEV_SAMP_SYMBOL(self):
            return self.getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0)

        def VAR_SAMP_SYMBOL(self):
            return self.getToken(MySQLParser.VAR_SAMP_SYMBOL, 0)

        def SUM_SYMBOL(self):
            return self.getToken(MySQLParser.SUM_SYMBOL, 0)

        def GROUP_CONCAT_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0)

        def orderClause(self):
            return self.getTypedRuleContext(MySQLParser.OrderClauseContext,0)


        def SEPARATOR_SYMBOL(self):
            return self.getToken(MySQLParser.SEPARATOR_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_sumExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSumExpr" ):
                listener.enterSumExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSumExpr" ):
                listener.exitSumExpr(self)




    def sumExpr(self):

        localctx = MySQLParser.SumExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_sumExpr)
        self._la = 0 # Token type
        try:
            self.state = 5873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,745,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5742
                localctx.name = self.match(MySQLParser.AVG_SYMBOL)
                self.state = 5743
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,723,self._ctx)
                if la_ == 1:
                    self.state = 5744
                    self.match(MySQLParser.DISTINCT_SYMBOL)


                self.state = 5747
                self.inSumExpr()
                self.state = 5748
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5751
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,724,self._ctx)
                if la_ == 1:
                    self.state = 5749
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5750
                    self.windowingClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5753
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 377957122048) != 0):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5754
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5755
                self.inSumExpr()
                self.state = 5756
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,725,self._ctx)
                if la_ == 1:
                    self.state = 5757
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5758
                    self.windowingClause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5761
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 5762
                self.jsonFunction()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5763
                localctx.name = self.match(MySQLParser.COUNT_SYMBOL)
                self.state = 5764
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 5765
                    self.match(MySQLParser.ALL_SYMBOL)


                self.state = 5768
                self.match(MySQLParser.MULT_OPERATOR)
                self.state = 5769
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,727,self._ctx)
                if la_ == 1:
                    self.state = 5770
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5771
                    self.windowingClause()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5774
                localctx.name = self.match(MySQLParser.COUNT_SYMBOL)
                self.state = 5775
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,729,self._ctx)
                if la_ == 1:
                    self.state = 5777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 5776
                        self.match(MySQLParser.ALL_SYMBOL)


                    self.state = 5779
                    self.match(MySQLParser.MULT_OPERATOR)
                    pass

                elif la_ == 2:
                    self.state = 5780
                    self.inSumExpr()
                    pass

                elif la_ == 3:
                    self.state = 5781
                    self.match(MySQLParser.DISTINCT_SYMBOL)
                    self.state = 5782
                    self.exprList()
                    pass


                self.state = 5785
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,730,self._ctx)
                if la_ == 1:
                    self.state = 5786
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5787
                    self.windowingClause()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5790
                localctx.name = self.match(MySQLParser.MIN_SYMBOL)
                self.state = 5791
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5793
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,731,self._ctx)
                if la_ == 1:
                    self.state = 5792
                    self.match(MySQLParser.DISTINCT_SYMBOL)


                self.state = 5795
                self.inSumExpr()
                self.state = 5796
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,732,self._ctx)
                if la_ == 1:
                    self.state = 5797
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5798
                    self.windowingClause()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5801
                localctx.name = self.match(MySQLParser.MAX_SYMBOL)
                self.state = 5802
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,733,self._ctx)
                if la_ == 1:
                    self.state = 5803
                    self.match(MySQLParser.DISTINCT_SYMBOL)


                self.state = 5806
                self.inSumExpr()
                self.state = 5807
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,734,self._ctx)
                if la_ == 1:
                    self.state = 5808
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5809
                    self.windowingClause()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5812
                localctx.name = self.match(MySQLParser.STD_SYMBOL)
                self.state = 5813
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5814
                self.inSumExpr()
                self.state = 5815
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,735,self._ctx)
                if la_ == 1:
                    self.state = 5816
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5817
                    self.windowingClause()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5820
                localctx.name = self.match(MySQLParser.VARIANCE_SYMBOL)
                self.state = 5821
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5822
                self.inSumExpr()
                self.state = 5823
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,736,self._ctx)
                if la_ == 1:
                    self.state = 5824
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5825
                    self.windowingClause()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5828
                localctx.name = self.match(MySQLParser.STDDEV_SAMP_SYMBOL)
                self.state = 5829
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5830
                self.inSumExpr()
                self.state = 5831
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5834
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,737,self._ctx)
                if la_ == 1:
                    self.state = 5832
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5833
                    self.windowingClause()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5836
                localctx.name = self.match(MySQLParser.VAR_SAMP_SYMBOL)
                self.state = 5837
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5838
                self.inSumExpr()
                self.state = 5839
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,738,self._ctx)
                if la_ == 1:
                    self.state = 5840
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5841
                    self.windowingClause()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5844
                localctx.name = self.match(MySQLParser.SUM_SYMBOL)
                self.state = 5845
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,739,self._ctx)
                if la_ == 1:
                    self.state = 5846
                    self.match(MySQLParser.DISTINCT_SYMBOL)


                self.state = 5849
                self.inSumExpr()
                self.state = 5850
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,740,self._ctx)
                if la_ == 1:
                    self.state = 5851
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5852
                    self.windowingClause()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5855
                localctx.name = self.match(MySQLParser.GROUP_CONCAT_SYMBOL)
                self.state = 5856
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,741,self._ctx)
                if la_ == 1:
                    self.state = 5857
                    self.match(MySQLParser.DISTINCT_SYMBOL)


                self.state = 5860
                self.exprList()
                self.state = 5862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==393:
                    self.state = 5861
                    self.orderClause()


                self.state = 5866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==499:
                    self.state = 5864
                    self.match(MySQLParser.SEPARATOR_SYMBOL)
                    self.state = 5865
                    self.textString()


                self.state = 5868
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5871
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,744,self._ctx)
                if la_ == 1:
                    self.state = 5869
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 5870
                    self.windowingClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING_SYMBOL(self):
            return self.getToken(MySQLParser.GROUPING_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_groupingOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingOperation" ):
                listener.enterGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingOperation" ):
                listener.exitGroupingOperation(self)




    def groupingOperation(self):

        localctx = MySQLParser.GroupingOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_groupingOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5875
            self.match(MySQLParser.GROUPING_SYMBOL)
            self.state = 5876
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 5877
            self.exprList()
            self.state = 5878
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parentheses(self):
            return self.getTypedRuleContext(MySQLParser.ParenthesesContext,0)


        def windowingClause(self):
            return self.getTypedRuleContext(MySQLParser.WindowingClauseContext,0)


        def ROW_NUMBER_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0)

        def RANK_SYMBOL(self):
            return self.getToken(MySQLParser.RANK_SYMBOL, 0)

        def DENSE_RANK_SYMBOL(self):
            return self.getToken(MySQLParser.DENSE_RANK_SYMBOL, 0)

        def CUME_DIST_SYMBOL(self):
            return self.getToken(MySQLParser.CUME_DIST_SYMBOL, 0)

        def PERCENT_RANK_SYMBOL(self):
            return self.getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0)

        def NTILE_SYMBOL(self):
            return self.getToken(MySQLParser.NTILE_SYMBOL, 0)

        def simpleExprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprWithParenthesesContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def LEAD_SYMBOL(self):
            return self.getToken(MySQLParser.LEAD_SYMBOL, 0)

        def LAG_SYMBOL(self):
            return self.getToken(MySQLParser.LAG_SYMBOL, 0)

        def leadLagInfo(self):
            return self.getTypedRuleContext(MySQLParser.LeadLagInfoContext,0)


        def nullTreatment(self):
            return self.getTypedRuleContext(MySQLParser.NullTreatmentContext,0)


        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def FIRST_VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0)

        def LAST_VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_VALUE_SYMBOL, 0)

        def NTH_VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.NTH_VALUE_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_windowFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFunctionCall" ):
                listener.enterWindowFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFunctionCall" ):
                listener.exitWindowFunctionCall(self)




    def windowFunctionCall(self):

        localctx = MySQLParser.WindowFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_windowFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 5922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [678, 679, 692, 694, 696]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5880
                _la = self._input.LA(1)
                if not((((_la - 678)) & ~0x3f) == 0 and ((1 << (_la - 678)) & 344067) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5881
                self.parentheses()
                self.state = 5882
                self.windowingClause()
                pass
            elif token in [688]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5884
                self.match(MySQLParser.NTILE_SYMBOL)
                self.state = 5885
                self.simpleExprWithParentheses()
                self.state = 5886
                self.windowingClause()
                pass
            elif token in [684, 686]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5888
                _la = self._input.LA(1)
                if not(_la==684 or _la==686):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5889
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5890
                self.expr(0)
                self.state = 5892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 5891
                    self.leadLagInfo()


                self.state = 5894
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232 or _la==695:
                    self.state = 5895
                    self.nullTreatment()


                self.state = 5898
                self.windowingClause()
                pass
            elif token in [681, 685]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5900
                _la = self._input.LA(1)
                if not(_la==681 or _la==685):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5901
                self.exprWithParentheses()
                self.state = 5903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232 or _la==695:
                    self.state = 5902
                    self.nullTreatment()


                self.state = 5905
                self.windowingClause()
                pass
            elif token in [687]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5907
                self.match(MySQLParser.NTH_VALUE_SYMBOL)
                self.state = 5908
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5909
                self.expr(0)
                self.state = 5910
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5911
                self.simpleExpr(0)
                self.state = 5912
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 5913
                    self.match(MySQLParser.FROM_SYMBOL)
                    self.state = 5914
                    _la = self._input.LA(1)
                    if not(_la==191 or _la==268):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232 or _la==695:
                    self.state = 5917
                    self.nullTreatment()


                self.state = 5920
                self.windowingClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER_SYMBOL(self):
            return self.getToken(MySQLParser.OVER_SYMBOL, 0)

        def windowName(self):
            return self.getTypedRuleContext(MySQLParser.WindowNameContext,0)


        def windowSpec(self):
            return self.getTypedRuleContext(MySQLParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowingClause" ):
                listener.enterWindowingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowingClause" ):
                listener.exitWindowingClause(self)




    def windowingClause(self):

        localctx = MySQLParser.WindowingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_windowingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5924
            self.match(MySQLParser.OVER_SYMBOL)
            self.state = 5927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,752,self._ctx)
            if la_ == 1:
                self.state = 5925
                self.windowName()
                pass

            elif la_ == 2:
                self.state = 5926
                self.windowSpec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeadLagInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def PARAM_MARKER(self):
            return self.getToken(MySQLParser.PARAM_MARKER, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_leadLagInfo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeadLagInfo" ):
                listener.enterLeadLagInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeadLagInfo" ):
                listener.exitLeadLagInfo(self)




    def leadLagInfo(self):

        localctx = MySQLParser.LeadLagInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_leadLagInfo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5929
            self.match(MySQLParser.COMMA_SYMBOL)
            self.state = 5932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [747, 748, 749, 790, 791]:
                self.state = 5930
                self.ulonglong_number()
                pass
            elif token in [787]:
                self.state = 5931
                self.match(MySQLParser.PARAM_MARKER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==773:
                self.state = 5934
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5935
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullTreatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS_SYMBOL(self):
            return self.getToken(MySQLParser.NULLS_SYMBOL, 0)

        def RESPECT_SYMBOL(self):
            return self.getToken(MySQLParser.RESPECT_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_nullTreatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullTreatment" ):
                listener.enterNullTreatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullTreatment" ):
                listener.exitNullTreatment(self)




    def nullTreatment(self):

        localctx = MySQLParser.NullTreatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_nullTreatment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5938
            _la = self._input.LA(1)
            if not(_la==232 or _la==695):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5939
            self.match(MySQLParser.NULLS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_ARRAYAGG_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def inSumExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.InSumExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.InSumExprContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def windowingClause(self):
            return self.getTypedRuleContext(MySQLParser.WindowingClauseContext,0)


        def JSON_OBJECTAGG_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_jsonFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonFunction" ):
                listener.enterJsonFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonFunction" ):
                listener.exitJsonFunction(self)




    def jsonFunction(self):

        localctx = MySQLParser.JsonFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_jsonFunction)
        try:
            self.state = 5957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [667]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5941
                self.match(MySQLParser.JSON_ARRAYAGG_SYMBOL)
                self.state = 5942
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5943
                self.inSumExpr()
                self.state = 5944
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,755,self._ctx)
                if la_ == 1:
                    self.state = 5945
                    self.windowingClause()


                pass
            elif token in [666]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5948
                self.match(MySQLParser.JSON_OBJECTAGG_SYMBOL)
                self.state = 5949
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5950
                self.inSumExpr()
                self.state = 5951
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5952
                self.inSumExpr()
                self.state = 5953
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                self.state = 5955
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,756,self._ctx)
                if la_ == 1:
                    self.state = 5954
                    self.windowingClause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InSumExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MySQLParser.ALL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_inSumExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSumExpr" ):
                listener.enterInSumExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSumExpr" ):
                listener.exitInSumExpr(self)




    def inSumExpr(self):

        localctx = MySQLParser.InSumExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_inSumExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,758,self._ctx)
            if la_ == 1:
                self.state = 5959
                self.match(MySQLParser.ALL_SYMBOL)


            self.state = 5962
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentListArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identList(self):
            return self.getTypedRuleContext(MySQLParser.IdentListContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identListArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentListArg" ):
                listener.enterIdentListArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentListArg" ):
                listener.exitIdentListArg(self)




    def identListArg(self):

        localctx = MySQLParser.IdentListArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_identListArg)
        try:
            self.state = 5969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,759,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5964
                self.identList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5965
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5966
                self.identList()
                self.state = 5967
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SimpleIdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_identList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentList" ):
                listener.enterIdentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentList" ):
                listener.exitIdentList(self)




    def identList(self):

        localctx = MySQLParser.IdentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_identList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5971
            self.simpleIdentifier()
            self.state = 5976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 5972
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 5973
                self.simpleIdentifier()
                self.state = 5978
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FulltextOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(MySQLParser.BOOLEAN_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(MySQLParser.MODE_SYMBOL, 0)

        def NATURAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATURAL_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(MySQLParser.LANGUAGE_SYMBOL, 0)

        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def EXPANSION_SYMBOL(self):
            return self.getToken(MySQLParser.EXPANSION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_fulltextOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFulltextOptions" ):
                listener.enterFulltextOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFulltextOptions" ):
                listener.exitFulltextOptions(self)




    def fulltextOptions(self):

        localctx = MySQLParser.FulltextOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_fulltextOptions)
        self._la = 0 # Token type
        try:
            self.state = 5994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,762,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5979
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 5980
                self.match(MySQLParser.BOOLEAN_SYMBOL)
                self.state = 5981
                self.match(MySQLParser.MODE_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5982
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 5983
                self.match(MySQLParser.NATURAL_SYMBOL)
                self.state = 5984
                self.match(MySQLParser.LANGUAGE_SYMBOL)
                self.state = 5985
                self.match(MySQLParser.MODE_SYMBOL)
                self.state = 5989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==645:
                    self.state = 5986
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 5987
                    self.match(MySQLParser.QUERY_SYMBOL)
                    self.state = 5988
                    self.match(MySQLParser.EXPANSION_SYMBOL)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5991
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 5992
                self.match(MySQLParser.QUERY_SYMBOL)
                self.state = 5993
                self.match(MySQLParser.EXPANSION_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuntimeFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def CHAR_SYMBOL(self):
            return self.getToken(MySQLParser.CHAR_SYMBOL, 0)

        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def CURRENT_USER_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0)

        def parentheses(self):
            return self.getTypedRuleContext(MySQLParser.ParenthesesContext,0)


        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def INSERT_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_SYMBOL, 0)

        def INTERVAL_SYMBOL(self):
            return self.getToken(MySQLParser.INTERVAL_SYMBOL, 0)

        def LEFT_SYMBOL(self):
            return self.getToken(MySQLParser.LEFT_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(MySQLParser.MONTH_SYMBOL, 0)

        def RIGHT_SYMBOL(self):
            return self.getToken(MySQLParser.RIGHT_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.SECOND_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def trimFunction(self):
            return self.getTypedRuleContext(MySQLParser.TrimFunctionContext,0)


        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def VALUES_SYMBOL(self):
            return self.getToken(MySQLParser.VALUES_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_SYMBOL, 0)

        def ADDDATE_SYMBOL(self):
            return self.getToken(MySQLParser.ADDDATE_SYMBOL, 0)

        def SUBDATE_SYMBOL(self):
            return self.getToken(MySQLParser.SUBDATE_SYMBOL, 0)

        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)


        def CURDATE_SYMBOL(self):
            return self.getToken(MySQLParser.CURDATE_SYMBOL, 0)

        def CURTIME_SYMBOL(self):
            return self.getToken(MySQLParser.CURTIME_SYMBOL, 0)

        def timeFunctionParameters(self):
            return self.getTypedRuleContext(MySQLParser.TimeFunctionParametersContext,0)


        def DATE_ADD_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_ADD_SYMBOL, 0)

        def DATE_SUB_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SUB_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def EXTRACT_SYMBOL(self):
            return self.getToken(MySQLParser.EXTRACT_SYMBOL, 0)

        def dateTimeTtype(self):
            return self.getTypedRuleContext(MySQLParser.DateTimeTtypeContext,0)


        def GET_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0)

        def NOW_SYMBOL(self):
            return self.getToken(MySQLParser.NOW_SYMBOL, 0)

        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def POSITION_SYMBOL(self):
            return self.getToken(MySQLParser.POSITION_SYMBOL, 0)

        def substringFunction(self):
            return self.getTypedRuleContext(MySQLParser.SubstringFunctionContext,0)


        def SYSDATE_SYMBOL(self):
            return self.getToken(MySQLParser.SYSDATE_SYMBOL, 0)

        def intervalTimeStamp(self):
            return self.getTypedRuleContext(MySQLParser.IntervalTimeStampContext,0)


        def TIMESTAMP_ADD_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0)

        def TIMESTAMP_DIFF_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0)

        def UTC_DATE_SYMBOL(self):
            return self.getToken(MySQLParser.UTC_DATE_SYMBOL, 0)

        def UTC_TIME_SYMBOL(self):
            return self.getToken(MySQLParser.UTC_TIME_SYMBOL, 0)

        def UTC_TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0)

        def ASCII_SYMBOL(self):
            return self.getToken(MySQLParser.ASCII_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(MySQLParser.CHARSET_SYMBOL, 0)

        def exprListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprListWithParenthesesContext,0)


        def COALESCE_SYMBOL(self):
            return self.getToken(MySQLParser.COALESCE_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATION_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MySQLParser.DATABASE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MySQLParser.IF_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.FORMAT_SYMBOL, 0)

        def MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MICROSECOND_SYMBOL, 0)

        def MOD_SYMBOL(self):
            return self.getToken(MySQLParser.MOD_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def OLD_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(MySQLParser.QUARTER_SYMBOL, 0)

        def REPEAT_SYMBOL(self):
            return self.getToken(MySQLParser.REPEAT_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def REVERSE_SYMBOL(self):
            return self.getToken(MySQLParser.REVERSE_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(MySQLParser.WEEK_SYMBOL, 0)

        def WEIGHT_STRING_SYMBOL(self):
            return self.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0)

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def wsNumCodepoints(self):
            return self.getTypedRuleContext(MySQLParser.WsNumCodepointsContext,0)


        def ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Ulong_numberContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,i)


        def weightStringLevels(self):
            return self.getTypedRuleContext(MySQLParser.WeightStringLevelsContext,0)


        def geometryFunction(self):
            return self.getTypedRuleContext(MySQLParser.GeometryFunctionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_runtimeFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuntimeFunctionCall" ):
                listener.enterRuntimeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuntimeFunctionCall" ):
                listener.exitRuntimeFunctionCall(self)




    def runtimeFunctionCall(self):

        localctx = MySQLParser.RuntimeFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_runtimeFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 6269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,780,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5996
                localctx.name = self.match(MySQLParser.CHAR_SYMBOL)
                self.state = 5997
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 5998
                self.exprList()
                self.state = 6001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==621:
                    self.state = 5999
                    self.match(MySQLParser.USING_SYMBOL)
                    self.state = 6000
                    self.charsetName()


                self.state = 6003
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6005
                localctx.name = self.match(MySQLParser.CURRENT_USER_SYMBOL)
                self.state = 6007
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,764,self._ctx)
                if la_ == 1:
                    self.state = 6006
                    self.parentheses()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6009
                localctx.name = self.match(MySQLParser.DATE_SYMBOL)
                self.state = 6010
                self.exprWithParentheses()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6011
                localctx.name = self.match(MySQLParser.DAY_SYMBOL)
                self.state = 6012
                self.exprWithParentheses()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6013
                localctx.name = self.match(MySQLParser.HOUR_SYMBOL)
                self.state = 6014
                self.exprWithParentheses()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6015
                localctx.name = self.match(MySQLParser.INSERT_SYMBOL)
                self.state = 6016
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6017
                self.expr(0)
                self.state = 6018
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6019
                self.expr(0)
                self.state = 6020
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6021
                self.expr(0)
                self.state = 6022
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6023
                self.expr(0)
                self.state = 6024
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6026
                localctx.name = self.match(MySQLParser.INTERVAL_SYMBOL)
                self.state = 6027
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6028
                self.expr(0)
                self.state = 6031 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6029
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6030
                    self.expr(0)
                    self.state = 6033 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==773):
                        break

                self.state = 6035
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6037
                localctx.name = self.match(MySQLParser.LEFT_SYMBOL)
                self.state = 6038
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6039
                self.expr(0)
                self.state = 6040
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6041
                self.expr(0)
                self.state = 6042
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6044
                localctx.name = self.match(MySQLParser.MINUTE_SYMBOL)
                self.state = 6045
                self.exprWithParentheses()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6046
                localctx.name = self.match(MySQLParser.MONTH_SYMBOL)
                self.state = 6047
                self.exprWithParentheses()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6048
                localctx.name = self.match(MySQLParser.RIGHT_SYMBOL)
                self.state = 6049
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6050
                self.expr(0)
                self.state = 6051
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6052
                self.expr(0)
                self.state = 6053
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6055
                localctx.name = self.match(MySQLParser.SECOND_SYMBOL)
                self.state = 6056
                self.exprWithParentheses()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6057
                localctx.name = self.match(MySQLParser.TIME_SYMBOL)
                self.state = 6058
                self.exprWithParentheses()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6059
                localctx.name = self.match(MySQLParser.TIMESTAMP_SYMBOL)
                self.state = 6060
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6061
                self.expr(0)
                self.state = 6064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 6062
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6063
                    self.expr(0)


                self.state = 6066
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6068
                self.trimFunction()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6069
                localctx.name = self.match(MySQLParser.USER_SYMBOL)
                self.state = 6070
                self.parentheses()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6071
                localctx.name = self.match(MySQLParser.VALUES_SYMBOL)
                self.state = 6072
                self.exprWithParentheses()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6073
                localctx.name = self.match(MySQLParser.YEAR_SYMBOL)
                self.state = 6074
                self.exprWithParentheses()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6075
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==5 or _la==558):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6076
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6077
                self.expr(0)
                self.state = 6078
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,767,self._ctx)
                if la_ == 1:
                    self.state = 6079
                    self.expr(0)
                    pass

                elif la_ == 2:
                    self.state = 6080
                    self.match(MySQLParser.INTERVAL_SYMBOL)
                    self.state = 6081
                    self.expr(0)
                    self.state = 6082
                    self.interval()
                    pass


                self.state = 6086
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6088
                localctx.name = self.match(MySQLParser.CURDATE_SYMBOL)
                self.state = 6090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,768,self._ctx)
                if la_ == 1:
                    self.state = 6089
                    self.parentheses()


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6092
                localctx.name = self.match(MySQLParser.CURTIME_SYMBOL)
                self.state = 6094
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,769,self._ctx)
                if la_ == 1:
                    self.state = 6093
                    self.timeFunctionParameters()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6096
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==114 or _la==115):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6097
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6098
                self.expr(0)
                self.state = 6099
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6100
                self.match(MySQLParser.INTERVAL_SYMBOL)
                self.state = 6101
                self.expr(0)
                self.state = 6102
                self.interval()
                self.state = 6103
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 6105
                localctx.name = self.match(MySQLParser.EXTRACT_SYMBOL)
                self.state = 6106
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6107
                self.interval()
                self.state = 6108
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 6109
                self.expr(0)
                self.state = 6110
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 6112
                localctx.name = self.match(MySQLParser.GET_FORMAT_SYMBOL)
                self.state = 6113
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6114
                self.dateTimeTtype()
                self.state = 6115
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6116
                self.expr(0)
                self.state = 6117
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 6119
                localctx.name = self.match(MySQLParser.NOW_SYMBOL)
                self.state = 6121
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,770,self._ctx)
                if la_ == 1:
                    self.state = 6120
                    self.timeFunctionParameters()


                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 6123
                localctx.name = self.match(MySQLParser.POSITION_SYMBOL)
                self.state = 6124
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6125
                self.bitExpr(0)
                self.state = 6126
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 6127
                self.expr(0)
                self.state = 6128
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 6130
                self.substringFunction()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 6131
                localctx.name = self.match(MySQLParser.SYSDATE_SYMBOL)
                self.state = 6133
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,771,self._ctx)
                if la_ == 1:
                    self.state = 6132
                    self.timeFunctionParameters()


                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 6135
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==584 or _la==585):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6136
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6137
                self.intervalTimeStamp()
                self.state = 6138
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6139
                self.expr(0)
                self.state = 6140
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6141
                self.expr(0)
                self.state = 6142
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 6144
                localctx.name = self.match(MySQLParser.UTC_DATE_SYMBOL)
                self.state = 6146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,772,self._ctx)
                if la_ == 1:
                    self.state = 6145
                    self.parentheses()


                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 6148
                localctx.name = self.match(MySQLParser.UTC_TIME_SYMBOL)
                self.state = 6150
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,773,self._ctx)
                if la_ == 1:
                    self.state = 6149
                    self.timeFunctionParameters()


                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 6152
                localctx.name = self.match(MySQLParser.UTC_TIMESTAMP_SYMBOL)
                self.state = 6154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,774,self._ctx)
                if la_ == 1:
                    self.state = 6153
                    self.timeFunctionParameters()


                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 6156
                localctx.name = self.match(MySQLParser.ASCII_SYMBOL)
                self.state = 6157
                self.exprWithParentheses()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 6158
                localctx.name = self.match(MySQLParser.CHARSET_SYMBOL)
                self.state = 6159
                self.exprWithParentheses()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 6160
                localctx.name = self.match(MySQLParser.COALESCE_SYMBOL)
                self.state = 6161
                self.exprListWithParentheses()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 6162
                localctx.name = self.match(MySQLParser.COLLATION_SYMBOL)
                self.state = 6163
                self.exprWithParentheses()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 6164
                localctx.name = self.match(MySQLParser.DATABASE_SYMBOL)
                self.state = 6165
                self.parentheses()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 6166
                localctx.name = self.match(MySQLParser.IF_SYMBOL)
                self.state = 6167
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6168
                self.expr(0)
                self.state = 6169
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6170
                self.expr(0)
                self.state = 6171
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6172
                self.expr(0)
                self.state = 6173
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 6175
                localctx.name = self.match(MySQLParser.FORMAT_SYMBOL)
                self.state = 6176
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6177
                self.expr(0)
                self.state = 6178
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6179
                self.expr(0)
                self.state = 6182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 6180
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6181
                    self.expr(0)


                self.state = 6184
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 6186
                localctx.name = self.match(MySQLParser.MICROSECOND_SYMBOL)
                self.state = 6187
                self.exprWithParentheses()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 6188
                localctx.name = self.match(MySQLParser.MOD_SYMBOL)
                self.state = 6189
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6190
                self.expr(0)
                self.state = 6191
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6192
                self.expr(0)
                self.state = 6193
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 6195
                if not serverVersion < 50607:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50607")
                self.state = 6196
                localctx.name = self.match(MySQLParser.OLD_PASSWORD_SYMBOL)
                self.state = 6197
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6198
                self.textLiteral()
                self.state = 6199
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 6201
                if not serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80011")
                self.state = 6202
                localctx.name = self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 6203
                self.exprWithParentheses()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 6204
                localctx.name = self.match(MySQLParser.QUARTER_SYMBOL)
                self.state = 6205
                self.exprWithParentheses()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 6206
                localctx.name = self.match(MySQLParser.REPEAT_SYMBOL)
                self.state = 6207
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6208
                self.expr(0)
                self.state = 6209
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6210
                self.expr(0)
                self.state = 6211
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 6213
                localctx.name = self.match(MySQLParser.REPLACE_SYMBOL)
                self.state = 6214
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6215
                self.expr(0)
                self.state = 6216
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6217
                self.expr(0)
                self.state = 6218
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6219
                self.expr(0)
                self.state = 6220
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 6222
                localctx.name = self.match(MySQLParser.REVERSE_SYMBOL)
                self.state = 6223
                self.exprWithParentheses()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 6224
                localctx.name = self.match(MySQLParser.ROW_COUNT_SYMBOL)
                self.state = 6225
                self.parentheses()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 6226
                localctx.name = self.match(MySQLParser.TRUNCATE_SYMBOL)
                self.state = 6227
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6228
                self.expr(0)
                self.state = 6229
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6230
                self.expr(0)
                self.state = 6231
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 6233
                localctx.name = self.match(MySQLParser.WEEK_SYMBOL)
                self.state = 6234
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6235
                self.expr(0)
                self.state = 6238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 6236
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6237
                    self.expr(0)


                self.state = 6240
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 6242
                localctx.name = self.match(MySQLParser.WEIGHT_STRING_SYMBOL)
                self.state = 6243
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6244
                self.expr(0)
                self.state = 6264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,779,self._ctx)
                if la_ == 1:
                    self.state = 6248
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,777,self._ctx)
                    if la_ == 1:
                        self.state = 6245
                        self.match(MySQLParser.AS_SYMBOL)
                        self.state = 6246
                        self.match(MySQLParser.CHAR_SYMBOL)
                        self.state = 6247
                        self.wsNumCodepoints()


                    self.state = 6252
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
                    if la_ == 1:
                        self.state = 6250
                        if not serverVersion < 80000:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion < 80000")
                        self.state = 6251
                        self.weightStringLevels()


                    pass

                elif la_ == 2:
                    self.state = 6254
                    self.match(MySQLParser.AS_SYMBOL)
                    self.state = 6255
                    self.match(MySQLParser.BINARY_SYMBOL)
                    self.state = 6256
                    self.wsNumCodepoints()
                    pass

                elif la_ == 3:
                    self.state = 6257
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6258
                    self.ulong_number()
                    self.state = 6259
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6260
                    self.ulong_number()
                    self.state = 6261
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6262
                    self.ulong_number()
                    pass


                self.state = 6266
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 6268
                self.geometryFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeometryFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTAINS_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def exprListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprListWithParenthesesContext,0)


        def LINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.LINESTRING_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(MySQLParser.POINT_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.POLYGON_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_geometryFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeometryFunction" ):
                listener.enterGeometryFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeometryFunction" ):
                listener.exitGeometryFunction(self)




    def geometryFunction(self):

        localctx = MySQLParser.GeometryFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_geometryFunction)
        try:
            self.state = 6302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,782,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6271
                if not serverVersion < 50706:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50706")
                self.state = 6272
                localctx.name = self.match(MySQLParser.CONTAINS_SYMBOL)
                self.state = 6273
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6274
                self.expr(0)
                self.state = 6275
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6276
                self.expr(0)
                self.state = 6277
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6279
                localctx.name = self.match(MySQLParser.GEOMETRYCOLLECTION_SYMBOL)
                self.state = 6280
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,781,self._ctx)
                if la_ == 1:
                    self.state = 6281
                    self.exprList()


                self.state = 6284
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6285
                localctx.name = self.match(MySQLParser.LINESTRING_SYMBOL)
                self.state = 6286
                self.exprListWithParentheses()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6287
                localctx.name = self.match(MySQLParser.MULTILINESTRING_SYMBOL)
                self.state = 6288
                self.exprListWithParentheses()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6289
                localctx.name = self.match(MySQLParser.MULTIPOINT_SYMBOL)
                self.state = 6290
                self.exprListWithParentheses()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6291
                localctx.name = self.match(MySQLParser.MULTIPOLYGON_SYMBOL)
                self.state = 6292
                self.exprListWithParentheses()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6293
                localctx.name = self.match(MySQLParser.POINT_SYMBOL)
                self.state = 6294
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6295
                self.expr(0)
                self.state = 6296
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6297
                self.expr(0)
                self.state = 6298
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6300
                localctx.name = self.match(MySQLParser.POLYGON_SYMBOL)
                self.state = 6301
                self.exprListWithParentheses()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeFunctionParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def fractionalPrecision(self):
            return self.getTypedRuleContext(MySQLParser.FractionalPrecisionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_timeFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeFunctionParameters" ):
                listener.enterTimeFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeFunctionParameters" ):
                listener.exitTimeFunctionParameters(self)




    def timeFunctionParameters(self):

        localctx = MySQLParser.TimeFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_timeFunctionParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6304
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,783,self._ctx)
            if la_ == 1:
                self.state = 6305
                self.fractionalPrecision()


            self.state = 6308
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FractionalPrecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_fractionalPrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFractionalPrecision" ):
                listener.enterFractionalPrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFractionalPrecision" ):
                listener.exitFractionalPrecision(self)




    def fractionalPrecision(self):

        localctx = MySQLParser.FractionalPrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_fractionalPrecision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6310
            if not serverVersion >= 50604:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50604")
            self.state = 6311
            self.match(MySQLParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WeightStringLevelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.LEVEL_SYMBOL, 0)

        def real_ulong_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Real_ulong_numberContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,i)


        def MINUS_OPERATOR(self):
            return self.getToken(MySQLParser.MINUS_OPERATOR, 0)

        def weightStringLevelListItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.WeightStringLevelListItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.WeightStringLevelListItemContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_weightStringLevels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightStringLevels" ):
                listener.enterWeightStringLevels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightStringLevels" ):
                listener.exitWeightStringLevels(self)




    def weightStringLevels(self):

        localctx = MySQLParser.WeightStringLevelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_weightStringLevels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6313
            self.match(MySQLParser.LEVEL_SYMBOL)
            self.state = 6326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,785,self._ctx)
            if la_ == 1:
                self.state = 6314
                self.real_ulong_number()
                self.state = 6315
                self.match(MySQLParser.MINUS_OPERATOR)
                self.state = 6316
                self.real_ulong_number()
                pass

            elif la_ == 2:
                self.state = 6318
                self.weightStringLevelListItem()
                self.state = 6323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 6319
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6320
                    self.weightStringLevelListItem()
                    self.state = 6325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WeightStringLevelListItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def REVERSE_SYMBOL(self):
            return self.getToken(MySQLParser.REVERSE_SYMBOL, 0)

        def ASC_SYMBOL(self):
            return self.getToken(MySQLParser.ASC_SYMBOL, 0)

        def DESC_SYMBOL(self):
            return self.getToken(MySQLParser.DESC_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_weightStringLevelListItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightStringLevelListItem" ):
                listener.enterWeightStringLevelListItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightStringLevelListItem" ):
                listener.exitWeightStringLevelListItem(self)




    def weightStringLevelListItem(self):

        localctx = MySQLParser.WeightStringLevelListItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_weightStringLevelListItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6328
            self.real_ulong_number()
            self.state = 6334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 134]:
                self.state = 6329
                _la = self._input.LA(1)
                if not(_la==18 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==476:
                    self.state = 6330
                    self.match(MySQLParser.REVERSE_SYMBOL)


                pass
            elif token in [476]:
                self.state = 6333
                self.match(MySQLParser.REVERSE_SYMBOL)
                pass
            elif token in [773, 777]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateTimeTtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(MySQLParser.DATETIME_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dateTimeTtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeTtype" ):
                listener.enterDateTimeTtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeTtype" ):
                listener.exitDateTimeTtype(self)




    def dateTimeTtype(self):

        localctx = MySQLParser.DateTimeTtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_dateTimeTtype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6336
            _la = self._input.LA(1)
            if not(_la==113 or _la==116 or _la==583 or _la==586):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrimFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIM_SYMBOL(self):
            return self.getToken(MySQLParser.TRIM_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def LEADING_SYMBOL(self):
            return self.getToken(MySQLParser.LEADING_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def TRAILING_SYMBOL(self):
            return self.getToken(MySQLParser.TRAILING_SYMBOL, 0)

        def BOTH_SYMBOL(self):
            return self.getToken(MySQLParser.BOTH_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_trimFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunction" ):
                listener.enterTrimFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunction" ):
                listener.exitTrimFunction(self)




    def trimFunction(self):

        localctx = MySQLParser.TrimFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_trimFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6338
            self.match(MySQLParser.TRIM_SYMBOL)
            self.state = 6339
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,792,self._ctx)
            if la_ == 1:
                self.state = 6340
                self.expr(0)
                self.state = 6343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 6341
                    self.match(MySQLParser.FROM_SYMBOL)
                    self.state = 6342
                    self.expr(0)


                pass

            elif la_ == 2:
                self.state = 6345
                self.match(MySQLParser.LEADING_SYMBOL)
                self.state = 6347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,789,self._ctx)
                if la_ == 1:
                    self.state = 6346
                    self.expr(0)


                self.state = 6349
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 6350
                self.expr(0)
                pass

            elif la_ == 3:
                self.state = 6351
                self.match(MySQLParser.TRAILING_SYMBOL)
                self.state = 6353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,790,self._ctx)
                if la_ == 1:
                    self.state = 6352
                    self.expr(0)


                self.state = 6355
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 6356
                self.expr(0)
                pass

            elif la_ == 4:
                self.state = 6357
                self.match(MySQLParser.BOTH_SYMBOL)
                self.state = 6359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,791,self._ctx)
                if la_ == 1:
                    self.state = 6358
                    self.expr(0)


                self.state = 6361
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 6362
                self.expr(0)
                pass


            self.state = 6365
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubstringFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTRING_SYMBOL(self):
            return self.getToken(MySQLParser.SUBSTRING_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_substringFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstringFunction" ):
                listener.enterSubstringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstringFunction" ):
                listener.exitSubstringFunction(self)




    def substringFunction(self):

        localctx = MySQLParser.SubstringFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_substringFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6367
            self.match(MySQLParser.SUBSTRING_SYMBOL)
            self.state = 6368
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6369
            self.expr(0)
            self.state = 6382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [773]:
                self.state = 6370
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6371
                self.expr(0)
                self.state = 6374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==773:
                    self.state = 6372
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6373
                    self.expr(0)


                pass
            elif token in [203]:
                self.state = 6376
                self.match(MySQLParser.FROM_SYMBOL)
                self.state = 6377
                self.expr(0)
                self.state = 6380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==200:
                    self.state = 6378
                    self.match(MySQLParser.FOR_SYMBOL)
                    self.state = 6379
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 6384
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def udfExprList(self):
            return self.getTypedRuleContext(MySQLParser.UdfExprListContext,0)


        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = MySQLParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_functionCall)
        try:
            self.state = 6400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,798,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6386
                self.pureIdentifier()
                self.state = 6387
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6389
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,796,self._ctx)
                if la_ == 1:
                    self.state = 6388
                    self.udfExprList()


                self.state = 6391
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6393
                self.qualifiedIdentifier()
                self.state = 6394
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 6396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,797,self._ctx)
                if la_ == 1:
                    self.state = 6395
                    self.exprList()


                self.state = 6398
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def udfExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UdfExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UdfExprContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_udfExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfExprList" ):
                listener.enterUdfExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfExprList" ):
                listener.exitUdfExprList(self)




    def udfExprList(self):

        localctx = MySQLParser.UdfExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_udfExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6402
            self.udfExpr()
            self.state = 6407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 6403
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6404
                self.udfExpr()
                self.state = 6409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def selectAlias(self):
            return self.getTypedRuleContext(MySQLParser.SelectAliasContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_udfExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfExpr" ):
                listener.enterUdfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfExpr" ):
                listener.exitUdfExpr(self)




    def udfExpr(self):

        localctx = MySQLParser.UdfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_udfExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6410
            self.expr(0)
            self.state = 6412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,800,self._ctx)
            if la_ == 1:
                self.state = 6411
                self.selectAlias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userVariable(self):
            return self.getTypedRuleContext(MySQLParser.UserVariableContext,0)


        def systemVariable(self):
            return self.getTypedRuleContext(MySQLParser.SystemVariableContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = MySQLParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_variable)
        try:
            self.state = 6416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [783, 784]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6414
                self.userVariable()
                pass
            elif token in [785]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6415
                self.systemVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(MySQLParser.AT_TEXT_SUFFIX, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_userVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariable" ):
                listener.enterUserVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariable" ):
                listener.exitUserVariable(self)




    def userVariable(self):

        localctx = MySQLParser.UserVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_userVariable)
        try:
            self.state = 6421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [783]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6418
                self.match(MySQLParser.AT_SIGN_SYMBOL)
                self.state = 6419
                self.textOrIdentifier()
                pass
            elif token in [784]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6420
                self.match(MySQLParser.AT_TEXT_SUFFIX)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SystemVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def varIdentType(self):
            return self.getTypedRuleContext(MySQLParser.VarIdentTypeContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_systemVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystemVariable" ):
                listener.enterSystemVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystemVariable" ):
                listener.exitSystemVariable(self)




    def systemVariable(self):

        localctx = MySQLParser.SystemVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_systemVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6423
            self.match(MySQLParser.AT_AT_SIGN_SYMBOL)
            self.state = 6425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,803,self._ctx)
            if la_ == 1:
                self.state = 6424
                self.varIdentType()


            self.state = 6427
            self.textOrIdentifier()
            self.state = 6429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,804,self._ctx)
            if la_ == 1:
                self.state = 6428
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InternalVariableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def lValueIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.LValueIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_internalVariableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInternalVariableName" ):
                listener.enterInternalVariableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInternalVariableName" ):
                listener.exitInternalVariableName(self)




    def internalVariableName(self):

        localctx = MySQLParser.InternalVariableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_internalVariableName)
        self._la = 0 # Token type
        try:
            self.state = 6445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,808,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,807,self._ctx)
                if la_ == 1:
                    self.state = 6431
                    if not serverVersion < 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 80017")
                    self.state = 6432
                    self.identifier()
                    self.state = 6434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==772:
                        self.state = 6433
                        self.dotIdentifier()


                    pass

                elif la_ == 2:
                    self.state = 6436
                    if not serverVersion >= 80017:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80017")
                    self.state = 6437
                    self.lValueIdentifier()
                    self.state = 6439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==772:
                        self.state = 6438
                        self.dotIdentifier()


                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6443
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 6444
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_SYMBOL(self):
            return self.getToken(MySQLParser.WHEN_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)




    def whenExpression(self):

        localctx = MySQLParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_whenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6447
            self.match(MySQLParser.WHEN_SYMBOL)
            self.state = 6448
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN_SYMBOL(self):
            return self.getToken(MySQLParser.THEN_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_thenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThenExpression" ):
                listener.enterThenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThenExpression" ):
                listener.exitThenExpression(self)




    def thenExpression(self):

        localctx = MySQLParser.ThenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_thenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6450
            self.match(MySQLParser.THEN_SYMBOL)
            self.state = 6451
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE_SYMBOL(self):
            return self.getToken(MySQLParser.ELSE_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_elseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseExpression" ):
                listener.enterElseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseExpression" ):
                listener.exitElseExpression(self)




    def elseExpression(self):

        localctx = MySQLParser.ElseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_elseExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6453
            self.match(MySQLParser.ELSE_SYMBOL)
            self.state = 6454
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(MySQLParser.FieldLengthContext,0)


        def CHAR_SYMBOL(self):
            return self.getToken(MySQLParser.CHAR_SYMBOL, 0)

        def charsetWithOptBinary(self):
            return self.getTypedRuleContext(MySQLParser.CharsetWithOptBinaryContext,0)


        def nchar(self):
            return self.getTypedRuleContext(MySQLParser.NcharContext,0)


        def SIGNED_SYMBOL(self):
            return self.getToken(MySQLParser.SIGNED_SYMBOL, 0)

        def INT_SYMBOL(self):
            return self.getToken(MySQLParser.INT_SYMBOL, 0)

        def UNSIGNED_SYMBOL(self):
            return self.getToken(MySQLParser.UNSIGNED_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def typeDatetimePrecision(self):
            return self.getTypedRuleContext(MySQLParser.TypeDatetimePrecisionContext,0)


        def DATETIME_SYMBOL(self):
            return self.getToken(MySQLParser.DATETIME_SYMBOL, 0)

        def DECIMAL_SYMBOL(self):
            return self.getToken(MySQLParser.DECIMAL_SYMBOL, 0)

        def floatOptions(self):
            return self.getTypedRuleContext(MySQLParser.FloatOptionsContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_SYMBOL, 0)

        def realType(self):
            return self.getTypedRuleContext(MySQLParser.RealTypeContext,0)


        def FLOAT_SYMBOL(self):
            return self.getToken(MySQLParser.FLOAT_SYMBOL, 0)

        def standardFloatOptions(self):
            return self.getTypedRuleContext(MySQLParser.StandardFloatOptionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_castType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastType" ):
                listener.enterCastType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastType" ):
                listener.exitCastType(self)




    def castType(self):

        localctx = MySQLParser.CastTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_castType)
        try:
            self.state = 6501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,819,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6456
                self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 6458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,809,self._ctx)
                if la_ == 1:
                    self.state = 6457
                    self.fieldLength()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6460
                self.match(MySQLParser.CHAR_SYMBOL)
                self.state = 6462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,810,self._ctx)
                if la_ == 1:
                    self.state = 6461
                    self.fieldLength()


                self.state = 6465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,811,self._ctx)
                if la_ == 1:
                    self.state = 6464
                    self.charsetWithOptBinary()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6467
                self.nchar()
                self.state = 6469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,812,self._ctx)
                if la_ == 1:
                    self.state = 6468
                    self.fieldLength()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6471
                self.match(MySQLParser.SIGNED_SYMBOL)
                self.state = 6473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
                if la_ == 1:
                    self.state = 6472
                    self.match(MySQLParser.INT_SYMBOL)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6475
                self.match(MySQLParser.UNSIGNED_SYMBOL)
                self.state = 6477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,814,self._ctx)
                if la_ == 1:
                    self.state = 6476
                    self.match(MySQLParser.INT_SYMBOL)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6479
                self.match(MySQLParser.DATE_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6480
                self.match(MySQLParser.TIME_SYMBOL)
                self.state = 6482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
                if la_ == 1:
                    self.state = 6481
                    self.typeDatetimePrecision()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6484
                self.match(MySQLParser.DATETIME_SYMBOL)
                self.state = 6486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
                if la_ == 1:
                    self.state = 6485
                    self.typeDatetimePrecision()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6488
                self.match(MySQLParser.DECIMAL_SYMBOL)
                self.state = 6490
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,817,self._ctx)
                if la_ == 1:
                    self.state = 6489
                    self.floatOptions()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6492
                if not serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50708")
                self.state = 6493
                self.match(MySQLParser.JSON_SYMBOL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6494
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 6495
                self.realType()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6496
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 6497
                self.match(MySQLParser.FLOAT_SYMBOL)
                self.state = 6499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,818,self._ctx)
                if la_ == 1:
                    self.state = 6498
                    self.standardFloatOptions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self):

        localctx = MySQLParser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6503
            self.expr(0)
            self.state = 6508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 6504
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6505
                self.expr(0)
                self.state = 6510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_SYMBOL(self):
            return self.getToken(MySQLParser.CHAR_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(MySQLParser.CHARSET_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_charset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharset" ):
                listener.enterCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharset" ):
                listener.exitCharset(self)




    def charset(self):

        localctx = MySQLParser.CharsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_charset)
        try:
            self.state = 6514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6511
                self.match(MySQLParser.CHAR_SYMBOL)
                self.state = 6512
                self.match(MySQLParser.SET_SYMBOL)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6513
                self.match(MySQLParser.CHARSET_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def NOT2_SYMBOL(self):
            return self.getToken(MySQLParser.NOT2_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_notRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotRule" ):
                listener.enterNotRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotRule" ):
                listener.exitNotRule(self)




    def notRule(self):

        localctx = MySQLParser.NotRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_notRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6516
            _la = self._input.LA(1)
            if not(_la==371 or _la==745):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not2RuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGICAL_NOT_OPERATOR(self):
            return self.getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0)

        def NOT2_SYMBOL(self):
            return self.getToken(MySQLParser.NOT2_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_not2Rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot2Rule" ):
                listener.enterNot2Rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot2Rule" ):
                listener.exitNot2Rule(self)




    def not2Rule(self):

        localctx = MySQLParser.Not2RuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_not2Rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6518
            _la = self._input.LA(1)
            if not(_la==745 or _la==763):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalTimeStamp(self):
            return self.getTypedRuleContext(MySQLParser.IntervalTimeStampContext,0)


        def SECOND_MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0)

        def MINUTE_MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0)

        def MINUTE_SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0)

        def HOUR_MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0)

        def HOUR_SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0)

        def HOUR_MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0)

        def DAY_MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0)

        def DAY_SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SECOND_SYMBOL, 0)

        def DAY_MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0)

        def DAY_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_HOUR_SYMBOL, 0)

        def YEAR_MONTH_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = MySQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.state = 6522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122, 229, 337, 343, 350, 429, 495, 640, 656]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6520
                self.intervalTimeStamp()
                pass
            elif token in [118, 119, 120, 121, 226, 227, 228, 341, 342, 494, 655]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6521
                _la = self._input.LA(1)
                if not((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 15) != 0 or (((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & 7) != 0 or _la==341 or _la==342 or _la==494 or _la==655):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTimeStampContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MICROSECOND_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.SECOND_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(MySQLParser.WEEK_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(MySQLParser.MONTH_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(MySQLParser.QUARTER_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_intervalTimeStamp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTimeStamp" ):
                listener.enterIntervalTimeStamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTimeStamp" ):
                listener.exitIntervalTimeStamp(self)




    def intervalTimeStamp(self):

        localctx = MySQLParser.IntervalTimeStampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_intervalTimeStamp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6524
            _la = self._input.LA(1)
            if not(_la==122 or _la==229 or (((_la - 337)) & ~0x3f) == 0 and ((1 << (_la - 337)) & 8257) != 0 or _la==429 or _la==495 or _la==640 or _la==656):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def exprList(self):
            return self.getTypedRuleContext(MySQLParser.ExprListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_exprListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprListWithParentheses" ):
                listener.enterExprListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprListWithParentheses" ):
                listener.exitExprListWithParentheses(self)




    def exprListWithParentheses(self):

        localctx = MySQLParser.ExprListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_exprListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6526
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6527
            self.exprList()
            self.state = 6528
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_exprWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprWithParentheses" ):
                listener.enterExprWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprWithParentheses" ):
                listener.exitExprWithParentheses(self)




    def exprWithParentheses(self):

        localctx = MySQLParser.ExprWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_exprWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6530
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6531
            self.expr(0)
            self.state = 6532
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(MySQLParser.SimpleExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_simpleExprWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExprWithParentheses" ):
                listener.enterSimpleExprWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExprWithParentheses" ):
                listener.exitSimpleExprWithParentheses(self)




    def simpleExprWithParentheses(self):

        localctx = MySQLParser.SimpleExprWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_simpleExprWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6534
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 6535
            self.simpleExpr(0)
            self.state = 6536
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.OrderExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.OrderExpressionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_orderList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderList" ):
                listener.enterOrderList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderList" ):
                listener.exitOrderList(self)




    def orderList(self):

        localctx = MySQLParser.OrderListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_orderList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6538
            self.orderExpression()
            self.state = 6543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,823,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6539
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6540
                    self.orderExpression() 
                self.state = 6545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,823,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def direction(self):
            return self.getTypedRuleContext(MySQLParser.DirectionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_orderExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderExpression" ):
                listener.enterOrderExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderExpression" ):
                listener.exitOrderExpression(self)




    def orderExpression(self):

        localctx = MySQLParser.OrderExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_orderExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6546
            self.expr(0)
            self.state = 6548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
            if la_ == 1:
                self.state = 6547
                self.direction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.GroupingExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.GroupingExpressionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_groupList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupList" ):
                listener.enterGroupList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupList" ):
                listener.exitGroupList(self)




    def groupList(self):

        localctx = MySQLParser.GroupListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_groupList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6550
            self.groupingExpression()
            self.state = 6555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 6551
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 6552
                self.groupingExpression()
                self.state = 6557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_groupingExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingExpression" ):
                listener.enterGroupingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingExpression" ):
                listener.exitGroupingExpression(self)




    def groupingExpression(self):

        localctx = MySQLParser.GroupingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_groupingExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6558
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def CHANNEL_SYMBOL(self):
            return self.getToken(MySQLParser.CHANNEL_SYMBOL, 0)

        def textStringNoLinebreak(self):
            return self.getTypedRuleContext(MySQLParser.TextStringNoLinebreakContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_channel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannel" ):
                listener.enterChannel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannel" ):
                listener.exitChannel(self)




    def channel(self):

        localctx = MySQLParser.ChannelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_channel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6560
            if not serverVersion >= 50706:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50706")
            self.state = 6561
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 6562
            self.match(MySQLParser.CHANNEL_SYMBOL)
            self.state = 6563
            self.textStringNoLinebreak()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStatement(self):
            return self.getTypedRuleContext(MySQLParser.SimpleStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(MySQLParser.ReturnStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(MySQLParser.IfStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(MySQLParser.CaseStatementContext,0)


        def labeledBlock(self):
            return self.getTypedRuleContext(MySQLParser.LabeledBlockContext,0)


        def unlabeledBlock(self):
            return self.getTypedRuleContext(MySQLParser.UnlabeledBlockContext,0)


        def labeledControl(self):
            return self.getTypedRuleContext(MySQLParser.LabeledControlContext,0)


        def unlabeledControl(self):
            return self.getTypedRuleContext(MySQLParser.UnlabeledControlContext,0)


        def leaveStatement(self):
            return self.getTypedRuleContext(MySQLParser.LeaveStatementContext,0)


        def iterateStatement(self):
            return self.getTypedRuleContext(MySQLParser.IterateStatementContext,0)


        def cursorOpen(self):
            return self.getTypedRuleContext(MySQLParser.CursorOpenContext,0)


        def cursorFetch(self):
            return self.getTypedRuleContext(MySQLParser.CursorFetchContext,0)


        def cursorClose(self):
            return self.getTypedRuleContext(MySQLParser.CursorCloseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = MySQLParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_compoundStatement)
        try:
            self.state = 6578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,826,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6565
                self.simpleStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6566
                self.returnStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6567
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6568
                self.caseStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6569
                self.labeledBlock()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6570
                self.unlabeledBlock()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6571
                self.labeledControl()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6572
                self.unlabeledControl()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6573
                self.leaveStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6574
                self.iterateStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6575
                self.cursorOpen()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6576
                self.cursorFetch()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6577
                self.cursorClose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN_SYMBOL(self):
            return self.getToken(MySQLParser.RETURN_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = MySQLParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6580
            self.match(MySQLParser.RETURN_SYMBOL)
            self.state = 6581
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.IF_SYMBOL)
            else:
                return self.getToken(MySQLParser.IF_SYMBOL, i)

        def ifBody(self):
            return self.getTypedRuleContext(MySQLParser.IfBodyContext,0)


        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = MySQLParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6583
            self.match(MySQLParser.IF_SYMBOL)
            self.state = 6584
            self.ifBody()
            self.state = 6585
            self.match(MySQLParser.END_SYMBOL)
            self.state = 6586
            self.match(MySQLParser.IF_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def thenStatement(self):
            return self.getTypedRuleContext(MySQLParser.ThenStatementContext,0)


        def ELSEIF_SYMBOL(self):
            return self.getToken(MySQLParser.ELSEIF_SYMBOL, 0)

        def ifBody(self):
            return self.getTypedRuleContext(MySQLParser.IfBodyContext,0)


        def ELSE_SYMBOL(self):
            return self.getToken(MySQLParser.ELSE_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_ifBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBody" ):
                listener.enterIfBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBody" ):
                listener.exitIfBody(self)




    def ifBody(self):

        localctx = MySQLParser.IfBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_ifBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6588
            self.expr(0)
            self.state = 6589
            self.thenStatement()
            self.state = 6594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [155]:
                self.state = 6590
                self.match(MySQLParser.ELSEIF_SYMBOL)
                self.state = 6591
                self.ifBody()
                pass
            elif token in [154]:
                self.state = 6592
                self.match(MySQLParser.ELSE_SYMBOL)
                self.state = 6593
                self.compoundStatementList()
                pass
            elif token in [159]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN_SYMBOL(self):
            return self.getToken(MySQLParser.THEN_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_thenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThenStatement" ):
                listener.enterThenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThenStatement" ):
                listener.exitThenStatement(self)




    def thenStatement(self):

        localctx = MySQLParser.ThenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_thenStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6596
            self.match(MySQLParser.THEN_SYMBOL)
            self.state = 6597
            self.compoundStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CompoundStatementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MySQLParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_compoundStatementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatementList" ):
                listener.enterCompoundStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatementList" ):
                listener.exitCompoundStatementList(self)




    def compoundStatementList(self):

        localctx = MySQLParser.CompoundStatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_compoundStatementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6602 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6599
                    self.compoundStatement()
                    self.state = 6600
                    self.match(MySQLParser.SEMICOLON_SYMBOL)

                else:
                    raise NoViableAltException(self)
                self.state = 6604 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,828,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.CASE_SYMBOL)
            else:
                return self.getToken(MySQLParser.CASE_SYMBOL, i)

        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def whenExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.WhenExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.WhenExpressionContext,i)


        def thenStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ThenStatementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ThenStatementContext,i)


        def elseStatement(self):
            return self.getTypedRuleContext(MySQLParser.ElseStatementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)




    def caseStatement(self):

        localctx = MySQLParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6606
            self.match(MySQLParser.CASE_SYMBOL)
            self.state = 6608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,829,self._ctx)
            if la_ == 1:
                self.state = 6607
                self.expr(0)


            self.state = 6613 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6610
                self.whenExpression()
                self.state = 6611
                self.thenStatement()
                self.state = 6615 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==642):
                    break

            self.state = 6618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154:
                self.state = 6617
                self.elseStatement()


            self.state = 6620
            self.match(MySQLParser.END_SYMBOL)
            self.state = 6621
            self.match(MySQLParser.CASE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE_SYMBOL(self):
            return self.getToken(MySQLParser.ELSE_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_elseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)




    def elseStatement(self):

        localctx = MySQLParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6623
            self.match(MySQLParser.ELSE_SYMBOL)
            self.state = 6624
            self.compoundStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(MySQLParser.LabelContext,0)


        def beginEndBlock(self):
            return self.getTypedRuleContext(MySQLParser.BeginEndBlockContext,0)


        def labelRef(self):
            return self.getTypedRuleContext(MySQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_labeledBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledBlock" ):
                listener.enterLabeledBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledBlock" ):
                listener.exitLabeledBlock(self)




    def labeledBlock(self):

        localctx = MySQLParser.LabeledBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_labeledBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6626
            self.label()
            self.state = 6627
            self.beginEndBlock()
            self.state = 6629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,832,self._ctx)
            if la_ == 1:
                self.state = 6628
                self.labelRef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlabeledBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def beginEndBlock(self):
            return self.getTypedRuleContext(MySQLParser.BeginEndBlockContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_unlabeledBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlabeledBlock" ):
                listener.enterUnlabeledBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlabeledBlock" ):
                listener.exitUnlabeledBlock(self)




    def unlabeledBlock(self):

        localctx = MySQLParser.UnlabeledBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_unlabeledBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6631
            self.beginEndBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.LabelIdentifierContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MySQLParser.COLON_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)




    def label(self):

        localctx = MySQLParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6633
            self.labelIdentifier()
            self.state = 6634
            self.match(MySQLParser.COLON_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginEndBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_SYMBOL(self):
            return self.getToken(MySQLParser.BEGIN_SYMBOL, 0)

        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def spDeclarations(self):
            return self.getTypedRuleContext(MySQLParser.SpDeclarationsContext,0)


        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_beginEndBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginEndBlock" ):
                listener.enterBeginEndBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginEndBlock" ):
                listener.exitBeginEndBlock(self)




    def beginEndBlock(self):

        localctx = MySQLParser.BeginEndBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_beginEndBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6636
            self.match(MySQLParser.BEGIN_SYMBOL)
            self.state = 6638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
            if la_ == 1:
                self.state = 6637
                self.spDeclarations()


            self.state = 6641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,834,self._ctx)
            if la_ == 1:
                self.state = 6640
                self.compoundStatementList()


            self.state = 6643
            self.match(MySQLParser.END_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(MySQLParser.LabelContext,0)


        def unlabeledControl(self):
            return self.getTypedRuleContext(MySQLParser.UnlabeledControlContext,0)


        def labelRef(self):
            return self.getTypedRuleContext(MySQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_labeledControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledControl" ):
                listener.enterLabeledControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledControl" ):
                listener.exitLabeledControl(self)




    def labeledControl(self):

        localctx = MySQLParser.LabeledControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_labeledControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6645
            self.label()
            self.state = 6646
            self.unlabeledControl()
            self.state = 6648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,835,self._ctx)
            if la_ == 1:
                self.state = 6647
                self.labelRef()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlabeledControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopBlock(self):
            return self.getTypedRuleContext(MySQLParser.LoopBlockContext,0)


        def whileDoBlock(self):
            return self.getTypedRuleContext(MySQLParser.WhileDoBlockContext,0)


        def repeatUntilBlock(self):
            return self.getTypedRuleContext(MySQLParser.RepeatUntilBlockContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_unlabeledControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlabeledControl" ):
                listener.enterUnlabeledControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlabeledControl" ):
                listener.exitUnlabeledControl(self)




    def unlabeledControl(self):

        localctx = MySQLParser.UnlabeledControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_unlabeledControl)
        try:
            self.state = 6653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [294]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6650
                self.loopBlock()
                pass
            elif token in [644]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6651
                self.whileDoBlock()
                pass
            elif token in [457]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6652
                self.repeatUntilBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.LOOP_SYMBOL)
            else:
                return self.getToken(MySQLParser.LOOP_SYMBOL, i)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_loopBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopBlock" ):
                listener.enterLoopBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopBlock" ):
                listener.exitLoopBlock(self)




    def loopBlock(self):

        localctx = MySQLParser.LoopBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_loopBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6655
            self.match(MySQLParser.LOOP_SYMBOL)
            self.state = 6656
            self.compoundStatementList()
            self.state = 6657
            self.match(MySQLParser.END_SYMBOL)
            self.state = 6658
            self.match(MySQLParser.LOOP_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileDoBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.WHILE_SYMBOL)
            else:
                return self.getToken(MySQLParser.WHILE_SYMBOL, i)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_whileDoBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileDoBlock" ):
                listener.enterWhileDoBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileDoBlock" ):
                listener.exitWhileDoBlock(self)




    def whileDoBlock(self):

        localctx = MySQLParser.WhileDoBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_whileDoBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6660
            self.match(MySQLParser.WHILE_SYMBOL)
            self.state = 6661
            self.expr(0)
            self.state = 6662
            self.match(MySQLParser.DO_SYMBOL)
            self.state = 6663
            self.compoundStatementList()
            self.state = 6664
            self.match(MySQLParser.END_SYMBOL)
            self.state = 6665
            self.match(MySQLParser.WHILE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatUntilBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.REPEAT_SYMBOL)
            else:
                return self.getToken(MySQLParser.REPEAT_SYMBOL, i)

        def compoundStatementList(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementListContext,0)


        def UNTIL_SYMBOL(self):
            return self.getToken(MySQLParser.UNTIL_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_repeatUntilBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatUntilBlock" ):
                listener.enterRepeatUntilBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatUntilBlock" ):
                listener.exitRepeatUntilBlock(self)




    def repeatUntilBlock(self):

        localctx = MySQLParser.RepeatUntilBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_repeatUntilBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6667
            self.match(MySQLParser.REPEAT_SYMBOL)
            self.state = 6668
            self.compoundStatementList()
            self.state = 6669
            self.match(MySQLParser.UNTIL_SYMBOL)
            self.state = 6670
            self.expr(0)
            self.state = 6671
            self.match(MySQLParser.END_SYMBOL)
            self.state = 6672
            self.match(MySQLParser.REPEAT_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SpDeclarationContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SpDeclarationContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MySQLParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_spDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpDeclarations" ):
                listener.enterSpDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpDeclarations" ):
                listener.exitSpDeclarations(self)




    def spDeclarations(self):

        localctx = MySQLParser.SpDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_spDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6677 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6674
                    self.spDeclaration()
                    self.state = 6675
                    self.match(MySQLParser.SEMICOLON_SYMBOL)

                else:
                    raise NoViableAltException(self)
                self.state = 6679 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,837,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(MySQLParser.VariableDeclarationContext,0)


        def conditionDeclaration(self):
            return self.getTypedRuleContext(MySQLParser.ConditionDeclarationContext,0)


        def handlerDeclaration(self):
            return self.getTypedRuleContext(MySQLParser.HandlerDeclarationContext,0)


        def cursorDeclaration(self):
            return self.getTypedRuleContext(MySQLParser.CursorDeclarationContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_spDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpDeclaration" ):
                listener.enterSpDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpDeclaration" ):
                listener.exitSpDeclaration(self)




    def spDeclaration(self):

        localctx = MySQLParser.SpDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_spDeclaration)
        try:
            self.state = 6685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,838,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6681
                self.variableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6682
                self.conditionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6683
                self.handlerDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6684
                self.cursorDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(MySQLParser.DECLARE_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySQLParser.DataTypeContext,0)


        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = MySQLParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6687
            self.match(MySQLParser.DECLARE_SYMBOL)
            self.state = 6688
            self.identifierList()
            self.state = 6689
            self.dataType()
            self.state = 6691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 6690
                self.collate()


            self.state = 6695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 6693
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 6694
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(MySQLParser.DECLARE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def CONDITION_SYMBOL(self):
            return self.getToken(MySQLParser.CONDITION_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def spCondition(self):
            return self.getTypedRuleContext(MySQLParser.SpConditionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_conditionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionDeclaration" ):
                listener.enterConditionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionDeclaration" ):
                listener.exitConditionDeclaration(self)




    def conditionDeclaration(self):

        localctx = MySQLParser.ConditionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_conditionDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6697
            self.match(MySQLParser.DECLARE_SYMBOL)
            self.state = 6698
            self.identifier()
            self.state = 6699
            self.match(MySQLParser.CONDITION_SYMBOL)
            self.state = 6700
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 6701
            self.spCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def sqlstate(self):
            return self.getTypedRuleContext(MySQLParser.SqlstateContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_spCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpCondition" ):
                listener.enterSpCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpCondition" ):
                listener.exitSpCondition(self)




    def spCondition(self):

        localctx = MySQLParser.SpConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_spCondition)
        try:
            self.state = 6705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [747, 748, 749, 788, 790, 791]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6703
                self.ulong_number()
                pass
            elif token in [526]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6704
                self.sqlstate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlstateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQLSTATE_SYMBOL(self):
            return self.getToken(MySQLParser.SQLSTATE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.VALUE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_sqlstate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlstate" ):
                listener.enterSqlstate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlstate" ):
                listener.exitSqlstate(self)




    def sqlstate(self):

        localctx = MySQLParser.SqlstateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_sqlstate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6707
            self.match(MySQLParser.SQLSTATE_SYMBOL)
            self.state = 6709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,842,self._ctx)
            if la_ == 1:
                self.state = 6708
                self.match(MySQLParser.VALUE_SYMBOL)


            self.state = 6711
            self.textLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(MySQLParser.DECLARE_SYMBOL, 0)

        def HANDLER_SYMBOL(self):
            return self.getToken(MySQLParser.HANDLER_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def handlerCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.HandlerConditionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.HandlerConditionContext,i)


        def compoundStatement(self):
            return self.getTypedRuleContext(MySQLParser.CompoundStatementContext,0)


        def CONTINUE_SYMBOL(self):
            return self.getToken(MySQLParser.CONTINUE_SYMBOL, 0)

        def EXIT_SYMBOL(self):
            return self.getToken(MySQLParser.EXIT_SYMBOL, 0)

        def UNDO_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_handlerDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerDeclaration" ):
                listener.enterHandlerDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerDeclaration" ):
                listener.exitHandlerDeclaration(self)




    def handlerDeclaration(self):

        localctx = MySQLParser.HandlerDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_handlerDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6713
            self.match(MySQLParser.DECLARE_SYMBOL)
            self.state = 6714
            _la = self._input.LA(1)
            if not(_la==92 or _la==175 or _la==605):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6715
            self.match(MySQLParser.HANDLER_SYMBOL)
            self.state = 6716
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 6717
            self.handlerCondition()
            self.state = 6722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,843,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6718
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6719
                    self.handlerCondition() 
                self.state = 6724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,843,self._ctx)

            self.state = 6725
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def spCondition(self):
            return self.getTypedRuleContext(MySQLParser.SpConditionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def SQLWARNING_SYMBOL(self):
            return self.getToken(MySQLParser.SQLWARNING_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def FOUND_SYMBOL(self):
            return self.getToken(MySQLParser.FOUND_SYMBOL, 0)

        def SQLEXCEPTION_SYMBOL(self):
            return self.getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_handlerCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerCondition" ):
                listener.enterHandlerCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerCondition" ):
                listener.exitHandlerCondition(self)




    def handlerCondition(self):

        localctx = MySQLParser.HandlerConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_handlerCondition)
        try:
            self.state = 6734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,844,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6727
                self.spCondition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6728
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6729
                self.match(MySQLParser.SQLWARNING_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6730
                self.notRule()
                self.state = 6731
                self.match(MySQLParser.FOUND_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6733
                self.match(MySQLParser.SQLEXCEPTION_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE_SYMBOL(self):
            return self.getToken(MySQLParser.DECLARE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def CURSOR_SYMBOL(self):
            return self.getToken(MySQLParser.CURSOR_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MySQLParser.FOR_SYMBOL, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySQLParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_cursorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorDeclaration" ):
                listener.enterCursorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorDeclaration" ):
                listener.exitCursorDeclaration(self)




    def cursorDeclaration(self):

        localctx = MySQLParser.CursorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_cursorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6736
            self.match(MySQLParser.DECLARE_SYMBOL)
            self.state = 6737
            self.identifier()
            self.state = 6738
            self.match(MySQLParser.CURSOR_SYMBOL)
            self.state = 6739
            self.match(MySQLParser.FOR_SYMBOL)
            self.state = 6740
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE_SYMBOL(self):
            return self.getToken(MySQLParser.ITERATE_SYMBOL, 0)

        def labelRef(self):
            return self.getTypedRuleContext(MySQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_iterateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterateStatement" ):
                listener.enterIterateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterateStatement" ):
                listener.exitIterateStatement(self)




    def iterateStatement(self):

        localctx = MySQLParser.IterateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_iterateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6742
            self.match(MySQLParser.ITERATE_SYMBOL)
            self.state = 6743
            self.labelRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeaveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEAVE_SYMBOL(self):
            return self.getToken(MySQLParser.LEAVE_SYMBOL, 0)

        def labelRef(self):
            return self.getTypedRuleContext(MySQLParser.LabelRefContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_leaveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeaveStatement" ):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeaveStatement" ):
                listener.exitLeaveStatement(self)




    def leaveStatement(self):

        localctx = MySQLParser.LeaveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_leaveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6745
            self.match(MySQLParser.LEAVE_SYMBOL)
            self.state = 6746
            self.labelRef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetDiagnosticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_SYMBOL(self):
            return self.getToken(MySQLParser.GET_SYMBOL, 0)

        def DIAGNOSTICS_SYMBOL(self):
            return self.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0)

        def statementInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.StatementInformationItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.StatementInformationItemContext,i)


        def CONDITION_SYMBOL(self):
            return self.getToken(MySQLParser.CONDITION_SYMBOL, 0)

        def signalAllowedExpr(self):
            return self.getTypedRuleContext(MySQLParser.SignalAllowedExprContext,0)


        def conditionInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ConditionInformationItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ConditionInformationItemContext,i)


        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def STACKED_SYMBOL(self):
            return self.getToken(MySQLParser.STACKED_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_getDiagnostics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetDiagnostics" ):
                listener.enterGetDiagnostics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetDiagnostics" ):
                listener.exitGetDiagnostics(self)




    def getDiagnostics(self):

        localctx = MySQLParser.GetDiagnosticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_getDiagnostics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6748
            self.match(MySQLParser.GET_SYMBOL)
            self.state = 6752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,845,self._ctx)
            if la_ == 1:
                self.state = 6749
                self.match(MySQLParser.CURRENT_SYMBOL)

            elif la_ == 2:
                self.state = 6750
                if not serverVersion >= 50700:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50700")
                self.state = 6751
                self.match(MySQLParser.STACKED_SYMBOL)


            self.state = 6754
            self.match(MySQLParser.DIAGNOSTICS_SYMBOL)
            self.state = 6773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,848,self._ctx)
            if la_ == 1:
                self.state = 6755
                self.statementInformationItem()
                self.state = 6760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 6756
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6757
                    self.statementInformationItem()
                    self.state = 6762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 6763
                self.match(MySQLParser.CONDITION_SYMBOL)
                self.state = 6764
                self.signalAllowedExpr()
                self.state = 6765
                self.conditionInformationItem()
                self.state = 6770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 6766
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6767
                    self.conditionInformationItem()
                    self.state = 6772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalAllowedExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(MySQLParser.LiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(MySQLParser.VariableContext,0)


        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_signalAllowedExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalAllowedExpr" ):
                listener.enterSignalAllowedExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalAllowedExpr" ):
                listener.exitSignalAllowedExpr(self)




    def signalAllowedExpr(self):

        localctx = MySQLParser.SignalAllowedExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_signalAllowedExpr)
        try:
            self.state = 6778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,849,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6775
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6776
                self.variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6777
                self.qualifiedIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementInformationItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def NUMBER_SYMBOL(self):
            return self.getToken(MySQLParser.NUMBER_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0)

        def variable(self):
            return self.getTypedRuleContext(MySQLParser.VariableContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_statementInformationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementInformationItem" ):
                listener.enterStatementInformationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementInformationItem" ):
                listener.exitStatementInformationItem(self)




    def statementInformationItem(self):

        localctx = MySQLParser.StatementInformationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_statementInformationItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.state = 6780
                self.variable()
                pass

            elif la_ == 2:
                self.state = 6781
                self.identifier()
                pass


            self.state = 6784
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 6785
            _la = self._input.LA(1)
            if not(_la==377 or _la==485):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionInformationItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def variable(self):
            return self.getTypedRuleContext(MySQLParser.VariableContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def signalInformationItemName(self):
            return self.getTypedRuleContext(MySQLParser.SignalInformationItemNameContext,0)


        def RETURNED_SQLSTATE_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_conditionInformationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionInformationItem" ):
                listener.enterConditionInformationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionInformationItem" ):
                listener.exitConditionInformationItem(self)




    def conditionInformationItem(self):

        localctx = MySQLParser.ConditionInformationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_conditionInformationItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,851,self._ctx)
            if la_ == 1:
                self.state = 6787
                self.variable()
                pass

            elif la_ == 2:
                self.state = 6788
                self.identifier()
                pass


            self.state = 6791
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 6794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 64, 73, 87, 88, 89, 107, 336, 355, 492, 557, 576]:
                self.state = 6792
                self.signalInformationItemName()
                pass
            elif token in [473]:
                self.state = 6793
                self.match(MySQLParser.RETURNED_SQLSTATE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalInformationItemNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0)

        def SUBCLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0)

        def CONSTRAINT_CATALOG_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0)

        def CONSTRAINT_SCHEMA_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0)

        def CONSTRAINT_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0)

        def CATALOG_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0)

        def SCHEMA_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0)

        def TABLE_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0)

        def COLUMN_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0)

        def CURSOR_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0)

        def MESSAGE_TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0)

        def MYSQL_ERRNO_SYMBOL(self):
            return self.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_signalInformationItemName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalInformationItemName" ):
                listener.enterSignalInformationItemName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalInformationItemName" ):
                listener.exitSignalInformationItemName(self)




    def signalInformationItemName(self):

        localctx = MySQLParser.SignalInformationItemNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_signalInformationItemName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6796
            _la = self._input.LA(1)
            if not((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 18014518769616897) != 0 or _la==336 or _la==355 or _la==492 or _la==557 or _la==576):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNAL_SYMBOL(self):
            return self.getToken(MySQLParser.SIGNAL_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def sqlstate(self):
            return self.getTypedRuleContext(MySQLParser.SqlstateContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def signalInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SignalInformationItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SignalInformationItemContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_signalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalStatement" ):
                listener.enterSignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalStatement" ):
                listener.exitSignalStatement(self)




    def signalStatement(self):

        localctx = MySQLParser.SignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_signalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6798
            self.match(MySQLParser.SIGNAL_SYMBOL)
            self.state = 6801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,853,self._ctx)
            if la_ == 1:
                self.state = 6799
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 6800
                self.sqlstate()
                pass


            self.state = 6812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==506:
                self.state = 6803
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 6804
                self.signalInformationItem()
                self.state = 6809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 6805
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6806
                    self.signalInformationItem()
                    self.state = 6811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESIGNAL_SYMBOL(self):
            return self.getToken(MySQLParser.RESIGNAL_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def sqlstate(self):
            return self.getTypedRuleContext(MySQLParser.SqlstateContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def signalInformationItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SignalInformationItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SignalInformationItemContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_resignalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResignalStatement" ):
                listener.enterResignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResignalStatement" ):
                listener.exitResignalStatement(self)




    def resignalStatement(self):

        localctx = MySQLParser.ResignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_resignalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6814
            self.match(MySQLParser.RESIGNAL_SYMBOL)
            self.state = 6817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,856,self._ctx)
            if la_ == 1:
                self.state = 6815
                self.identifier()

            elif la_ == 2:
                self.state = 6816
                self.sqlstate()


            self.state = 6828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==506:
                self.state = 6819
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 6820
                self.signalInformationItem()
                self.state = 6825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 6821
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 6822
                    self.signalInformationItem()
                    self.state = 6827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalInformationItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signalInformationItemName(self):
            return self.getTypedRuleContext(MySQLParser.SignalInformationItemNameContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def signalAllowedExpr(self):
            return self.getTypedRuleContext(MySQLParser.SignalAllowedExprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_signalInformationItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalInformationItem" ):
                listener.enterSignalInformationItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalInformationItem" ):
                listener.exitSignalInformationItem(self)




    def signalInformationItem(self):

        localctx = MySQLParser.SignalInformationItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_signalInformationItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6830
            self.signalInformationItemName()
            self.state = 6831
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 6832
            self.signalAllowedExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorOpenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_cursorOpen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorOpen" ):
                listener.enterCursorOpen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorOpen" ):
                listener.exitCursorOpen(self)




    def cursorOpen(self):

        localctx = MySQLParser.CursorOpenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_cursorOpen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6834
            self.match(MySQLParser.OPEN_SYMBOL)
            self.state = 6835
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorCloseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_cursorClose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorClose" ):
                listener.enterCursorClose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorClose" ):
                listener.exitCursorClose(self)




    def cursorClose(self):

        localctx = MySQLParser.CursorCloseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_cursorClose)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6837
            self.match(MySQLParser.CLOSE_SYMBOL)
            self.state = 6838
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorFetchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH_SYMBOL(self):
            return self.getToken(MySQLParser.FETCH_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def INTO_SYMBOL(self):
            return self.getToken(MySQLParser.INTO_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MySQLParser.FROM_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(MySQLParser.NEXT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_cursorFetch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorFetch" ):
                listener.enterCursorFetch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorFetch" ):
                listener.exitCursorFetch(self)




    def cursorFetch(self):

        localctx = MySQLParser.CursorFetchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_cursorFetch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6840
            self.match(MySQLParser.FETCH_SYMBOL)
            self.state = 6845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,860,self._ctx)
            if la_ == 1:
                self.state = 6842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==367:
                    self.state = 6841
                    self.match(MySQLParser.NEXT_SYMBOL)


                self.state = 6844
                self.match(MySQLParser.FROM_SYMBOL)


            self.state = 6847
            self.identifier()
            self.state = 6848
            self.match(MySQLParser.INTO_SYMBOL)
            self.state = 6849
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SYMBOL, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExprContext,i)


        def EVERY_SYMBOL(self):
            return self.getToken(MySQLParser.EVERY_SYMBOL, 0)

        def interval(self):
            return self.getTypedRuleContext(MySQLParser.IntervalContext,0)


        def STARTS_SYMBOL(self):
            return self.getToken(MySQLParser.STARTS_SYMBOL, 0)

        def ENDS_SYMBOL(self):
            return self.getToken(MySQLParser.ENDS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_schedule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchedule" ):
                listener.enterSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchedule" ):
                listener.exitSchedule(self)




    def schedule(self):

        localctx = MySQLParser.ScheduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_schedule)
        self._la = 0 # Token type
        try:
            self.state = 6864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6851
                self.match(MySQLParser.AT_SYMBOL)
                self.state = 6852
                self.expr(0)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6853
                self.match(MySQLParser.EVERY_SYMBOL)
                self.state = 6854
                self.expr(0)
                self.state = 6855
                self.interval()
                self.state = 6858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==542:
                    self.state = 6856
                    self.match(MySQLParser.STARTS_SYMBOL)
                    self.state = 6857
                    self.expr(0)


                self.state = 6862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==160:
                    self.state = 6860
                    self.match(MySQLParser.ENDS_SYMBOL)
                    self.state = 6861
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnName(self):
            return self.getTypedRuleContext(MySQLParser.ColumnNameContext,0)


        def fieldDefinition(self):
            return self.getTypedRuleContext(MySQLParser.FieldDefinitionContext,0)


        def checkOrReferences(self):
            return self.getTypedRuleContext(MySQLParser.CheckOrReferencesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = MySQLParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_columnDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6866
            self.columnName()
            self.state = 6867
            self.fieldDefinition()
            self.state = 6869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,864,self._ctx)
            if la_ == 1:
                self.state = 6868
                self.checkOrReferences()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckOrReferencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def checkConstraint(self):
            return self.getTypedRuleContext(MySQLParser.CheckConstraintContext,0)


        def references(self):
            return self.getTypedRuleContext(MySQLParser.ReferencesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_checkOrReferences

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckOrReferences" ):
                listener.enterCheckOrReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckOrReferences" ):
                listener.exitCheckOrReferences(self)




    def checkOrReferences(self):

        localctx = MySQLParser.CheckOrReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_checkOrReferences)
        try:
            self.state = 6874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,865,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6871
                if not serverVersion < 80016:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80016")
                self.state = 6872
                self.checkConstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6873
                self.references()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.CHECK_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_checkConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckConstraint" ):
                listener.enterCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckConstraint" ):
                listener.exitCheckConstraint(self)




    def checkConstraint(self):

        localctx = MySQLParser.CheckConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_checkConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6876
            self.match(MySQLParser.CHECK_SYMBOL)
            self.state = 6877
            self.exprWithParentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintEnforcementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENFORCED_SYMBOL(self):
            return self.getToken(MySQLParser.ENFORCED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_constraintEnforcement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintEnforcement" ):
                listener.enterConstraintEnforcement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintEnforcement" ):
                listener.exitConstraintEnforcement(self)




    def constraintEnforcement(self):

        localctx = MySQLParser.ConstraintEnforcementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_constraintEnforcement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==371:
                self.state = 6879
                self.match(MySQLParser.NOT_SYMBOL)


            self.state = 6882
            self.match(MySQLParser.ENFORCED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def keyListVariants(self):
            return self.getTypedRuleContext(MySQLParser.KeyListVariantsContext,0)


        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def indexNameAndType(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameAndTypeContext,0)


        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IndexOptionContext,i)


        def FULLTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.FULLTEXT_SYMBOL, 0)

        def keyOrIndex(self):
            return self.getTypedRuleContext(MySQLParser.KeyOrIndexContext,0)


        def indexName(self):
            return self.getTypedRuleContext(MySQLParser.IndexNameContext,0)


        def fulltextIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FulltextIndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FulltextIndexOptionContext,i)


        def SPATIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SPATIAL_SYMBOL, 0)

        def spatialIndexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SpatialIndexOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SpatialIndexOptionContext,i)


        def keyList(self):
            return self.getTypedRuleContext(MySQLParser.KeyListContext,0)


        def references(self):
            return self.getTypedRuleContext(MySQLParser.ReferencesContext,0)


        def checkConstraint(self):
            return self.getTypedRuleContext(MySQLParser.CheckConstraintContext,0)


        def constraintName(self):
            return self.getTypedRuleContext(MySQLParser.ConstraintNameContext,0)


        def FOREIGN_SYMBOL(self):
            return self.getToken(MySQLParser.FOREIGN_SYMBOL, 0)

        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def UNIQUE_SYMBOL(self):
            return self.getToken(MySQLParser.UNIQUE_SYMBOL, 0)

        def constraintEnforcement(self):
            return self.getTypedRuleContext(MySQLParser.ConstraintEnforcementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableConstraintDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableConstraintDef" ):
                listener.enterTableConstraintDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableConstraintDef" ):
                listener.exitTableConstraintDef(self)




    def tableConstraintDef(self):

        localctx = MySQLParser.TableConstraintDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_tableConstraintDef)
        self._la = 0 # Token type
        try:
            self.state = 6959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [236, 265]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6884
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==236 or _la==265):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,867,self._ctx)
                if la_ == 1:
                    self.state = 6885
                    self.indexNameAndType()


                self.state = 6888
                self.keyListVariants()
                self.state = 6892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,868,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6889
                        self.indexOption() 
                    self.state = 6894
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,868,self._ctx)

                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6895
                localctx.type_ = self.match(MySQLParser.FULLTEXT_SYMBOL)
                self.state = 6897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,869,self._ctx)
                if la_ == 1:
                    self.state = 6896
                    self.keyOrIndex()


                self.state = 6900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,870,self._ctx)
                if la_ == 1:
                    self.state = 6899
                    self.indexName()


                self.state = 6902
                self.keyListVariants()
                self.state = 6906
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,871,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6903
                        self.fulltextIndexOption() 
                    self.state = 6908
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,871,self._ctx)

                pass
            elif token in [523]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6909
                localctx.type_ = self.match(MySQLParser.SPATIAL_SYMBOL)
                self.state = 6911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,872,self._ctx)
                if la_ == 1:
                    self.state = 6910
                    self.keyOrIndex()


                self.state = 6914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,873,self._ctx)
                if la_ == 1:
                    self.state = 6913
                    self.indexName()


                self.state = 6916
                self.keyListVariants()
                self.state = 6920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,874,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6917
                        self.spatialIndexOption() 
                    self.state = 6922
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,874,self._ctx)

                pass
            elif token in [62, 86, 199, 420, 609]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 6923
                    self.constraintName()


                self.state = 6957
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [420, 609]:
                    self.state = 6932
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [420]:
                        self.state = 6926
                        localctx.type_ = self.match(MySQLParser.PRIMARY_SYMBOL)
                        self.state = 6927
                        self.match(MySQLParser.KEY_SYMBOL)
                        pass
                    elif token in [609]:
                        self.state = 6928
                        localctx.type_ = self.match(MySQLParser.UNIQUE_SYMBOL)
                        self.state = 6930
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,876,self._ctx)
                        if la_ == 1:
                            self.state = 6929
                            self.keyOrIndex()


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6935
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
                    if la_ == 1:
                        self.state = 6934
                        self.indexNameAndType()


                    self.state = 6937
                    self.keyListVariants()
                    self.state = 6941
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,879,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 6938
                            self.indexOption() 
                        self.state = 6943
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,879,self._ctx)

                    pass
                elif token in [199]:
                    self.state = 6944
                    localctx.type_ = self.match(MySQLParser.FOREIGN_SYMBOL)
                    self.state = 6945
                    self.match(MySQLParser.KEY_SYMBOL)
                    self.state = 6947
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,880,self._ctx)
                    if la_ == 1:
                        self.state = 6946
                        self.indexName()


                    self.state = 6949
                    self.keyList()
                    self.state = 6950
                    self.references()
                    pass
                elif token in [62]:
                    self.state = 6952
                    self.checkConstraint()
                    self.state = 6955
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,881,self._ctx)
                    if la_ == 1:
                        self.state = 6953
                        if not serverVersion >= 80017:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion >= 80017")
                        self.state = 6954
                        self.constraintEnforcement()


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_constraintName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintName" ):
                listener.enterConstraintName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintName" ):
                listener.exitConstraintName(self)




    def constraintName(self):

        localctx = MySQLParser.ConstraintNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_constraintName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6961
            self.match(MySQLParser.CONSTRAINT_SYMBOL)
            self.state = 6963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,884,self._ctx)
            if la_ == 1:
                self.state = 6962
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(MySQLParser.DataTypeContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def columnAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ColumnAttributeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ColumnAttributeContext,i)


        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def GENERATED_SYMBOL(self):
            return self.getToken(MySQLParser.GENERATED_SYMBOL, 0)

        def ALWAYS_SYMBOL(self):
            return self.getToken(MySQLParser.ALWAYS_SYMBOL, 0)

        def VIRTUAL_SYMBOL(self):
            return self.getToken(MySQLParser.VIRTUAL_SYMBOL, 0)

        def STORED_SYMBOL(self):
            return self.getToken(MySQLParser.STORED_SYMBOL, 0)

        def gcolAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.GcolAttributeContext)
            else:
                return self.getTypedRuleContext(MySQLParser.GcolAttributeContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_fieldDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDefinition" ):
                listener.enterFieldDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDefinition" ):
                listener.exitFieldDefinition(self)




    def fieldDefinition(self):

        localctx = MySQLParser.FieldDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_fieldDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6965
            self.dataType()
            self.state = 7001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,892,self._ctx)
            if la_ == 1:
                self.state = 6969
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,885,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6966
                        self.columnAttribute() 
                    self.state = 6971
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,885,self._ctx)

                pass

            elif la_ == 2:
                self.state = 6972
                if not serverVersion >= 50707:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50707")
                self.state = 6974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 6973
                    self.collate()


                self.state = 6978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==209:
                    self.state = 6976
                    self.match(MySQLParser.GENERATED_SYMBOL)
                    self.state = 6977
                    self.match(MySQLParser.ALWAYS_SYMBOL)


                self.state = 6980
                self.match(MySQLParser.AS_SYMBOL)
                self.state = 6981
                self.exprWithParentheses()
                self.state = 6983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,888,self._ctx)
                if la_ == 1:
                    self.state = 6982
                    _la = self._input.LA(1)
                    if not(_la==554 or _la==637):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,891,self._ctx)
                if la_ == 1:
                    self.state = 6985
                    if not serverVersion < 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion < 80000")
                    self.state = 6989
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,889,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 6986
                            self.gcolAttribute() 
                        self.state = 6991
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,889,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 6992
                    if not serverVersion >= 80000:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80000")
                    self.state = 6996
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,890,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 6993
                            self.columnAttribute() 
                        self.state = 6998
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,890,self._ctx)

                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def nullLiteral(self):
            return self.getTypedRuleContext(MySQLParser.NullLiteralContext,0)


        def NOT_SYMBOL(self):
            return self.getToken(MySQLParser.NOT_SYMBOL, 0)

        def SECONDARY_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def signedLiteral(self):
            return self.getTypedRuleContext(MySQLParser.SignedLiteralContext,0)


        def NOW_SYMBOL(self):
            return self.getToken(MySQLParser.NOW_SYMBOL, 0)

        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def timeFunctionParameters(self):
            return self.getTypedRuleContext(MySQLParser.TimeFunctionParametersContext,0)


        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MySQLParser.ON_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.VALUE_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SERIAL_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def UNIQUE_SYMBOL(self):
            return self.getToken(MySQLParser.UNIQUE_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def columnFormat(self):
            return self.getTypedRuleContext(MySQLParser.ColumnFormatContext,0)


        def COLUMN_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0)

        def storageMedia(self):
            return self.getTypedRuleContext(MySQLParser.StorageMediaContext,0)


        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def SRID_SYMBOL(self):
            return self.getToken(MySQLParser.SRID_SYMBOL, 0)

        def checkConstraint(self):
            return self.getTypedRuleContext(MySQLParser.CheckConstraintContext,0)


        def constraintName(self):
            return self.getTypedRuleContext(MySQLParser.ConstraintNameContext,0)


        def constraintEnforcement(self):
            return self.getTypedRuleContext(MySQLParser.ConstraintEnforcementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_columnAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAttribute" ):
                listener.enterColumnAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAttribute" ):
                listener.exitColumnAttribute(self)




    def columnAttribute(self):

        localctx = MySQLParser.ColumnAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_columnAttribute)
        self._la = 0 # Token type
        try:
            self.state = 7055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,900,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==371:
                    self.state = 7003
                    self.match(MySQLParser.NOT_SYMBOL)


                self.state = 7006
                self.nullLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7007
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 7008
                self.match(MySQLParser.NOT_SYMBOL)
                self.state = 7009
                self.match(MySQLParser.SECONDARY_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7010
                localctx.value = self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 7018
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,895,self._ctx)
                if la_ == 1:
                    self.state = 7011
                    self.signedLiteral()
                    pass

                elif la_ == 2:
                    self.state = 7012
                    self.match(MySQLParser.NOW_SYMBOL)
                    self.state = 7014
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,894,self._ctx)
                    if la_ == 1:
                        self.state = 7013
                        self.timeFunctionParameters()


                    pass

                elif la_ == 3:
                    self.state = 7016
                    if not serverVersion >= 80013:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80013")
                    self.state = 7017
                    self.exprWithParentheses()
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7020
                localctx.value = self.match(MySQLParser.ON_SYMBOL)
                self.state = 7021
                self.match(MySQLParser.UPDATE_SYMBOL)
                self.state = 7022
                self.match(MySQLParser.NOW_SYMBOL)
                self.state = 7024
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,896,self._ctx)
                if la_ == 1:
                    self.state = 7023
                    self.timeFunctionParameters()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7026
                localctx.value = self.match(MySQLParser.AUTO_INCREMENT_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7027
                localctx.value = self.match(MySQLParser.SERIAL_SYMBOL)
                self.state = 7028
                self.match(MySQLParser.DEFAULT_SYMBOL)
                self.state = 7029
                self.match(MySQLParser.VALUE_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==420:
                    self.state = 7030
                    self.match(MySQLParser.PRIMARY_SYMBOL)


                self.state = 7033
                localctx.value = self.match(MySQLParser.KEY_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7034
                localctx.value = self.match(MySQLParser.UNIQUE_SYMBOL)
                self.state = 7036
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,898,self._ctx)
                if la_ == 1:
                    self.state = 7035
                    self.match(MySQLParser.KEY_SYMBOL)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7038
                localctx.value = self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 7039
                self.textLiteral()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7040
                self.collate()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7041
                localctx.value = self.match(MySQLParser.COLUMN_FORMAT_SYMBOL)
                self.state = 7042
                self.columnFormat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7043
                localctx.value = self.match(MySQLParser.STORAGE_SYMBOL)
                self.state = 7044
                self.storageMedia()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7045
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 7046
                localctx.value = self.match(MySQLParser.SRID_SYMBOL)
                self.state = 7047
                self.real_ulonglong_number()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7048
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 7050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 7049
                    self.constraintName()


                self.state = 7052
                self.checkConstraint()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7053
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 7054
                self.constraintEnforcement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIXED_SYMBOL(self):
            return self.getToken(MySQLParser.FIXED_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(MySQLParser.DYNAMIC_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_columnFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnFormat" ):
                listener.enterColumnFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnFormat" ):
                listener.exitColumnFormat(self)




    def columnFormat(self):

        localctx = MySQLParser.ColumnFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_columnFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7057
            _la = self._input.LA(1)
            if not(_la==128 or _la==152 or _la==192):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageMediaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISK_SYMBOL(self):
            return self.getToken(MySQLParser.DISK_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(MySQLParser.MEMORY_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_storageMedia

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageMedia" ):
                listener.enterStorageMedia(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageMedia" ):
                listener.exitStorageMedia(self)




    def storageMedia(self):

        localctx = MySQLParser.StorageMediaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_storageMedia)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7059
            _la = self._input.LA(1)
            if not(_la==128 or _la==142 or _la==334):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GcolAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIQUE_SYMBOL(self):
            return self.getToken(MySQLParser.UNIQUE_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def PRIMARY_SYMBOL(self):
            return self.getToken(MySQLParser.PRIMARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_gcolAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGcolAttribute" ):
                listener.enterGcolAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGcolAttribute" ):
                listener.exitGcolAttribute(self)




    def gcolAttribute(self):

        localctx = MySQLParser.GcolAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_gcolAttribute)
        self._la = 0 # Token type
        try:
            self.state = 7075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [609]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7061
                self.match(MySQLParser.UNIQUE_SYMBOL)
                self.state = 7063
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,901,self._ctx)
                if la_ == 1:
                    self.state = 7062
                    self.match(MySQLParser.KEY_SYMBOL)


                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7065
                self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 7066
                self.textString()
                pass
            elif token in [371, 376, 745]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==371 or _la==745:
                    self.state = 7067
                    self.notRule()


                self.state = 7070
                self.match(MySQLParser.NULL_SYMBOL)
                pass
            elif token in [265, 420]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==420:
                    self.state = 7071
                    self.match(MySQLParser.PRIMARY_SYMBOL)


                self.state = 7074
                self.match(MySQLParser.KEY_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.match = None # Token
            self.option = None # Token

        def REFERENCES_SYMBOL(self):
            return self.getToken(MySQLParser.REFERENCES_SYMBOL, 0)

        def tableRef(self):
            return self.getTypedRuleContext(MySQLParser.TableRefContext,0)


        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListWithParenthesesContext,0)


        def MATCH_SYMBOL(self):
            return self.getToken(MySQLParser.MATCH_SYMBOL, 0)

        def ON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ON_SYMBOL)
            else:
                return self.getToken(MySQLParser.ON_SYMBOL, i)

        def deleteOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DeleteOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DeleteOptionContext,i)


        def UPDATE_SYMBOL(self):
            return self.getToken(MySQLParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MySQLParser.DELETE_SYMBOL, 0)

        def FULL_SYMBOL(self):
            return self.getToken(MySQLParser.FULL_SYMBOL, 0)

        def PARTIAL_SYMBOL(self):
            return self.getToken(MySQLParser.PARTIAL_SYMBOL, 0)

        def SIMPLE_SYMBOL(self):
            return self.getToken(MySQLParser.SIMPLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferences" ):
                listener.enterReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferences" ):
                listener.exitReferences(self)




    def references(self):

        localctx = MySQLParser.ReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7077
            self.match(MySQLParser.REFERENCES_SYMBOL)
            self.state = 7078
            self.tableRef()
            self.state = 7080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==776:
                self.state = 7079
                self.identifierListWithParentheses()


            self.state = 7084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==320:
                self.state = 7082
                self.match(MySQLParser.MATCH_SYMBOL)
                self.state = 7083
                localctx.match = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==204 or _la==402 or _la==513):
                    localctx.match = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,909,self._ctx)
            if la_ == 1:
                self.state = 7086
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 7087
                localctx.option = self.match(MySQLParser.UPDATE_SYMBOL)
                self.state = 7088
                self.deleteOption()
                self.state = 7092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==383:
                    self.state = 7089
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 7090
                    self.match(MySQLParser.DELETE_SYMBOL)
                    self.state = 7091
                    self.deleteOption()



            elif la_ == 2:
                self.state = 7094
                self.match(MySQLParser.ON_SYMBOL)
                self.state = 7095
                localctx.option = self.match(MySQLParser.DELETE_SYMBOL)
                self.state = 7096
                self.deleteOption()
                self.state = 7100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==383:
                    self.state = 7097
                    self.match(MySQLParser.ON_SYMBOL)
                    self.state = 7098
                    self.match(MySQLParser.UPDATE_SYMBOL)
                    self.state = 7099
                    self.deleteOption()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT_SYMBOL(self):
            return self.getToken(MySQLParser.RESTRICT_SYMBOL, 0)

        def CASCADE_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADE_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def nullLiteral(self):
            return self.getTypedRuleContext(MySQLParser.NullLiteralContext,0)


        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def ACTION_SYMBOL(self):
            return self.getToken(MySQLParser.ACTION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_deleteOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteOption" ):
                listener.enterDeleteOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteOption" ):
                listener.exitDeleteOption(self)




    def deleteOption(self):

        localctx = MySQLParser.DeleteOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_deleteOption)
        self._la = 0 # Token type
        try:
            self.state = 7109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49, 471]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7104
                _la = self._input.LA(1)
                if not(_la==49 or _la==471):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [506]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7105
                self.match(MySQLParser.SET_SYMBOL)
                self.state = 7106
                self.nullLiteral()
                pass
            elif token in [373]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7107
                self.match(MySQLParser.NO_SYMBOL)
                self.state = 7108
                self.match(MySQLParser.ACTION_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def keyPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.KeyPartContext)
            else:
                return self.getTypedRuleContext(MySQLParser.KeyPartContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyList" ):
                listener.enterKeyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyList" ):
                listener.exitKeyList(self)




    def keyList(self):

        localctx = MySQLParser.KeyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_keyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7111
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7112
            self.keyPart()
            self.state = 7117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 7113
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 7114
                self.keyPart()
                self.state = 7119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7120
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def fieldLength(self):
            return self.getTypedRuleContext(MySQLParser.FieldLengthContext,0)


        def direction(self):
            return self.getTypedRuleContext(MySQLParser.DirectionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_keyPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyPart" ):
                listener.enterKeyPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyPart" ):
                listener.exitKeyPart(self)




    def keyPart(self):

        localctx = MySQLParser.KeyPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_keyPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7122
            self.identifier()
            self.state = 7124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==776:
                self.state = 7123
                self.fieldLength()


            self.state = 7127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18 or _la==134:
                self.state = 7126
                self.direction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyListWithExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def keyPartOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.KeyPartOrExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.KeyPartOrExpressionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_keyListWithExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyListWithExpression" ):
                listener.enterKeyListWithExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyListWithExpression" ):
                listener.exitKeyListWithExpression(self)




    def keyListWithExpression(self):

        localctx = MySQLParser.KeyListWithExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_keyListWithExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7129
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7130
            self.keyPartOrExpression()
            self.state = 7135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 7131
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 7132
                self.keyPartOrExpression()
                self.state = 7137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7138
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyPartOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyPart(self):
            return self.getTypedRuleContext(MySQLParser.KeyPartContext,0)


        def exprWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.ExprWithParenthesesContext,0)


        def direction(self):
            return self.getTypedRuleContext(MySQLParser.DirectionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_keyPartOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyPartOrExpression" ):
                listener.enterKeyPartOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyPartOrExpression" ):
                listener.exitKeyPartOrExpression(self)




    def keyPartOrExpression(self):

        localctx = MySQLParser.KeyPartOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_keyPartOrExpression)
        self._la = 0 # Token type
        try:
            self.state = 7145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,916,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7140
                self.keyPart()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7141
                self.exprWithParentheses()
                self.state = 7143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or _la==134:
                    self.state = 7142
                    self.direction()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyListVariantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyListWithExpression(self):
            return self.getTypedRuleContext(MySQLParser.KeyListWithExpressionContext,0)


        def keyList(self):
            return self.getTypedRuleContext(MySQLParser.KeyListContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_keyListVariants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyListVariants" ):
                listener.enterKeyListVariants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyListVariants" ):
                listener.exitKeyListVariants(self)




    def keyListVariants(self):

        localctx = MySQLParser.KeyListVariantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_keyListVariants)
        try:
            self.state = 7151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,917,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7147
                if not serverVersion >= 80013:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80013")
                self.state = 7148
                self.keyListWithExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7149
                if not serverVersion < 80013:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80013")
                self.state = 7150
                self.keyList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algorithm = None # Token

        def BTREE_SYMBOL(self):
            return self.getToken(MySQLParser.BTREE_SYMBOL, 0)

        def RTREE_SYMBOL(self):
            return self.getToken(MySQLParser.RTREE_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(MySQLParser.HASH_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)




    def indexType(self):

        localctx = MySQLParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7153
            localctx.algorithm = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==44 or _la==220 or _la==488):
                localctx.algorithm = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonIndexOption(self):
            return self.getTypedRuleContext(MySQLParser.CommonIndexOptionContext,0)


        def indexTypeClause(self):
            return self.getTypedRuleContext(MySQLParser.IndexTypeClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_indexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOption" ):
                listener.enterIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOption" ):
                listener.exitIndexOption(self)




    def indexOption(self):

        localctx = MySQLParser.IndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_indexOption)
        try:
            self.state = 7157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,918,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7155
                self.commonIndexOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7156
                self.indexTypeClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonIndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def visibility(self):
            return self.getTypedRuleContext(MySQLParser.VisibilityContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_commonIndexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonIndexOption" ):
                listener.enterCommonIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonIndexOption" ):
                listener.exitCommonIndexOption(self)




    def commonIndexOption(self):

        localctx = MySQLParser.CommonIndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_commonIndexOption)
        self._la = 0 # Token type
        try:
            self.state = 7168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,920,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7159
                self.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL)
                self.state = 7161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7160
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7163
                self.ulong_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7164
                self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 7165
                self.textLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7166
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 7167
                self.visibility()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.VISIBLE_SYMBOL, 0)

        def INVISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.INVISIBLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = MySQLParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7170
            _la = self._input.LA(1)
            if not(_la==661 or _la==662):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexType(self):
            return self.getTypedRuleContext(MySQLParser.IndexTypeContext,0)


        def USING_SYMBOL(self):
            return self.getToken(MySQLParser.USING_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MySQLParser.TYPE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_indexTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexTypeClause" ):
                listener.enterIndexTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexTypeClause" ):
                listener.exitIndexTypeClause(self)




    def indexTypeClause(self):

        localctx = MySQLParser.IndexTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_indexTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7172
            _la = self._input.LA(1)
            if not(_la==599 or _la==621):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7173
            self.indexType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FulltextIndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonIndexOption(self):
            return self.getTypedRuleContext(MySQLParser.CommonIndexOptionContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def PARSER_SYMBOL(self):
            return self.getToken(MySQLParser.PARSER_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_fulltextIndexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFulltextIndexOption" ):
                listener.enterFulltextIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFulltextIndexOption" ):
                listener.exitFulltextIndexOption(self)




    def fulltextIndexOption(self):

        localctx = MySQLParser.FulltextIndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_fulltextIndexOption)
        try:
            self.state = 7179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7175
                self.commonIndexOption()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7176
                self.match(MySQLParser.WITH_SYMBOL)
                self.state = 7177
                self.match(MySQLParser.PARSER_SYMBOL)
                self.state = 7178
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpatialIndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commonIndexOption(self):
            return self.getTypedRuleContext(MySQLParser.CommonIndexOptionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_spatialIndexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialIndexOption" ):
                listener.enterSpatialIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialIndexOption" ):
                listener.exitSpatialIndexOption(self)




    def spatialIndexOption(self):

        localctx = MySQLParser.SpatialIndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_spatialIndexOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7181
            self.commonIndexOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(MySQLParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(MySQLParser.EOF, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dataTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeDefinition" ):
                listener.enterDataTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeDefinition" ):
                listener.exitDataTypeDefinition(self)




    def dataTypeDefinition(self):

        localctx = MySQLParser.DataTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_dataTypeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7183
            self.dataType()
            self.state = 7184
            self.match(MySQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def INT_SYMBOL(self):
            return self.getToken(MySQLParser.INT_SYMBOL, 0)

        def TINYINT_SYMBOL(self):
            return self.getToken(MySQLParser.TINYINT_SYMBOL, 0)

        def SMALLINT_SYMBOL(self):
            return self.getToken(MySQLParser.SMALLINT_SYMBOL, 0)

        def MEDIUMINT_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUMINT_SYMBOL, 0)

        def BIGINT_SYMBOL(self):
            return self.getToken(MySQLParser.BIGINT_SYMBOL, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(MySQLParser.FieldLengthContext,0)


        def fieldOptions(self):
            return self.getTypedRuleContext(MySQLParser.FieldOptionsContext,0)


        def REAL_SYMBOL(self):
            return self.getToken(MySQLParser.REAL_SYMBOL, 0)

        def DOUBLE_SYMBOL(self):
            return self.getToken(MySQLParser.DOUBLE_SYMBOL, 0)

        def precision(self):
            return self.getTypedRuleContext(MySQLParser.PrecisionContext,0)


        def PRECISION_SYMBOL(self):
            return self.getToken(MySQLParser.PRECISION_SYMBOL, 0)

        def FLOAT_SYMBOL(self):
            return self.getToken(MySQLParser.FLOAT_SYMBOL, 0)

        def DECIMAL_SYMBOL(self):
            return self.getToken(MySQLParser.DECIMAL_SYMBOL, 0)

        def NUMERIC_SYMBOL(self):
            return self.getToken(MySQLParser.NUMERIC_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(MySQLParser.FIXED_SYMBOL, 0)

        def floatOptions(self):
            return self.getTypedRuleContext(MySQLParser.FloatOptionsContext,0)


        def BIT_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_SYMBOL, 0)

        def BOOL_SYMBOL(self):
            return self.getToken(MySQLParser.BOOL_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(MySQLParser.BOOLEAN_SYMBOL, 0)

        def CHAR_SYMBOL(self):
            return self.getToken(MySQLParser.CHAR_SYMBOL, 0)

        def charsetWithOptBinary(self):
            return self.getTypedRuleContext(MySQLParser.CharsetWithOptBinaryContext,0)


        def nchar(self):
            return self.getTypedRuleContext(MySQLParser.NcharContext,0)


        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def VARYING_SYMBOL(self):
            return self.getToken(MySQLParser.VARYING_SYMBOL, 0)

        def VARCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.VARCHAR_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATIONAL_SYMBOL, 0)

        def NVARCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NVARCHAR_SYMBOL, 0)

        def NCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NCHAR_SYMBOL, 0)

        def VARBINARY_SYMBOL(self):
            return self.getToken(MySQLParser.VARBINARY_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def typeDatetimePrecision(self):
            return self.getTypedRuleContext(MySQLParser.TypeDatetimePrecisionContext,0)


        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(MySQLParser.DATETIME_SYMBOL, 0)

        def TINYBLOB_SYMBOL(self):
            return self.getToken(MySQLParser.TINYBLOB_SYMBOL, 0)

        def BLOB_SYMBOL(self):
            return self.getToken(MySQLParser.BLOB_SYMBOL, 0)

        def MEDIUMBLOB_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0)

        def LONGBLOB_SYMBOL(self):
            return self.getToken(MySQLParser.LONGBLOB_SYMBOL, 0)

        def LONG_SYMBOL(self):
            return self.getToken(MySQLParser.LONG_SYMBOL, 0)

        def TINYTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.TINYTEXT_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.TEXT_SYMBOL, 0)

        def MEDIUMTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0)

        def LONGTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.LONGTEXT_SYMBOL, 0)

        def stringList(self):
            return self.getTypedRuleContext(MySQLParser.StringListContext,0)


        def ENUM_SYMBOL(self):
            return self.getToken(MySQLParser.ENUM_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MySQLParser.SET_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SERIAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_SYMBOL, 0)

        def GEOMETRY_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRY_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(MySQLParser.POINT_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0)

        def LINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.LINESTRING_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.POLYGON_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = MySQLParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 7333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,955,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7186
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==31 or _la==249 or _la==331 or _la==516 or _la==588):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7188
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,922,self._ctx)
                if la_ == 1:
                    self.state = 7187
                    self.fieldLength()


                self.state = 7191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,923,self._ctx)
                if la_ == 1:
                    self.state = 7190
                    self.fieldOptions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7198
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [437]:
                    self.state = 7193
                    localctx.type_ = self.match(MySQLParser.REAL_SYMBOL)
                    pass
                elif token in [146]:
                    self.state = 7194
                    localctx.type_ = self.match(MySQLParser.DOUBLE_SYMBOL)
                    self.state = 7196
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,924,self._ctx)
                    if la_ == 1:
                        self.state = 7195
                        self.match(MySQLParser.PRECISION_SYMBOL)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,926,self._ctx)
                if la_ == 1:
                    self.state = 7200
                    self.precision()


                self.state = 7204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,927,self._ctx)
                if la_ == 1:
                    self.state = 7203
                    self.fieldOptions()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7206
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==126 or _la==192 or _la==195 or _la==378):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,928,self._ctx)
                if la_ == 1:
                    self.state = 7207
                    self.floatOptions()


                self.state = 7211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,929,self._ctx)
                if la_ == 1:
                    self.state = 7210
                    self.fieldOptions()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7213
                localctx.type_ = self.match(MySQLParser.BIT_SYMBOL)
                self.state = 7215
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,930,self._ctx)
                if la_ == 1:
                    self.state = 7214
                    self.fieldLength()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7217
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==41 or _la==42):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7218
                localctx.type_ = self.match(MySQLParser.CHAR_SYMBOL)
                self.state = 7220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,931,self._ctx)
                if la_ == 1:
                    self.state = 7219
                    self.fieldLength()


                self.state = 7223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,932,self._ctx)
                if la_ == 1:
                    self.state = 7222
                    self.charsetWithOptBinary()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7225
                self.nchar()
                self.state = 7227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
                if la_ == 1:
                    self.state = 7226
                    self.fieldLength()


                self.state = 7230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,934,self._ctx)
                if la_ == 1:
                    self.state = 7229
                    self.match(MySQLParser.BINARY_SYMBOL)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7232
                localctx.type_ = self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 7234
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,935,self._ctx)
                if la_ == 1:
                    self.state = 7233
                    self.fieldLength()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7239
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 7236
                    localctx.type_ = self.match(MySQLParser.CHAR_SYMBOL)
                    self.state = 7237
                    self.match(MySQLParser.VARYING_SYMBOL)
                    pass
                elif token in [629]:
                    self.state = 7238
                    localctx.type_ = self.match(MySQLParser.VARCHAR_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7241
                self.fieldLength()
                self.state = 7243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,937,self._ctx)
                if la_ == 1:
                    self.state = 7242
                    self.charsetWithOptBinary()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
                if la_ == 1:
                    self.state = 7245
                    localctx.type_ = self.match(MySQLParser.NATIONAL_SYMBOL)
                    self.state = 7246
                    self.match(MySQLParser.VARCHAR_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 7247
                    localctx.type_ = self.match(MySQLParser.NVARCHAR_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 7248
                    localctx.type_ = self.match(MySQLParser.NCHAR_SYMBOL)
                    self.state = 7249
                    self.match(MySQLParser.VARCHAR_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 7250
                    localctx.type_ = self.match(MySQLParser.NATIONAL_SYMBOL)
                    self.state = 7251
                    self.match(MySQLParser.CHAR_SYMBOL)
                    self.state = 7252
                    self.match(MySQLParser.VARYING_SYMBOL)
                    pass

                elif la_ == 5:
                    self.state = 7253
                    localctx.type_ = self.match(MySQLParser.NCHAR_SYMBOL)
                    self.state = 7254
                    self.match(MySQLParser.VARYING_SYMBOL)
                    pass


                self.state = 7257
                self.fieldLength()
                self.state = 7259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,939,self._ctx)
                if la_ == 1:
                    self.state = 7258
                    self.match(MySQLParser.BINARY_SYMBOL)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7261
                localctx.type_ = self.match(MySQLParser.VARBINARY_SYMBOL)
                self.state = 7262
                self.fieldLength()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7263
                localctx.type_ = self.match(MySQLParser.YEAR_SYMBOL)
                self.state = 7265
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,940,self._ctx)
                if la_ == 1:
                    self.state = 7264
                    self.fieldLength()


                self.state = 7268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,941,self._ctx)
                if la_ == 1:
                    self.state = 7267
                    self.fieldOptions()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7270
                localctx.type_ = self.match(MySQLParser.DATE_SYMBOL)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7271
                localctx.type_ = self.match(MySQLParser.TIME_SYMBOL)
                self.state = 7273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
                if la_ == 1:
                    self.state = 7272
                    self.typeDatetimePrecision()


                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7275
                localctx.type_ = self.match(MySQLParser.TIMESTAMP_SYMBOL)
                self.state = 7277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,943,self._ctx)
                if la_ == 1:
                    self.state = 7276
                    self.typeDatetimePrecision()


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 7279
                localctx.type_ = self.match(MySQLParser.DATETIME_SYMBOL)
                self.state = 7281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,944,self._ctx)
                if la_ == 1:
                    self.state = 7280
                    self.typeDatetimePrecision()


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 7283
                localctx.type_ = self.match(MySQLParser.TINYBLOB_SYMBOL)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 7284
                localctx.type_ = self.match(MySQLParser.BLOB_SYMBOL)
                self.state = 7286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,945,self._ctx)
                if la_ == 1:
                    self.state = 7285
                    self.fieldLength()


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 7288
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==290 or _la==330):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 7289
                localctx.type_ = self.match(MySQLParser.LONG_SYMBOL)
                self.state = 7290
                self.match(MySQLParser.VARBINARY_SYMBOL)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7291
                localctx.type_ = self.match(MySQLParser.LONG_SYMBOL)
                self.state = 7295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,946,self._ctx)
                if la_ == 1:
                    self.state = 7292
                    self.match(MySQLParser.CHAR_SYMBOL)
                    self.state = 7293
                    self.match(MySQLParser.VARYING_SYMBOL)

                elif la_ == 2:
                    self.state = 7294
                    self.match(MySQLParser.VARCHAR_SYMBOL)


                self.state = 7298
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,947,self._ctx)
                if la_ == 1:
                    self.state = 7297
                    self.charsetWithOptBinary()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7300
                localctx.type_ = self.match(MySQLParser.TINYTEXT_SYMBOL)
                self.state = 7302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,948,self._ctx)
                if la_ == 1:
                    self.state = 7301
                    self.charsetWithOptBinary()


                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7304
                localctx.type_ = self.match(MySQLParser.TEXT_SYMBOL)
                self.state = 7306
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,949,self._ctx)
                if la_ == 1:
                    self.state = 7305
                    self.fieldLength()


                self.state = 7309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,950,self._ctx)
                if la_ == 1:
                    self.state = 7308
                    self.charsetWithOptBinary()


                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7311
                localctx.type_ = self.match(MySQLParser.MEDIUMTEXT_SYMBOL)
                self.state = 7313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,951,self._ctx)
                if la_ == 1:
                    self.state = 7312
                    self.charsetWithOptBinary()


                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 7315
                localctx.type_ = self.match(MySQLParser.LONGTEXT_SYMBOL)
                self.state = 7317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,952,self._ctx)
                if la_ == 1:
                    self.state = 7316
                    self.charsetWithOptBinary()


                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 7319
                localctx.type_ = self.match(MySQLParser.ENUM_SYMBOL)
                self.state = 7320
                self.stringList()
                self.state = 7322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,953,self._ctx)
                if la_ == 1:
                    self.state = 7321
                    self.charsetWithOptBinary()


                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 7324
                localctx.type_ = self.match(MySQLParser.SET_SYMBOL)
                self.state = 7325
                self.stringList()
                self.state = 7327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,954,self._ctx)
                if la_ == 1:
                    self.state = 7326
                    self.charsetWithOptBinary()


                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 7329
                localctx.type_ = self.match(MySQLParser.SERIAL_SYMBOL)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 7330
                if not serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50708")
                self.state = 7331
                localctx.type_ = self.match(MySQLParser.JSON_SYMBOL)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 7332
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==211 or _la==212 or _la==279 or (((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & 3458764513820540935) != 0):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NcharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def NCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NCHAR_SYMBOL, 0)

        def CHAR_SYMBOL(self):
            return self.getToken(MySQLParser.CHAR_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATIONAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_nchar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNchar" ):
                listener.enterNchar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNchar" ):
                listener.exitNchar(self)




    def nchar(self):

        localctx = MySQLParser.NcharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_nchar)
        try:
            self.state = 7338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [361]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7335
                localctx.type_ = self.match(MySQLParser.NCHAR_SYMBOL)
                pass
            elif token in [358]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7336
                localctx.type_ = self.match(MySQLParser.NATIONAL_SYMBOL)
                self.state = 7337
                self.match(MySQLParser.CHAR_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RealTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def REAL_SYMBOL(self):
            return self.getToken(MySQLParser.REAL_SYMBOL, 0)

        def DOUBLE_SYMBOL(self):
            return self.getToken(MySQLParser.DOUBLE_SYMBOL, 0)

        def PRECISION_SYMBOL(self):
            return self.getToken(MySQLParser.PRECISION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_realType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealType" ):
                listener.enterRealType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealType" ):
                listener.exitRealType(self)




    def realType(self):

        localctx = MySQLParser.RealTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_realType)
        try:
            self.state = 7345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [437]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7340
                localctx.type_ = self.match(MySQLParser.REAL_SYMBOL)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7341
                localctx.type_ = self.match(MySQLParser.DOUBLE_SYMBOL)
                self.state = 7343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,957,self._ctx)
                if la_ == 1:
                    self.state = 7342
                    self.match(MySQLParser.PRECISION_SYMBOL)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def DECIMAL_NUMBER(self):
            return self.getToken(MySQLParser.DECIMAL_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_fieldLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldLength" ):
                listener.enterFieldLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldLength" ):
                listener.exitFieldLength(self)




    def fieldLength(self):

        localctx = MySQLParser.FieldLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_fieldLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7347
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,959,self._ctx)
            if la_ == 1:
                self.state = 7348
                self.real_ulonglong_number()
                pass

            elif la_ == 2:
                self.state = 7349
                self.match(MySQLParser.DECIMAL_NUMBER)
                pass


            self.state = 7352
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNED_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.SIGNED_SYMBOL)
            else:
                return self.getToken(MySQLParser.SIGNED_SYMBOL, i)

        def UNSIGNED_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.UNSIGNED_SYMBOL)
            else:
                return self.getToken(MySQLParser.UNSIGNED_SYMBOL, i)

        def ZEROFILL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ZEROFILL_SYMBOL)
            else:
                return self.getToken(MySQLParser.ZEROFILL_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_fieldOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldOptions" ):
                listener.enterFieldOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldOptions" ):
                listener.exitFieldOptions(self)




    def fieldOptions(self):

        localctx = MySQLParser.FieldOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_fieldOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7355 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7354
                    _la = self._input.LA(1)
                    if not(_la==512 or _la==612 or _la==657):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 7357 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,960,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetWithOptBinaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ascii(self):
            return self.getTypedRuleContext(MySQLParser.AsciiContext,0)


        def unicode_(self):
            return self.getTypedRuleContext(MySQLParser.UnicodeContext,0)


        def BYTE_SYMBOL(self):
            return self.getToken(MySQLParser.BYTE_SYMBOL, 0)

        def charset(self):
            return self.getTypedRuleContext(MySQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_charsetWithOptBinary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetWithOptBinary" ):
                listener.enterCharsetWithOptBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetWithOptBinary" ):
                listener.exitCharsetWithOptBinary(self)




    def charsetWithOptBinary(self):

        localctx = MySQLParser.CharsetWithOptBinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_charsetWithOptBinary)
        try:
            self.state = 7373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,963,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7359
                self.ascii()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7360
                self.unicode_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7361
                self.match(MySQLParser.BYTE_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7362
                self.charset()
                self.state = 7363
                self.charsetName()
                self.state = 7365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,961,self._ctx)
                if la_ == 1:
                    self.state = 7364
                    self.match(MySQLParser.BINARY_SYMBOL)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7367
                self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 7371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,962,self._ctx)
                if la_ == 1:
                    self.state = 7368
                    self.charset()
                    self.state = 7369
                    self.charsetName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsciiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYMBOL(self):
            return self.getToken(MySQLParser.ASCII_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ascii

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAscii" ):
                listener.enterAscii(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAscii" ):
                listener.exitAscii(self)




    def ascii(self):

        localctx = MySQLParser.AsciiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_ascii)
        try:
            self.state = 7381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7375
                self.match(MySQLParser.ASCII_SYMBOL)
                self.state = 7377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,964,self._ctx)
                if la_ == 1:
                    self.state = 7376
                    self.match(MySQLParser.BINARY_SYMBOL)


                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7379
                self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 7380
                self.match(MySQLParser.ASCII_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnicodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNICODE_SYMBOL(self):
            return self.getToken(MySQLParser.UNICODE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_unicode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode" ):
                listener.enterUnicode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode" ):
                listener.exitUnicode(self)




    def unicode_(self):

        localctx = MySQLParser.UnicodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_unicode)
        try:
            self.state = 7389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [606]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7383
                self.match(MySQLParser.UNICODE_SYMBOL)
                self.state = 7385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,966,self._ctx)
                if la_ == 1:
                    self.state = 7384
                    self.match(MySQLParser.BINARY_SYMBOL)


                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7387
                self.match(MySQLParser.BINARY_SYMBOL)
                self.state = 7388
                self.match(MySQLParser.UNICODE_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WsNumCodepointsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_wsNumCodepoints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWsNumCodepoints" ):
                listener.enterWsNumCodepoints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWsNumCodepoints" ):
                listener.exitWsNumCodepoints(self)




    def wsNumCodepoints(self):

        localctx = MySQLParser.WsNumCodepointsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_wsNumCodepoints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7391
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7392
            self.real_ulong_number()
            self.state = 7393
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDatetimePrecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_typeDatetimePrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDatetimePrecision" ):
                listener.enterTypeDatetimePrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDatetimePrecision" ):
                listener.exitTypeDatetimePrecision(self)




    def typeDatetimePrecision(self):

        localctx = MySQLParser.TypeDatetimePrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_typeDatetimePrecision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7395
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7396
            self.match(MySQLParser.INT_NUMBER)
            self.state = 7397
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)




    def charsetName(self):

        localctx = MySQLParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_charsetName)
        try:
            self.state = 7403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,968,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7399
                self.textOrIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7400
                self.match(MySQLParser.BINARY_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7401
                if not serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80011")
                self.state = 7402
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MySQLParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)




    def collationName(self):

        localctx = MySQLParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_collationName)
        try:
            self.state = 7410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,969,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7405
                self.textOrIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7406
                if not serverVersion < 80011:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80011")
                self.state = 7407
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7408
                if not serverVersion >= 80018:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80018")
                self.state = 7409
                self.match(MySQLParser.BINARY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateTableOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateTableOptionContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_createTableOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableOptions" ):
                listener.enterCreateTableOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableOptions" ):
                listener.exitCreateTableOptions(self)




    def createTableOptions(self):

        localctx = MySQLParser.CreateTableOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_createTableOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7412
            self.createTableOption()
            self.state = 7419
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,971,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7414
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,970,self._ctx)
                    if la_ == 1:
                        self.state = 7413
                        self.match(MySQLParser.COMMA_SYMBOL)


                    self.state = 7416
                    self.createTableOption() 
                self.state = 7421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,971,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableOptionsSpaceSeparatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateTableOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateTableOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_createTableOptionsSpaceSeparated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableOptionsSpaceSeparated" ):
                listener.enterCreateTableOptionsSpaceSeparated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableOptionsSpaceSeparated" ):
                listener.exitCreateTableOptionsSpaceSeparated(self)




    def createTableOptionsSpaceSeparated(self):

        localctx = MySQLParser.CreateTableOptionsSpaceSeparatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_createTableOptionsSpaceSeparated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7423 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7422
                    self.createTableOption()

                else:
                    raise NoViableAltException(self)
                self.state = 7425 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,972,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token
            self.format_ = None # Token
            self.method = None # Token

        def engineRef(self):
            return self.getTypedRuleContext(MySQLParser.EngineRefContext,0)


        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def SECONDARY_ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def equal(self):
            return self.getTypedRuleContext(MySQLParser.EqualContext,0)


        def ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulonglong_numberContext,0)


        def MAX_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def AVG_ROW_LENGTH_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def COMPRESSION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSION_SYMBOL, 0)

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def ternaryOption(self):
            return self.getTypedRuleContext(MySQLParser.TernaryOptionContext,0)


        def PACK_KEYS_SYMBOL(self):
            return self.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0)

        def STATS_AUTO_RECALC_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0)

        def STATS_PERSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0)

        def STATS_SAMPLE_PAGES_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0)

        def CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.CHECKSUM_SYMBOL, 0)

        def TABLE_CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0)

        def DELAY_KEY_WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0)

        def ROW_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(MySQLParser.DYNAMIC_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(MySQLParser.FIXED_SYMBOL, 0)

        def COMPRESSED_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSED_SYMBOL, 0)

        def REDUNDANT_SYMBOL(self):
            return self.getToken(MySQLParser.REDUNDANT_SYMBOL, 0)

        def COMPACT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPACT_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def tableRefList(self):
            return self.getTypedRuleContext(MySQLParser.TableRefListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def UNION_SYMBOL(self):
            return self.getToken(MySQLParser.UNION_SYMBOL, 0)

        def defaultCharset(self):
            return self.getTypedRuleContext(MySQLParser.DefaultCharsetContext,0)


        def defaultCollation(self):
            return self.getTypedRuleContext(MySQLParser.DefaultCollationContext,0)


        def INSERT_METHOD_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def DISK_SYMBOL(self):
            return self.getToken(MySQLParser.DISK_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(MySQLParser.MEMORY_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(MySQLParser.CONNECTION_SYMBOL, 0)

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_createTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableOption" ):
                listener.enterCreateTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableOption" ):
                listener.exitCreateTableOption(self)




    def createTableOption(self):

        localctx = MySQLParser.CreateTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_createTableOption)
        self._la = 0 # Token type
        try:
            self.state = 7556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,997,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7427
                localctx.option = self.match(MySQLParser.ENGINE_SYMBOL)
                self.state = 7429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,973,self._ctx)
                if la_ == 1:
                    self.state = 7428
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7431
                self.engineRef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7432
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 7433
                localctx.option = self.match(MySQLParser.SECONDARY_ENGINE_SYMBOL)
                self.state = 7435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
                if la_ == 1:
                    self.state = 7434
                    self.equal()


                self.state = 7439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,975,self._ctx)
                if la_ == 1:
                    self.state = 7437
                    self.match(MySQLParser.NULL_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 7438
                    self.textOrIdentifier()
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7441
                localctx.option = self.match(MySQLParser.MAX_ROWS_SYMBOL)
                self.state = 7443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7442
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7445
                self.ulonglong_number()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7446
                localctx.option = self.match(MySQLParser.MIN_ROWS_SYMBOL)
                self.state = 7448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7447
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7450
                self.ulonglong_number()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7451
                localctx.option = self.match(MySQLParser.AVG_ROW_LENGTH_SYMBOL)
                self.state = 7453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7452
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7455
                self.ulong_number()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7456
                localctx.option = self.match(MySQLParser.PASSWORD_SYMBOL)
                self.state = 7458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,979,self._ctx)
                if la_ == 1:
                    self.state = 7457
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7460
                self.textStringLiteral()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7461
                localctx.option = self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 7463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,980,self._ctx)
                if la_ == 1:
                    self.state = 7462
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7465
                self.textStringLiteral()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7466
                if not serverVersion >= 50708:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50708")
                self.state = 7467
                localctx.option = self.match(MySQLParser.COMPRESSION_SYMBOL)
                self.state = 7469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,981,self._ctx)
                if la_ == 1:
                    self.state = 7468
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7471
                self.textString()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7472
                if not serverVersion >= 50711:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50711")
                self.state = 7473
                localctx.option = self.match(MySQLParser.ENCRYPTION_SYMBOL)
                self.state = 7475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,982,self._ctx)
                if la_ == 1:
                    self.state = 7474
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7477
                self.textString()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7478
                localctx.option = self.match(MySQLParser.AUTO_INCREMENT_SYMBOL)
                self.state = 7480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7479
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7482
                self.ulonglong_number()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7483
                localctx.option = self.match(MySQLParser.PACK_KEYS_SYMBOL)
                self.state = 7485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7484
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7487
                self.ternaryOption()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7488
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 544)) & ~0x3f) == 0 and ((1 << (_la - 544)) & 7) != 0):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7489
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7492
                self.ternaryOption()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7493
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==61 or _la==575):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7494
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7497
                self.ulong_number()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7498
                localctx.option = self.match(MySQLParser.DELAY_KEY_WRITE_SYMBOL)
                self.state = 7500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7499
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7502
                self.ulong_number()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7503
                localctx.option = self.match(MySQLParser.ROW_FORMAT_SYMBOL)
                self.state = 7505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7504
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7507
                localctx.format_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 1125899906842629) != 0 or _la==152 or _la==192 or _la==442):
                    localctx.format_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 7508
                localctx.option = self.match(MySQLParser.UNION_SYMBOL)
                self.state = 7510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7509
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7512
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7513
                self.tableRefList()
                self.state = 7514
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 7516
                self.defaultCharset()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 7517
                self.defaultCollation()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 7518
                localctx.option = self.match(MySQLParser.INSERT_METHOD_SYMBOL)
                self.state = 7520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7519
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7522
                localctx.method = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==191 or _la==268 or _la==373):
                    localctx.method = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 7523
                localctx.option = self.match(MySQLParser.DATA_SYMBOL)
                self.state = 7524
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 7526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,991,self._ctx)
                if la_ == 1:
                    self.state = 7525
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7528
                self.textString()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7529
                localctx.option = self.match(MySQLParser.INDEX_SYMBOL)
                self.state = 7530
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 7532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,992,self._ctx)
                if la_ == 1:
                    self.state = 7531
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7534
                self.textString()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7535
                localctx.option = self.match(MySQLParser.TABLESPACE_SYMBOL)
                self.state = 7541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,994,self._ctx)
                if la_ == 1:
                    self.state = 7536
                    if not serverVersion >= 50707:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 50707")
                    self.state = 7538
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,993,self._ctx)
                    if la_ == 1:
                        self.state = 7537
                        self.match(MySQLParser.EQUAL_OPERATOR)


                    pass

                elif la_ == 2:
                    pass


                self.state = 7543
                self.identifier()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7544
                localctx.option = self.match(MySQLParser.STORAGE_SYMBOL)
                self.state = 7545
                _la = self._input.LA(1)
                if not(_la==142 or _la==334):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7546
                localctx.option = self.match(MySQLParser.CONNECTION_SYMBOL)
                self.state = 7548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,995,self._ctx)
                if la_ == 1:
                    self.state = 7547
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7550
                self.textString()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 7551
                localctx.option = self.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL)
                self.state = 7553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7552
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7555
                self.ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TernaryOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ternaryOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryOption" ):
                listener.enterTernaryOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryOption" ):
                listener.exitTernaryOption(self)




    def ternaryOption(self):

        localctx = MySQLParser.TernaryOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_ternaryOption)
        try:
            self.state = 7560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [747, 748, 749, 788, 790, 791]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7558
                self.ulong_number()
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7559
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultCollationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATE_SYMBOL, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySQLParser.CollationNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_defaultCollation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultCollation" ):
                listener.enterDefaultCollation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultCollation" ):
                listener.exitDefaultCollation(self)




    def defaultCollation(self):

        localctx = MySQLParser.DefaultCollationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_defaultCollation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 7562
                self.match(MySQLParser.DEFAULT_SYMBOL)


            self.state = 7565
            self.match(MySQLParser.COLLATE_SYMBOL)
            self.state = 7567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1000,self._ctx)
            if la_ == 1:
                self.state = 7566
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 7569
            self.collationName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultEncryptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_defaultEncryption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultEncryption" ):
                listener.enterDefaultEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultEncryption" ):
                listener.exitDefaultEncryption(self)




    def defaultEncryption(self):

        localctx = MySQLParser.DefaultEncryptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_defaultEncryption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 7571
                self.match(MySQLParser.DEFAULT_SYMBOL)


            self.state = 7574
            self.match(MySQLParser.ENCRYPTION_SYMBOL)
            self.state = 7576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1002,self._ctx)
            if la_ == 1:
                self.state = 7575
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 7578
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultCharsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charset(self):
            return self.getTypedRuleContext(MySQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_defaultCharset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultCharset" ):
                listener.enterDefaultCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultCharset" ):
                listener.exitDefaultCharset(self)




    def defaultCharset(self):

        localctx = MySQLParser.DefaultCharsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_defaultCharset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 7580
                self.match(MySQLParser.DEFAULT_SYMBOL)


            self.state = 7583
            self.charset()
            self.state = 7585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1004,self._ctx)
            if la_ == 1:
                self.state = 7584
                self.match(MySQLParser.EQUAL_OPERATOR)


            self.state = 7587
            self.charsetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def partitionTypeDef(self):
            return self.getTypedRuleContext(MySQLParser.PartitionTypeDefContext,0)


        def PARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def subPartitions(self):
            return self.getTypedRuleContext(MySQLParser.SubPartitionsContext,0)


        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySQLParser.PartitionDefinitionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_partitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionClause" ):
                listener.enterPartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionClause" ):
                listener.exitPartitionClause(self)




    def partitionClause(self):

        localctx = MySQLParser.PartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_partitionClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7589
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 7590
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 7591
            self.partitionTypeDef()
            self.state = 7594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1005,self._ctx)
            if la_ == 1:
                self.state = 7592
                self.match(MySQLParser.PARTITIONS_SYMBOL)
                self.state = 7593
                self.real_ulong_number()


            self.state = 7597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1006,self._ctx)
            if la_ == 1:
                self.state = 7596
                self.subPartitions()


            self.state = 7600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1007,self._ctx)
            if la_ == 1:
                self.state = 7599
                self.partitionDefinitions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionTypeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySQLParser.RULE_partitionTypeDef

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionDefRangeListContext(PartitionTypeDefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PartitionTypeDefContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RANGE_SYMBOL(self):
            return self.getToken(MySQLParser.RANGE_SYMBOL, 0)
        def LIST_SYMBOL(self):
            return self.getToken(MySQLParser.LIST_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)
        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefRangeList" ):
                listener.enterPartitionDefRangeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefRangeList" ):
                listener.exitPartitionDefRangeList(self)


    class PartitionDefKeyContext(PartitionTypeDefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PartitionTypeDefContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def LINEAR_SYMBOL(self):
            return self.getToken(MySQLParser.LINEAR_SYMBOL, 0)
        def partitionKeyAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.PartitionKeyAlgorithmContext,0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefKey" ):
                listener.enterPartitionDefKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefKey" ):
                listener.exitPartitionDefKey(self)


    class PartitionDefHashContext(PartitionTypeDefContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySQLParser.PartitionTypeDefContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH_SYMBOL(self):
            return self.getToken(MySQLParser.HASH_SYMBOL, 0)
        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)
        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)
        def LINEAR_SYMBOL(self):
            return self.getToken(MySQLParser.LINEAR_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefHash" ):
                listener.enterPartitionDefHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefHash" ):
                listener.exitPartitionDefHash(self)



    def partitionTypeDef(self):

        localctx = MySQLParser.PartitionTypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_partitionTypeDef)
        self._la = 0 # Token type
        try:
            self.state = 7635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1014,self._ctx)
            if la_ == 1:
                localctx = MySQLParser.PartitionDefKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 7603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==277:
                    self.state = 7602
                    self.match(MySQLParser.LINEAR_SYMBOL)


                self.state = 7605
                self.match(MySQLParser.KEY_SYMBOL)
                self.state = 7607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1009,self._ctx)
                if la_ == 1:
                    self.state = 7606
                    self.partitionKeyAlgorithm()


                self.state = 7609
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1010,self._ctx)
                if la_ == 1:
                    self.state = 7610
                    self.identifierList()


                self.state = 7613
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 2:
                localctx = MySQLParser.PartitionDefHashContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 7615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==277:
                    self.state = 7614
                    self.match(MySQLParser.LINEAR_SYMBOL)


                self.state = 7617
                self.match(MySQLParser.HASH_SYMBOL)
                self.state = 7618
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7619
                self.bitExpr(0)
                self.state = 7620
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass

            elif la_ == 3:
                localctx = MySQLParser.PartitionDefRangeListContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 7622
                _la = self._input.LA(1)
                if not(_la==280 or _la==432):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7633
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [776]:
                    self.state = 7623
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 7624
                    self.bitExpr(0)
                    self.state = 7625
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass
                elif token in [71]:
                    self.state = 7627
                    self.match(MySQLParser.COLUMNS_SYMBOL)
                    self.state = 7628
                    self.match(MySQLParser.OPEN_PAR_SYMBOL)
                    self.state = 7630
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1012,self._ctx)
                    if la_ == 1:
                        self.state = 7629
                        self.identifierList()


                    self.state = 7632
                    self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(MySQLParser.HASH_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def KEY_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_SYMBOL, 0)

        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListWithParenthesesContext,0)


        def LINEAR_SYMBOL(self):
            return self.getToken(MySQLParser.LINEAR_SYMBOL, 0)

        def SUBPARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def partitionKeyAlgorithm(self):
            return self.getTypedRuleContext(MySQLParser.PartitionKeyAlgorithmContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_subPartitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitions" ):
                listener.enterSubPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitions" ):
                listener.exitSubPartitions(self)




    def subPartitions(self):

        localctx = MySQLParser.SubPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_subPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7637
            self.match(MySQLParser.SUBPARTITION_SYMBOL)
            self.state = 7638
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 7640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==277:
                self.state = 7639
                self.match(MySQLParser.LINEAR_SYMBOL)


            self.state = 7652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [220]:
                self.state = 7642
                self.match(MySQLParser.HASH_SYMBOL)
                self.state = 7643
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7644
                self.bitExpr(0)
                self.state = 7645
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [265]:
                self.state = 7647
                self.match(MySQLParser.KEY_SYMBOL)
                self.state = 7649
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1016,self._ctx)
                if la_ == 1:
                    self.state = 7648
                    self.partitionKeyAlgorithm()


                self.state = 7651
                self.identifierListWithParentheses()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1018,self._ctx)
            if la_ == 1:
                self.state = 7654
                self.match(MySQLParser.SUBPARTITIONS_SYMBOL)
                self.state = 7655
                self.real_ulong_number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionKeyAlgorithmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_partitionKeyAlgorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionKeyAlgorithm" ):
                listener.enterPartitionKeyAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionKeyAlgorithm" ):
                listener.exitPartitionKeyAlgorithm(self)




    def partitionKeyAlgorithm(self):

        localctx = MySQLParser.PartitionKeyAlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_partitionKeyAlgorithm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7658
            if not serverVersion >= 50700:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50700")
            self.state = 7659
            self.match(MySQLParser.ALGORITHM_SYMBOL)
            self.state = 7660
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 7661
            self.real_ulong_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PartitionDefinitionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)




    def partitionDefinitions(self):

        localctx = MySQLParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7663
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7664
            self.partitionDefinition()
            self.state = 7669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 7665
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 7666
                self.partitionDefinition()
                self.state = 7671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7672
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def VALUES_SYMBOL(self):
            return self.getToken(MySQLParser.VALUES_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySQLParser.LESS_SYMBOL, 0)

        def THAN_SYMBOL(self):
            return self.getToken(MySQLParser.THAN_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def partitionValuesIn(self):
            return self.getTypedRuleContext(MySQLParser.PartitionValuesInContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PartitionOptionContext,i)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SubpartitionDefinitionContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def partitionValueItemListParen(self):
            return self.getTypedRuleContext(MySQLParser.PartitionValueItemListParenContext,0)


        def MAXVALUE_SYMBOL(self):
            return self.getToken(MySQLParser.MAXVALUE_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinition" ):
                listener.enterPartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinition" ):
                listener.exitPartitionDefinition(self)




    def partitionDefinition(self):

        localctx = MySQLParser.PartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_partitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7674
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 7675
            self.identifier()
            self.state = 7686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1021,self._ctx)
            if la_ == 1:
                self.state = 7676
                self.match(MySQLParser.VALUES_SYMBOL)
                self.state = 7677
                self.match(MySQLParser.LESS_SYMBOL)
                self.state = 7678
                self.match(MySQLParser.THAN_SYMBOL)
                self.state = 7681
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [776]:
                    self.state = 7679
                    self.partitionValueItemListParen()
                    pass
                elif token in [329]:
                    self.state = 7680
                    self.match(MySQLParser.MAXVALUE_SYMBOL)
                    pass
                else:
                    raise NoViableAltException(self)


            elif la_ == 2:
                self.state = 7683
                self.match(MySQLParser.VALUES_SYMBOL)
                self.state = 7684
                self.match(MySQLParser.IN_SYMBOL)
                self.state = 7685
                self.partitionValuesIn()


            self.state = 7691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==75 or _la==112 or _la==163 or _la==236 or (((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & 35184374185985) != 0 or _la==553 or _la==572:
                self.state = 7688
                self.partitionOption()
                self.state = 7693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==776:
                self.state = 7694
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7695
                self.subpartitionDefinition()
                self.state = 7700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 7696
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7697
                    self.subpartitionDefinition()
                    self.state = 7702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7703
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValuesInContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionValueItemListParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PartitionValueItemListParenContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PartitionValueItemListParenContext,i)


        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionValuesIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValuesIn" ):
                listener.enterPartitionValuesIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValuesIn" ):
                listener.exitPartitionValuesIn(self)




    def partitionValuesIn(self):

        localctx = MySQLParser.PartitionValuesInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_partitionValuesIn)
        self._la = 0 # Token type
        try:
            self.state = 7719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1026,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7707
                self.partitionValueItemListParen()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7708
                self.match(MySQLParser.OPEN_PAR_SYMBOL)
                self.state = 7709
                self.partitionValueItemListParen()
                self.state = 7714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==773:
                    self.state = 7710
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7711
                    self.partitionValueItemListParen()
                    self.state = 7716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7717
                self.match(MySQLParser.CLOSE_PAR_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.option = None # Token

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def engineRef(self):
            return self.getTypedRuleContext(MySQLParser.EngineRefContext,0)


        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def real_ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulong_numberContext,0)


        def NODEGROUP_SYMBOL(self):
            return self.getToken(MySQLParser.NODEGROUP_SYMBOL, 0)

        def MAX_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def INDEX_SYMBOL(self):
            return self.getToken(MySQLParser.INDEX_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOption" ):
                listener.enterPartitionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOption" ):
                listener.exitPartitionOption(self)




    def partitionOption(self):

        localctx = MySQLParser.PartitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_partitionOption)
        self._la = 0 # Token type
        try:
            self.state = 7755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [572]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7721
                localctx.option = self.match(MySQLParser.TABLESPACE_SYMBOL)
                self.state = 7723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1027,self._ctx)
                if la_ == 1:
                    self.state = 7722
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7725
                self.identifier()
                pass
            elif token in [163, 553]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==553:
                    self.state = 7726
                    self.match(MySQLParser.STORAGE_SYMBOL)


                self.state = 7729
                localctx.option = self.match(MySQLParser.ENGINE_SYMBOL)
                self.state = 7731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1029,self._ctx)
                if la_ == 1:
                    self.state = 7730
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7733
                self.engineRef()
                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7734
                localctx.option = self.match(MySQLParser.NODEGROUP_SYMBOL)
                self.state = 7736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7735
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7738
                self.real_ulong_number()
                pass
            elif token in [323, 344]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7739
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==323 or _la==344):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==750:
                    self.state = 7740
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7743
                self.real_ulong_number()
                pass
            elif token in [112, 236]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7744
                localctx.option = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==112 or _la==236):
                    localctx.option = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7745
                self.match(MySQLParser.DIRECTORY_SYMBOL)
                self.state = 7747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1032,self._ctx)
                if la_ == 1:
                    self.state = 7746
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7749
                self.textLiteral()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7750
                localctx.option = self.match(MySQLParser.COMMENT_SYMBOL)
                self.state = 7752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1033,self._ctx)
                if la_ == 1:
                    self.state = 7751
                    self.match(MySQLParser.EQUAL_OPERATOR)


                self.state = 7754
                self.textLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PartitionOptionContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_subpartitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartitionDefinition" ):
                listener.enterSubpartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartitionDefinition" ):
                listener.exitSubpartitionDefinition(self)




    def subpartitionDefinition(self):

        localctx = MySQLParser.SubpartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_subpartitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7757
            self.match(MySQLParser.SUBPARTITION_SYMBOL)
            self.state = 7758
            self.textOrIdentifier()
            self.state = 7762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==75 or _la==112 or _la==163 or _la==236 or (((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & 35184374185985) != 0 or _la==553 or _la==572:
                self.state = 7759
                self.partitionOption()
                self.state = 7764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValueItemListParenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def partitionValueItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PartitionValueItemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PartitionValueItemContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionValueItemListParen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValueItemListParen" ):
                listener.enterPartitionValueItemListParen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValueItemListParen" ):
                listener.exitPartitionValueItemListParen(self)




    def partitionValueItemListParen(self):

        localctx = MySQLParser.PartitionValueItemListParenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_partitionValueItemListParen)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7765
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7766
            self.partitionValueItem()
            self.state = 7771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 7767
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 7768
                self.partitionValueItem()
                self.state = 7773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7774
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitExpr(self):
            return self.getTypedRuleContext(MySQLParser.BitExprContext,0)


        def MAXVALUE_SYMBOL(self):
            return self.getToken(MySQLParser.MAXVALUE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_partitionValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionValueItem" ):
                listener.enterPartitionValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionValueItem" ):
                listener.exitPartitionValueItem(self)




    def partitionValueItem(self):

        localctx = MySQLParser.PartitionValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_partitionValueItem)
        try:
            self.state = 7778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1037,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7776
                self.bitExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7777
                self.match(MySQLParser.MAXVALUE_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinerClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINER_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINER_SYMBOL, 0)

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_definerClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinerClause" ):
                listener.enterDefinerClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinerClause" ):
                listener.exitDefinerClause(self)




    def definerClause(self):

        localctx = MySQLParser.DefinerClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_definerClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7780
            self.match(MySQLParser.DEFINER_SYMBOL)
            self.state = 7781
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 7782
            self.user()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_SYMBOL(self):
            return self.getToken(MySQLParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MySQLParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = MySQLParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7784
            self.match(MySQLParser.IF_SYMBOL)
            self.state = 7785
            self.match(MySQLParser.EXISTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_SYMBOL(self):
            return self.getToken(MySQLParser.IF_SYMBOL, 0)

        def notRule(self):
            return self.getTypedRuleContext(MySQLParser.NotRuleContext,0)


        def EXISTS_SYMBOL(self):
            return self.getToken(MySQLParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = MySQLParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7787
            self.match(MySQLParser.IF_SYMBOL)
            self.state = 7788
            self.notRule()
            self.state = 7789
            self.match(MySQLParser.EXISTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def functionParameter(self):
            return self.getTypedRuleContext(MySQLParser.FunctionParameterContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MySQLParser.IN_SYMBOL, 0)

        def OUT_SYMBOL(self):
            return self.getToken(MySQLParser.OUT_SYMBOL, 0)

        def INOUT_SYMBOL(self):
            return self.getToken(MySQLParser.INOUT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)




    def procedureParameter(self):

        localctx = MySQLParser.ProcedureParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_procedureParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1038,self._ctx)
            if la_ == 1:
                self.state = 7791
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==240 or _la==251 or _la==397):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7794
            self.functionParameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterName(self):
            return self.getTypedRuleContext(MySQLParser.ParameterNameContext,0)


        def typeWithOptCollate(self):
            return self.getTypedRuleContext(MySQLParser.TypeWithOptCollateContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)




    def functionParameter(self):

        localctx = MySQLParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7796
            self.parameterName()
            self.state = 7797
            self.typeWithOptCollate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATE_SYMBOL, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySQLParser.CollationNameContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_collate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollate" ):
                listener.enterCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollate" ):
                listener.exitCollate(self)




    def collate(self):

        localctx = MySQLParser.CollateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_collate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7799
            self.match(MySQLParser.COLLATE_SYMBOL)
            self.state = 7800
            self.collationName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWithOptCollateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(MySQLParser.DataTypeContext,0)


        def collate(self):
            return self.getTypedRuleContext(MySQLParser.CollateContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_typeWithOptCollate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWithOptCollate" ):
                listener.enterTypeWithOptCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWithOptCollate" ):
                listener.exitTypeWithOptCollate(self)




    def typeWithOptCollate(self):

        localctx = MySQLParser.TypeWithOptCollateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_typeWithOptCollate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7802
            self.dataType()
            self.state = 7804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1039,self._ctx)
            if la_ == 1:
                self.state = 7803
                self.collate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaIdentifierPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def schemaRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.SchemaRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.SchemaRefContext,i)


        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_schemaIdentifierPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaIdentifierPair" ):
                listener.enterSchemaIdentifierPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaIdentifierPair" ):
                listener.exitSchemaIdentifierPair(self)




    def schemaIdentifierPair(self):

        localctx = MySQLParser.SchemaIdentifierPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_schemaIdentifierPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7806
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 7807
            self.schemaRef()
            self.state = 7808
            self.match(MySQLParser.COMMA_SYMBOL)
            self.state = 7809
            self.schemaRef()
            self.state = 7810
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRefListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def viewRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ViewRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ViewRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_viewRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRefList" ):
                listener.enterViewRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRefList" ):
                listener.exitViewRefList(self)




    def viewRefList(self):

        localctx = MySQLParser.ViewRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_viewRefList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7812
            self.viewRef()
            self.state = 7817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 7813
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 7814
                self.viewRef()
                self.state = 7819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def updateElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UpdateElementContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UpdateElementContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_updateList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateList" ):
                listener.enterUpdateList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateList" ):
                listener.exitUpdateList(self)




    def updateList(self):

        localctx = MySQLParser.UpdateListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_updateList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7820
            self.updateElement()
            self.state = 7825
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1041,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7821
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7822
                    self.updateElement() 
                self.state = 7827
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1041,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRef(self):
            return self.getTypedRuleContext(MySQLParser.ColumnRefContext,0)


        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def expr(self):
            return self.getTypedRuleContext(MySQLParser.ExprContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_updateElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateElement" ):
                listener.enterUpdateElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateElement" ):
                listener.exitUpdateElement(self)




    def updateElement(self):

        localctx = MySQLParser.UpdateElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_updateElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7828
            self.columnRef()
            self.state = 7829
            self.match(MySQLParser.EQUAL_OPERATOR)
            self.state = 7832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1042,self._ctx)
            if la_ == 1:
                self.state = 7830
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 7831
                self.match(MySQLParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charset(self):
            return self.getTypedRuleContext(MySQLParser.CharsetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySQLParser.CharsetNameContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_charsetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetClause" ):
                listener.enterCharsetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetClause" ):
                listener.exitCharsetClause(self)




    def charsetClause(self):

        localctx = MySQLParser.CharsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_charsetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7834
            self.charset()
            self.state = 7835
            self.charsetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)

        def fieldTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.FieldTermContext)
            else:
                return self.getTypedRuleContext(MySQLParser.FieldTermContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_fieldsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldsClause" ):
                listener.enterFieldsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldsClause" ):
                listener.exitFieldsClause(self)




    def fieldsClause(self):

        localctx = MySQLParser.FieldsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_fieldsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7837
            self.match(MySQLParser.COLUMNS_SYMBOL)
            self.state = 7839 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7838
                    self.fieldTerm()

                else:
                    raise NoViableAltException(self)
                self.state = 7841 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1043,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERMINATED_SYMBOL(self):
            return self.getToken(MySQLParser.TERMINATED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def ENCLOSED_SYMBOL(self):
            return self.getToken(MySQLParser.ENCLOSED_SYMBOL, 0)

        def OPTIONALLY_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONALLY_SYMBOL, 0)

        def ESCAPED_SYMBOL(self):
            return self.getToken(MySQLParser.ESCAPED_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_fieldTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldTerm" ):
                listener.enterFieldTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldTerm" ):
                listener.exitFieldTerm(self)




    def fieldTerm(self):

        localctx = MySQLParser.FieldTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_fieldTerm)
        self._la = 0 # Token type
        try:
            self.state = 7855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [579]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7843
                self.match(MySQLParser.TERMINATED_SYMBOL)
                self.state = 7844
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 7845
                self.textString()
                pass
            elif token in [157, 392]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==392:
                    self.state = 7846
                    self.match(MySQLParser.OPTIONALLY_SYMBOL)


                self.state = 7849
                self.match(MySQLParser.ENCLOSED_SYMBOL)
                self.state = 7850
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 7851
                self.textString()
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7852
                self.match(MySQLParser.ESCAPED_SYMBOL)
                self.state = 7853
                self.match(MySQLParser.BY_SYMBOL)
                self.state = 7854
                self.textString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINES_SYMBOL(self):
            return self.getToken(MySQLParser.LINES_SYMBOL, 0)

        def lineTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.LineTermContext)
            else:
                return self.getTypedRuleContext(MySQLParser.LineTermContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_linesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinesClause" ):
                listener.enterLinesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinesClause" ):
                listener.exitLinesClause(self)




    def linesClause(self):

        localctx = MySQLParser.LinesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_linesClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7857
            self.match(MySQLParser.LINES_SYMBOL)
            self.state = 7859 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7858
                    self.lineTerm()

                else:
                    raise NoViableAltException(self)
                self.state = 7861 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1046,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def TERMINATED_SYMBOL(self):
            return self.getToken(MySQLParser.TERMINATED_SYMBOL, 0)

        def STARTING_SYMBOL(self):
            return self.getToken(MySQLParser.STARTING_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_lineTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineTerm" ):
                listener.enterLineTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineTerm" ):
                listener.exitLineTerm(self)




    def lineTerm(self):

        localctx = MySQLParser.LineTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_lineTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7863
            _la = self._input.LA(1)
            if not(_la==541 or _la==579):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7864
            self.match(MySQLParser.BY_SYMBOL)
            self.state = 7865
            self.textString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.UserContext)
            else:
                return self.getTypedRuleContext(MySQLParser.UserContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_userList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserList" ):
                listener.enterUserList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserList" ):
                listener.exitUserList(self)




    def userList(self):

        localctx = MySQLParser.UserListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_userList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7867
            self.user()
            self.state = 7872
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1047,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7868
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7869
                    self.user() 
                self.state = 7874
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1047,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createUserEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.CreateUserEntryContext)
            else:
                return self.getTypedRuleContext(MySQLParser.CreateUserEntryContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_createUserList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserList" ):
                listener.enterCreateUserList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserList" ):
                listener.exitCreateUserList(self)




    def createUserList(self):

        localctx = MySQLParser.CreateUserListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_createUserList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7875
            self.createUserEntry()
            self.state = 7880
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1048,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7876
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7877
                    self.createUserEntry() 
                self.state = 7882
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1048,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUserEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.AlterUserEntryContext)
            else:
                return self.getTypedRuleContext(MySQLParser.AlterUserEntryContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_alterUserList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserList" ):
                listener.enterAlterUserList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserList" ):
                listener.exitAlterUserList(self)




    def alterUserList(self):

        localctx = MySQLParser.AlterUserListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_alterUserList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7883
            self.alterUserEntry()
            self.state = 7888
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1049,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7884
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 7885
                    self.alterUserEntry() 
                self.state = 7890
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1049,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def RANDOM_SYMBOL(self):
            return self.getToken(MySQLParser.RANDOM_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def textStringHash(self):
            return self.getTypedRuleContext(MySQLParser.TextStringHashContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_createUserEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserEntry" ):
                listener.enterCreateUserEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserEntry" ):
                listener.exitCreateUserEntry(self)




    def createUserEntry(self):

        localctx = MySQLParser.CreateUserEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_createUserEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7891
            self.user()
            self.state = 7918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1054,self._ctx)
            if la_ == 1:
                self.state = 7892
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 7916
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1053,self._ctx)
                if la_ == 1:
                    self.state = 7893
                    self.match(MySQLParser.BY_SYMBOL)
                    self.state = 7896
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1050,self._ctx)
                    if la_ == 1:
                        self.state = 7894
                        if not serverVersion < 80011:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion < 80011")
                        self.state = 7895
                        self.match(MySQLParser.PASSWORD_SYMBOL)


                    self.state = 7898
                    self.textString()
                    pass

                elif la_ == 2:
                    self.state = 7899
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 7900
                    self.textOrIdentifier()
                    self.state = 7906
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
                    if la_ == 1:
                        self.state = 7901
                        self.match(MySQLParser.AS_SYMBOL)
                        self.state = 7902
                        self.textStringHash()

                    elif la_ == 2:
                        self.state = 7903
                        if not serverVersion >= 50706:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "serverVersion >= 50706")
                        self.state = 7904
                        self.match(MySQLParser.BY_SYMBOL)
                        self.state = 7905
                        self.textString()


                    pass

                elif la_ == 3:
                    self.state = 7908
                    if not serverVersion >= 80018:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80018")
                    self.state = 7911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==645:
                        self.state = 7909
                        self.match(MySQLParser.WITH_SYMBOL)
                        self.state = 7910
                        self.textOrIdentifier()


                    self.state = 7913
                    self.match(MySQLParser.BY_SYMBOL)
                    self.state = 7914
                    self.match(MySQLParser.RANDOM_SYMBOL)
                    self.state = 7915
                    self.match(MySQLParser.PASSWORD_SYMBOL)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user(self):
            return self.getTypedRuleContext(MySQLParser.UserContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MySQLParser.BY_SYMBOL, 0)

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringContext,i)


        def WITH_SYMBOL(self):
            return self.getToken(MySQLParser.WITH_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def discardOldPassword(self):
            return self.getTypedRuleContext(MySQLParser.DiscardOldPasswordContext,0)


        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def retainCurrentPassword(self):
            return self.getTypedRuleContext(MySQLParser.RetainCurrentPasswordContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MySQLParser.AS_SYMBOL, 0)

        def textStringHash(self):
            return self.getTypedRuleContext(MySQLParser.TextStringHashContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_alterUserEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserEntry" ):
                listener.enterAlterUserEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserEntry" ):
                listener.exitAlterUserEntry(self)




    def alterUserEntry(self):

        localctx = MySQLParser.AlterUserEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_alterUserEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7920
            self.user()
            self.state = 7949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1062,self._ctx)
            if la_ == 1:
                self.state = 7921
                self.match(MySQLParser.IDENTIFIED_SYMBOL)
                self.state = 7944
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1060,self._ctx)
                if la_ == 1:
                    self.state = 7924
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==645:
                        self.state = 7922
                        self.match(MySQLParser.WITH_SYMBOL)
                        self.state = 7923
                        self.textOrIdentifier()


                    self.state = 7926
                    self.match(MySQLParser.BY_SYMBOL)
                    self.state = 7927
                    self.textString()
                    self.state = 7930
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1056,self._ctx)
                    if la_ == 1:
                        self.state = 7928
                        self.match(MySQLParser.REPLACE_SYMBOL)
                        self.state = 7929
                        self.textString()


                    self.state = 7933
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1057,self._ctx)
                    if la_ == 1:
                        self.state = 7932
                        self.retainCurrentPassword()



                elif la_ == 2:
                    self.state = 7935
                    self.match(MySQLParser.WITH_SYMBOL)
                    self.state = 7936
                    self.textOrIdentifier()
                    self.state = 7942
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1059,self._ctx)
                    if la_ == 1:
                        self.state = 7937
                        self.match(MySQLParser.AS_SYMBOL)
                        self.state = 7938
                        self.textStringHash()
                        self.state = 7940
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1058,self._ctx)
                        if la_ == 1:
                            self.state = 7939
                            self.retainCurrentPassword()






                pass

            elif la_ == 2:
                self.state = 7947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1061,self._ctx)
                if la_ == 1:
                    self.state = 7946
                    self.discardOldPassword()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetainCurrentPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETAIN_SYMBOL(self):
            return self.getToken(MySQLParser.RETAIN_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_retainCurrentPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetainCurrentPassword" ):
                listener.enterRetainCurrentPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetainCurrentPassword" ):
                listener.exitRetainCurrentPassword(self)




    def retainCurrentPassword(self):

        localctx = MySQLParser.RetainCurrentPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_retainCurrentPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7951
            self.match(MySQLParser.RETAIN_SYMBOL)
            self.state = 7952
            self.match(MySQLParser.CURRENT_SYMBOL)
            self.state = 7953
            self.match(MySQLParser.PASSWORD_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardOldPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD_SYMBOL(self):
            return self.getToken(MySQLParser.DISCARD_SYMBOL, 0)

        def OLD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_discardOldPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardOldPassword" ):
                listener.enterDiscardOldPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardOldPassword" ):
                listener.exitDiscardOldPassword(self)




    def discardOldPassword(self):

        localctx = MySQLParser.DiscardOldPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_discardOldPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7955
            self.match(MySQLParser.DISCARD_SYMBOL)
            self.state = 7956
            self.match(MySQLParser.OLD_SYMBOL)
            self.state = 7957
            self.match(MySQLParser.PASSWORD_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacePasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLACE_SYMBOL, 0)

        def textString(self):
            return self.getTypedRuleContext(MySQLParser.TextStringContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_replacePassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplacePassword" ):
                listener.enterReplacePassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplacePassword" ):
                listener.exitReplacePassword(self)




    def replacePassword(self):

        localctx = MySQLParser.ReplacePasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_replacePassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7959
            self.match(MySQLParser.REPLACE_SYMBOL)
            self.state = 7960
            self.textString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserIdentifierOrTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextOrIdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,i)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SIGN_SYMBOL, 0)

        def AT_TEXT_SUFFIX(self):
            return self.getToken(MySQLParser.AT_TEXT_SUFFIX, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_userIdentifierOrText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserIdentifierOrText" ):
                listener.enterUserIdentifierOrText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserIdentifierOrText" ):
                listener.exitUserIdentifierOrText(self)




    def userIdentifierOrText(self):

        localctx = MySQLParser.UserIdentifierOrTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_userIdentifierOrText)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7962
            self.textOrIdentifier()
            self.state = 7966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1063,self._ctx)
            if la_ == 1:
                self.state = 7963
                self.match(MySQLParser.AT_SIGN_SYMBOL)
                self.state = 7964
                self.textOrIdentifier()

            elif la_ == 2:
                self.state = 7965
                self.match(MySQLParser.AT_TEXT_SUFFIX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userIdentifierOrText(self):
            return self.getTypedRuleContext(MySQLParser.UserIdentifierOrTextContext,0)


        def CURRENT_USER_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0)

        def parentheses(self):
            return self.getTypedRuleContext(MySQLParser.ParenthesesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser" ):
                listener.enterUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser" ):
                listener.exitUser(self)




    def user(self):

        localctx = MySQLParser.UserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_user)
        try:
            self.state = 7973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1065,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7968
                self.userIdentifierOrText()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7969
                self.match(MySQLParser.CURRENT_USER_SYMBOL)
                self.state = 7971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1064,self._ctx)
                if la_ == 1:
                    self.state = 7970
                    self.parentheses()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE_SYMBOL(self):
            return self.getToken(MySQLParser.LIKE_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_likeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeClause" ):
                listener.enterLikeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeClause" ):
                listener.exitLikeClause(self)




    def likeClause(self):

        localctx = MySQLParser.LikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_likeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7975
            self.match(MySQLParser.LIKE_SYMBOL)
            self.state = 7976
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeOrWhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def likeClause(self):
            return self.getTypedRuleContext(MySQLParser.LikeClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(MySQLParser.WhereClauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_likeOrWhere

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeOrWhere" ):
                listener.enterLikeOrWhere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeOrWhere" ):
                listener.exitLikeOrWhere(self)




    def likeOrWhere(self):

        localctx = MySQLParser.LikeOrWhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_likeOrWhere)
        try:
            self.state = 7980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [275]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7978
                self.likeClause()
                pass
            elif token in [643]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7979
                self.whereClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnlineOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE_SYMBOL(self):
            return self.getToken(MySQLParser.ONLINE_SYMBOL, 0)

        def OFFLINE_SYMBOL(self):
            return self.getToken(MySQLParser.OFFLINE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_onlineOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnlineOption" ):
                listener.enterOnlineOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnlineOption" ):
                listener.exitOnlineOption(self)




    def onlineOption(self):

        localctx = MySQLParser.OnlineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_onlineOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7982
            _la = self._input.LA(1)
            if not(_la==380 or _la==385):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoWriteToBinLogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def NO_WRITE_TO_BINLOG_SYMBOL(self):
            return self.getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_noWriteToBinLog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoWriteToBinLog" ):
                listener.enterNoWriteToBinLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoWriteToBinLog" ):
                listener.exitNoWriteToBinLog(self)




    def noWriteToBinLog(self):

        localctx = MySQLParser.NoWriteToBinLogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_noWriteToBinLog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7984
            _la = self._input.LA(1)
            if not(_la==284 or _la==375):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsePartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def identifierListWithParentheses(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListWithParenthesesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_usePartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsePartition" ):
                listener.enterUsePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsePartition" ):
                listener.exitUsePartition(self)




    def usePartition(self):

        localctx = MySQLParser.UsePartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_usePartition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7986
            if not serverVersion >= 50602:
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "serverVersion >= 50602")
            self.state = 7987
            self.match(MySQLParser.PARTITION_SYMBOL)
            self.state = 7988
            self.identifierListWithParentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_fieldIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldIdentifier" ):
                listener.enterFieldIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldIdentifier" ):
                listener.exitFieldIdentifier(self)




    def fieldIdentifier(self):

        localctx = MySQLParser.FieldIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_fieldIdentifier)
        try:
            self.state = 7995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1068,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7990
                self.dotIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7991
                self.qualifiedIdentifier()
                self.state = 7993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1067,self._ctx)
                if la_ == 1:
                    self.state = 7992
                    self.dotIdentifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def fieldIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.FieldIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_columnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)




    def columnName(self):

        localctx = MySQLParser.ColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_columnName)
        try:
            self.state = 8001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1069,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7997
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 7998
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7999
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 8000
                self.fieldIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnInternalRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_columnInternalRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnInternalRef" ):
                listener.enterColumnInternalRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnInternalRef" ):
                listener.exitColumnInternalRef(self)




    def columnInternalRef(self):

        localctx = MySQLParser.ColumnInternalRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_columnInternalRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8003
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnInternalRefListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def columnInternalRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ColumnInternalRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ColumnInternalRefContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_columnInternalRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnInternalRefList" ):
                listener.enterColumnInternalRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnInternalRefList" ):
                listener.exitColumnInternalRefList(self)




    def columnInternalRefList(self):

        localctx = MySQLParser.ColumnInternalRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_columnInternalRefList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8005
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 8006
            self.columnInternalRef()
            self.state = 8011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 8007
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 8008
                self.columnInternalRef()
                self.state = 8013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8014
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.FieldIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_columnRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnRef" ):
                listener.enterColumnRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnRef" ):
                listener.exitColumnRef(self)




    def columnRef(self):

        localctx = MySQLParser.ColumnRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_columnRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8016
            self.fieldIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnRef(self):
            return self.getTypedRuleContext(MySQLParser.ColumnRefContext,0)


        def tableWild(self):
            return self.getTypedRuleContext(MySQLParser.TableWildContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insertIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIdentifier" ):
                listener.enterInsertIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIdentifier" ):
                listener.exitInsertIdentifier(self)




    def insertIdentifier(self):

        localctx = MySQLParser.InsertIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_insertIdentifier)
        try:
            self.state = 8020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1071,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8018
                self.columnRef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8019
                self.tableWild()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_indexName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexName" ):
                listener.enterIndexName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexName" ):
                listener.exitIndexName(self)




    def indexName(self):

        localctx = MySQLParser.IndexNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_indexName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8022
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.FieldIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_indexRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexRef" ):
                listener.enterIndexRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexRef" ):
                listener.exitIndexRef(self)




    def indexRef(self):

        localctx = MySQLParser.IndexRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_indexRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8024
            self.fieldIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableWildContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IdentifierContext,i)


        def DOT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.DOT_SYMBOL)
            else:
                return self.getToken(MySQLParser.DOT_SYMBOL, i)

        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableWild

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableWild" ):
                listener.enterTableWild(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableWild" ):
                listener.exitTableWild(self)




    def tableWild(self):

        localctx = MySQLParser.TableWildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_tableWild)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8026
            self.identifier()
            self.state = 8027
            self.match(MySQLParser.DOT_SYMBOL)
            self.state = 8031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1072,self._ctx)
            if la_ == 1:
                self.state = 8028
                self.identifier()
                self.state = 8029
                self.match(MySQLParser.DOT_SYMBOL)


            self.state = 8033
            self.match(MySQLParser.MULT_OPERATOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MySQLParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8035
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_schemaRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRef" ):
                listener.enterSchemaRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRef" ):
                listener.exitSchemaRef(self)




    def schemaRef(self):

        localctx = MySQLParser.SchemaRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_schemaRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8037
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MySQLParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8039
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_procedureRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRef" ):
                listener.enterProcedureRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRef" ):
                listener.exitProcedureRef(self)




    def procedureRef(self):

        localctx = MySQLParser.ProcedureRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_procedureRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8041
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)




    def functionName(self):

        localctx = MySQLParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_functionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8043
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_functionRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionRef" ):
                listener.enterFunctionRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionRef" ):
                listener.exitFunctionRef(self)




    def functionRef(self):

        localctx = MySQLParser.FunctionRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_functionRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8045
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_triggerName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerName" ):
                listener.enterTriggerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerName" ):
                listener.exitTriggerName(self)




    def triggerName(self):

        localctx = MySQLParser.TriggerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_triggerName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8047
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_triggerRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerRef" ):
                listener.enterTriggerRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerRef" ):
                listener.exitTriggerRef(self)




    def triggerRef(self):

        localctx = MySQLParser.TriggerRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_triggerRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8049
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MySQLParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_viewName)
        try:
            self.state = 8053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1073,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8051
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8052
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_viewRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRef" ):
                listener.enterViewRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRef" ):
                listener.exitViewRef(self)




    def viewRef(self):

        localctx = MySQLParser.ViewRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_viewRef)
        try:
            self.state = 8057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1074,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8055
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8056
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tablespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceName" ):
                listener.enterTablespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceName" ):
                listener.exitTablespaceName(self)




    def tablespaceName(self):

        localctx = MySQLParser.TablespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_tablespaceName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8059
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tablespaceRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceRef" ):
                listener.enterTablespaceRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceRef" ):
                listener.exitTablespaceRef(self)




    def tablespaceRef(self):

        localctx = MySQLParser.TablespaceRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_tablespaceRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8061
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_logfileGroupName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupName" ):
                listener.enterLogfileGroupName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupName" ):
                listener.exitLogfileGroupName(self)




    def logfileGroupName(self):

        localctx = MySQLParser.LogfileGroupNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_logfileGroupName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8063
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogfileGroupRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_logfileGroupRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogfileGroupRef" ):
                listener.enterLogfileGroupRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogfileGroupRef" ):
                listener.exitLogfileGroupRef(self)




    def logfileGroupRef(self):

        localctx = MySQLParser.LogfileGroupRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_logfileGroupRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8065
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_eventName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventName" ):
                listener.enterEventName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventName" ):
                listener.exitEventName(self)




    def eventName(self):

        localctx = MySQLParser.EventNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_eventName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8067
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_eventRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventRef" ):
                listener.enterEventRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventRef" ):
                listener.exitEventRef(self)




    def eventRef(self):

        localctx = MySQLParser.EventRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_eventRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8069
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_udfName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfName" ):
                listener.enterUdfName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfName" ):
                listener.exitUdfName(self)




    def udfName(self):

        localctx = MySQLParser.UdfNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_udfName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8071
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_serverName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerName" ):
                listener.enterServerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerName" ):
                listener.exitServerName(self)




    def serverName(self):

        localctx = MySQLParser.ServerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_serverName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8073
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_serverRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerRef" ):
                listener.enterServerRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerRef" ):
                listener.exitServerRef(self)




    def serverRef(self):

        localctx = MySQLParser.ServerRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_serverRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8075
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_engineRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineRef" ):
                listener.enterEngineRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineRef" ):
                listener.exitEngineRef(self)




    def engineRef(self):

        localctx = MySQLParser.EngineRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_engineRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8077
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = MySQLParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_tableName)
        try:
            self.state = 8081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1075,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8079
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8080
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterTableRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaRef(self):
            return self.getTypedRuleContext(MySQLParser.SchemaRefContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_filterTableRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterTableRef" ):
                listener.enterFilterTableRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterTableRef" ):
                listener.exitFilterTableRef(self)




    def filterTableRef(self):

        localctx = MySQLParser.FilterTableRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_filterTableRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8083
            self.schemaRef()
            self.state = 8084
            self.dotIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRefWithWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def DOT_SYMBOL(self):
            return self.getToken(MySQLParser.DOT_SYMBOL, 0)

        def MULT_OPERATOR(self):
            return self.getToken(MySQLParser.MULT_OPERATOR, 0)

        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableRefWithWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefWithWildcard" ):
                listener.enterTableRefWithWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefWithWildcard" ):
                listener.exitTableRefWithWildcard(self)




    def tableRefWithWildcard(self):

        localctx = MySQLParser.TableRefWithWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_tableRefWithWildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8086
            self.identifier()
            self.state = 8094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1077,self._ctx)
            if la_ == 1:
                self.state = 8087
                self.match(MySQLParser.DOT_SYMBOL)
                self.state = 8088
                self.match(MySQLParser.MULT_OPERATOR)

            elif la_ == 2:
                self.state = 8089
                self.dotIdentifier()
                self.state = 8092
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1076,self._ctx)
                if la_ == 1:
                    self.state = 8090
                    self.match(MySQLParser.DOT_SYMBOL)
                    self.state = 8091
                    self.match(MySQLParser.MULT_OPERATOR)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.QualifiedIdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_tableRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRef" ):
                listener.enterTableRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRef" ):
                listener.exitTableRef(self)




    def tableRef(self):

        localctx = MySQLParser.TableRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_tableRef)
        try:
            self.state = 8098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1078,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8096
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8097
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableRefListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TableRefContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TableRefContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRefList" ):
                listener.enterTableRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRefList" ):
                listener.exitTableRefList(self)




    def tableRefList(self):

        localctx = MySQLParser.TableRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_tableRefList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8100
            self.tableRef()
            self.state = 8105
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1079,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8101
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 8102
                    self.tableRef() 
                self.state = 8107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1079,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasRefListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableRefWithWildcard(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TableRefWithWildcardContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TableRefWithWildcardContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_tableAliasRefList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAliasRefList" ):
                listener.enterTableAliasRefList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAliasRefList" ):
                listener.exitTableAliasRefList(self)




    def tableAliasRefList(self):

        localctx = MySQLParser.TableAliasRefListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_tableAliasRefList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8108
            self.tableRefWithWildcard()
            self.state = 8113
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1080,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8109
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 8110
                    self.tableRefWithWildcard() 
                self.state = 8115
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1080,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_parameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterName" ):
                listener.enterParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterName" ):
                listener.exitParameterName(self)




    def parameterName(self):

        localctx = MySQLParser.ParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_parameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8116
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def labelKeyword(self):
            return self.getTypedRuleContext(MySQLParser.LabelKeywordContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_labelIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelIdentifier" ):
                listener.enterLabelIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelIdentifier" ):
                listener.exitLabelIdentifier(self)




    def labelIdentifier(self):

        localctx = MySQLParser.LabelIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_labelIdentifier)
        try:
            self.state = 8120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1081,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8118
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8119
                self.labelKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.LabelIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_labelRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelRef" ):
                listener.enterLabelRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelRef" ):
                listener.exitLabelRef(self)




    def labelRef(self):

        localctx = MySQLParser.LabelRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_labelRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8122
            self.labelIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def roleKeyword(self):
            return self.getTypedRuleContext(MySQLParser.RoleKeywordContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_roleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleIdentifier" ):
                listener.enterRoleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleIdentifier" ):
                listener.exitRoleIdentifier(self)




    def roleIdentifier(self):

        localctx = MySQLParser.RoleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_roleIdentifier)
        try:
            self.state = 8126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1082,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8124
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8125
                self.roleKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.RoleIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_roleRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleRef" ):
                listener.enterRoleRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleRef" ):
                listener.exitRoleRef(self)




    def roleRef(self):

        localctx = MySQLParser.RoleRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_roleRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8128
            self.roleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PluginRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_pluginRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluginRef" ):
                listener.enterPluginRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluginRef" ):
                listener.exitPluginRef(self)




    def pluginRef(self):

        localctx = MySQLParser.PluginRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_pluginRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8130
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_componentRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponentRef" ):
                listener.enterComponentRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponentRef" ):
                listener.exitComponentRef(self)




    def componentRef(self):

        localctx = MySQLParser.ComponentRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_componentRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8132
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceGroupRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_resourceGroupRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceGroupRef" ):
                listener.enterResourceGroupRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceGroupRef" ):
                listener.exitResourceGroupRef(self)




    def resourceGroupRef(self):

        localctx = MySQLParser.ResourceGroupRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_resourceGroupRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8134
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_windowName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowName" ):
                listener.enterWindowName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowName" ):
                listener.exitWindowName(self)




    def windowName(self):

        localctx = MySQLParser.WindowNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_windowName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8136
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MySQLParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MySQLParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 8141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1083,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8138
                _la = self._input.LA(1)
                if not(_la==795 or _la==797):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8139
                if not isSqlModeActive(AnsiQuotes):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "isSqlModeActive(AnsiQuotes)")
                self.state = 8140
                self.match(MySQLParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def identifierKeyword(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MySQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_identifier)
        try:
            self.state = 8145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1084,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8143
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8144
                self.identifierKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MySQLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8147
            self.identifier()
            self.state = 8152
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1085,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8148
                    self.match(MySQLParser.COMMA_SYMBOL)
                    self.state = 8149
                    self.identifier() 
                self.state = 8154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1085,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MySQLParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8155
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 8156
            self.identifierList()
            self.state = 8157
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MySQLParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_qualifiedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8159
            self.identifier()
            self.state = 8161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1086,self._ctx)
            if la_ == 1:
                self.state = 8160
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MySQLParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MySQLParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MySQLParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 8174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1089,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8163
                self.identifier()
                self.state = 8168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==772:
                    self.state = 8164
                    self.dotIdentifier()
                    self.state = 8166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==772:
                        self.state = 8165
                        self.dotIdentifier()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8170
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 8171
                self.dotIdentifier()
                self.state = 8172
                self.dotIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MySQLParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MySQLParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8176
            self.match(MySQLParser.DOT_SYMBOL)
            self.state = 8177
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ulong_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def DECIMAL_NUMBER(self):
            return self.getToken(MySQLParser.DECIMAL_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MySQLParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ulong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUlong_number" ):
                listener.enterUlong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUlong_number" ):
                listener.exitUlong_number(self)




    def ulong_number(self):

        localctx = MySQLParser.Ulong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_ulong_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8179
            _la = self._input.LA(1)
            if not((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & 28587302322183) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_ulong_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_real_ulong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_ulong_number" ):
                listener.enterReal_ulong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_ulong_number" ):
                listener.exitReal_ulong_number(self)




    def real_ulong_number(self):

        localctx = MySQLParser.Real_ulong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_real_ulong_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8181
            _la = self._input.LA(1)
            if not((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & 2199023255559) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ulonglong_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def DECIMAL_NUMBER(self):
            return self.getToken(MySQLParser.DECIMAL_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MySQLParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_ulonglong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUlonglong_number" ):
                listener.enterUlonglong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUlonglong_number" ):
                listener.exitUlonglong_number(self)




    def ulonglong_number(self):

        localctx = MySQLParser.Ulonglong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_ulonglong_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8183
            _la = self._input.LA(1)
            if not((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & 26388279066631) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_ulonglong_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_real_ulonglong_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_ulonglong_number" ):
                listener.enterReal_ulonglong_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_ulonglong_number" ):
                listener.exitReal_ulonglong_number(self)




    def real_ulonglong_number(self):

        localctx = MySQLParser.Real_ulonglong_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_real_ulonglong_number)
        try:
            self.state = 8190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1090,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8185
                self.match(MySQLParser.INT_NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8186
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 8187
                self.match(MySQLParser.HEX_NUMBER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8188
                self.match(MySQLParser.ULONGLONG_NUMBER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8189
                self.match(MySQLParser.LONG_NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextLiteralContext,0)


        def numLiteral(self):
            return self.getTypedRuleContext(MySQLParser.NumLiteralContext,0)


        def temporalLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TemporalLiteralContext,0)


        def nullLiteral(self):
            return self.getTypedRuleContext(MySQLParser.NullLiteralContext,0)


        def boolLiteral(self):
            return self.getTypedRuleContext(MySQLParser.BoolLiteralContext,0)


        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def BIN_NUMBER(self):
            return self.getToken(MySQLParser.BIN_NUMBER, 0)

        def UNDERSCORE_CHARSET(self):
            return self.getToken(MySQLParser.UNDERSCORE_CHARSET, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = MySQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 8201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1092,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8192
                self.textLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8193
                self.numLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8194
                self.temporalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8195
                self.nullLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8196
                self.boolLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==794:
                    self.state = 8197
                    self.match(MySQLParser.UNDERSCORE_CHARSET)


                self.state = 8200
                _la = self._input.LA(1)
                if not(_la==788 or _la==789):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(MySQLParser.LiteralContext,0)


        def PLUS_OPERATOR(self):
            return self.getToken(MySQLParser.PLUS_OPERATOR, 0)

        def ulong_number(self):
            return self.getTypedRuleContext(MySQLParser.Ulong_numberContext,0)


        def MINUS_OPERATOR(self):
            return self.getToken(MySQLParser.MINUS_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_signedLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedLiteral" ):
                listener.enterSignedLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedLiteral" ):
                listener.exitSignedLiteral(self)




    def signedLiteral(self):

        localctx = MySQLParser.SignedLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_signedLiteral)
        try:
            self.state = 8208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1093,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8203
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8204
                self.match(MySQLParser.PLUS_OPERATOR)
                self.state = 8205
                self.ulong_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8206
                self.match(MySQLParser.MINUS_OPERATOR)
                self.state = 8207
                self.ulong_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def textString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringContext,i)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_stringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringList" ):
                listener.enterStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringList" ):
                listener.exitStringList(self)




    def stringList(self):

        localctx = MySQLParser.StringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_stringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8210
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 8211
            self.textString()
            self.state = 8216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 8212
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 8213
                self.textString()
                self.state = 8218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8219
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_textStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringLiteral" ):
                listener.enterTextStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringLiteral" ):
                listener.exitTextStringLiteral(self)




    def textStringLiteral(self):

        localctx = MySQLParser.TextStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_textStringLiteral)
        try:
            self.state = 8224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1095,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8221
                localctx.value = self.match(MySQLParser.SINGLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8222
                if not not isSqlModeActive(AnsiQuotes):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!isSqlModeActive(AnsiQuotes)")
                self.state = 8223
                localctx.value = self.match(MySQLParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def BIN_NUMBER(self):
            return self.getToken(MySQLParser.BIN_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_textString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextString" ):
                listener.enterTextString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextString" ):
                listener.exitTextString(self)




    def textString(self):

        localctx = MySQLParser.TextStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_textString)
        try:
            self.state = 8229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1096,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8226
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8227
                self.match(MySQLParser.HEX_NUMBER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8228
                self.match(MySQLParser.BIN_NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringHashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def HEX_NUMBER(self):
            return self.getToken(MySQLParser.HEX_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_textStringHash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringHash" ):
                listener.enterTextStringHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringHash" ):
                listener.exitTextStringHash(self)




    def textStringHash(self):

        localctx = MySQLParser.TextStringHashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_textStringHash)
        try:
            self.state = 8234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1097,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8231
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8232
                if not serverVersion >= 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80017")
                self.state = 8233
                self.match(MySQLParser.HEX_NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringLiteralContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,i)


        def NCHAR_TEXT(self):
            return self.getToken(MySQLParser.NCHAR_TEXT, 0)

        def UNDERSCORE_CHARSET(self):
            return self.getToken(MySQLParser.UNDERSCORE_CHARSET, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_textLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLiteral" ):
                listener.enterTextLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLiteral" ):
                listener.exitTextLiteral(self)




    def textLiteral(self):

        localctx = MySQLParser.TextLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_textLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1099,self._ctx)
            if la_ == 1:
                self.state = 8237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1098,self._ctx)
                if la_ == 1:
                    self.state = 8236
                    self.match(MySQLParser.UNDERSCORE_CHARSET)


                self.state = 8239
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.state = 8240
                self.match(MySQLParser.NCHAR_TEXT)
                pass


            self.state = 8246
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8243
                    self.textStringLiteral() 
                self.state = 8248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringNoLinebreakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_textStringNoLinebreak

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringNoLinebreak" ):
                listener.enterTextStringNoLinebreak(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringNoLinebreak" ):
                listener.exitTextStringNoLinebreak(self)




    def textStringNoLinebreak(self):

        localctx = MySQLParser.TextStringNoLinebreakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_textStringNoLinebreak)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8249
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringLiteralListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.TextStringLiteralContext)
            else:
                return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA_SYMBOL)
            else:
                return self.getToken(MySQLParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_textStringLiteralList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringLiteralList" ):
                listener.enterTextStringLiteralList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringLiteralList" ):
                listener.exitTextStringLiteralList(self)




    def textStringLiteralList(self):

        localctx = MySQLParser.TextStringLiteralListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_textStringLiteralList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8251
            self.textStringLiteral()
            self.state = 8256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==773:
                self.state = 8252
                self.match(MySQLParser.COMMA_SYMBOL)
                self.state = 8253
                self.textStringLiteral()
                self.state = 8258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MySQLParser.INT_NUMBER, 0)

        def LONG_NUMBER(self):
            return self.getToken(MySQLParser.LONG_NUMBER, 0)

        def ULONGLONG_NUMBER(self):
            return self.getToken(MySQLParser.ULONGLONG_NUMBER, 0)

        def DECIMAL_NUMBER(self):
            return self.getToken(MySQLParser.DECIMAL_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MySQLParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_numLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumLiteral" ):
                listener.enterNumLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumLiteral" ):
                listener.exitNumLiteral(self)




    def numLiteral(self):

        localctx = MySQLParser.NumLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_numLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8259
            _la = self._input.LA(1)
            if not((((_la - 747)) & ~0x3f) == 0 and ((1 << (_la - 747)) & 26388279066631) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MySQLParser.FALSE_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_boolLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolLiteral" ):
                listener.enterBoolLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolLiteral" ):
                listener.exitBoolLiteral(self)




    def boolLiteral(self):

        localctx = MySQLParser.BoolLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_boolLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8261
            _la = self._input.LA(1)
            if not(_la==183 or _la==596):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_SYMBOL(self):
            return self.getToken(MySQLParser.NULL_SYMBOL, 0)

        def NULL2_SYMBOL(self):
            return self.getToken(MySQLParser.NULL2_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_nullLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)




    def nullLiteral(self):

        localctx = MySQLParser.NullLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_nullLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8263
            _la = self._input.LA(1)
            if not(_la==376 or _la==786):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_temporalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalLiteral" ):
                listener.enterTemporalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalLiteral" ):
                listener.exitTemporalLiteral(self)




    def temporalLiteral(self):

        localctx = MySQLParser.TemporalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_temporalLiteral)
        try:
            self.state = 8271
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8265
                self.match(MySQLParser.DATE_SYMBOL)
                self.state = 8266
                self.match(MySQLParser.SINGLE_QUOTED_TEXT)
                pass
            elif token in [586]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8267
                self.match(MySQLParser.TIME_SYMBOL)
                self.state = 8268
                self.match(MySQLParser.SINGLE_QUOTED_TEXT)
                pass
            elif token in [583]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8269
                self.match(MySQLParser.TIMESTAMP_SYMBOL)
                self.state = 8270
                self.match(MySQLParser.SINGLE_QUOTED_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldLength(self):
            return self.getTypedRuleContext(MySQLParser.FieldLengthContext,0)


        def precision(self):
            return self.getTypedRuleContext(MySQLParser.PrecisionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_floatOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatOptions" ):
                listener.enterFloatOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatOptions" ):
                listener.exitFloatOptions(self)




    def floatOptions(self):

        localctx = MySQLParser.FloatOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_floatOptions)
        try:
            self.state = 8275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8273
                self.fieldLength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8274
                self.precision()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandardFloatOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precision(self):
            return self.getTypedRuleContext(MySQLParser.PrecisionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_standardFloatOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardFloatOptions" ):
                listener.enterStandardFloatOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardFloatOptions" ):
                listener.exitStandardFloatOptions(self)




    def standardFloatOptions(self):

        localctx = MySQLParser.StandardFloatOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_standardFloatOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8277
            self.precision()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def INT_NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.INT_NUMBER)
            else:
                return self.getToken(MySQLParser.INT_NUMBER, i)

        def COMMA_SYMBOL(self):
            return self.getToken(MySQLParser.COMMA_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision" ):
                listener.enterPrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision" ):
                listener.exitPrecision(self)




    def precision(self):

        localctx = MySQLParser.PrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8279
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 8280
            self.match(MySQLParser.INT_NUMBER)
            self.state = 8281
            self.match(MySQLParser.COMMA_SYMBOL)
            self.state = 8282
            self.match(MySQLParser.INT_NUMBER)
            self.state = 8283
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextOrIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_textOrIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextOrIdentifier" ):
                listener.enterTextOrIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextOrIdentifier" ):
                listener.exitTextOrIdentifier(self)




    def textOrIdentifier(self):

        localctx = MySQLParser.TextOrIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_textOrIdentifier)
        try:
            self.state = 8287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8285
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8286
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LValueIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def lValueKeyword(self):
            return self.getTypedRuleContext(MySQLParser.LValueKeywordContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_lValueIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLValueIdentifier" ):
                listener.enterLValueIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLValueIdentifier" ):
                listener.exitLValueIdentifier(self)




    def lValueIdentifier(self):

        localctx = MySQLParser.LValueIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_lValueIdentifier)
        try:
            self.state = 8291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8289
                self.pureIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8290
                self.lValueKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleIdentifierOrTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.RoleIdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(MySQLParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_roleIdentifierOrText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleIdentifierOrText" ):
                listener.enterRoleIdentifierOrText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleIdentifierOrText" ):
                listener.exitRoleIdentifierOrText(self)




    def roleIdentifierOrText(self):

        localctx = MySQLParser.RoleIdentifierOrTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_roleIdentifierOrText)
        try:
            self.state = 8295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8293
                self.roleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8294
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_ulonglong_number(self):
            return self.getTypedRuleContext(MySQLParser.Real_ulonglong_numberContext,0)


        def pureIdentifier(self):
            return self.getTypedRuleContext(MySQLParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_sizeNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeNumber" ):
                listener.enterSizeNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeNumber" ):
                listener.exitSizeNumber(self)




    def sizeNumber(self):

        localctx = MySQLParser.SizeNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_sizeNumber)
        try:
            self.state = 8299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8297
                self.real_ulonglong_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8298
                self.pureIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0)

        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_parentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParentheses" ):
                listener.enterParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParentheses" ):
                listener.exitParentheses(self)




    def parentheses(self):

        localctx = MySQLParser.ParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_parentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8301
            self.match(MySQLParser.OPEN_PAR_SYMBOL)
            self.state = 8302
            self.match(MySQLParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_OPERATOR(self):
            return self.getToken(MySQLParser.EQUAL_OPERATOR, 0)

        def ASSIGN_OPERATOR(self):
            return self.getToken(MySQLParser.ASSIGN_OPERATOR, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqual" ):
                listener.enterEqual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqual" ):
                listener.exitEqual(self)




    def equal(self):

        localctx = MySQLParser.EqualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_equal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8304
            _la = self._input.LA(1)
            if not(_la==750 or _la==751):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERSIST_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_SYMBOL, 0)

        def PERSIST_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0)

        def GLOBAL_SYMBOL(self):
            return self.getToken(MySQLParser.GLOBAL_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(MySQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_optionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionType" ):
                listener.enterOptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionType" ):
                listener.exitOptionType(self)




    def optionType(self):

        localctx = MySQLParser.OptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1192, self.RULE_optionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8306
            _la = self._input.LA(1)
            if not(_la==214 or _la==284 or _la==502 or _la==658 or _la==673):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarIdentTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL_SYMBOL(self):
            return self.getToken(MySQLParser.GLOBAL_SYMBOL, 0)

        def DOT_SYMBOL(self):
            return self.getToken(MySQLParser.DOT_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(MySQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_varIdentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarIdentType" ):
                listener.enterVarIdentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarIdentType" ):
                listener.exitVarIdentType(self)




    def varIdentType(self):

        localctx = MySQLParser.VarIdentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_varIdentType)
        try:
            self.state = 8314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [214]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8308
                self.match(MySQLParser.GLOBAL_SYMBOL)
                self.state = 8309
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [284]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8310
                self.match(MySQLParser.LOCAL_SYMBOL)
                self.state = 8311
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [502]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8312
                self.match(MySQLParser.SESSION_SYMBOL)
                self.state = 8313
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetVarIdentTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERSIST_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_SYMBOL, 0)

        def DOT_SYMBOL(self):
            return self.getToken(MySQLParser.DOT_SYMBOL, 0)

        def PERSIST_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0)

        def GLOBAL_SYMBOL(self):
            return self.getToken(MySQLParser.GLOBAL_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(MySQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_setVarIdentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVarIdentType" ):
                listener.enterSetVarIdentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVarIdentType" ):
                listener.exitSetVarIdentType(self)




    def setVarIdentType(self):

        localctx = MySQLParser.SetVarIdentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1196, self.RULE_setVarIdentType)
        try:
            self.state = 8326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [658]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8316
                self.match(MySQLParser.PERSIST_SYMBOL)
                self.state = 8317
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [673]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8318
                self.match(MySQLParser.PERSIST_ONLY_SYMBOL)
                self.state = 8319
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [214]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8320
                self.match(MySQLParser.GLOBAL_SYMBOL)
                self.state = 8321
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [284]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8322
                self.match(MySQLParser.LOCAL_SYMBOL)
                self.state = 8323
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            elif token in [502]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8324
                self.match(MySQLParser.SESSION_SYMBOL)
                self.state = 8325
                self.match(MySQLParser.DOT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelKeyword(self):
            return self.getTypedRuleContext(MySQLParser.LabelKeywordContext,0)


        def roleOrIdentifierKeyword(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrIdentifierKeywordContext,0)


        def EXECUTE_SYMBOL(self):
            return self.getToken(MySQLParser.EXECUTE_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def RESTART_SYMBOL(self):
            return self.getToken(MySQLParser.RESTART_SYMBOL, 0)

        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous1RolesAndLabels(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0)


        def identifierKeywordsAmbiguous2Labels(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous2LabelsContext,0)


        def identifierKeywordsAmbiguous3Roles(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous3RolesContext,0)


        def identifierKeywordsAmbiguous4SystemVariables(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeyword" ):
                listener.enterIdentifierKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeyword" ):
                listener.exitIdentifierKeyword(self)




    def identifierKeyword(self):

        localctx = MySQLParser.IdentifierKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_identifierKeyword)
        try:
            self.state = 8345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8328
                if not serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80017")
                self.state = 8336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1110,self._ctx)
                if la_ == 1:
                    self.state = 8329
                    self.labelKeyword()
                    pass

                elif la_ == 2:
                    self.state = 8330
                    self.roleOrIdentifierKeyword()
                    pass

                elif la_ == 3:
                    self.state = 8331
                    self.match(MySQLParser.EXECUTE_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 8332
                    if not serverVersion >= 50709:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 50709")
                    self.state = 8333
                    self.match(MySQLParser.SHUTDOWN_SYMBOL)
                    pass

                elif la_ == 5:
                    self.state = 8334
                    if not serverVersion >= 80011:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "serverVersion >= 80011")
                    self.state = 8335
                    self.match(MySQLParser.RESTART_SYMBOL)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1111,self._ctx)
                if la_ == 1:
                    self.state = 8338
                    self.identifierKeywordsUnambiguous()
                    pass

                elif la_ == 2:
                    self.state = 8339
                    self.identifierKeywordsAmbiguous1RolesAndLabels()
                    pass

                elif la_ == 3:
                    self.state = 8340
                    self.identifierKeywordsAmbiguous2Labels()
                    pass

                elif la_ == 4:
                    self.state = 8341
                    self.identifierKeywordsAmbiguous3Roles()
                    pass

                elif la_ == 5:
                    self.state = 8342
                    self.identifierKeywordsAmbiguous4SystemVariables()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE_SYMBOL(self):
            return self.getToken(MySQLParser.EXECUTE_SYMBOL, 0)

        def RESTART_SYMBOL(self):
            return self.getToken(MySQLParser.RESTART_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous1RolesAndLabels" ):
                listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous1RolesAndLabels" ):
                listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels(self)




    def identifierKeywordsAmbiguous1RolesAndLabels(self):

        localctx = MySQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1200, self.RULE_identifierKeywordsAmbiguous1RolesAndLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8347
            _la = self._input.LA(1)
            if not(_la==173 or _la==510 or _la==714):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYMBOL(self):
            return self.getToken(MySQLParser.ASCII_SYMBOL, 0)

        def BEGIN_SYMBOL(self):
            return self.getToken(MySQLParser.BEGIN_SYMBOL, 0)

        def BYTE_SYMBOL(self):
            return self.getToken(MySQLParser.BYTE_SYMBOL, 0)

        def CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.CACHE_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(MySQLParser.CHARSET_SYMBOL, 0)

        def CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.CHECKSUM_SYMBOL, 0)

        def CLONE_SYMBOL(self):
            return self.getToken(MySQLParser.CLONE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def COMMIT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMIT_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTAINS_SYMBOL, 0)

        def DEALLOCATE_SYMBOL(self):
            return self.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def FLUSH_SYMBOL(self):
            return self.getToken(MySQLParser.FLUSH_SYMBOL, 0)

        def FOLLOWS_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWS_SYMBOL, 0)

        def HANDLER_SYMBOL(self):
            return self.getToken(MySQLParser.HANDLER_SYMBOL, 0)

        def HELP_SYMBOL(self):
            return self.getToken(MySQLParser.HELP_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def INSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.INSTALL_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(MySQLParser.LANGUAGE_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def PRECEDES_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDES_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(MySQLParser.PREPARE_SYMBOL, 0)

        def REPAIR_SYMBOL(self):
            return self.getToken(MySQLParser.REPAIR_SYMBOL, 0)

        def RESET_SYMBOL(self):
            return self.getToken(MySQLParser.RESET_SYMBOL, 0)

        def ROLLBACK_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLBACK_SYMBOL, 0)

        def SAVEPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0)

        def SIGNED_SYMBOL(self):
            return self.getToken(MySQLParser.SIGNED_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def STOP_SYMBOL(self):
            return self.getToken(MySQLParser.STOP_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)

        def UNICODE_SYMBOL(self):
            return self.getToken(MySQLParser.UNICODE_SYMBOL, 0)

        def UNINSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.UNINSTALL_SYMBOL, 0)

        def XA_SYMBOL(self):
            return self.getToken(MySQLParser.XA_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeywordsAmbiguous2Labels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous2Labels" ):
                listener.enterIdentifierKeywordsAmbiguous2Labels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous2Labels" ):
                listener.exitIdentifierKeywordsAmbiguous2Labels(self)




    def identifierKeywordsAmbiguous2Labels(self):

        localctx = MySQLParser.IdentifierKeywordsAmbiguous2LabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_identifierKeywordsAmbiguous2Labels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8349
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 2594284492135333888) != 0 or (((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 281474976743429) != 0 or (((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 1688849860268033) != 0 or (((_la - 219)) & ~0x3f) == 0 and ((1 << (_la - 219)) & 281475043852297) != 0 or (((_la - 373)) & ~0x3f) == 0 and ((1 << (_la - 373)) & 21990232555521) != 0 or (((_la - 455)) & ~0x3f) == 0 and ((1 << (_la - 455)) & 720575957592711169) != 0 or (((_la - 543)) & ~0x3f) == 0 and ((1 << (_la - 543)) & -9205357638345293311) != 0 or _la==607 or _la==651 or _la==677):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleOrLabelKeyword(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrLabelKeywordContext,0)


        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def PROCESS_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESS_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(MySQLParser.PROXY_SYMBOL, 0)

        def RELOAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELOAD_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATION_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(MySQLParser.SUPER_SYMBOL, 0)

        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous3Roles(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous3RolesContext,0)


        def identifierKeywordsAmbiguous4SystemVariables(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_labelKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelKeyword" ):
                listener.enterLabelKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelKeyword" ):
                listener.exitLabelKeyword(self)




    def labelKeyword(self):

        localctx = MySQLParser.LabelKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1204, self.RULE_labelKeyword)
        try:
            self.state = 8369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8351
                if not serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80017")
                self.state = 8362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1113,self._ctx)
                if la_ == 1:
                    self.state = 8352
                    self.roleOrLabelKeyword()
                    pass

                elif la_ == 2:
                    self.state = 8353
                    self.match(MySQLParser.EVENT_SYMBOL)
                    pass

                elif la_ == 3:
                    self.state = 8354
                    self.match(MySQLParser.FILE_SYMBOL)
                    pass

                elif la_ == 4:
                    self.state = 8355
                    self.match(MySQLParser.NONE_SYMBOL)
                    pass

                elif la_ == 5:
                    self.state = 8356
                    self.match(MySQLParser.PROCESS_SYMBOL)
                    pass

                elif la_ == 6:
                    self.state = 8357
                    self.match(MySQLParser.PROXY_SYMBOL)
                    pass

                elif la_ == 7:
                    self.state = 8358
                    self.match(MySQLParser.RELOAD_SYMBOL)
                    pass

                elif la_ == 8:
                    self.state = 8359
                    self.match(MySQLParser.REPLICATION_SYMBOL)
                    pass

                elif la_ == 9:
                    self.state = 8360
                    self.match(MySQLParser.RESOURCE_SYMBOL)
                    pass

                elif la_ == 10:
                    self.state = 8361
                    self.match(MySQLParser.SUPER_SYMBOL)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1114,self._ctx)
                if la_ == 1:
                    self.state = 8364
                    self.identifierKeywordsUnambiguous()
                    pass

                elif la_ == 2:
                    self.state = 8365
                    self.identifierKeywordsAmbiguous3Roles()
                    pass

                elif la_ == 3:
                    self.state = 8366
                    self.identifierKeywordsAmbiguous4SystemVariables()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT_SYMBOL(self):
            return self.getToken(MySQLParser.EVENT_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_SYMBOL, 0)

        def NONE_SYMBOL(self):
            return self.getToken(MySQLParser.NONE_SYMBOL, 0)

        def PROCESS_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESS_SYMBOL, 0)

        def PROXY_SYMBOL(self):
            return self.getToken(MySQLParser.PROXY_SYMBOL, 0)

        def RELOAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELOAD_SYMBOL, 0)

        def REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATION_SYMBOL, 0)

        def RESOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.RESOURCE_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(MySQLParser.SUPER_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeywordsAmbiguous3Roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous3Roles" ):
                listener.enterIdentifierKeywordsAmbiguous3Roles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous3Roles" ):
                listener.exitIdentifierKeywordsAmbiguous3Roles(self)




    def identifierKeywordsAmbiguous3Roles(self):

        localctx = MySQLParser.IdentifierKeywordsAmbiguous3RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_identifierKeywordsAmbiguous3Roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8371
            _la = self._input.LA(1)
            if not(_la==170 or _la==188 or (((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & 306244774661193729) != 0 or _la==451 or _la==459 or _la==565 or _la==709):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsUnambiguousContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION_SYMBOL(self):
            return self.getToken(MySQLParser.ACTION_SYMBOL, 0)

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ACCOUNT_SYMBOL, 0)

        def ACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.ACTIVE_SYMBOL, 0)

        def ADDDATE_SYMBOL(self):
            return self.getToken(MySQLParser.ADDDATE_SYMBOL, 0)

        def ADMIN_SYMBOL(self):
            return self.getToken(MySQLParser.ADMIN_SYMBOL, 0)

        def AFTER_SYMBOL(self):
            return self.getToken(MySQLParser.AFTER_SYMBOL, 0)

        def AGAINST_SYMBOL(self):
            return self.getToken(MySQLParser.AGAINST_SYMBOL, 0)

        def AGGREGATE_SYMBOL(self):
            return self.getToken(MySQLParser.AGGREGATE_SYMBOL, 0)

        def ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)

        def ALWAYS_SYMBOL(self):
            return self.getToken(MySQLParser.ALWAYS_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MySQLParser.ANY_SYMBOL, 0)

        def AT_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SYMBOL, 0)

        def AUTOEXTEND_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def AVG_ROW_LENGTH_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0)

        def AVG_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_SYMBOL, 0)

        def BACKUP_SYMBOL(self):
            return self.getToken(MySQLParser.BACKUP_SYMBOL, 0)

        def BINLOG_SYMBOL(self):
            return self.getToken(MySQLParser.BINLOG_SYMBOL, 0)

        def BIT_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_SYMBOL, 0)

        def BLOCK_SYMBOL(self):
            return self.getToken(MySQLParser.BLOCK_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(MySQLParser.BOOLEAN_SYMBOL, 0)

        def BOOL_SYMBOL(self):
            return self.getToken(MySQLParser.BOOL_SYMBOL, 0)

        def BTREE_SYMBOL(self):
            return self.getToken(MySQLParser.BTREE_SYMBOL, 0)

        def BUCKETS_SYMBOL(self):
            return self.getToken(MySQLParser.BUCKETS_SYMBOL, 0)

        def CASCADED_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADED_SYMBOL, 0)

        def CATALOG_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(MySQLParser.CHAIN_SYMBOL, 0)

        def CHANGED_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGED_SYMBOL, 0)

        def CHANNEL_SYMBOL(self):
            return self.getToken(MySQLParser.CHANNEL_SYMBOL, 0)

        def CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.CIPHER_SYMBOL, 0)

        def CLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MySQLParser.CLIENT_SYMBOL, 0)

        def CLOSE_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_SYMBOL, 0)

        def COALESCE_SYMBOL(self):
            return self.getToken(MySQLParser.COALESCE_SYMBOL, 0)

        def CODE_SYMBOL(self):
            return self.getToken(MySQLParser.CODE_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATION_SYMBOL, 0)

        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)

        def COLUMN_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0)

        def COLUMN_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0)

        def COMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.COMMITTED_SYMBOL, 0)

        def COMPACT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPACT_SYMBOL, 0)

        def COMPLETION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPLETION_SYMBOL, 0)

        def COMPONENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPONENT_SYMBOL, 0)

        def COMPRESSED_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSED_SYMBOL, 0)

        def COMPRESSION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSION_SYMBOL, 0)

        def CONCURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONCURRENT_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(MySQLParser.CONNECTION_SYMBOL, 0)

        def CONSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONSISTENT_SYMBOL, 0)

        def CONSTRAINT_CATALOG_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0)

        def CONSTRAINT_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0)

        def CONSTRAINT_SCHEMA_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0)

        def CONTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.CONTEXT_SYMBOL, 0)

        def CPU_SYMBOL(self):
            return self.getToken(MySQLParser.CPU_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def CURSOR_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0)

        def DATAFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DATAFILE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(MySQLParser.DATETIME_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SYMBOL, 0)

        def DEFAULT_AUTH_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINER_SYMBOL, 0)

        def DEFINITION_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINITION_SYMBOL, 0)

        def DELAY_KEY_WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0)

        def DESCRIPTION_SYMBOL(self):
            return self.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0)

        def DIAGNOSTICS_SYMBOL(self):
            return self.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def DISCARD_SYMBOL(self):
            return self.getToken(MySQLParser.DISCARD_SYMBOL, 0)

        def DISK_SYMBOL(self):
            return self.getToken(MySQLParser.DISK_SYMBOL, 0)

        def DUMPFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DUMPFILE_SYMBOL, 0)

        def DUPLICATE_SYMBOL(self):
            return self.getToken(MySQLParser.DUPLICATE_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(MySQLParser.DYNAMIC_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)

        def ENDS_SYMBOL(self):
            return self.getToken(MySQLParser.ENDS_SYMBOL, 0)

        def ENFORCED_SYMBOL(self):
            return self.getToken(MySQLParser.ENFORCED_SYMBOL, 0)

        def ENGINES_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINES_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def ENUM_SYMBOL(self):
            return self.getToken(MySQLParser.ENUM_SYMBOL, 0)

        def ERRORS_SYMBOL(self):
            return self.getToken(MySQLParser.ERRORS_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(MySQLParser.ERROR_SYMBOL, 0)

        def ESCAPE_SYMBOL(self):
            return self.getToken(MySQLParser.ESCAPE_SYMBOL, 0)

        def EVENTS_SYMBOL(self):
            return self.getToken(MySQLParser.EVENTS_SYMBOL, 0)

        def EVERY_SYMBOL(self):
            return self.getToken(MySQLParser.EVERY_SYMBOL, 0)

        def EXCHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCHANGE_SYMBOL, 0)

        def EXCLUDE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCLUDE_SYMBOL, 0)

        def EXPANSION_SYMBOL(self):
            return self.getToken(MySQLParser.EXPANSION_SYMBOL, 0)

        def EXPIRE_SYMBOL(self):
            return self.getToken(MySQLParser.EXPIRE_SYMBOL, 0)

        def EXPORT_SYMBOL(self):
            return self.getToken(MySQLParser.EXPORT_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def EXTENT_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0)

        def FAST_SYMBOL(self):
            return self.getToken(MySQLParser.FAST_SYMBOL, 0)

        def FAULTS_SYMBOL(self):
            return self.getToken(MySQLParser.FAULTS_SYMBOL, 0)

        def FILE_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MySQLParser.FILTER_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(MySQLParser.FIXED_SYMBOL, 0)

        def FOLLOWING_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWING_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.FORMAT_SYMBOL, 0)

        def FOUND_SYMBOL(self):
            return self.getToken(MySQLParser.FOUND_SYMBOL, 0)

        def FULL_SYMBOL(self):
            return self.getToken(MySQLParser.FULL_SYMBOL, 0)

        def GENERAL_SYMBOL(self):
            return self.getToken(MySQLParser.GENERAL_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def GEOMETRY_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRY_SYMBOL, 0)

        def GET_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0)

        def GET_MASTER_PUBLIC_KEY_SYMBOL(self):
            return self.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MySQLParser.GRANTS_SYMBOL, 0)

        def GROUP_REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(MySQLParser.HASH_SYMBOL, 0)

        def HISTOGRAM_SYMBOL(self):
            return self.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0)

        def HISTORY_SYMBOL(self):
            return self.getToken(MySQLParser.HISTORY_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(MySQLParser.HOSTS_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MySQLParser.HOST_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def IGNORE_SERVER_IDS_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0)

        def INACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.INACTIVE_SYMBOL, 0)

        def INDEXES_SYMBOL(self):
            return self.getToken(MySQLParser.INDEXES_SYMBOL, 0)

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)

        def INSERT_METHOD_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0)

        def INSTANCE_SYMBOL(self):
            return self.getToken(MySQLParser.INSTANCE_SYMBOL, 0)

        def INVISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.INVISIBLE_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(MySQLParser.INVOKER_SYMBOL, 0)

        def IO_SYMBOL(self):
            return self.getToken(MySQLParser.IO_SYMBOL, 0)

        def IPC_SYMBOL(self):
            return self.getToken(MySQLParser.IPC_SYMBOL, 0)

        def ISOLATION_SYMBOL(self):
            return self.getToken(MySQLParser.ISOLATION_SYMBOL, 0)

        def ISSUER_SYMBOL(self):
            return self.getToken(MySQLParser.ISSUER_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_SYMBOL, 0)

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(MySQLParser.LEAVES_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySQLParser.LESS_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.LEVEL_SYMBOL, 0)

        def LINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.LINESTRING_SYMBOL, 0)

        def LIST_SYMBOL(self):
            return self.getToken(MySQLParser.LIST_SYMBOL, 0)

        def LOCKED_SYMBOL(self):
            return self.getToken(MySQLParser.LOCKED_SYMBOL, 0)

        def LOCKS_SYMBOL(self):
            return self.getToken(MySQLParser.LOCKS_SYMBOL, 0)

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(MySQLParser.LOGS_SYMBOL, 0)

        def MASTER_AUTO_POSITION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0)

        def MASTER_COMPRESSION_ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0)

        def MASTER_CONNECT_RETRY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0)

        def MASTER_DELAY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0)

        def MASTER_HEARTBEAT_PERIOD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0)

        def MASTER_HOST_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0)

        def NETWORK_NAMESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0)

        def MASTER_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0)

        def MASTER_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0)

        def MASTER_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0)

        def MASTER_PORT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0)

        def MASTER_PUBLIC_KEY_PATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0)

        def MASTER_RETRY_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0)

        def MASTER_SERVER_ID_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0)

        def MASTER_SSL_CAPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0)

        def MASTER_SSL_CA_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0)

        def MASTER_SSL_CERT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0)

        def MASTER_SSL_CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0)

        def MASTER_SSL_CRLPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0)

        def MASTER_SSL_CRL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0)

        def MASTER_SSL_KEY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0)

        def MASTER_SSL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def MASTER_TLS_CIPHERSUITES_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0)

        def MASTER_TLS_VERSION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0)

        def MASTER_USER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_USER_SYMBOL, 0)

        def MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0)

        def MAX_QUERIES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0)

        def MAX_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0)

        def MAX_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0)

        def MAX_UPDATES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0)

        def MAX_USER_CONNECTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0)

        def MEDIUM_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUM_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(MySQLParser.MEMORY_SYMBOL, 0)

        def MERGE_SYMBOL(self):
            return self.getToken(MySQLParser.MERGE_SYMBOL, 0)

        def MESSAGE_TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0)

        def MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MICROSECOND_SYMBOL, 0)

        def MIGRATE_SYMBOL(self):
            return self.getToken(MySQLParser.MIGRATE_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(MySQLParser.MODE_SYMBOL, 0)

        def MODIFY_SYMBOL(self):
            return self.getToken(MySQLParser.MODIFY_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(MySQLParser.MONTH_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0)

        def MUTEX_SYMBOL(self):
            return self.getToken(MySQLParser.MUTEX_SYMBOL, 0)

        def MYSQL_ERRNO_SYMBOL(self):
            return self.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0)

        def NAMES_SYMBOL(self):
            return self.getToken(MySQLParser.NAMES_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MySQLParser.NAME_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATIONAL_SYMBOL, 0)

        def NCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NCHAR_SYMBOL, 0)

        def NDBCLUSTER_SYMBOL(self):
            return self.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0)

        def NESTED_SYMBOL(self):
            return self.getToken(MySQLParser.NESTED_SYMBOL, 0)

        def NEVER_SYMBOL(self):
            return self.getToken(MySQLParser.NEVER_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MySQLParser.NEW_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(MySQLParser.NEXT_SYMBOL, 0)

        def NODEGROUP_SYMBOL(self):
            return self.getToken(MySQLParser.NODEGROUP_SYMBOL, 0)

        def NOWAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NOWAIT_SYMBOL, 0)

        def NO_WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NO_WAIT_SYMBOL, 0)

        def NULLS_SYMBOL(self):
            return self.getToken(MySQLParser.NULLS_SYMBOL, 0)

        def NUMBER_SYMBOL(self):
            return self.getToken(MySQLParser.NUMBER_SYMBOL, 0)

        def NVARCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NVARCHAR_SYMBOL, 0)

        def OFFSET_SYMBOL(self):
            return self.getToken(MySQLParser.OFFSET_SYMBOL, 0)

        def OJ_SYMBOL(self):
            return self.getToken(MySQLParser.OJ_SYMBOL, 0)

        def OLD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_SYMBOL, 0)

        def ONE_SYMBOL(self):
            return self.getToken(MySQLParser.ONE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.ONLY_SYMBOL, 0)

        def OPEN_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_SYMBOL, 0)

        def OPTIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONAL_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONS_SYMBOL, 0)

        def ORDINALITY_SYMBOL(self):
            return self.getToken(MySQLParser.ORDINALITY_SYMBOL, 0)

        def ORGANIZATION_SYMBOL(self):
            return self.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0)

        def OTHERS_SYMBOL(self):
            return self.getToken(MySQLParser.OTHERS_SYMBOL, 0)

        def OWNER_SYMBOL(self):
            return self.getToken(MySQLParser.OWNER_SYMBOL, 0)

        def PACK_KEYS_SYMBOL(self):
            return self.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MySQLParser.PAGE_SYMBOL, 0)

        def PARSER_SYMBOL(self):
            return self.getToken(MySQLParser.PARSER_SYMBOL, 0)

        def PARTIAL_SYMBOL(self):
            return self.getToken(MySQLParser.PARTIAL_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONING_SYMBOL, 0)

        def PARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONS_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MySQLParser.PATH_SYMBOL, 0)

        def PHASE_SYMBOL(self):
            return self.getToken(MySQLParser.PHASE_SYMBOL, 0)

        def PLUGINS_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGINS_SYMBOL, 0)

        def PLUGIN_DIR_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0)

        def PLUGIN_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(MySQLParser.POINT_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.POLYGON_SYMBOL, 0)

        def PORT_SYMBOL(self):
            return self.getToken(MySQLParser.PORT_SYMBOL, 0)

        def PRECEDING_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDING_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(MySQLParser.PRESERVE_SYMBOL, 0)

        def PREV_SYMBOL(self):
            return self.getToken(MySQLParser.PREV_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def PRIVILEGE_CHECKS_USER_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0)

        def PROCESSLIST_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0)

        def PROFILES_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILES_SYMBOL, 0)

        def PROFILE_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILE_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(MySQLParser.QUARTER_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def READ_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.READ_ONLY_SYMBOL, 0)

        def REBUILD_SYMBOL(self):
            return self.getToken(MySQLParser.REBUILD_SYMBOL, 0)

        def RECOVER_SYMBOL(self):
            return self.getToken(MySQLParser.RECOVER_SYMBOL, 0)

        def REDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0)

        def REDUNDANT_SYMBOL(self):
            return self.getToken(MySQLParser.REDUNDANT_SYMBOL, 0)

        def REFERENCE_SYMBOL(self):
            return self.getToken(MySQLParser.REFERENCE_SYMBOL, 0)

        def RELAY_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_SYMBOL, 0)

        def RELAYLOG_SYMBOL(self):
            return self.getToken(MySQLParser.RELAYLOG_SYMBOL, 0)

        def RELAY_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0)

        def RELAY_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0)

        def RELAY_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0)

        def REMOVE_SYMBOL(self):
            return self.getToken(MySQLParser.REMOVE_SYMBOL, 0)

        def REORGANIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REORGANIZE_SYMBOL, 0)

        def REPEATABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPEATABLE_SYMBOL, 0)

        def REPLICATE_DO_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0)

        def REPLICATE_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0)

        def REPLICATE_IGNORE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0)

        def REPLICATE_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_REWRITE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0)

        def REPLICATE_WILD_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0)

        def USER_RESOURCES_SYMBOL(self):
            return self.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0)

        def RESPECT_SYMBOL(self):
            return self.getToken(MySQLParser.RESPECT_SYMBOL, 0)

        def RESTORE_SYMBOL(self):
            return self.getToken(MySQLParser.RESTORE_SYMBOL, 0)

        def RESUME_SYMBOL(self):
            return self.getToken(MySQLParser.RESUME_SYMBOL, 0)

        def RETAIN_SYMBOL(self):
            return self.getToken(MySQLParser.RETAIN_SYMBOL, 0)

        def RETURNED_SQLSTATE_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0)

        def RETURNS_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNS_SYMBOL, 0)

        def REUSE_SYMBOL(self):
            return self.getToken(MySQLParser.REUSE_SYMBOL, 0)

        def REVERSE_SYMBOL(self):
            return self.getToken(MySQLParser.REVERSE_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def ROLLUP_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLUP_SYMBOL, 0)

        def ROTATE_SYMBOL(self):
            return self.getToken(MySQLParser.ROTATE_SYMBOL, 0)

        def ROUTINE_SYMBOL(self):
            return self.getToken(MySQLParser.ROUTINE_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0)

        def ROW_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0)

        def RTREE_SYMBOL(self):
            return self.getToken(MySQLParser.RTREE_SYMBOL, 0)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEDULE_SYMBOL, 0)

        def SCHEMA_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0)

        def SECONDARY_ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0)

        def SECONDARY_LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0)

        def SECONDARY_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_SYMBOL, 0)

        def SECONDARY_UNLOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.SECOND_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(MySQLParser.SECURITY_SYMBOL, 0)

        def SERIALIZABLE_SYMBOL(self):
            return self.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SERIAL_SYMBOL, 0)

        def SERVER_SYMBOL(self):
            return self.getToken(MySQLParser.SERVER_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(MySQLParser.SHARE_SYMBOL, 0)

        def SIMPLE_SYMBOL(self):
            return self.getToken(MySQLParser.SIMPLE_SYMBOL, 0)

        def SKIP_SYMBOL(self):
            return self.getToken(MySQLParser.SKIP_SYMBOL, 0)

        def SLOW_SYMBOL(self):
            return self.getToken(MySQLParser.SLOW_SYMBOL, 0)

        def SNAPSHOT_SYMBOL(self):
            return self.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0)

        def SOCKET_SYMBOL(self):
            return self.getToken(MySQLParser.SOCKET_SYMBOL, 0)

        def SONAME_SYMBOL(self):
            return self.getToken(MySQLParser.SONAME_SYMBOL, 0)

        def SOUNDS_SYMBOL(self):
            return self.getToken(MySQLParser.SOUNDS_SYMBOL, 0)

        def SOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.SOURCE_SYMBOL, 0)

        def SQL_AFTER_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0)

        def SQL_AFTER_MTS_GAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0)

        def SQL_BEFORE_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0)

        def SQL_BUFFER_RESULT_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0)

        def SQL_NO_CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0)

        def SQL_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0)

        def SRID_SYMBOL(self):
            return self.getToken(MySQLParser.SRID_SYMBOL, 0)

        def STACKED_SYMBOL(self):
            return self.getToken(MySQLParser.STACKED_SYMBOL, 0)

        def STARTS_SYMBOL(self):
            return self.getToken(MySQLParser.STARTS_SYMBOL, 0)

        def STATS_AUTO_RECALC_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0)

        def STATS_PERSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0)

        def STATS_SAMPLE_PAGES_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MySQLParser.STATUS_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def STRING_SYMBOL(self):
            return self.getToken(MySQLParser.STRING_SYMBOL, 0)

        def SUBCLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0)

        def SUBDATE_SYMBOL(self):
            return self.getToken(MySQLParser.SUBDATE_SYMBOL, 0)

        def SUBJECT_SYMBOL(self):
            return self.getToken(MySQLParser.SUBJECT_SYMBOL, 0)

        def SUBPARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0)

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0)

        def SUSPEND_SYMBOL(self):
            return self.getToken(MySQLParser.SUSPEND_SYMBOL, 0)

        def SWAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SWAPS_SYMBOL, 0)

        def SWITCHES_SYMBOL(self):
            return self.getToken(MySQLParser.SWITCHES_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def TABLE_CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0)

        def TABLE_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPORARY_SYMBOL, 0)

        def TEMPTABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.TEXT_SYMBOL, 0)

        def THAN_SYMBOL(self):
            return self.getToken(MySQLParser.THAN_SYMBOL, 0)

        def THREAD_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0)

        def TIES_SYMBOL(self):
            return self.getToken(MySQLParser.TIES_SYMBOL, 0)

        def TIMESTAMP_ADD_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0)

        def TIMESTAMP_DIFF_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def TRANSACTION_SYMBOL(self):
            return self.getToken(MySQLParser.TRANSACTION_SYMBOL, 0)

        def TRIGGERS_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGERS_SYMBOL, 0)

        def TYPES_SYMBOL(self):
            return self.getToken(MySQLParser.TYPES_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MySQLParser.TYPE_SYMBOL, 0)

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0)

        def UNCOMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0)

        def UNDEFINED_SYMBOL(self):
            return self.getToken(MySQLParser.UNDEFINED_SYMBOL, 0)

        def UNDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDOFILE_SYMBOL, 0)

        def UNDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0)

        def UNKNOWN_SYMBOL(self):
            return self.getToken(MySQLParser.UNKNOWN_SYMBOL, 0)

        def UNTIL_SYMBOL(self):
            return self.getToken(MySQLParser.UNTIL_SYMBOL, 0)

        def UPGRADE_SYMBOL(self):
            return self.getToken(MySQLParser.UPGRADE_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def USE_FRM_SYMBOL(self):
            return self.getToken(MySQLParser.USE_FRM_SYMBOL, 0)

        def VALIDATION_SYMBOL(self):
            return self.getToken(MySQLParser.VALIDATION_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.VALUE_SYMBOL, 0)

        def VARIABLES_SYMBOL(self):
            return self.getToken(MySQLParser.VARIABLES_SYMBOL, 0)

        def VCPU_SYMBOL(self):
            return self.getToken(MySQLParser.VCPU_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def VISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.VISIBLE_SYMBOL, 0)

        def WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.WAIT_SYMBOL, 0)

        def WARNINGS_SYMBOL(self):
            return self.getToken(MySQLParser.WARNINGS_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(MySQLParser.WEEK_SYMBOL, 0)

        def WEIGHT_STRING_SYMBOL(self):
            return self.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0)

        def WITHOUT_SYMBOL(self):
            return self.getToken(MySQLParser.WITHOUT_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(MySQLParser.WORK_SYMBOL, 0)

        def WRAPPER_SYMBOL(self):
            return self.getToken(MySQLParser.WRAPPER_SYMBOL, 0)

        def X509_SYMBOL(self):
            return self.getToken(MySQLParser.X509_SYMBOL, 0)

        def XID_SYMBOL(self):
            return self.getToken(MySQLParser.XID_SYMBOL, 0)

        def XML_SYMBOL(self):
            return self.getToken(MySQLParser.XML_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_SYMBOL, 0)

        def ARRAY_SYMBOL(self):
            return self.getToken(MySQLParser.ARRAY_SYMBOL, 0)

        def FAILED_LOGIN_ATTEMPTS_SYMBOL(self):
            return self.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0)

        def MEMBER_SYMBOL(self):
            return self.getToken(MySQLParser.MEMBER_SYMBOL, 0)

        def OFF_SYMBOL(self):
            return self.getToken(MySQLParser.OFF_SYMBOL, 0)

        def PASSWORD_LOCK_TIME_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0)

        def RANDOM_SYMBOL(self):
            return self.getToken(MySQLParser.RANDOM_SYMBOL, 0)

        def REQUIRE_ROW_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0)

        def REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(self):
            return self.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0)

        def STREAM_SYMBOL(self):
            return self.getToken(MySQLParser.STREAM_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeywordsUnambiguous

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsUnambiguous" ):
                listener.enterIdentifierKeywordsUnambiguous(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsUnambiguous" ):
                listener.exitIdentifierKeywordsUnambiguous(self)




    def identifierKeywordsUnambiguous(self):

        localctx = MySQLParser.IdentifierKeywordsUnambiguousContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_identifierKeywordsUnambiguous)
        self._la = 0 # Token type
        try:
            self.state = 8376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8373
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & -8979026322011384852) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 293728076221109983) != 0 or (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -1036516489208775157) != 0 or (((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -6430563964047286645) != 0 or (((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1868853107068508261) != 0 or (((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & 173760286417661087) != 0 or (((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & -4228991016542077057) != 0 or (((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & 2209089036834331935) != 0 or (((_la - 528)) & ~0x3f) == 0 and ((1 << (_la - 528)) & 556082145862309015) != 0 or (((_la - 592)) & ~0x3f) == 0 and ((1 << (_la - 592)) & 3874169395838459587) != 0 or (((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & -315315032541044359) != 0 or (((_la - 720)) & ~0x3f) == 0 and ((1 << (_la - 720)) & 497599) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8374
                if not serverVersion >= 80019:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80019")
                self.state = 8375
                _la = self._input.LA(1)
                if not(_la==583 or _la==586 or (((_la - 731)) & ~0x3f) == 0 and ((1 << (_la - 731)) & 16381) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleOrLabelKeyword(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrLabelKeywordContext,0)


        def roleOrIdentifierKeyword(self):
            return self.getTypedRuleContext(MySQLParser.RoleOrIdentifierKeywordContext,0)


        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous2Labels(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous2LabelsContext,0)


        def identifierKeywordsAmbiguous4SystemVariables(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_roleKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleKeyword" ):
                listener.enterRoleKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleKeyword" ):
                listener.exitRoleKeyword(self)




    def roleKeyword(self):

        localctx = MySQLParser.RoleKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_roleKeyword)
        try:
            self.state = 8388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8378
                if not serverVersion < 80017:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80017")
                self.state = 8381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1117,self._ctx)
                if la_ == 1:
                    self.state = 8379
                    self.roleOrLabelKeyword()
                    pass

                elif la_ == 2:
                    self.state = 8380
                    self.roleOrIdentifierKeyword()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8386
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1118,self._ctx)
                if la_ == 1:
                    self.state = 8383
                    self.identifierKeywordsUnambiguous()
                    pass

                elif la_ == 2:
                    self.state = 8384
                    self.identifierKeywordsAmbiguous2Labels()
                    pass

                elif la_ == 3:
                    self.state = 8385
                    self.identifierKeywordsAmbiguous4SystemVariables()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LValueKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierKeywordsUnambiguous(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsUnambiguousContext,0)


        def identifierKeywordsAmbiguous1RolesAndLabels(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0)


        def identifierKeywordsAmbiguous2Labels(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous2LabelsContext,0)


        def identifierKeywordsAmbiguous3Roles(self):
            return self.getTypedRuleContext(MySQLParser.IdentifierKeywordsAmbiguous3RolesContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_lValueKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLValueKeyword" ):
                listener.enterLValueKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLValueKeyword" ):
                listener.exitLValueKeyword(self)




    def lValueKeyword(self):

        localctx = MySQLParser.LValueKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_lValueKeyword)
        try:
            self.state = 8394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8390
                self.identifierKeywordsUnambiguous()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8391
                self.identifierKeywordsAmbiguous1RolesAndLabels()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8392
                self.identifierKeywordsAmbiguous2Labels()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8393
                self.identifierKeywordsAmbiguous3Roles()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL_SYMBOL(self):
            return self.getToken(MySQLParser.GLOBAL_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def PERSIST_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_SYMBOL, 0)

        def PERSIST_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(MySQLParser.SESSION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierKeywordsAmbiguous4SystemVariables" ):
                listener.enterIdentifierKeywordsAmbiguous4SystemVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierKeywordsAmbiguous4SystemVariables" ):
                listener.exitIdentifierKeywordsAmbiguous4SystemVariables(self)




    def identifierKeywordsAmbiguous4SystemVariables(self):

        localctx = MySQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_identifierKeywordsAmbiguous4SystemVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8396
            _la = self._input.LA(1)
            if not(_la==214 or _la==284 or _la==502 or _la==658 or _la==673):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrIdentifierKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ACCOUNT_SYMBOL, 0)

        def ASCII_SYMBOL(self):
            return self.getToken(MySQLParser.ASCII_SYMBOL, 0)

        def ALWAYS_SYMBOL(self):
            return self.getToken(MySQLParser.ALWAYS_SYMBOL, 0)

        def BACKUP_SYMBOL(self):
            return self.getToken(MySQLParser.BACKUP_SYMBOL, 0)

        def BEGIN_SYMBOL(self):
            return self.getToken(MySQLParser.BEGIN_SYMBOL, 0)

        def BYTE_SYMBOL(self):
            return self.getToken(MySQLParser.BYTE_SYMBOL, 0)

        def CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.CACHE_SYMBOL, 0)

        def CHARSET_SYMBOL(self):
            return self.getToken(MySQLParser.CHARSET_SYMBOL, 0)

        def CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.CHECKSUM_SYMBOL, 0)

        def CLONE_SYMBOL(self):
            return self.getToken(MySQLParser.CLONE_SYMBOL, 0)

        def CLOSE_SYMBOL(self):
            return self.getToken(MySQLParser.CLOSE_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMENT_SYMBOL, 0)

        def COMMIT_SYMBOL(self):
            return self.getToken(MySQLParser.COMMIT_SYMBOL, 0)

        def CONTAINS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTAINS_SYMBOL, 0)

        def DEALLOCATE_SYMBOL(self):
            return self.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(MySQLParser.DO_SYMBOL, 0)

        def END_SYMBOL(self):
            return self.getToken(MySQLParser.END_SYMBOL, 0)

        def FLUSH_SYMBOL(self):
            return self.getToken(MySQLParser.FLUSH_SYMBOL, 0)

        def FOLLOWS_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWS_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.FORMAT_SYMBOL, 0)

        def GROUP_REPLICATION_SYMBOL(self):
            return self.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0)

        def HANDLER_SYMBOL(self):
            return self.getToken(MySQLParser.HANDLER_SYMBOL, 0)

        def HELP_SYMBOL(self):
            return self.getToken(MySQLParser.HELP_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MySQLParser.HOST_SYMBOL, 0)

        def INSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.INSTALL_SYMBOL, 0)

        def INVISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.INVISIBLE_SYMBOL, 0)

        def LANGUAGE_SYMBOL(self):
            return self.getToken(MySQLParser.LANGUAGE_SYMBOL, 0)

        def NO_SYMBOL(self):
            return self.getToken(MySQLParser.NO_SYMBOL, 0)

        def OPEN_SYMBOL(self):
            return self.getToken(MySQLParser.OPEN_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONS_SYMBOL, 0)

        def OWNER_SYMBOL(self):
            return self.getToken(MySQLParser.OWNER_SYMBOL, 0)

        def PARSER_SYMBOL(self):
            return self.getToken(MySQLParser.PARSER_SYMBOL, 0)

        def PARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITION_SYMBOL, 0)

        def PORT_SYMBOL(self):
            return self.getToken(MySQLParser.PORT_SYMBOL, 0)

        def PRECEDES_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDES_SYMBOL, 0)

        def PREPARE_SYMBOL(self):
            return self.getToken(MySQLParser.PREPARE_SYMBOL, 0)

        def REMOVE_SYMBOL(self):
            return self.getToken(MySQLParser.REMOVE_SYMBOL, 0)

        def REPAIR_SYMBOL(self):
            return self.getToken(MySQLParser.REPAIR_SYMBOL, 0)

        def RESET_SYMBOL(self):
            return self.getToken(MySQLParser.RESET_SYMBOL, 0)

        def RESTORE_SYMBOL(self):
            return self.getToken(MySQLParser.RESTORE_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MySQLParser.ROLE_SYMBOL, 0)

        def ROLLBACK_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLBACK_SYMBOL, 0)

        def SAVEPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0)

        def SECONDARY_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_SYMBOL, 0)

        def SECONDARY_ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0)

        def SECONDARY_LOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0)

        def SECONDARY_UNLOAD_SYMBOL(self):
            return self.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0)

        def SECURITY_SYMBOL(self):
            return self.getToken(MySQLParser.SECURITY_SYMBOL, 0)

        def SERVER_SYMBOL(self):
            return self.getToken(MySQLParser.SERVER_SYMBOL, 0)

        def SIGNED_SYMBOL(self):
            return self.getToken(MySQLParser.SIGNED_SYMBOL, 0)

        def SOCKET_SYMBOL(self):
            return self.getToken(MySQLParser.SOCKET_SYMBOL, 0)

        def SLAVE_SYMBOL(self):
            return self.getToken(MySQLParser.SLAVE_SYMBOL, 0)

        def SONAME_SYMBOL(self):
            return self.getToken(MySQLParser.SONAME_SYMBOL, 0)

        def START_SYMBOL(self):
            return self.getToken(MySQLParser.START_SYMBOL, 0)

        def STOP_SYMBOL(self):
            return self.getToken(MySQLParser.STOP_SYMBOL, 0)

        def TRUNCATE_SYMBOL(self):
            return self.getToken(MySQLParser.TRUNCATE_SYMBOL, 0)

        def UNICODE_SYMBOL(self):
            return self.getToken(MySQLParser.UNICODE_SYMBOL, 0)

        def UNINSTALL_SYMBOL(self):
            return self.getToken(MySQLParser.UNINSTALL_SYMBOL, 0)

        def UPGRADE_SYMBOL(self):
            return self.getToken(MySQLParser.UPGRADE_SYMBOL, 0)

        def VISIBLE_SYMBOL(self):
            return self.getToken(MySQLParser.VISIBLE_SYMBOL, 0)

        def WRAPPER_SYMBOL(self):
            return self.getToken(MySQLParser.WRAPPER_SYMBOL, 0)

        def XA_SYMBOL(self):
            return self.getToken(MySQLParser.XA_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_roleOrIdentifierKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrIdentifierKeyword" ):
                listener.enterRoleOrIdentifierKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrIdentifierKeyword" ):
                listener.exitRoleOrIdentifierKeyword(self)




    def roleOrIdentifierKeyword(self):

        localctx = MySQLParser.RoleOrIdentifierKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_roleOrIdentifierKeyword)
        self._la = 0 # Token type
        try:
            self.state = 8403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8398
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 2594284492269555716) != 0 or (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 144115188092635649) != 0 or (((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & -9203668788485025791) != 0 or (((_la - 219)) & ~0x3f) == 0 and ((1 << (_la - 219)) & 281475043819561) != 0 or (((_la - 373)) & ~0x3f) == 0 and ((1 << (_la - 373)) & 23094341287937) != 0 or (((_la - 452)) & ~0x3f) == 0 and ((1 << (_la - 452)) & 5766877052741681161) != 0 or (((_la - 519)) & ~0x3f) == 0 and ((1 << (_la - 519)) & 8606711811) != 0 or (((_la - 597)) & ~0x3f) == 0 and ((1 << (_la - 597)) & 4631952216750818817) != 0 or (((_la - 661)) & ~0x3f) == 0 and ((1 << (_la - 661)) & 8646911284551417859) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8399
                if not serverVersion >= 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 50709")
                self.state = 8400
                self.match(MySQLParser.SHUTDOWN_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8401
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 8402
                self.match(MySQLParser.IMPORT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOrLabelKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACTION_SYMBOL(self):
            return self.getToken(MySQLParser.ACTION_SYMBOL, 0)

        def ACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.ACTIVE_SYMBOL, 0)

        def ADDDATE_SYMBOL(self):
            return self.getToken(MySQLParser.ADDDATE_SYMBOL, 0)

        def AFTER_SYMBOL(self):
            return self.getToken(MySQLParser.AFTER_SYMBOL, 0)

        def AGAINST_SYMBOL(self):
            return self.getToken(MySQLParser.AGAINST_SYMBOL, 0)

        def AGGREGATE_SYMBOL(self):
            return self.getToken(MySQLParser.AGGREGATE_SYMBOL, 0)

        def ALGORITHM_SYMBOL(self):
            return self.getToken(MySQLParser.ALGORITHM_SYMBOL, 0)

        def ANALYSE_SYMBOL(self):
            return self.getToken(MySQLParser.ANALYSE_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MySQLParser.ANY_SYMBOL, 0)

        def AT_SYMBOL(self):
            return self.getToken(MySQLParser.AT_SYMBOL, 0)

        def AUTHORS_SYMBOL(self):
            return self.getToken(MySQLParser.AUTHORS_SYMBOL, 0)

        def AUTO_INCREMENT_SYMBOL(self):
            return self.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0)

        def AUTOEXTEND_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0)

        def AVG_ROW_LENGTH_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0)

        def AVG_SYMBOL(self):
            return self.getToken(MySQLParser.AVG_SYMBOL, 0)

        def BINLOG_SYMBOL(self):
            return self.getToken(MySQLParser.BINLOG_SYMBOL, 0)

        def BIT_SYMBOL(self):
            return self.getToken(MySQLParser.BIT_SYMBOL, 0)

        def BLOCK_SYMBOL(self):
            return self.getToken(MySQLParser.BLOCK_SYMBOL, 0)

        def BOOL_SYMBOL(self):
            return self.getToken(MySQLParser.BOOL_SYMBOL, 0)

        def BOOLEAN_SYMBOL(self):
            return self.getToken(MySQLParser.BOOLEAN_SYMBOL, 0)

        def BTREE_SYMBOL(self):
            return self.getToken(MySQLParser.BTREE_SYMBOL, 0)

        def BUCKETS_SYMBOL(self):
            return self.getToken(MySQLParser.BUCKETS_SYMBOL, 0)

        def CASCADED_SYMBOL(self):
            return self.getToken(MySQLParser.CASCADED_SYMBOL, 0)

        def CATALOG_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0)

        def CHAIN_SYMBOL(self):
            return self.getToken(MySQLParser.CHAIN_SYMBOL, 0)

        def CHANGED_SYMBOL(self):
            return self.getToken(MySQLParser.CHANGED_SYMBOL, 0)

        def CHANNEL_SYMBOL(self):
            return self.getToken(MySQLParser.CHANNEL_SYMBOL, 0)

        def CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.CIPHER_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MySQLParser.CLIENT_SYMBOL, 0)

        def CLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0)

        def COALESCE_SYMBOL(self):
            return self.getToken(MySQLParser.COALESCE_SYMBOL, 0)

        def CODE_SYMBOL(self):
            return self.getToken(MySQLParser.CODE_SYMBOL, 0)

        def COLLATION_SYMBOL(self):
            return self.getToken(MySQLParser.COLLATION_SYMBOL, 0)

        def COLUMN_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0)

        def COLUMN_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0)

        def COLUMNS_SYMBOL(self):
            return self.getToken(MySQLParser.COLUMNS_SYMBOL, 0)

        def COMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.COMMITTED_SYMBOL, 0)

        def COMPACT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPACT_SYMBOL, 0)

        def COMPLETION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPLETION_SYMBOL, 0)

        def COMPONENT_SYMBOL(self):
            return self.getToken(MySQLParser.COMPONENT_SYMBOL, 0)

        def COMPRESSED_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSED_SYMBOL, 0)

        def COMPRESSION_SYMBOL(self):
            return self.getToken(MySQLParser.COMPRESSION_SYMBOL, 0)

        def CONCURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONCURRENT_SYMBOL, 0)

        def CONNECTION_SYMBOL(self):
            return self.getToken(MySQLParser.CONNECTION_SYMBOL, 0)

        def CONSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.CONSISTENT_SYMBOL, 0)

        def CONSTRAINT_CATALOG_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0)

        def CONSTRAINT_SCHEMA_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0)

        def CONSTRAINT_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0)

        def CONTEXT_SYMBOL(self):
            return self.getToken(MySQLParser.CONTEXT_SYMBOL, 0)

        def CONTRIBUTORS_SYMBOL(self):
            return self.getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0)

        def CPU_SYMBOL(self):
            return self.getToken(MySQLParser.CPU_SYMBOL, 0)

        def CURRENT_SYMBOL(self):
            return self.getToken(MySQLParser.CURRENT_SYMBOL, 0)

        def CURSOR_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MySQLParser.DATA_SYMBOL, 0)

        def DATAFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DATAFILE_SYMBOL, 0)

        def DATETIME_SYMBOL(self):
            return self.getToken(MySQLParser.DATETIME_SYMBOL, 0)

        def DATE_SYMBOL(self):
            return self.getToken(MySQLParser.DATE_SYMBOL, 0)

        def DAY_SYMBOL(self):
            return self.getToken(MySQLParser.DAY_SYMBOL, 0)

        def DEFAULT_AUTH_SYMBOL(self):
            return self.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0)

        def DEFINER_SYMBOL(self):
            return self.getToken(MySQLParser.DEFINER_SYMBOL, 0)

        def DELAY_KEY_WRITE_SYMBOL(self):
            return self.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0)

        def DES_KEY_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0)

        def DESCRIPTION_SYMBOL(self):
            return self.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0)

        def DIAGNOSTICS_SYMBOL(self):
            return self.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0)

        def DIRECTORY_SYMBOL(self):
            return self.getToken(MySQLParser.DIRECTORY_SYMBOL, 0)

        def DISABLE_SYMBOL(self):
            return self.getToken(MySQLParser.DISABLE_SYMBOL, 0)

        def DISCARD_SYMBOL(self):
            return self.getToken(MySQLParser.DISCARD_SYMBOL, 0)

        def DISK_SYMBOL(self):
            return self.getToken(MySQLParser.DISK_SYMBOL, 0)

        def DUMPFILE_SYMBOL(self):
            return self.getToken(MySQLParser.DUMPFILE_SYMBOL, 0)

        def DUPLICATE_SYMBOL(self):
            return self.getToken(MySQLParser.DUPLICATE_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(MySQLParser.DYNAMIC_SYMBOL, 0)

        def ENCRYPTION_SYMBOL(self):
            return self.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0)

        def ENDS_SYMBOL(self):
            return self.getToken(MySQLParser.ENDS_SYMBOL, 0)

        def ENUM_SYMBOL(self):
            return self.getToken(MySQLParser.ENUM_SYMBOL, 0)

        def ENGINE_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINE_SYMBOL, 0)

        def ENGINES_SYMBOL(self):
            return self.getToken(MySQLParser.ENGINES_SYMBOL, 0)

        def ERROR_SYMBOL(self):
            return self.getToken(MySQLParser.ERROR_SYMBOL, 0)

        def ERRORS_SYMBOL(self):
            return self.getToken(MySQLParser.ERRORS_SYMBOL, 0)

        def ESCAPE_SYMBOL(self):
            return self.getToken(MySQLParser.ESCAPE_SYMBOL, 0)

        def EVENTS_SYMBOL(self):
            return self.getToken(MySQLParser.EVENTS_SYMBOL, 0)

        def EVERY_SYMBOL(self):
            return self.getToken(MySQLParser.EVERY_SYMBOL, 0)

        def EXCLUDE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCLUDE_SYMBOL, 0)

        def EXPANSION_SYMBOL(self):
            return self.getToken(MySQLParser.EXPANSION_SYMBOL, 0)

        def EXPORT_SYMBOL(self):
            return self.getToken(MySQLParser.EXPORT_SYMBOL, 0)

        def EXTENDED_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENDED_SYMBOL, 0)

        def EXTENT_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0)

        def FAULTS_SYMBOL(self):
            return self.getToken(MySQLParser.FAULTS_SYMBOL, 0)

        def FAST_SYMBOL(self):
            return self.getToken(MySQLParser.FAST_SYMBOL, 0)

        def FOLLOWING_SYMBOL(self):
            return self.getToken(MySQLParser.FOLLOWING_SYMBOL, 0)

        def FOUND_SYMBOL(self):
            return self.getToken(MySQLParser.FOUND_SYMBOL, 0)

        def ENABLE_SYMBOL(self):
            return self.getToken(MySQLParser.ENABLE_SYMBOL, 0)

        def FULL_SYMBOL(self):
            return self.getToken(MySQLParser.FULL_SYMBOL, 0)

        def FILE_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MySQLParser.FILTER_SYMBOL, 0)

        def FIRST_SYMBOL(self):
            return self.getToken(MySQLParser.FIRST_SYMBOL, 0)

        def FIXED_SYMBOL(self):
            return self.getToken(MySQLParser.FIXED_SYMBOL, 0)

        def GENERAL_SYMBOL(self):
            return self.getToken(MySQLParser.GENERAL_SYMBOL, 0)

        def GEOMETRY_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRY_SYMBOL, 0)

        def GEOMETRYCOLLECTION_SYMBOL(self):
            return self.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0)

        def GET_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MySQLParser.GRANTS_SYMBOL, 0)

        def GLOBAL_SYMBOL(self):
            return self.getToken(MySQLParser.GLOBAL_SYMBOL, 0)

        def HASH_SYMBOL(self):
            return self.getToken(MySQLParser.HASH_SYMBOL, 0)

        def HISTOGRAM_SYMBOL(self):
            return self.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0)

        def HISTORY_SYMBOL(self):
            return self.getToken(MySQLParser.HISTORY_SYMBOL, 0)

        def HOSTS_SYMBOL(self):
            return self.getToken(MySQLParser.HOSTS_SYMBOL, 0)

        def HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.HOUR_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0)

        def IGNORE_SERVER_IDS_SYMBOL(self):
            return self.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0)

        def INVOKER_SYMBOL(self):
            return self.getToken(MySQLParser.INVOKER_SYMBOL, 0)

        def INDEXES_SYMBOL(self):
            return self.getToken(MySQLParser.INDEXES_SYMBOL, 0)

        def INITIAL_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0)

        def INSTANCE_SYMBOL(self):
            return self.getToken(MySQLParser.INSTANCE_SYMBOL, 0)

        def INACTIVE_SYMBOL(self):
            return self.getToken(MySQLParser.INACTIVE_SYMBOL, 0)

        def IO_SYMBOL(self):
            return self.getToken(MySQLParser.IO_SYMBOL, 0)

        def IPC_SYMBOL(self):
            return self.getToken(MySQLParser.IPC_SYMBOL, 0)

        def ISOLATION_SYMBOL(self):
            return self.getToken(MySQLParser.ISOLATION_SYMBOL, 0)

        def ISSUER_SYMBOL(self):
            return self.getToken(MySQLParser.ISSUER_SYMBOL, 0)

        def INSERT_METHOD_SYMBOL(self):
            return self.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MySQLParser.JSON_SYMBOL, 0)

        def KEY_BLOCK_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0)

        def LAST_SYMBOL(self):
            return self.getToken(MySQLParser.LAST_SYMBOL, 0)

        def LEAVES_SYMBOL(self):
            return self.getToken(MySQLParser.LEAVES_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySQLParser.LESS_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(MySQLParser.LEVEL_SYMBOL, 0)

        def LINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.LINESTRING_SYMBOL, 0)

        def LIST_SYMBOL(self):
            return self.getToken(MySQLParser.LIST_SYMBOL, 0)

        def LOCAL_SYMBOL(self):
            return self.getToken(MySQLParser.LOCAL_SYMBOL, 0)

        def LOCKED_SYMBOL(self):
            return self.getToken(MySQLParser.LOCKED_SYMBOL, 0)

        def LOCKS_SYMBOL(self):
            return self.getToken(MySQLParser.LOCKS_SYMBOL, 0)

        def LOGFILE_SYMBOL(self):
            return self.getToken(MySQLParser.LOGFILE_SYMBOL, 0)

        def LOGS_SYMBOL(self):
            return self.getToken(MySQLParser.LOGS_SYMBOL, 0)

        def MAX_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0)

        def MASTER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SYMBOL, 0)

        def MASTER_HEARTBEAT_PERIOD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0)

        def MASTER_HOST_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0)

        def MASTER_PORT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0)

        def MASTER_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0)

        def MASTER_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0)

        def MASTER_USER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_USER_SYMBOL, 0)

        def MASTER_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0)

        def MASTER_PUBLIC_KEY_PATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0)

        def MASTER_SERVER_ID_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0)

        def MASTER_CONNECT_RETRY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0)

        def MASTER_RETRY_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0)

        def MASTER_DELAY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0)

        def MASTER_SSL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0)

        def MASTER_SSL_CA_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0)

        def MASTER_SSL_CAPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0)

        def MASTER_TLS_VERSION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0)

        def MASTER_SSL_CERT_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0)

        def MASTER_SSL_CIPHER_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0)

        def MASTER_SSL_CRL_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0)

        def MASTER_SSL_CRLPATH_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0)

        def MASTER_SSL_KEY_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0)

        def MASTER_AUTO_POSITION_SYMBOL(self):
            return self.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0)

        def MAX_CONNECTIONS_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0)

        def MAX_QUERIES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0)

        def MAX_STATEMENT_TIME_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0)

        def MAX_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0)

        def MAX_UPDATES_PER_HOUR_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0)

        def MAX_USER_CONNECTIONS_SYMBOL(self):
            return self.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0)

        def MEDIUM_SYMBOL(self):
            return self.getToken(MySQLParser.MEDIUM_SYMBOL, 0)

        def MEMORY_SYMBOL(self):
            return self.getToken(MySQLParser.MEMORY_SYMBOL, 0)

        def MERGE_SYMBOL(self):
            return self.getToken(MySQLParser.MERGE_SYMBOL, 0)

        def MESSAGE_TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0)

        def MICROSECOND_SYMBOL(self):
            return self.getToken(MySQLParser.MICROSECOND_SYMBOL, 0)

        def MIGRATE_SYMBOL(self):
            return self.getToken(MySQLParser.MIGRATE_SYMBOL, 0)

        def MINUTE_SYMBOL(self):
            return self.getToken(MySQLParser.MINUTE_SYMBOL, 0)

        def MIN_ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0)

        def MODIFY_SYMBOL(self):
            return self.getToken(MySQLParser.MODIFY_SYMBOL, 0)

        def MODE_SYMBOL(self):
            return self.getToken(MySQLParser.MODE_SYMBOL, 0)

        def MONTH_SYMBOL(self):
            return self.getToken(MySQLParser.MONTH_SYMBOL, 0)

        def MULTILINESTRING_SYMBOL(self):
            return self.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0)

        def MULTIPOINT_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0)

        def MULTIPOLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0)

        def MUTEX_SYMBOL(self):
            return self.getToken(MySQLParser.MUTEX_SYMBOL, 0)

        def MYSQL_ERRNO_SYMBOL(self):
            return self.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MySQLParser.NAME_SYMBOL, 0)

        def NAMES_SYMBOL(self):
            return self.getToken(MySQLParser.NAMES_SYMBOL, 0)

        def NATIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.NATIONAL_SYMBOL, 0)

        def NCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NCHAR_SYMBOL, 0)

        def NDBCLUSTER_SYMBOL(self):
            return self.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0)

        def NESTED_SYMBOL(self):
            return self.getToken(MySQLParser.NESTED_SYMBOL, 0)

        def NEVER_SYMBOL(self):
            return self.getToken(MySQLParser.NEVER_SYMBOL, 0)

        def NEXT_SYMBOL(self):
            return self.getToken(MySQLParser.NEXT_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MySQLParser.NEW_SYMBOL, 0)

        def NO_WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NO_WAIT_SYMBOL, 0)

        def NODEGROUP_SYMBOL(self):
            return self.getToken(MySQLParser.NODEGROUP_SYMBOL, 0)

        def NULLS_SYMBOL(self):
            return self.getToken(MySQLParser.NULLS_SYMBOL, 0)

        def NOWAIT_SYMBOL(self):
            return self.getToken(MySQLParser.NOWAIT_SYMBOL, 0)

        def NUMBER_SYMBOL(self):
            return self.getToken(MySQLParser.NUMBER_SYMBOL, 0)

        def NVARCHAR_SYMBOL(self):
            return self.getToken(MySQLParser.NVARCHAR_SYMBOL, 0)

        def OFFSET_SYMBOL(self):
            return self.getToken(MySQLParser.OFFSET_SYMBOL, 0)

        def OLD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_SYMBOL, 0)

        def OLD_PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0)

        def ONE_SYMBOL(self):
            return self.getToken(MySQLParser.ONE_SYMBOL, 0)

        def OPTIONAL_SYMBOL(self):
            return self.getToken(MySQLParser.OPTIONAL_SYMBOL, 0)

        def ORDINALITY_SYMBOL(self):
            return self.getToken(MySQLParser.ORDINALITY_SYMBOL, 0)

        def ORGANIZATION_SYMBOL(self):
            return self.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0)

        def OTHERS_SYMBOL(self):
            return self.getToken(MySQLParser.OTHERS_SYMBOL, 0)

        def PACK_KEYS_SYMBOL(self):
            return self.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MySQLParser.PAGE_SYMBOL, 0)

        def PARTIAL_SYMBOL(self):
            return self.getToken(MySQLParser.PARTIAL_SYMBOL, 0)

        def PARTITIONING_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONING_SYMBOL, 0)

        def PARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.PARTITIONS_SYMBOL, 0)

        def PASSWORD_SYMBOL(self):
            return self.getToken(MySQLParser.PASSWORD_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MySQLParser.PATH_SYMBOL, 0)

        def PHASE_SYMBOL(self):
            return self.getToken(MySQLParser.PHASE_SYMBOL, 0)

        def PLUGIN_DIR_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0)

        def PLUGIN_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGIN_SYMBOL, 0)

        def PLUGINS_SYMBOL(self):
            return self.getToken(MySQLParser.PLUGINS_SYMBOL, 0)

        def POINT_SYMBOL(self):
            return self.getToken(MySQLParser.POINT_SYMBOL, 0)

        def POLYGON_SYMBOL(self):
            return self.getToken(MySQLParser.POLYGON_SYMBOL, 0)

        def PRECEDING_SYMBOL(self):
            return self.getToken(MySQLParser.PRECEDING_SYMBOL, 0)

        def PRESERVE_SYMBOL(self):
            return self.getToken(MySQLParser.PRESERVE_SYMBOL, 0)

        def PREV_SYMBOL(self):
            return self.getToken(MySQLParser.PREV_SYMBOL, 0)

        def THREAD_PRIORITY_SYMBOL(self):
            return self.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0)

        def PRIVILEGES_SYMBOL(self):
            return self.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0)

        def PROCESSLIST_SYMBOL(self):
            return self.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0)

        def PROFILE_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILE_SYMBOL, 0)

        def PROFILES_SYMBOL(self):
            return self.getToken(MySQLParser.PROFILES_SYMBOL, 0)

        def QUARTER_SYMBOL(self):
            return self.getToken(MySQLParser.QUARTER_SYMBOL, 0)

        def QUERY_SYMBOL(self):
            return self.getToken(MySQLParser.QUERY_SYMBOL, 0)

        def QUICK_SYMBOL(self):
            return self.getToken(MySQLParser.QUICK_SYMBOL, 0)

        def READ_ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.READ_ONLY_SYMBOL, 0)

        def REBUILD_SYMBOL(self):
            return self.getToken(MySQLParser.REBUILD_SYMBOL, 0)

        def RECOVER_SYMBOL(self):
            return self.getToken(MySQLParser.RECOVER_SYMBOL, 0)

        def REDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0)

        def REDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.REDOFILE_SYMBOL, 0)

        def REDUNDANT_SYMBOL(self):
            return self.getToken(MySQLParser.REDUNDANT_SYMBOL, 0)

        def RELAY_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_SYMBOL, 0)

        def RELAYLOG_SYMBOL(self):
            return self.getToken(MySQLParser.RELAYLOG_SYMBOL, 0)

        def RELAY_LOG_FILE_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0)

        def RELAY_LOG_POS_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0)

        def RELAY_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0)

        def REMOTE_SYMBOL(self):
            return self.getToken(MySQLParser.REMOTE_SYMBOL, 0)

        def REORGANIZE_SYMBOL(self):
            return self.getToken(MySQLParser.REORGANIZE_SYMBOL, 0)

        def REPEATABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPEATABLE_SYMBOL, 0)

        def REPLICATE_DO_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0)

        def REPLICATE_IGNORE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0)

        def REPLICATE_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0)

        def REPLICATE_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_DO_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0)

        def REPLICATE_WILD_IGNORE_TABLE_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0)

        def REPLICATE_REWRITE_DB_SYMBOL(self):
            return self.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0)

        def USER_RESOURCES_SYMBOL(self):
            return self.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0)

        def RESPECT_SYMBOL(self):
            return self.getToken(MySQLParser.RESPECT_SYMBOL, 0)

        def RESUME_SYMBOL(self):
            return self.getToken(MySQLParser.RESUME_SYMBOL, 0)

        def RETAIN_SYMBOL(self):
            return self.getToken(MySQLParser.RETAIN_SYMBOL, 0)

        def RETURNED_SQLSTATE_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0)

        def RETURNS_SYMBOL(self):
            return self.getToken(MySQLParser.RETURNS_SYMBOL, 0)

        def REUSE_SYMBOL(self):
            return self.getToken(MySQLParser.REUSE_SYMBOL, 0)

        def REVERSE_SYMBOL(self):
            return self.getToken(MySQLParser.REVERSE_SYMBOL, 0)

        def ROLLUP_SYMBOL(self):
            return self.getToken(MySQLParser.ROLLUP_SYMBOL, 0)

        def ROTATE_SYMBOL(self):
            return self.getToken(MySQLParser.ROTATE_SYMBOL, 0)

        def ROUTINE_SYMBOL(self):
            return self.getToken(MySQLParser.ROUTINE_SYMBOL, 0)

        def ROW_COUNT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0)

        def ROW_FORMAT_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0)

        def RTREE_SYMBOL(self):
            return self.getToken(MySQLParser.RTREE_SYMBOL, 0)

        def SCHEDULE_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEDULE_SYMBOL, 0)

        def SCHEMA_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0)

        def SECOND_SYMBOL(self):
            return self.getToken(MySQLParser.SECOND_SYMBOL, 0)

        def SERIAL_SYMBOL(self):
            return self.getToken(MySQLParser.SERIAL_SYMBOL, 0)

        def SERIALIZABLE_SYMBOL(self):
            return self.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0)

        def SESSION_SYMBOL(self):
            return self.getToken(MySQLParser.SESSION_SYMBOL, 0)

        def SHARE_SYMBOL(self):
            return self.getToken(MySQLParser.SHARE_SYMBOL, 0)

        def SIMPLE_SYMBOL(self):
            return self.getToken(MySQLParser.SIMPLE_SYMBOL, 0)

        def SKIP_SYMBOL(self):
            return self.getToken(MySQLParser.SKIP_SYMBOL, 0)

        def SLOW_SYMBOL(self):
            return self.getToken(MySQLParser.SLOW_SYMBOL, 0)

        def SNAPSHOT_SYMBOL(self):
            return self.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0)

        def SOUNDS_SYMBOL(self):
            return self.getToken(MySQLParser.SOUNDS_SYMBOL, 0)

        def SOURCE_SYMBOL(self):
            return self.getToken(MySQLParser.SOURCE_SYMBOL, 0)

        def SQL_AFTER_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0)

        def SQL_AFTER_MTS_GAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0)

        def SQL_BEFORE_GTIDS_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0)

        def SQL_CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_CACHE_SYMBOL, 0)

        def SQL_BUFFER_RESULT_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0)

        def SQL_NO_CACHE_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0)

        def SQL_THREAD_SYMBOL(self):
            return self.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0)

        def SRID_SYMBOL(self):
            return self.getToken(MySQLParser.SRID_SYMBOL, 0)

        def STACKED_SYMBOL(self):
            return self.getToken(MySQLParser.STACKED_SYMBOL, 0)

        def STARTS_SYMBOL(self):
            return self.getToken(MySQLParser.STARTS_SYMBOL, 0)

        def STATS_AUTO_RECALC_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0)

        def STATS_PERSISTENT_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0)

        def STATS_SAMPLE_PAGES_SYMBOL(self):
            return self.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MySQLParser.STATUS_SYMBOL, 0)

        def STORAGE_SYMBOL(self):
            return self.getToken(MySQLParser.STORAGE_SYMBOL, 0)

        def STRING_SYMBOL(self):
            return self.getToken(MySQLParser.STRING_SYMBOL, 0)

        def SUBCLASS_ORIGIN_SYMBOL(self):
            return self.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0)

        def SUBDATE_SYMBOL(self):
            return self.getToken(MySQLParser.SUBDATE_SYMBOL, 0)

        def SUBJECT_SYMBOL(self):
            return self.getToken(MySQLParser.SUBJECT_SYMBOL, 0)

        def SUBPARTITION_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0)

        def SUBPARTITIONS_SYMBOL(self):
            return self.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0)

        def SUPER_SYMBOL(self):
            return self.getToken(MySQLParser.SUPER_SYMBOL, 0)

        def SUSPEND_SYMBOL(self):
            return self.getToken(MySQLParser.SUSPEND_SYMBOL, 0)

        def SWAPS_SYMBOL(self):
            return self.getToken(MySQLParser.SWAPS_SYMBOL, 0)

        def SWITCHES_SYMBOL(self):
            return self.getToken(MySQLParser.SWITCHES_SYMBOL, 0)

        def TABLE_NAME_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0)

        def TABLES_SYMBOL(self):
            return self.getToken(MySQLParser.TABLES_SYMBOL, 0)

        def TABLE_CHECKSUM_SYMBOL(self):
            return self.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0)

        def TABLESPACE_SYMBOL(self):
            return self.getToken(MySQLParser.TABLESPACE_SYMBOL, 0)

        def TEMPORARY_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPORARY_SYMBOL, 0)

        def TEMPTABLE_SYMBOL(self):
            return self.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0)

        def TEXT_SYMBOL(self):
            return self.getToken(MySQLParser.TEXT_SYMBOL, 0)

        def THAN_SYMBOL(self):
            return self.getToken(MySQLParser.THAN_SYMBOL, 0)

        def TIES_SYMBOL(self):
            return self.getToken(MySQLParser.TIES_SYMBOL, 0)

        def TRANSACTION_SYMBOL(self):
            return self.getToken(MySQLParser.TRANSACTION_SYMBOL, 0)

        def TRIGGERS_SYMBOL(self):
            return self.getToken(MySQLParser.TRIGGERS_SYMBOL, 0)

        def TIMESTAMP_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0)

        def TIMESTAMP_ADD_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0)

        def TIMESTAMP_DIFF_SYMBOL(self):
            return self.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0)

        def TIME_SYMBOL(self):
            return self.getToken(MySQLParser.TIME_SYMBOL, 0)

        def TYPES_SYMBOL(self):
            return self.getToken(MySQLParser.TYPES_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MySQLParser.TYPE_SYMBOL, 0)

        def UDF_RETURNS_SYMBOL(self):
            return self.getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0)

        def UNBOUNDED_SYMBOL(self):
            return self.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0)

        def UNCOMMITTED_SYMBOL(self):
            return self.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0)

        def UNDEFINED_SYMBOL(self):
            return self.getToken(MySQLParser.UNDEFINED_SYMBOL, 0)

        def UNDO_BUFFER_SIZE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0)

        def UNDOFILE_SYMBOL(self):
            return self.getToken(MySQLParser.UNDOFILE_SYMBOL, 0)

        def UNKNOWN_SYMBOL(self):
            return self.getToken(MySQLParser.UNKNOWN_SYMBOL, 0)

        def UNTIL_SYMBOL(self):
            return self.getToken(MySQLParser.UNTIL_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MySQLParser.USER_SYMBOL, 0)

        def USE_FRM_SYMBOL(self):
            return self.getToken(MySQLParser.USE_FRM_SYMBOL, 0)

        def VARIABLES_SYMBOL(self):
            return self.getToken(MySQLParser.VARIABLES_SYMBOL, 0)

        def VCPU_SYMBOL(self):
            return self.getToken(MySQLParser.VCPU_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MySQLParser.VIEW_SYMBOL, 0)

        def VALUE_SYMBOL(self):
            return self.getToken(MySQLParser.VALUE_SYMBOL, 0)

        def WARNINGS_SYMBOL(self):
            return self.getToken(MySQLParser.WARNINGS_SYMBOL, 0)

        def WAIT_SYMBOL(self):
            return self.getToken(MySQLParser.WAIT_SYMBOL, 0)

        def WEEK_SYMBOL(self):
            return self.getToken(MySQLParser.WEEK_SYMBOL, 0)

        def WORK_SYMBOL(self):
            return self.getToken(MySQLParser.WORK_SYMBOL, 0)

        def WEIGHT_STRING_SYMBOL(self):
            return self.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0)

        def X509_SYMBOL(self):
            return self.getToken(MySQLParser.X509_SYMBOL, 0)

        def XID_SYMBOL(self):
            return self.getToken(MySQLParser.XID_SYMBOL, 0)

        def XML_SYMBOL(self):
            return self.getToken(MySQLParser.XML_SYMBOL, 0)

        def YEAR_SYMBOL(self):
            return self.getToken(MySQLParser.YEAR_SYMBOL, 0)

        def SHUTDOWN_SYMBOL(self):
            return self.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0)

        def CUBE_SYMBOL(self):
            return self.getToken(MySQLParser.CUBE_SYMBOL, 0)

        def IMPORT_SYMBOL(self):
            return self.getToken(MySQLParser.IMPORT_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MySQLParser.FUNCTION_SYMBOL, 0)

        def ROWS_SYMBOL(self):
            return self.getToken(MySQLParser.ROWS_SYMBOL, 0)

        def ROW_SYMBOL(self):
            return self.getToken(MySQLParser.ROW_SYMBOL, 0)

        def EXCHANGE_SYMBOL(self):
            return self.getToken(MySQLParser.EXCHANGE_SYMBOL, 0)

        def EXPIRE_SYMBOL(self):
            return self.getToken(MySQLParser.EXPIRE_SYMBOL, 0)

        def ONLY_SYMBOL(self):
            return self.getToken(MySQLParser.ONLY_SYMBOL, 0)

        def VALIDATION_SYMBOL(self):
            return self.getToken(MySQLParser.VALIDATION_SYMBOL, 0)

        def WITHOUT_SYMBOL(self):
            return self.getToken(MySQLParser.WITHOUT_SYMBOL, 0)

        def ADMIN_SYMBOL(self):
            return self.getToken(MySQLParser.ADMIN_SYMBOL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_roleOrLabelKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOrLabelKeyword" ):
                listener.enterRoleOrLabelKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOrLabelKeyword" ):
                listener.exitRoleOrLabelKeyword(self)




    def roleOrLabelKeyword(self):

        localctx = MySQLParser.RoleOrLabelKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_roleOrLabelKeyword)
        self._la = 0 # Token type
        try:
            self.state = 8414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8405
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & -8979026322141404184) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 293728076757980891) != 0 or (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -1036806760278507893) != 0 or (((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & 6008090054826942021) != 0 or (((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 2012968295144429669) != 0 or (((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & 3186450531003551) != 0 or (((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & -2123500508502540357) != 0 or (((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & 888371177957633551) != 0 or (((_la - 528)) & ~0x3f) == 0 and ((1 << (_la - 528)) & 556082283301262519) != 0 or (((_la - 592)) & ~0x3f) == 0 and ((1 << (_la - 592)) & 3784097394692726723) != 0 or (((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & -5647576991346663167) != 0 or (((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & 27) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8406
                if not serverVersion < 50709:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 50709")
                self.state = 8407
                self.match(MySQLParser.SHUTDOWN_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8408
                if not serverVersion < 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion < 80000")
                self.state = 8409
                _la = self._input.LA(1)
                if not(_la==99 or _la==206 or _la==234 or _la==484 or _la==487):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8410
                if not serverVersion >= 80000:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80000")
                self.state = 8411
                _la = self._input.LA(1)
                if not(_la==172 or _la==177 or _la==386 or _la==565 or _la==625 or _la==646):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8412
                if not serverVersion >= 80014:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "serverVersion >= 80014")
                self.state = 8413
                self.match(MySQLParser.ADMIN_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[1] = self.simpleStatement_sempred
        self._predicates[2] = self.alterStatement_sempred
        self._predicates[3] = self.alterDatabase_sempred
        self._predicates[9] = self.alterTable_sempred
        self._predicates[13] = self.standaloneAlterCommands_sempred
        self._predicates[14] = self.alterPartition_sempred
        self._predicates[17] = self.alterListItem_sempred
        self._predicates[24] = self.withValidation_sempred
        self._predicates[27] = self.alterTablespace_sempred
        self._predicates[38] = self.createStatement_sempred
        self._predicates[40] = self.createDatabaseOption_sempred
        self._predicates[53] = self.createIndex_sempred
        self._predicates[64] = self.tsDataFileName_sempred
        self._predicates[67] = self.tablespaceOption_sempred
        self._predicates[84] = self.triggerFollowsPrecedesClause_sempred
        self._predicates[89] = self.dropStatement_sempred
        self._predicates[110] = self.deleteStatement_sempred
        self._predicates[111] = self.partitionDelete_sempred
        self._predicates[113] = self.doStatement_sempred
        self._predicates[116] = self.insertStatement_sempred
        self._predicates[135] = self.queryExpression_sempred
        self._predicates[138] = self.queryPrimary_sempred
        self._predicates[139] = self.querySpecification_sempred
        self._predicates[163] = self.olapOption_sempred
        self._predicates[171] = self.selectOption_sempred
        self._predicates[173] = self.lockingClause_sempred
        self._predicates[174] = self.lockStrengh_sempred
        self._predicates[180] = self.tableReference_sempred
        self._predicates[186] = self.tableFactor_sempred
        self._predicates[189] = self.derivedTable_sempred
        self._predicates[193] = self.jtColumn_sempred
        self._predicates[199] = self.tableAlias_sempred
        self._predicates[208] = self.updateStatement_sempred
        self._predicates[212] = self.transactionCharacteristic_sempred
        self._predicates[214] = self.lockStatement_sempred
        self._predicates[218] = self.xaConvert_sempred
        self._predicates[220] = self.replicationStatement_sempred
        self._predicates[221] = self.resetOption_sempred
        self._predicates[222] = self.masterResetOptions_sempred
        self._predicates[232] = self.changeReplication_sempred
        self._predicates[240] = self.slaveUntilOptions_sempred
        self._predicates[241] = self.slaveConnectionOptions_sempred
        self._predicates[248] = self.cloneStatement_sempred
        self._predicates[251] = self.accountManagementStatement_sempred
        self._predicates[252] = self.alterUser_sempred
        self._predicates[253] = self.alterUserTail_sempred
        self._predicates[255] = self.createUser_sempred
        self._predicates[256] = self.createUserTail_sempred
        self._predicates[257] = self.defaultRoleClause_sempred
        self._predicates[260] = self.accountLockPasswordExpireOptions_sempred
        self._predicates[261] = self.dropUser_sempred
        self._predicates[262] = self.grant_sempred
        self._predicates[263] = self.grantTargetList_sempred
        self._predicates[264] = self.grantOptions_sempred
        self._predicates[268] = self.versionedRequireClause_sempred
        self._predicates[270] = self.revoke_sempred
        self._predicates[271] = self.onTypeTo_sempred
        self._predicates[274] = self.roleOrPrivilege_sempred
        self._predicates[275] = self.grantIdentifier_sempred
        self._predicates[282] = self.tableAdministrationStatement_sempred
        self._predicates[288] = self.startOptionValueList_sempred
        self._predicates[293] = self.optionValueNoOptionType_sempred
        self._predicates[298] = self.setExprOrDefault_sempred
        self._predicates[299] = self.showStatement_sempred
        self._predicates[300] = self.showCommandType_sempred
        self._predicates[301] = self.nonBlocking_sempred
        self._predicates[305] = self.otherAdministrativeStatement_sempred
        self._predicates[313] = self.flushOption_sempred
        self._predicates[316] = self.flushTablesOptions_sempred
        self._predicates[331] = self.utilityStatement_sempred
        self._predicates[333] = self.explainStatement_sempred
        self._predicates[334] = self.explainableStatement_sempred
        self._predicates[338] = self.expr_sempred
        self._predicates[339] = self.boolPri_sempred
        self._predicates[341] = self.predicate_sempred
        self._predicates[343] = self.bitExpr_sempred
        self._predicates[344] = self.simpleExpr_sempred
        self._predicates[345] = self.arrayCast_sempred
        self._predicates[346] = self.jsonOperator_sempred
        self._predicates[347] = self.sumExpr_sempred
        self._predicates[358] = self.runtimeFunctionCall_sempred
        self._predicates[359] = self.geometryFunction_sempred
        self._predicates[361] = self.fractionalPrecision_sempred
        self._predicates[373] = self.internalVariableName_sempred
        self._predicates[377] = self.castType_sempred
        self._predicates[391] = self.channel_sempred
        self._predicates[420] = self.getDiagnostics_sempred
        self._predicates[433] = self.checkOrReferences_sempred
        self._predicates[436] = self.tableConstraintDef_sempred
        self._predicates[438] = self.fieldDefinition_sempred
        self._predicates[439] = self.columnAttribute_sempred
        self._predicates[449] = self.keyListVariants_sempred
        self._predicates[452] = self.commonIndexOption_sempred
        self._predicates[458] = self.dataType_sempred
        self._predicates[468] = self.charsetName_sempred
        self._predicates[469] = self.collationName_sempred
        self._predicates[472] = self.createTableOption_sempred
        self._predicates[480] = self.partitionKeyAlgorithm_sempred
        self._predicates[507] = self.createUserEntry_sempred
        self._predicates[518] = self.usePartition_sempred
        self._predicates[520] = self.columnName_sempred
        self._predicates[563] = self.pureIdentifier_sempred
        self._predicates[568] = self.simpleIdentifier_sempred
        self._predicates[573] = self.real_ulonglong_number_sempred
        self._predicates[577] = self.textStringLiteral_sempred
        self._predicates[579] = self.textStringHash_sempred
        self._predicates[599] = self.identifierKeyword_sempred
        self._predicates[602] = self.labelKeyword_sempred
        self._predicates[604] = self.identifierKeywordsUnambiguous_sempred
        self._predicates[605] = self.roleKeyword_sempred
        self._predicates[608] = self.roleOrIdentifierKeyword_sempred
        self._predicates[609] = self.roleOrLabelKeyword_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def simpleStatement_sempred(self, localctx:SimpleStatementContext, predIndex:int):
            if predIndex == 0:
                return serverVersion >= 80000
         

            if predIndex == 1:
                return serverVersion >= 80000
         

            if predIndex == 2:
                return serverVersion >= 80000
         

            if predIndex == 3:
                return serverVersion >= 50604
         

    def alterStatement_sempred(self, localctx:AlterStatementContext, predIndex:int):
            if predIndex == 4:
                return serverVersion >= 80014
         

            if predIndex == 5:
                return serverVersion >= 50713
         

    def alterDatabase_sempred(self, localctx:AlterDatabaseContext, predIndex:int):
            if predIndex == 6:
                return serverVersion < 80000
         

    def alterTable_sempred(self, localctx:AlterTableContext, predIndex:int):
            if predIndex == 7:
                return serverVersion < 50700
         

    def standaloneAlterCommands_sempred(self, localctx:StandaloneAlterCommandsContext, predIndex:int):
            if predIndex == 8:
                return serverVersion >= 80014
         

    def alterPartition_sempred(self, localctx:AlterPartitionContext, predIndex:int):
            if predIndex == 9:
                return serverVersion >= 50704
         

            if predIndex == 10:
                return serverVersion >= 50704
         

    def alterListItem_sempred(self, localctx:AlterListItemContext, predIndex:int):
            if predIndex == 11:
                return serverVersion >= 50700
         

            if predIndex == 12:
                return serverVersion < 50700
         

            if predIndex == 13:
                return serverVersion >= 80017
         

            if predIndex == 14:
                return serverVersion >= 80019
         

            if predIndex == 15:
                return serverVersion >= 80014
         

            if predIndex == 16:
                return serverVersion >= 80000
         

            if predIndex == 17:
                return serverVersion >= 80017
         

            if predIndex == 18:
                return serverVersion >= 80019
         

            if predIndex == 19:
                return serverVersion >= 80000
         

            if predIndex == 20:
                return serverVersion >= 50700
         

            if predIndex == 21:
                return serverVersion >= 80014
         

            if predIndex == 22:
                return serverVersion >= 50708 and serverVersion < 80000
         

    def withValidation_sempred(self, localctx:WithValidationContext, predIndex:int):
            if predIndex == 23:
                return serverVersion >= 50706
         

    def alterTablespace_sempred(self, localctx:AlterTablespaceContext, predIndex:int):
            if predIndex == 24:
                return serverVersion < 80000
         

            if predIndex == 25:
                return serverVersion >= 80014
         

    def createStatement_sempred(self, localctx:CreateStatementContext, predIndex:int):
            if predIndex == 26:
                return serverVersion >= 80000
         

            if predIndex == 27:
                return serverVersion >= 80011
         

            if predIndex == 28:
                return serverVersion >= 80014
         

    def createDatabaseOption_sempred(self, localctx:CreateDatabaseOptionContext, predIndex:int):
            if predIndex == 29:
                return serverVersion >= 80016
         

    def createIndex_sempred(self, localctx:CreateIndexContext, predIndex:int):
            if predIndex == 30:
                return serverVersion >= 80014
         

    def tsDataFileName_sempred(self, localctx:TsDataFileNameContext, predIndex:int):
            if predIndex == 31:
                return serverVersion >= 80014
         

    def tablespaceOption_sempred(self, localctx:TablespaceOptionContext, predIndex:int):
            if predIndex == 32:
                return serverVersion >= 50707
         

            if predIndex == 33:
                return serverVersion >= 80014
         

    def triggerFollowsPrecedesClause_sempred(self, localctx:TriggerFollowsPrecedesClauseContext, predIndex:int):
            if predIndex == 34:
                return serverVersion >= 50700
         

    def dropStatement_sempred(self, localctx:DropStatementContext, predIndex:int):
            if predIndex == 35:
                return serverVersion >= 80000
         

            if predIndex == 36:
                return serverVersion >= 80011
         

            if predIndex == 37:
                return serverVersion >= 80014
         

    def deleteStatement_sempred(self, localctx:DeleteStatementContext, predIndex:int):
            if predIndex == 38:
                return serverVersion >= 80000
         

            if predIndex == 39:
                return serverVersion >= 80017
         

    def partitionDelete_sempred(self, localctx:PartitionDeleteContext, predIndex:int):
            if predIndex == 40:
                return serverVersion >= 50602
         

    def doStatement_sempred(self, localctx:DoStatementContext, predIndex:int):
            if predIndex == 41:
                return serverVersion < 50709
         

            if predIndex == 42:
                return serverVersion >= 50709
         

    def insertStatement_sempred(self, localctx:InsertStatementContext, predIndex:int):
            if predIndex == 43:
                return  serverVersion >= 80018
         

            if predIndex == 44:
                return  serverVersion >= 80018
         

    def queryExpression_sempred(self, localctx:QueryExpressionContext, predIndex:int):
            if predIndex == 45:
                return serverVersion >= 80000
         

            if predIndex == 46:
                return serverVersion < 80000
         

    def queryPrimary_sempred(self, localctx:QueryPrimaryContext, predIndex:int):
            if predIndex == 47:
                return serverVersion >= 80019
         

            if predIndex == 48:
                return serverVersion >= 80019
         

    def querySpecification_sempred(self, localctx:QuerySpecificationContext, predIndex:int):
            if predIndex == 49:
                return serverVersion >= 80000
         

    def olapOption_sempred(self, localctx:OlapOptionContext, predIndex:int):
            if predIndex == 50:
                return serverVersion < 80000
         

    def selectOption_sempred(self, localctx:SelectOptionContext, predIndex:int):
            if predIndex == 51:
                return serverVersion < 80000
         

            if predIndex == 52:
                return serverVersion >= 50704 and serverVersion < 50708
         

    def lockingClause_sempred(self, localctx:LockingClauseContext, predIndex:int):
            if predIndex == 53:
                return serverVersion >= 80000
         

            if predIndex == 54:
                return serverVersion >= 80000
         

    def lockStrengh_sempred(self, localctx:LockStrenghContext, predIndex:int):
            if predIndex == 55:
                return serverVersion >= 80000
         

    def tableReference_sempred(self, localctx:TableReferenceContext, predIndex:int):
            if predIndex == 56:
                return serverVersion < 80017
         

    def tableFactor_sempred(self, localctx:TableFactorContext, predIndex:int):
            if predIndex == 57:
                return serverVersion >= 80004
         

    def derivedTable_sempred(self, localctx:DerivedTableContext, predIndex:int):
            if predIndex == 58:
                return serverVersion >= 80000
         

            if predIndex == 59:
                return serverVersion >= 80014
         

    def jtColumn_sempred(self, localctx:JtColumnContext, predIndex:int):
            if predIndex == 60:
                return serverVersion >= 80014
         

    def tableAlias_sempred(self, localctx:TableAliasContext, predIndex:int):
            if predIndex == 61:
                return serverVersion < 80017
         

    def updateStatement_sempred(self, localctx:UpdateStatementContext, predIndex:int):
            if predIndex == 62:
                return serverVersion >= 80000
         

    def transactionCharacteristic_sempred(self, localctx:TransactionCharacteristicContext, predIndex:int):
            if predIndex == 63:
                return serverVersion >= 50605
         

    def lockStatement_sempred(self, localctx:LockStatementContext, predIndex:int):
            if predIndex == 64:
                return serverVersion >= 80000
         

            if predIndex == 65:
                return serverVersion >= 80000
         

    def xaConvert_sempred(self, localctx:XaConvertContext, predIndex:int):
            if predIndex == 66:
                return serverVersion >= 50704
         

    def replicationStatement_sempred(self, localctx:ReplicationStatementContext, predIndex:int):
            if predIndex == 67:
                return serverVersion > 80000
         

            if predIndex == 68:
                return serverVersion >= 50700
         

            if predIndex == 69:
                return serverVersion > 50706
         

    def resetOption_sempred(self, localctx:ResetOptionContext, predIndex:int):
            if predIndex == 70:
                return serverVersion < 80000
         

    def masterResetOptions_sempred(self, localctx:MasterResetOptionsContext, predIndex:int):
            if predIndex == 71:
                return serverVersion >= 80000
         

            if predIndex == 72:
                return serverVersion < 80017
         

            if predIndex == 73:
                return serverVersion >= 80017
         

    def changeReplication_sempred(self, localctx:ChangeReplicationContext, predIndex:int):
            if predIndex == 74:
                return serverVersion >= 80000
         

    def slaveUntilOptions_sempred(self, localctx:SlaveUntilOptionsContext, predIndex:int):
            if predIndex == 75:
                return serverVersion >= 50606
         

            if predIndex == 76:
                return serverVersion >= 50606
         

    def slaveConnectionOptions_sempred(self, localctx:SlaveConnectionOptionsContext, predIndex:int):
            if predIndex == 77:
                return serverVersion >= 50604
         

    def cloneStatement_sempred(self, localctx:CloneStatementContext, predIndex:int):
            if predIndex == 78:
                return serverVersion >= 80014
         

    def accountManagementStatement_sempred(self, localctx:AccountManagementStatementContext, predIndex:int):
            if predIndex == 79:
                return serverVersion >= 50606
         

            if predIndex == 80:
                return serverVersion >= 80000
         

    def alterUser_sempred(self, localctx:AlterUserContext, predIndex:int):
            if predIndex == 81:
                return serverVersion >= 50706
         

    def alterUserTail_sempred(self, localctx:AlterUserTailContext, predIndex:int):
            if predIndex == 82:
                return serverVersion < 80014
         

            if predIndex == 83:
                return serverVersion >= 80014
         

            if predIndex == 84:
                return serverVersion >= 50706
         

            if predIndex == 85:
                return serverVersion >= 80014
         

            if predIndex == 86:
                return serverVersion >= 80014
         

            if predIndex == 87:
                return serverVersion >= 80014
         

            if predIndex == 88:
                return serverVersion >= 80000
         

            if predIndex == 89:
                return serverVersion >= 80018
         

    def createUser_sempred(self, localctx:CreateUserContext, predIndex:int):
            if predIndex == 90:
                return serverVersion >= 50706
         

    def createUserTail_sempred(self, localctx:CreateUserTailContext, predIndex:int):
            if predIndex == 91:
                return serverVersion >= 50706
         

    def defaultRoleClause_sempred(self, localctx:DefaultRoleClauseContext, predIndex:int):
            if predIndex == 92:
                return serverVersion >= 80000
         

    def accountLockPasswordExpireOptions_sempred(self, localctx:AccountLockPasswordExpireOptionsContext, predIndex:int):
            if predIndex == 93:
                return serverVersion >= 80014
         

    def dropUser_sempred(self, localctx:DropUserContext, predIndex:int):
            if predIndex == 94:
                return serverVersion >= 50706
         

    def grant_sempred(self, localctx:GrantContext, predIndex:int):
            if predIndex == 95:
                return serverVersion >= 80000
         

    def grantTargetList_sempred(self, localctx:GrantTargetListContext, predIndex:int):
            if predIndex == 96:
                return serverVersion < 80011
         

            if predIndex == 97:
                return serverVersion >= 80011
         

    def grantOptions_sempred(self, localctx:GrantOptionsContext, predIndex:int):
            if predIndex == 98:
                return serverVersion < 80011
         

            if predIndex == 99:
                return serverVersion >= 80011
         

    def versionedRequireClause_sempred(self, localctx:VersionedRequireClauseContext, predIndex:int):
            if predIndex == 100:
                return serverVersion < 80011
         

    def revoke_sempred(self, localctx:RevokeContext, predIndex:int):
            if predIndex == 101:
                return serverVersion >= 80000
         

            if predIndex == 102:
                return serverVersion >= 80000
         

    def onTypeTo_sempred(self, localctx:OnTypeToContext, predIndex:int):
            if predIndex == 103:
                return serverVersion < 80000
         

            if predIndex == 104:
                return serverVersion >= 80000
         

    def roleOrPrivilege_sempred(self, localctx:RoleOrPrivilegeContext, predIndex:int):
            if predIndex == 105:
                return serverVersion > 80000
         

            if predIndex == 106:
                return serverVersion > 80000
         

    def grantIdentifier_sempred(self, localctx:GrantIdentifierContext, predIndex:int):
            if predIndex == 107:
                return serverVersion >= 80017
         

    def tableAdministrationStatement_sempred(self, localctx:TableAdministrationStatementContext, predIndex:int):
            if predIndex == 108:
                return serverVersion >= 80000
         

    def startOptionValueList_sempred(self, localctx:StartOptionValueListContext, predIndex:int):
            if predIndex == 109:
                return serverVersion < 50706
         

            if predIndex == 110:
                return serverVersion < 80014
         

            if predIndex == 111:
                return serverVersion >= 80018
         

    def optionValueNoOptionType_sempred(self, localctx:OptionValueNoOptionTypeContext, predIndex:int):
            if predIndex == 112:
                return serverVersion >= 80011
         

    def setExprOrDefault_sempred(self, localctx:SetExprOrDefaultContext, predIndex:int):
            if predIndex == 113:
                return serverVersion >= 80000
         

    def showStatement_sempred(self, localctx:ShowStatementContext, predIndex:int):
            if predIndex == 114:
                return serverVersion < 50700
         

            if predIndex == 115:
                return serverVersion >= 80000
         

            if predIndex == 116:
                return serverVersion < 50700
         

            if predIndex == 117:
                return serverVersion >= 50704
         

    def showCommandType_sempred(self, localctx:ShowCommandTypeContext, predIndex:int):
            if predIndex == 118:
                return serverVersion >= 80000
         

    def nonBlocking_sempred(self, localctx:NonBlockingContext, predIndex:int):
            if predIndex == 119:
                return serverVersion >= 50700 and serverVersion < 50706
         

    def otherAdministrativeStatement_sempred(self, localctx:OtherAdministrativeStatementContext, predIndex:int):
            if predIndex == 120:
                return serverVersion >= 50709
         

    def flushOption_sempred(self, localctx:FlushOptionContext, predIndex:int):
            if predIndex == 121:
                return serverVersion < 80000
         

            if predIndex == 122:
                return serverVersion >= 50706
         

    def flushTablesOptions_sempred(self, localctx:FlushTablesOptionsContext, predIndex:int):
            if predIndex == 123:
                return serverVersion >= 50606
         

    def utilityStatement_sempred(self, localctx:UtilityStatementContext, predIndex:int):
            if predIndex == 124:
                return serverVersion >= 80011
         

    def explainStatement_sempred(self, localctx:ExplainStatementContext, predIndex:int):
            if predIndex == 125:
                return serverVersion < 80000
         

            if predIndex == 126:
                return serverVersion < 80000
         

            if predIndex == 127:
                return serverVersion >= 50605
         

            if predIndex == 128:
                return serverVersion >= 80018
         

            if predIndex == 129:
                return serverVersion >= 80019
         

    def explainableStatement_sempred(self, localctx:ExplainableStatementContext, predIndex:int):
            if predIndex == 130:
                return serverVersion >= 50603
         

            if predIndex == 131:
                return serverVersion >= 50700
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 132:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 133:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 134:
                return self.precpred(self._ctx, 1)
         

    def boolPri_sempred(self, localctx:BoolPriContext, predIndex:int):
            if predIndex == 135:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 136:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 137:
                return self.precpred(self._ctx, 1)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 138:
                return serverVersion >= 80017
         

    def bitExpr_sempred(self, localctx:BitExprContext, predIndex:int):
            if predIndex == 139:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 140:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 141:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 142:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 143:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 144:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 145:
                return self.precpred(self._ctx, 4)
         

    def simpleExpr_sempred(self, localctx:SimpleExprContext, predIndex:int):
            if predIndex == 146:
                return serverVersion >= 80000
         

            if predIndex == 147:
                return serverVersion >= 80000
         

            if predIndex == 148:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 149:
                return self.precpred(self._ctx, 21)
         

    def arrayCast_sempred(self, localctx:ArrayCastContext, predIndex:int):
            if predIndex == 150:
                return serverVersion >= 80017
         

    def jsonOperator_sempred(self, localctx:JsonOperatorContext, predIndex:int):
            if predIndex == 151:
                return serverVersion >= 50708
         

            if predIndex == 152:
                return serverVersion >= 50713
         

    def sumExpr_sempred(self, localctx:SumExprContext, predIndex:int):
            if predIndex == 153:
                return serverVersion >= 80000
         

            if predIndex == 154:
                return serverVersion >= 80000
         

            if predIndex == 155:
                return serverVersion >= 80000
         

            if predIndex == 156:
                return serverVersion >= 80000
         

            if predIndex == 157:
                return serverVersion >= 80000
         

            if predIndex == 158:
                return serverVersion >= 80000
         

            if predIndex == 159:
                return serverVersion >= 80000
         

            if predIndex == 160:
                return serverVersion >= 80000
         

            if predIndex == 161:
                return serverVersion >= 80000
         

            if predIndex == 162:
                return serverVersion >= 80000
         

            if predIndex == 163:
                return serverVersion >= 80000
         

            if predIndex == 164:
                return serverVersion >= 80000
         

            if predIndex == 165:
                return serverVersion >= 80000
         

    def runtimeFunctionCall_sempred(self, localctx:RuntimeFunctionCallContext, predIndex:int):
            if predIndex == 166:
                return serverVersion < 50607
         

            if predIndex == 167:
                return serverVersion < 80011
         

            if predIndex == 168:
                return serverVersion < 80000
         

    def geometryFunction_sempred(self, localctx:GeometryFunctionContext, predIndex:int):
            if predIndex == 169:
                return serverVersion < 50706
         

    def fractionalPrecision_sempred(self, localctx:FractionalPrecisionContext, predIndex:int):
            if predIndex == 170:
                return serverVersion >= 50604
         

    def internalVariableName_sempred(self, localctx:InternalVariableNameContext, predIndex:int):
            if predIndex == 171:
                return serverVersion < 80017
         

            if predIndex == 172:
                return serverVersion >= 80017
         

    def castType_sempred(self, localctx:CastTypeContext, predIndex:int):
            if predIndex == 173:
                return serverVersion >= 50708
         

            if predIndex == 174:
                return serverVersion >= 80017
         

            if predIndex == 175:
                return serverVersion >= 80017
         

    def channel_sempred(self, localctx:ChannelContext, predIndex:int):
            if predIndex == 176:
                return serverVersion >= 50706
         

    def getDiagnostics_sempred(self, localctx:GetDiagnosticsContext, predIndex:int):
            if predIndex == 177:
                return serverVersion >= 50700
         

    def checkOrReferences_sempred(self, localctx:CheckOrReferencesContext, predIndex:int):
            if predIndex == 178:
                return serverVersion < 80016
         

    def tableConstraintDef_sempred(self, localctx:TableConstraintDefContext, predIndex:int):
            if predIndex == 179:
                return serverVersion >= 80017
         

    def fieldDefinition_sempred(self, localctx:FieldDefinitionContext, predIndex:int):
            if predIndex == 180:
                return serverVersion >= 50707
         

            if predIndex == 181:
                return serverVersion < 80000
         

            if predIndex == 182:
                return serverVersion >= 80000
         

    def columnAttribute_sempred(self, localctx:ColumnAttributeContext, predIndex:int):
            if predIndex == 183:
                return serverVersion >= 80014
         

            if predIndex == 184:
                return serverVersion >= 80013
         

            if predIndex == 185:
                return serverVersion >= 80000
         

            if predIndex == 186:
                return serverVersion >= 80017
         

            if predIndex == 187:
                return serverVersion >= 80017
         

    def keyListVariants_sempred(self, localctx:KeyListVariantsContext, predIndex:int):
            if predIndex == 188:
                return serverVersion >= 80013
         

            if predIndex == 189:
                return serverVersion < 80013
         

    def commonIndexOption_sempred(self, localctx:CommonIndexOptionContext, predIndex:int):
            if predIndex == 190:
                return serverVersion >= 80000
         

    def dataType_sempred(self, localctx:DataTypeContext, predIndex:int):
            if predIndex == 191:
                return serverVersion >= 50708
         

    def charsetName_sempred(self, localctx:CharsetNameContext, predIndex:int):
            if predIndex == 192:
                return serverVersion < 80011
         

    def collationName_sempred(self, localctx:CollationNameContext, predIndex:int):
            if predIndex == 193:
                return serverVersion < 80011
         

            if predIndex == 194:
                return serverVersion >= 80018
         

    def createTableOption_sempred(self, localctx:CreateTableOptionContext, predIndex:int):
            if predIndex == 195:
                return serverVersion >= 80014
         

            if predIndex == 196:
                return serverVersion >= 50708
         

            if predIndex == 197:
                return serverVersion >= 50711
         

            if predIndex == 198:
                return serverVersion >= 50707
         

    def partitionKeyAlgorithm_sempred(self, localctx:PartitionKeyAlgorithmContext, predIndex:int):
            if predIndex == 199:
                return serverVersion >= 50700
         

    def createUserEntry_sempred(self, localctx:CreateUserEntryContext, predIndex:int):
            if predIndex == 200:
                return serverVersion < 80011
         

            if predIndex == 201:
                return serverVersion >= 50706
         

            if predIndex == 202:
                return serverVersion >= 80018
         

    def usePartition_sempred(self, localctx:UsePartitionContext, predIndex:int):
            if predIndex == 203:
                return serverVersion >= 50602
         

    def columnName_sempred(self, localctx:ColumnNameContext, predIndex:int):
            if predIndex == 204:
                return serverVersion >= 80000
         

            if predIndex == 205:
                return serverVersion < 80000
         

    def pureIdentifier_sempred(self, localctx:PureIdentifierContext, predIndex:int):
            if predIndex == 206:
                return isSqlModeActive(AnsiQuotes)
         

    def simpleIdentifier_sempred(self, localctx:SimpleIdentifierContext, predIndex:int):
            if predIndex == 207:
                return serverVersion < 80000
         

    def real_ulonglong_number_sempred(self, localctx:Real_ulonglong_numberContext, predIndex:int):
            if predIndex == 208:
                return serverVersion >= 80017
         

    def textStringLiteral_sempred(self, localctx:TextStringLiteralContext, predIndex:int):
            if predIndex == 209:
                return not isSqlModeActive(AnsiQuotes)
         

    def textStringHash_sempred(self, localctx:TextStringHashContext, predIndex:int):
            if predIndex == 210:
                return serverVersion >= 80017
         

    def identifierKeyword_sempred(self, localctx:IdentifierKeywordContext, predIndex:int):
            if predIndex == 211:
                return serverVersion < 80017
         

            if predIndex == 212:
                return serverVersion >= 50709
         

            if predIndex == 213:
                return serverVersion >= 80011
         

    def labelKeyword_sempred(self, localctx:LabelKeywordContext, predIndex:int):
            if predIndex == 214:
                return serverVersion < 80017
         

    def identifierKeywordsUnambiguous_sempred(self, localctx:IdentifierKeywordsUnambiguousContext, predIndex:int):
            if predIndex == 215:
                return serverVersion >= 80019
         

    def roleKeyword_sempred(self, localctx:RoleKeywordContext, predIndex:int):
            if predIndex == 216:
                return serverVersion < 80017
         

    def roleOrIdentifierKeyword_sempred(self, localctx:RoleOrIdentifierKeywordContext, predIndex:int):
            if predIndex == 217:
                return serverVersion >= 50709
         

            if predIndex == 218:
                return serverVersion >= 80000
         

    def roleOrLabelKeyword_sempred(self, localctx:RoleOrLabelKeywordContext, predIndex:int):
            if predIndex == 219:
                return serverVersion < 50709
         

            if predIndex == 220:
                return serverVersion < 80000
         

            if predIndex == 221:
                return serverVersion >= 80000
         

            if predIndex == 222:
                return serverVersion >= 80014
         




